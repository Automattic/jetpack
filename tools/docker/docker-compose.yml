version: '3.3'


volumes:
  ## Kludge for not having the ./docker directory bound recursively
  dockerdirectory:

services:
  ## A default mysql image
  ## We map a local directory (data/mysql) so we can have the mysql data locally
  ## and reuse it if we need to remove containers and images for rebuilding from scratch.
  db:
    container_name: jetpack_mysql
    image: mysql:5.7
    volumes:
      - ./data/mysql:/var/lib/mysql
      - ./logs/mysql:/var/log/mysql
      - ./config/mysql.conf:/etc/mysql/conf.d/docker.cnf
    restart: always
    env_file:
      - default.env
      - .env

  phpmyadmin:
    container_name: jetpack_phpmyadmin
    image: phpmyadmin/phpmyadmin:latest
    links:
      - db:mysql
    ports:
    - 8181:80
    environment:
      MYSQL_USERNAME: "${MYSQL_USER:-wordpress}"
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD:-wordpress}"
    restart: always

  ## SMTP Server + Web Interface for viewing and testing emails during development.
  ## http://maildev.github.io/maildev/
  maildev:
    image: maildev/maildev
    container_name: maildev
    restart: always
    ports:
      - "${PORT_MAILDEV:-1080}:80"
      - "${PORT_SMTP:-25}:25"

  ## SFTP server running at localhost:1022
  sftp:
    container_name: jetpack_sftp
    image: atmoz/sftp
    volumes:
      ## WordPress and its plugins and themes should be defined in docker/compose-volumes.yml{.sample}, not here!
      ## That avoids having to define them both here and in the "wordpress" service.
      - dockerdirectory:/usr/local/src/jetpack-monorepo/tools/docker
      - ./data/ssh.keys:/home/wordpress/.ssh/keys:ro
    ports:
      - "${PORT_SFTP:-1022}:22"
    env_file:
      - ./default.env
      - ./.env

  ## - The container wordpress is a very basic but custom container with WordPress and all of the tools we need
  ##   for development.
  ## - The container will be named jetpack_wordpress for easy reference when running docker/docker-compose commands
  ##
  ## Here we map the following:
  ##  - The local root directory (with Jetpack source code) into the container's directory for WordPress plugins
  ##  - The docker/mu-plugins directory you can put custom code that gets loaded with WordPress
  ##  - The docker/wordpress-develop directory where we'll get WordPress source code with unit tests
  ##  - The docker/wordpress directory so we can have Wordpress source code modifiable from the host file system
  ##  - The docker/logs/apache2 directory so we can access Apache log files directly from the host file system
  ##  - The docker/logs/php directory so we can access PHP log files directly from the host file system
  ##  - The docker/bin directory for provisioning scripts
  wordpress:
    container_name: jetpack_wordpress
    depends_on:
      - db
      - maildev
    image: automattic/jetpack-wordpress-dev:latest
    volumes:
      ## WordPress and its plugins and themes should be defined in docker/compose-volumes.yml{.sample}, not here!
      ## That avoids having to define them both here and in the "sftp" service.
      - dockerdirectory:/usr/local/src/jetpack-monorepo/tools/docker
      - ./wordpress-develop:/tmp/wordpress-develop
      - ./logs/apache2/:/var/log/apache2
      - ./logs/php:/var/log/php
      - ./bin:/var/scripts
    ports:
      - "${PORT_WORDPRESS:-80}:80"
    restart: always
    env_file:
      - default.env
      - .env
    environment:
      - HOST_PORT=${PORT_WORDPRESS:-80}
