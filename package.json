{
	"name": "Jetpack",
	"version": "9.3.0-alpha",
	"private": true,
	"description": "[Jetpack](https://jetpack.com/) is a WordPress plugin that supercharges your self-hosted WordPress site with the awesome cloud power of [WordPress.com](https://wordpress.com).",
	"homepage": "https://jetpack.com",
	"bugs": {
		"url": "https://github.com/Automattic/jetpack/issues"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/Automattic/jetpack.git"
	},
	"license": "GPL-2.0-or-later",
	"author": "Automattic",
	"scripts": {
		"build-jetpack": "cd src/plugins/jetpack && yarn build",


		"add-textdomain": "wpi18n addtextdomain --textdomain=jetpack --glob-pattern='!(docker|node_modules|tests|tools|vendor){*.php,**/*.php}'",
		"build": "yarn install-if-deps-outdated && yarn clean && yarn build-client && yarn build-php && yarn build-extensions && yarn build-search && yarn build-packages",
		"build-client": "gulp",
		"build-color-schemes-wpcom": "GULP_ENV=wpcom gulp sass:color-schemes",
		"build-concurrently": "yarn install-if-deps-outdated && yarn clean && yarn concurrently 'yarn build-client' 'yarn build-php' 'yarn build-extensions' 'yarn build-search' 'yarn build-packages'",
		"build-extensions": "webpack --config ./webpack.config.extensions.js",
		"build-packages": "webpack --config ./webpack.config.packages.js",
		"build-php": "composer install --ignore-platform-reqs",
		"build-production": "yarn distclean && yarn install --production=false && yarn build-production-client && yarn build-production-php && yarn build-production-extensions && yarn build-production-search && yarn build-production-packages",
		"build-production-client": "NODE_ENV=production BABEL_ENV=production yarn build-client && yarn validate-es5 -- ./_inc/build/",
		"build-production-concurrently": "yarn distclean && yarn install --production=false && yarn concurrently 'yarn build-production-client' 'yarn build-production-php' 'NODE_ENV=production yarn build-extensions' 'NODE_ENV=production yarn build-search' 'NODE_ENV=production yarn build-packages'",
		"build-production-extensions": "NODE_ENV=production BABEL_ENV=production yarn build-extensions",
		"build-production-packages": "NODE_ENV=production BABEL_ENV=production yarn build-packages && yarn validate-es5 -- ./packages/lazy-images/",
		"build-production-php": "COMPOSER_MIRROR_PATH_REPOS=1 composer install -o --no-dev --classmap-authoritative --prefer-dist",
		"build-production-search": "NODE_ENV=production BABEL_ENV=production yarn build-search && yarn validate-es5 -- ./_inc/build/instant-search/",
		"build-search": "yarn clean-search && webpack --config ./webpack.config.search.js",
		"clean": "yarn clean-client && yarn clean-extensions && yarn clean-composer",
		"clean-client": "rm -rf _inc/build/ css/",
		"clean-composer": "rm -rf vendor/",
		"clean-extensions": "rm -rf _inc/blocks/ ",
		"clean-search": "rm -rf _inc/build/instant-search/* ",
		"distclean": "rm -rf node_modules && yarn clean",
		"docker:build": "docker run -it --rm  -v ${PWD}:/usr/src/app -w /usr/src/app node yarn build",
		"docker:build-image": "docker build -t automattic/jetpack-wordpress-dev docker",
		"docker:clean": "yarn docker:compose down --rmi all -v && rm -rf docker/wordpress/* docker/wordpress/.htaccess docker/wordpress-develop/* docker/logs/* docker/data/mysql/*",
		"docker:compose": "yarn docker:env && yarn docker:compose-volumes && yarn docker:compose-extras && docker-compose -f docker/docker-compose.yml -f docker/compose-volumes.built.yml -f docker/compose-extras.yml",
		"docker:compose-extras": "[ -f docker/compose-extras.yml ] || cp docker/compose-extras.yml.sample docker/compose-extras.yml",
		"docker:compose-volumes": "[ -f docker/compose-volumes.yml ] || cp docker/compose-volumes.yml.sample docker/compose-volumes.yml; bash ./bin/compose-volumes.sh docker/compose-volumes.yml > docker/compose-volumes.built.yml",
		"docker:db": "yarn docker:compose exec wordpress bash -c \"mysql --defaults-group-suffix=docker\"",
		"docker:down": "yarn docker:compose down",
		"docker:env": "node -e \"require('fs').createWriteStream( 'docker/.env', { flags: 'a' } );\"",
		"docker:install": "yarn docker:compose exec wordpress bash -c \"/var/scripts/install.sh\"",
		"docker:jt-config": "[ -f ./docker/bin/jt/config.sh ] || { echo 'Tunneling scripts are not installed. See the section \"Jurassic Tube Tunneling Service\" in docker/README.md.'; exit; }; ./docker/bin/jt/config.sh",
		"docker:jt-down": "[ -f ./docker/bin/jt/tunnel.sh ] || { echo 'Tunneling scripts are not installed. See the section \"Jurassic Tube Tunneling Service\" in docker/README.md.'; exit; }; ./docker/bin/jt/tunnel.sh break",
		"docker:jt-up": "[ -f ./docker/bin/jt/tunnel.sh ] || { echo 'Tunneling scripts are not installed. See the section \"Jurassic Tube Tunneling Service\" in docker/README.md.'; exit; }; ./docker/bin/jt/tunnel.sh",
		"docker:multisite-convert": "yarn docker:compose exec wordpress bash -c \"/var/scripts/multisite-convert.sh\"",
		"docker:ngrok": "yarn docker:compose -f docker/docker-compose-ngrok.yml",
		"docker:ngrok-down": "yarn docker:ngrok down",
		"docker:ngrok-up": "yarn docker:ngrok up",
		"docker:phpunit": "yarn docker:compose exec wordpress phpunit --configuration=/var/www/html/wp-content/plugins/jetpack/phpunit.xml.dist",
		"docker:phpunit:multisite": "yarn docker:compose exec wordpress phpunit --configuration=/var/www/html/wp-content/plugins/jetpack/tests/php.multisite.xml",
		"docker:phpunit:package": "bash ./tests/package-runner.sh",
		"docker:run-extras": "yarn docker:compose exec wordpress bash -c \"chmod +x /var/scripts/run-extras.sh && . /var/scripts/run-extras.sh\"",
		"docker:sh": "yarn docker:compose exec wordpress bash",
		"docker:stop": "yarn docker:compose stop",
		"docker:tail": "yarn docker:compose exec wordpress bash -c \"/var/scripts/tail.sh\"",
		"docker:uninstall": "yarn docker:compose exec wordpress bash -c \"/var/scripts/uninstall.sh\"",
		"docker:up": "yarn docker:compose up",
		"docker:update-core-unit-tests": "yarn docker:compose exec wordpress svn up /tmp/wordpress-develop/tests/phpunit/data/ /tmp/wordpress-develop/tests/phpunit/includes",
		"docker:wp": "yarn docker:compose exec wordpress wp --allow-root --path=/var/www/html/",
		"install-if-deps-outdated": "yarn check 2> /dev/null || yarn install --check-files --production=false --frozen-lockfile",
		"lint": "eslint --ext .js,.jsx . _inc extensions modules",
		"lint-file": "eslint --ext .js,.jsx",
		"php:autofix": "composer phpcs:fix",
		"php:compatibility": "composer phpcs:compatibility",
		"php:lint": "composer phpcs:lint",
		"reformat-files": "./node_modules/.bin/prettier --ignore-path .eslintignore --write \"**/*.{js,jsx,json}\"",
		"test-adminpage": "yarn test-client && yarn test-gui",
		"test-adminpage-and-extensions-and-search": "yarn concurrently 'yarn test-adminpage' 'yarn test-extensions' 'yarn test-search'",
		"test-client": "NODE_ENV=test NODE_PATH=tests:_inc/client tests/runner.js",
		"test-decrypt-config": "openssl enc -md sha1 -aes-256-cbc -d -pass env:CONFIG_KEY -in ./tests/e2e/config/encrypted.enc -out ./tests/e2e/config/local-test.js",
		"test-e2e": "NODE_CONFIG_DIR='./tests/e2e/config' NODE_CONFIG_ENV=test JEST_PUPPETEER_CONFIG=tests/e2e/jest-puppeteer.config.js jest --config tests/e2e/jest.config.js --runInBand --verbose",
		"test-encrypt-config": "openssl enc -md sha1 -aes-256-cbc -pass env:CONFIG_KEY -in ./tests/e2e/config/local-test.js -out ./tests/e2e/config/encrypted.enc",
		"test-extensions": "jest extensions",
		"test-gui": "NODE_ENV=test NODE_PATH=tests:_inc/client tests/runner.js gui",
		"test-modules": "NODE_ENV=test NODE_PATH=tests:_inc/client tests/runner.js modules",
		"test-search": "yarn concurrently 'yarn test-search-scripts' 'yarn test-search-size'",
		"test-search-scripts": "jest modules/search",
		"test-search-size": "NODE_ENV=production BABEL_ENV=production yarn build-search && size-limit",
		"test-spelling": "mdspell -n -a -x --en-us **/*.md",
		"validate-es5": "npx eslint --parser-options=ecmaVersion:5 --no-eslintrc --no-ignore",
		"version-packages": "bash ./bin/version-packages.sh",
		"watch": "yarn build && yarn gulp watch"
	},
	"husky": {
		"hooks": {
			"pre-commit": "node tools/pre-commit-hook.js",
			"prepare-commit-msg": "node tools/prepare-commit-msg.js",
			"post-checkout": "./tools/post-merge-checkout-hook.sh",
			"post-merge": "./tools/post-merge-checkout-hook.sh"
		}
	}
}
