name: "Turnstile"
description: "Wait for any previous workflow runs to complete"
inputs:
  poll-interval:
    description: "Polling interval, in seconds."
    default: 60
  events:
    description: "Limit to these triggering events, separated by whitespace."
    default: ""
  ignore-events:
    description: "Ignore these triggering events, separated by whitespace."
    default: ""
  token:
    description: "Access token. Defaults to `github.token`."
    default: ${{ github.token }}
runs:
  using: composite
  steps:
    - shell: bash
      env:
        EVENTS_STR: ${{ inputs.events }}
        IGNORE_EVENTS_STR: ${{ inputs.ignore-events }}
        INTERVAL: ${{ inputs.poll-interval }}
        TOKEN: ${{ inputs.token }}
      run: |
        echo '::group::Fetch workflow info from run ID'
        JSON="$(curl -v -L --get \
          --header "Authorization: token $TOKEN" \
          --url "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" \
        )"
        echo "$JSON"
        jq -e '.workflow_id' <<<"$JSON" &> /dev/null || { echo "ðŸ¤¯ API response does not have .workflow_id"; exit 1; }
        echo '::endgroup::'

        WORKFLOW_ID="$(jq -r '.workflow_id' <<<"$JSON")"
        BRANCH="$(jq -r '.head_branch' <<<"$JSON")"
        echo "Workflow ID: $WORKFLOW_ID"
        echo "Branch: $BRANCH"

        FILTER=""
        EVENTS=$( sed -E 's/\s+/\n/g' <<<"$EVENTS_STR" | jq -ncR '[ inputs | select( . != "" ) ]' )
        if [[ "$EVENTS" != "[]" ]]; then
          FILTER="$FILTER | select( .event as \$e | $EVENTS | index( \$e ) != null )"
        fi
        EVENTS=$( sed -E 's/\s+/\n/g' <<<"$IGNORE_EVENTS_STR" | jq -ncR '[ inputs | select( . != "" ) ]' )
        if [[ "$EVENTS" != "[]" ]]; then
          FILTER="$FILTER | select( .event as \$e | $EVENTS | index( \$e ) == null )"
        fi

        while true; do
          echo '::group::Checking for previous runs in progress'
          JSON="$(curl -v -L --get \
            --header "Authorization: token $TOKEN" \
            --url "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/actions/workflows/${WORKFLOW_ID}/runs" \
            --data-urlencode "branch=$BRANCH" \
            --data-urlencode "status=in_progress" \
            --data-urlencode "per_page=100" \
          )"
          echo "$JSON"
          jq -e '.workflow_runs | type == "array"' <<<"$JSON" &> /dev/null || { echo "ðŸ¤¯ API response does not have .workflow_runs array"; exit 1; }
          echo '::endgroup::'
          RUNS="$(jq -r -e --argjson id "$GITHUB_RUN_ID" '[ .workflow_runs[] | select( .id < $id ) '"$FILTER"' | .html_url ] | join( " " )' <<<"$JSON")"
          if [[ -z "$RUNS" ]]; then
            echo 'ðŸ‘‰ No earlier runs in progress!'
            break
          fi
          echo "âœ‹ Waiting for runs in progress: $RUNS"
          sleep "$INTERVAL"
        done
