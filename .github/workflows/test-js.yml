name: JS tests

on:
  pull_request:
  push:
    branches: [ 'master', '*/branch-*' ]

env:
  COMPOSER_ROOT_VERSION: "dev-master"

jobs:
  run-tests:
    name: "JS tests"
    runs-on: ubuntu-latest
    timeout-minutes: 15  # 2021-01-18: Successful runs seem to take ~5 minutes

    env:
      WP_BRANCH: none

    steps:
      - uses: actions/checkout@v2

      # For pull requests, list-changed-projects.php needs the merge base.
      - name: Deepen to merge base
        if: github.event_name == 'pull_request'
        uses: ./.github/actions/deepen-to-merge-base

      - name: Read desired PHP and Node versions
        id: versions
        run: |
          PHP_VERSION="$(<.github/php-version)"
          echo "PHP_VERSION=$PHP_VERSION" >> $GITHUB_ENV
          echo "::set-output name=php::${PHP_VERSION}"
          NODE_VERSION="$(<.nvmrc)"
          echo "NODE_VERSION=$NODE_VERSION" >> $GITHUB_ENV
          echo "::set-output name=node::${NODE_VERSION}"

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ steps.versions.outputs.php }}
          tools: composer
          extensions: mysql, imagick
          coverage: none

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.versions.outputs.node }}

      - name: Get Composer cache directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Use composer cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Use yarn cache
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: /home/runner/.cache/yarn/v6
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Detect changed projects
        id: changed
        run: |
          CHANGED="$(.github/files/list-changed-projects.php --debug)"
          ANY_PLUGINS="$(jq --argjson changed "$CHANGED" -n '$changed | with_entries( select( .key | startswith( "plugins/" ) ) ) | any')"
          echo "::set-output name=projects::${CHANGED}"
          echo "::set-output name=any-plugins::${ANY_PLUGINS}"

      - name: Tool versions
        run: |
          which php
          php --version
          which phpdbg
          phpdbg --version
          which composer
          composer --version
          which node
          node --version
          which yarn
          yarn --version

      - name: Run monorepo tools/cli tests
        working-directory: 'tools/cli'
        run: |
          yarn install
          yarn test

      - name: Run project tests
        env:
          CHANGED: ${{ steps.changed.outputs.projects }}
        run: |
          EXIT=0
          mkdir artifacts
          for P in projects/*/*/composer.json; do
            DIR="${P%/composer.json}"
            SLUG="${DIR#projects/}"

            if ! jq --argjson changed "$CHANGED" --arg p "$SLUG" -ne '$changed[$p] // false' > /dev/null; then
              echo "Skipping $SLUG, no changes in it or its dependencies"
            elif ! jq -e '.scripts["test-js"] // false' "$P" > /dev/null; then
              echo "Skipping $SLUG, no test script is defined in composer.json"
            else
              echo "::group::Running tests for $SLUG"
              mkdir -p "artifacts/$SLUG"
              export ARTIFACTS_DIR="$GITHUB_WORKSPACE/artifacts/$SLUG"
              FAIL=false
              if ! composer run --timeout=0 --working-dir="$DIR" test-js; then
                FAIL=true
                EXIT=1
              fi
              echo "::endgroup::"
              $FAIL && echo "::error::Tests for $SLUG failed!"
            fi
          done
          exit $EXIT

      - name: Check for artifacts
        id: check-artifacts
        # Default for `if` is `success()`, we want this to run always.
        if: always()
        run: |
          [[ -d artifacts ]] && find artifacts -type d -empty -delete
          if [[ -d artifacts ]]; then
            echo "::set-output name=any::true"
          else
            echo "::set-output name=any::false"
          fi

      - name: Upload artifacts
        if: always() && steps.check-artifacts.outputs.any == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: artifacts
          retention-days: 7
