name: CI Results
run-name: ${{ github.event.workflow.name }} on ${{ github.event.workflow_run.head_branch }}
on:
  workflow_run:
    types: [ 'completed' ]
    workflows:
      - Build
      - Build Docker
      - Tests
      - Gardening
      - Post-Build
      - PR is up-to-date
      - Update Jetpack Staging Test Sites
      - k6 Tests for Jetpack Staging Test Sites
    branches: [ 'trunk', 'prerelease', '*/branch-*' ]

jobs:
  notify:
    name: Notify failure
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' && github.event.workflow_run.event != 'issues' && github.event.workflow_run.event != 'issue_comment' }}

    steps:
      - uses: actions/checkout@v3
      - name: Generate message
        id: message
        run: |
          source .github/files/gh-funcs.sh

          # If this is triggered off of another "workflow_run" workflow, it'll always see the head_branch as "trunk".
          # In that case, we assume it's setting display_title to be like "NAME on BRANCH" and extract the branch from there.
          if jq -e '.workflow_run.event == "workflow_run"' "$GITHUB_EVENT_PATH" &>/dev/null; then
            TITLE=$(jq -r '.workflow_run.display_title' "$GITHUB_EVENT_PATH")
            BRANCH=${TITLE##* on }
            echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"

            gh_set_output message "$(
              jq -nc --slurpfile event "$GITHUB_EVENT_PATH" --arg branch "$BRANCH" '$event[0] as $e | $e.workflow_run as $run | {
                icon_emoji: ":github-rejected:",
                text: "*\( $e.workflow.name ) failed on \( $branch )*\n<\( $run.html_url )|Run #\( $run.id )>",
                blocks: [
                  {
                    type: "section",
                    text: {
                      type: "mrkdwn",
                      text: "*\( $e.workflow.name ) failed on \( $branch )*"
                    }
                  },
                  {
                    type: "context",
                    elements: [
                      {
                        type: "plain_text",
                        text: "Duration: \( ( $run.updated_at | fromdateiso8601 ) - ( $run.run_started_at | fromdateiso8601 ) | strftime( "%H:%M:%S" ) )"
                      }
                    ]
                  },
                  {
                    type: "actions",
                    elements: [
                      {
                        type: "button",
                        text: {
                          type: "plain_text",
                          text: "Run #\( $run.id )"
                        },
                        url: $run.html_url
                      }
                    ]
                  }
                ]
              }'
            )"
          else
            BRANCH=$(jq -r '.workflow_run.head_branch' "$GITHUB_EVENT_PATH")
            echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"

            gh_set_output message "$(
              jq -nc --slurpfile event "$GITHUB_EVENT_PATH" '$event[0] as $e | $e.workflow_run as $run | {
                icon_emoji: ":github-rejected:",
                text: "*\( $e.workflow.name ) failed on \( $run.head_branch )*\n<\( $run.html_url )|Run #\( $run.id )>",
                blocks: [
                  {
                    type: "section",
                    text: {
                      type: "mrkdwn",
                      text: "*\( $e.workflow.name ) failed on \( $run.head_branch )*"
                    }
                  },
                  {
                    type: "context",
                    elements: [
                      {
                        type: "plain_text",
                        text: "Commit: \( $run.head_commit.id[0:8] ) \( $run.head_commit.message | sub( "\n.*"; ""; "m" ) )",
                        emoji: false
                      },
                      {
                        type: "plain_text",
                        text: "Author: \( $run.head_commit.author.name )",
                        emoji: false
                      },
                      {
                        type: "plain_text",
                        text: "Duration: \( ( $run.updated_at | fromdateiso8601 ) - ( $run.run_started_at | fromdateiso8601 ) | strftime( "%H:%M:%S" ) )"
                      }
                    ]
                  },
                  {
                    type: "actions",
                    elements: [
                      {
                        type: "button",
                        text: {
                          type: "plain_text",
                          text: "Run #\( $run.id )"
                        },
                        url: $run.html_url
                      },
                      {
                        type: "button",
                        text: {
                          type: "plain_text",
                          text: "Commit"
                        },
                        url: "\( $run.head_repository.html_url )/commit/\( $run.head_commit.id )"
                      },
                      (
                        $run.head_commit.message | sub( "\n.*"; ""; "m" ) | match( " \\(#([0-9]+)\\)$" ).captures[0].string | {
                          type: "button",
                          text: {
                            type: "plain_text",
                            text: "PR #\(.)"
                          },
                          url: "\( $run.head_repository.html_url )/pull/\(.)"
                        }
                      )
                    ]
                  }
                ]
              }'
            )"
          fi

      - name: Send message to alerts channel
        uses: slackapi/slack-github-action@v1.24.0
        if: steps.message.outputs.branch == 'trunk'
        with:
          channel-id: ${{ secrets.SLACK_JP_ALERTS_CHANNEL }}
          payload: ${{ steps.message.outputs.message }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_TOKEN }}

      - name: Send message to releases channel
        uses: slackapi/slack-github-action@v1.24.0
        if: contains( steps.message.outputs.branch, '/branch-' ) || steps.message.outputs.branch == 'prerelease'
        with:
          channel-id: ${{ secrets.SLACK_RELEASES_CHANNEL }}
          payload: ${{ steps.message.outputs.message }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_TOKEN }}
