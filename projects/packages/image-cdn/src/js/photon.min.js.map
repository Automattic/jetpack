{"version":3,"file":"photon/photon.min.js","mappings":";;;;;AAAA,CAAE,YAAY;EACb,SAASA,WAAW,GAAG;IACtB,IAAK,IAAI,CAACC,QAAQ,EAAG;MACpB;MACA;MACA,IAAIC,OAAO,GAAG,IAAI,CAACC,YAAY,CAAE,eAAe,CAAE;MAClD,IAAKD,OAAO,IAAI,IAAI,CAACE,GAAG,KAAKF,OAAO,EAAG;QACtC,IAAI,CAACG,gBAAgB,CAAE,QAAQ,EAAEL,WAAW,CAAE;QAC9C;MACD;;MAEA;MACA,IAAIM,KAAK,GAAG,IAAI,CAACA,KAAK;MACtB,IAAIC,MAAM,GAAG,IAAI,CAACA,MAAM;MACxB,IAAKD,KAAK,IAAIA,KAAK,GAAG,CAAC,IAAIC,MAAM,IAAIA,MAAM,GAAG,CAAC,EAAG;QACjD,IAAI,CAACC,YAAY,CAAE,OAAO,EAAEF,KAAK,CAAE;QACnC,IAAI,CAACE,YAAY,CAAE,QAAQ,EAAED,MAAM,CAAE;QAErCE,gBAAgB,CAAE,IAAI,CAAE;MACzB;IACD,CAAC,MAAM;MACN,IAAI,CAACJ,gBAAgB,CAAE,QAAQ,EAAEL,WAAW,CAAE;MAC9C;IACD;EACD;;EAEA;AACD;AACA;EACC,IAAIU,YAAY,GAAG,YAAY;MAC7B,IAAIC,QAAQ,GAAGC,QAAQ,CAACC,gBAAgB,CAAE,uBAAuB,CAAE;MACnE,KAAM,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,QAAQ,CAACI,MAAM,EAAED,CAAC,EAAE,EAAG;QAC3Cd,WAAW,CAACgB,IAAI,CAAEL,QAAQ,CAAEG,CAAC,CAAE,CAAE;MAClC;IACD,CAAC;IACD;AACF;AACA;IACEL,gBAAgB,GAAG,UAAWQ,GAAG,EAAG;MACnCA,GAAG,CAACC,eAAe,CAAE,kBAAkB,CAAE;MACzCD,GAAG,CAACC,eAAe,CAAE,OAAO,CAAE;IAC/B,CAAC;;EAEF;AACD;AACA;EACC,IAAK,OAAOC,MAAM,KAAK,WAAW,IAAI,OAAOP,QAAQ,KAAK,WAAW,EAAG;IACvE;IACA,IAAKA,QAAQ,CAACQ,UAAU,KAAK,SAAS,EAAG;MACxCR,QAAQ,CAACP,gBAAgB,CAAE,kBAAkB,EAAEK,YAAY,CAAE;IAC9D,CAAC,MAAM;MACNA,YAAY,EAAE;IACf;EACD;EAEAE,QAAQ,CAACS,IAAI,CAAChB,gBAAgB,CAAE,cAAc,EAAEK,YAAY,CAAE;AAC/D,CAAC,GAAI,C","sources":["webpack://Jetpack/./modules/photon/photon.js"],"sourcesContent":["( function () {\n\tfunction recalculate() {\n\t\tif ( this.complete ) {\n\t\t\t// Support for lazy loading: if there is a lazy-src attribute and it's value\n\t\t\t// is not the same as the current src we should wait until the image load event\n\t\t\tvar lazySrc = this.getAttribute( 'data-lazy-src' );\n\t\t\tif ( lazySrc && this.src !== lazySrc ) {\n\t\t\t\tthis.addEventListener( 'onload', recalculate );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Copying CSS width/height into element attributes.\n\t\t\tvar width = this.width;\n\t\t\tvar height = this.height;\n\t\t\tif ( width && width > 0 && height && height > 0 ) {\n\t\t\t\tthis.setAttribute( 'width', width );\n\t\t\t\tthis.setAttribute( 'height', height );\n\n\t\t\t\treset_for_retina( this );\n\t\t\t}\n\t\t} else {\n\t\t\tthis.addEventListener( 'onload', recalculate );\n\t\t\treturn;\n\t\t}\n\t}\n\n\t/**\n\t * For images lacking explicit dimensions and needing them, try to add them.\n\t */\n\tvar restore_dims = function () {\n\t\t\tvar elements = document.querySelectorAll( 'img[data-recalc-dims]' );\n\t\t\tfor ( var i = 0; i < elements.length; i++ ) {\n\t\t\t\trecalculate.call( elements[ i ] );\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Modify given image's markup so that devicepx-jetpack.js will act on the image and it won't be reprocessed by this script.\n\t\t */\n\t\treset_for_retina = function ( img ) {\n\t\t\timg.removeAttribute( 'data-recalc-dims' );\n\t\t\timg.removeAttribute( 'scale' );\n\t\t};\n\n\t/**\n\t * Check both when page loads, and when IS is triggered.\n\t */\n\tif ( typeof window !== 'undefined' && typeof document !== 'undefined' ) {\n\t\t// `DOMContentLoaded` may fire before the script has a chance to run\n\t\tif ( document.readyState === 'loading' ) {\n\t\t\tdocument.addEventListener( 'DOMContentLoaded', restore_dims );\n\t\t} else {\n\t\t\trestore_dims();\n\t\t}\n\t}\n\n\tdocument.body.addEventListener( 'is.post-load', restore_dims );\n} )();\n"],"names":["recalculate","complete","lazySrc","getAttribute","src","addEventListener","width","height","setAttribute","reset_for_retina","restore_dims","elements","document","querySelectorAll","i","length","call","img","removeAttribute","window","readyState","body"],"sourceRoot":""}