<?php
/**
 * AI Crawler Control. Control whether AI crawlers should be allowed to index the site's content.
 *
 * @package automattic/jetpack-ai-crawler-control
 */

namespace Automattic\Jetpack;

/**
 * AI Crawler Control tools.
 */
class Ai_Crawler_Control {
	/**
	 * Initializer.
	 * Used to configure the package, eg when called via the Config package.
	 *
	 * @return void
	 */
	public static function init() {
		// Robots.txt additions.
		add_filter( 'robots_txt', array( __CLASS__, 'discourage_crawling' ) );

		// ai.txt generation.
		add_action( 'parse_request', array( __CLASS__, 'do_ai_txt' ) );
	}

	/**
	 * Add entries to the robots.txt file
	 * to indicate that we do not want AI crawlers from indexing the site's content.
	 *
	 * @since $$next-version$$
	 *
	 * @param string $output The robots.txt output.
	 *
	 * @return string
	 */
	public static function discourage_crawling( $output ) {
		$user_agents = AI_Agents::agent_list();

		$output .= "\n" . '# Jetpack AI Crawler Control tools.' . "\n";
		foreach ( $user_agents as $user_agent ) {
			$output .= sprintf( "User-agent: %s\n", esc_attr( $user_agent ) );
			$output .= "Disallow: /\n";
		}

		return $output;
	}

	/**
	 * Build an ai.txt file,
	 * listing file extensions that should not be indexed by AI crawlers.
	 * This is built using Spawning AI.
	 * https://site.spawning.ai/spawning-ai-txt
	 *
	 * @since $$next-version$$
	 *
	 * @param \WP $wp The WordPress request object.
	 *
	 * @return void
	 */
	public static function do_ai_txt( $wp ) {
		if (
			! is_a( $wp, '\WP' )
			|| 'ai.txt' !== $wp->request
		) {
			return;
		}

		$file_extensions = static::get_file_extensions();

		/**
		 * Fired when the template loader determines an ai.txt request.
		 *
		 * @since $$next-version$$
		 */
		do_action( 'jetpack_ai_control_do_ai_txt' );

		status_header( 200 );
		header( 'Content-Type: text/plain; charset=utf-8' );

		$output  = "# Jetpack AI Crawler Control tools.\n";
		$output .= "# This file is generated by the Jetpack plugin.\n";
		$output .= "# This list was created via Spawning AI.\n\n";
		$output .= "User-Agent: *\n";

		foreach ( $file_extensions as $extension ) {
			$extension = esc_attr( $extension );

			$output .= "Disallow: *.{$extension}\n";
		}

		$output .= "Disallow: /\n";
		$output .= "Disallow: *\n";

		/**
		 * Filters the ai.txt output.
		 *
		 * @since $$next-version$$
		 *
		 * @param string $output          The ai.txt output.
		 * @param array  $file_extensions List of extensions that we do not want to be crawled by AI agents.
		 */
		echo apply_filters( 'jetpack_ai_control_ai_txt_output', $output, $file_extensions ); // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped
		exit;
	}

	/**
	 * Get a list of extensions that we do not want to be crawled by AI agents.
	 *
	 * @since $$next-version$$
	 *
	 * @return array
	 */
	public static function get_file_extensions() {
		$extension_list = array(
			'txt',
			'pdf',
			'doc',
			'docx',
			'odt',
			'rtf',
			'tex',
			'wks',
			'wpd',
			'wps',
			'html',
			'bmp',
			'gif',
			'ico',
			'jpeg',
			'jpg',
			'png',
			'svg',
			'tif',
			'tiff',
			'webp',
			'aac',
			'aiff',
			'amr',
			'flac',
			'm4a',
			'mp3',
			'oga',
			'opus',
			'wav',
			'wma',
			'mp4',
			'webm',
			'ogg',
			'avi',
			'mov',
			'wmv',
			'flv',
			'mkv',
			'py',
			'js',
			'java',
			'c',
			'cpp',
			'cs',
			'h',
			'css',
			'php',
			'swift',
			'go',
			'rb',
			'pl',
			'sh',
			'sql',
		);

		/**
		 * Filter the list of file extensions that should not be crawled by AI agents.
		 *
		 * @since $$next-version$$
		 *
		 * @param array $extension_list List of file extensions.
		 */
		return apply_filters( 'jetpack_ai_control_file_extensions', $extension_list );
	}
}
