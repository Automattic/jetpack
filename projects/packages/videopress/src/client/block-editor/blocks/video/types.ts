import { trackKindOptionProps } from '../../../lib/video-tracks/types';

type playerStatuses = 'ready' | 'playing' | 'paused' | 'ended' | 'stalled';
declare global {
	interface Window {
		VideoPressIframeApi: (
			iframe: HTMLIFrameElement,
			callback: () => void
		) => {
			info: {
				guid: () => Promise< string >;
				title: () => Promise< string >;
				duration: () => Promise< number >;
				poster: () => Promise< string >;
				privacy: () => Promise< number >;
				onInfoUpdated: ( fn: () => void ) => void;
			};
			status: {
				onPlayerStatusChanged: (
					fn: ( oldStatus: playerStatuses, newStatus: playerStatuses ) => void
				) => void;
				onPlaybackTimeUpdated: ( fn: ( playbackTime: number ) => void ) => void;
				onTimeUpdate: ( fn: ( playbackTime: number ) => void ) => void;
			};
			controls: {
				play: () => void;
				pause: () => void;
				seek: ( time: number ) => void;
			};
			customize?: {
				set: ( options: {
					bigPlayButton?: boolean;
					playPauseAnimation?: boolean;
					controlBar?: boolean;
					shareButton?: boolean;
					posterImage?: boolean;
				} ) => void;
			};
		};
	}
}

export type VideoId = number;
export type VideoGUID = string;

export type TrackProps = {
	label: string;
	srcLang: string;
	kind: trackKindOptionProps;
	src: string;
};

export type VideoBlockColorAttributesProps = {
	seekbarPlayedColor?: string;
	seekbarLoadingColor?: string;
	seekbarColor?: string;
};

type BlockSupportAlignProp = 'left' | 'center' | 'right' | 'wide' | 'full' | undefined;

export type PosterDataProps = {
	type: 'media-library' | 'video-frame';
	atTime?: number;
	src?: string;
	id?: number;
	url?: string;
	previewOnHover?: boolean;
	previewAtTime?: number;
	previewLoopDuration?: number;
};

export type VideoBlockAttributes = VideoBlockColorAttributesProps & {
	id?: VideoId;
	guid?: VideoGUID;
	src?: string;

	align?: BlockSupportAlignProp;
	title?: string;
	description?: string;

	poster?: string;
	posterData?: PosterDataProps;
	videoRatio?: number;
	tracks?: Array< TrackProps >;

	// Playback types
	autoplay?: boolean;
	caption?: string;
	controls?: boolean;
	loop?: boolean;
	muted?: boolean;
	playsinline?: boolean;
	preload?: string;

	// Rendering types
	cacheHtml?: string;
	maxWidth?: string;

	useAverageColor?: boolean;

	// Privacy and Rating types
	privacySetting?: number;
	allowDownload?: boolean;
	displayEmbed?: boolean;
	rating?: string;

	isPrivate?: boolean;

	duration?: number;

	// CSS classes
	className?: string;

	isExample?: boolean;
};

export type VideoBlockEditProps = {
	attributes: VideoBlockAttributes;
	setAttributes: VideoBlockSetAttributesProps;
	isSelected: boolean;
	clientId: string;
};

export type CoreEmbedBlockAttributes = {
	className: string;
	allowResponsive: boolean;
	providerNameSlug: string;
	responsive: boolean;
	type: string;
	url: string;
};

export type CoreEmbedVideoPressVariationBlockAttributes = CoreEmbedBlockAttributes & {
	providerNameSlug: 'videopress';
	type: 'video';
};

export type VideoBlockSetAttributesProps = ( attributes: VideoBlockAttributes ) => void;

export type VideoControlProps = {
	/**
	 * Block Attributes object.
	 */
	attributes: VideoBlockAttributes;

	setAttributes: VideoBlockSetAttributesProps;

	clientId?: string;

	privateEnabledForSite?: boolean;
};

export type PosterPanelProps = VideoControlProps & {
	isGeneratingPoster?: boolean;
	videoBelongToSite?: boolean;
};

export type PrivacyAndRatingPanelProps = VideoControlProps & {
	videoBelongToSite?: boolean;
};

export type VideoEditProps = VideoControlProps;

export type DetailsPanelProps = VideoControlProps & {
	filename: string;
	chapter: TrackProps;
	isAutoGeneratedChapter: boolean;
	updateError: object | null;
	isRequestingVideoData: boolean;
	videoBelongToSite: boolean;
};

export type VideoPreviewProps = {
	html: string;
	width: number;
	height: number;
	thumbnail_height: number;
	thumbnail_width: number;
	version: string;
	title: string;
	type: string;
	provider_name: string;
	provider_url: string;
};
