/**
 * WordPress dependencies
 */
import { MediaUploadCheck, MediaUpload } from '@wordpress/block-editor';
import { ToolbarButton, Dropdown, NavigableMenu, MenuItem } from '@wordpress/components';
import { createInterpolateElement } from '@wordpress/element';
import { __, sprintf } from '@wordpress/i18n';
import { linkOff, image as imageIcon } from '@wordpress/icons';
/**
 * Internal dependencies
 */
import styles from './style.module.scss';
/**
 * Types
 */
import type { VideoPosterCardProsp } from './types';
import type { AdminAjaxQueryAttachmentsResponseItemProps } from '../../../../../types';
import type { VideoControlProps } from '../../types';
import type React from 'react';

const VIDEO_POSTER_ALLOWED_MEDIA_TYPES = [ 'image' ];

/**
 * Simple component that renders info about video poster.
 *
 * @param {VideoPosterCardProsp} props - Component props.
 * @returns {React.ReactElement}         VideoPosterCard component
 */
function VideoPosterCard( { poster }: VideoPosterCardProsp ): React.ReactElement {
	const notes = createInterpolateElement(
		__(
			'<strong>No custom Poster image selected.</strong> You can upload or select an image from your media library to override the default video image.',
			'jetpack-videopress-pkg'
		),
		{
			strong: <strong />,
		}
	);

	const overridingNotes = createInterpolateElement(
		__(
			'<strong>You are currently overriding the default Poster image.</strong> Remove it if you want to use the default image generated by VideoPress.',
			'jetpack-videopress-pkg'
		),
		{
			strong: <strong />,
		}
	);

	return <div className={ styles.current_media }>{ poster ? overridingNotes : notes }</div>;
}

/**
 * Poster image control react component.
 *
 * @param {VideoControlProps} props - Component props.
 * @returns {React.ReactElement}      PosterImageBlockControl block control
 */
export default function PosterImageBlockControl( {
	attributes,
	setAttributes,
	clientId,
}: VideoControlProps ): React.ReactElement {
	const { poster } = attributes;
	const onSelectPoster = ( image: AdminAjaxQueryAttachmentsResponseItemProps ) => {
		setAttributes( { poster: image.url } );
	};

	const onRemovePoster = () => {
		setAttributes( { poster: '' } );
	};

	return (
		<Dropdown
			contentClassName={ styles.dropdown_content }
			renderToggle={ ( { isOpen, onToggle } ) => (
				<ToolbarButton
					label={ __( 'Poster image', 'jetpack-videopress-pkg' ) }
					showTooltip
					aria-expanded={ isOpen }
					aria-haspopup="true"
					onClick={ onToggle }
					icon={ imageIcon }
				/>
			) }
			renderContent={ ( { onClose } ) => {
				const videoPosterDescription = `video-block__poster-image-description-${ clientId }`;
				return (
					<>
						<NavigableMenu className="block-editor-media-replace-flow__media-upload-menu">
							<MediaUploadCheck>
								<MediaUpload
									title={ __( 'Select Poster Image', 'jetpack-videopress-pkg' ) }
									onSelect={ ( image: AdminAjaxQueryAttachmentsResponseItemProps ) => {
										onSelectPoster( image );
										onClose();
									} }
									allowedTypes={ VIDEO_POSTER_ALLOWED_MEDIA_TYPES }
									render={ ( { open } ) => (
										<MenuItem
											icon={ imageIcon }
											onClick={ open }
											aria-describedby={ videoPosterDescription }
										>
											{ __( 'Open Media Library', 'jetpack-videopress-pkg' ) }
											<p id={ videoPosterDescription } hidden>
												{ poster
													? sprintf(
															/* translators: Placeholder is an image URL. */
															__( 'The current poster image url is %s', 'jetpack-videopress-pkg' ),
															poster
													  )
													: __(
															'There is no poster image currently selected',
															'jetpack-videopress-pkg'
													  ) }
											</p>
										</MenuItem>
									) }
								/>
							</MediaUploadCheck>

							{ !! poster && (
								<MenuItem
									onClick={ () => {
										onRemovePoster();
										onClose();
									} }
									icon={ linkOff }
								>
									{ __( 'Remove and use default', 'jetpack-videopress-pkg' ) }
								</MenuItem>
							) }
						</NavigableMenu>
						<VideoPosterCard poster={ poster } />
					</>
				);
			} }
		/>
	);
}
