/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 4660:
/***/ ((module) => {

/* eslint eslint-comments/no-unlimited-disable: 0 */
/* eslint-disable */
/* pako 1.0.10 nodeca/pako */ ( function ( f ) {
	if ( true ) {
		module.exports = f();
	} else { var g; }
} )( function () {
	var define, module, exports;
	return ( function () {
		function r( e, n, t ) {
			function o( i, f ) {
				if ( ! n[ i ] ) {
					if ( ! e[ i ] ) {
						var c = undefined;
						if ( ! f && c ) return require( i, ! 0 );
						if ( u ) return u( i, ! 0 );
						var a = new Error( "Cannot find module '" + i + "'" );
						throw ( ( a.code = 'MODULE_NOT_FOUND' ), a );
					}
					var p = ( n[ i ] = { exports: {} } );
					e[ i ][ 0 ].call(
						p.exports,
						function ( r ) {
							var n = e[ i ][ 1 ][ r ];
							return o( n || r );
						},
						p,
						p.exports,
						r,
						e,
						n,
						t
					);
				}
				return n[ i ].exports;
			}
			for (
				var u = undefined, i = 0;
				i < t.length;
				i++
			)
				o( t[ i ] );
			return o;
		}
		return r;
	} )()(
		{
			1: [
				function ( require, module, exports ) {
					'use strict';

					var TYPED_OK =
						typeof Uint8Array !== 'undefined' &&
						typeof Uint16Array !== 'undefined' &&
						typeof Int32Array !== 'undefined';

					function _has( obj, key ) {
						return Object.prototype.hasOwnProperty.call( obj, key );
					}

					exports.assign = function (
						obj /*from1, from2, from3, ...*/
					) {
						var sources = Array.prototype.slice.call(
							arguments,
							1
						);
						while ( sources.length ) {
							var source = sources.shift();
							if ( ! source ) {
								continue;
							}

							if ( typeof source !== 'object' ) {
								throw new TypeError(
									source + 'must be non-object'
								);
							}

							for ( var p in source ) {
								if ( _has( source, p ) ) {
									obj[ p ] = source[ p ];
								}
							}
						}

						return obj;
					};

					// reduce buffer size, avoiding mem copy
					exports.shrinkBuf = function ( buf, size ) {
						if ( buf.length === size ) {
							return buf;
						}
						if ( buf.subarray ) {
							return buf.subarray( 0, size );
						}
						buf.length = size;
						return buf;
					};

					var fnTyped = {
						arraySet: function (
							dest,
							src,
							src_offs,
							len,
							dest_offs
						) {
							if ( src.subarray && dest.subarray ) {
								dest.set(
									src.subarray( src_offs, src_offs + len ),
									dest_offs
								);
								return;
							}
							// Fallback to ordinary array
							for ( var i = 0; i < len; i++ ) {
								dest[ dest_offs + i ] = src[ src_offs + i ];
							}
						},
						// Join array of chunks to single array.
						flattenChunks: function ( chunks ) {
							var i, l, len, pos, chunk, result;

							// calculate data length
							len = 0;
							for ( i = 0, l = chunks.length; i < l; i++ ) {
								len += chunks[ i ].length;
							}

							// join chunks
							result = new Uint8Array( len );
							pos = 0;
							for ( i = 0, l = chunks.length; i < l; i++ ) {
								chunk = chunks[ i ];
								result.set( chunk, pos );
								pos += chunk.length;
							}

							return result;
						},
					};

					var fnUntyped = {
						arraySet: function (
							dest,
							src,
							src_offs,
							len,
							dest_offs
						) {
							for ( var i = 0; i < len; i++ ) {
								dest[ dest_offs + i ] = src[ src_offs + i ];
							}
						},
						// Join array of chunks to single array.
						flattenChunks: function ( chunks ) {
							return [].concat.apply( [], chunks );
						},
					};

					// Enable/Disable typed arrays use, for testing
					//
					exports.setTyped = function ( on ) {
						if ( on ) {
							exports.Buf8 = Uint8Array;
							exports.Buf16 = Uint16Array;
							exports.Buf32 = Int32Array;
							exports.assign( exports, fnTyped );
						} else {
							exports.Buf8 = Array;
							exports.Buf16 = Array;
							exports.Buf32 = Array;
							exports.assign( exports, fnUntyped );
						}
					};

					exports.setTyped( TYPED_OK );
				},
				{},
			],
			2: [
				function ( require, module, exports ) {
					// String encode/decode helpers
					'use strict';

					var utils = require( './common' );

					// Quick check if we can use fast array to bin string conversion
					//
					// - apply(Array) can fail on Android 2.2
					// - apply(Uint8Array) can fail on iOS 5.1 Safari
					//
					var STR_APPLY_OK = true;
					var STR_APPLY_UIA_OK = true;

					try {
						String.fromCharCode.apply( null, [ 0 ] );
					} catch ( __ ) {
						STR_APPLY_OK = false;
					}
					try {
						String.fromCharCode.apply( null, new Uint8Array( 1 ) );
					} catch ( __ ) {
						STR_APPLY_UIA_OK = false;
					}

					// Table with utf8 lengths (calculated by first byte of sequence)
					// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
					// because max possible codepoint is 0x10ffff
					var _utf8len = new utils.Buf8( 256 );
					for ( var q = 0; q < 256; q++ ) {
						_utf8len[ q ] =
							q >= 252
								? 6
								: q >= 248
								? 5
								: q >= 240
								? 4
								: q >= 224
								? 3
								: q >= 192
								? 2
								: 1;
					}
					_utf8len[ 254 ] = _utf8len[ 254 ] = 1; // Invalid sequence start

					// convert string to array (typed, when possible)
					exports.string2buf = function ( str ) {
						var buf,
							c,
							c2,
							m_pos,
							i,
							str_len = str.length,
							buf_len = 0;

						// count binary size
						for ( m_pos = 0; m_pos < str_len; m_pos++ ) {
							c = str.charCodeAt( m_pos );
							if (
								( c & 0xfc00 ) === 0xd800 &&
								m_pos + 1 < str_len
							) {
								c2 = str.charCodeAt( m_pos + 1 );
								if ( ( c2 & 0xfc00 ) === 0xdc00 ) {
									c =
										0x10000 +
										( ( c - 0xd800 ) << 10 ) +
										( c2 - 0xdc00 );
									m_pos++;
								}
							}
							buf_len +=
								c < 0x80
									? 1
									: c < 0x800
									? 2
									: c < 0x10000
									? 3
									: 4;
						}

						// allocate buffer
						buf = new utils.Buf8( buf_len );

						// convert
						for ( i = 0, m_pos = 0; i < buf_len; m_pos++ ) {
							c = str.charCodeAt( m_pos );
							if (
								( c & 0xfc00 ) === 0xd800 &&
								m_pos + 1 < str_len
							) {
								c2 = str.charCodeAt( m_pos + 1 );
								if ( ( c2 & 0xfc00 ) === 0xdc00 ) {
									c =
										0x10000 +
										( ( c - 0xd800 ) << 10 ) +
										( c2 - 0xdc00 );
									m_pos++;
								}
							}
							if ( c < 0x80 ) {
								/* one byte */
								buf[ i++ ] = c;
							} else if ( c < 0x800 ) {
								/* two bytes */
								buf[ i++ ] = 0xc0 | ( c >>> 6 );
								buf[ i++ ] = 0x80 | ( c & 0x3f );
							} else if ( c < 0x10000 ) {
								/* three bytes */
								buf[ i++ ] = 0xe0 | ( c >>> 12 );
								buf[ i++ ] = 0x80 | ( ( c >>> 6 ) & 0x3f );
								buf[ i++ ] = 0x80 | ( c & 0x3f );
							} else {
								/* four bytes */
								buf[ i++ ] = 0xf0 | ( c >>> 18 );
								buf[ i++ ] = 0x80 | ( ( c >>> 12 ) & 0x3f );
								buf[ i++ ] = 0x80 | ( ( c >>> 6 ) & 0x3f );
								buf[ i++ ] = 0x80 | ( c & 0x3f );
							}
						}

						return buf;
					};

					// Helper (used in 2 places)
					function buf2binstring( buf, len ) {
						// On Chrome, the arguments in a function call that are allowed is `65534`.
						// If the length of the buffer is smaller than that, we can use this optimization,
						// otherwise we will take a slower path.
						if ( len < 65534 ) {
							if (
								( buf.subarray && STR_APPLY_UIA_OK ) ||
								( ! buf.subarray && STR_APPLY_OK )
							) {
								return String.fromCharCode.apply(
									null,
									utils.shrinkBuf( buf, len )
								);
							}
						}

						var result = '';
						for ( var i = 0; i < len; i++ ) {
							result += String.fromCharCode( buf[ i ] );
						}
						return result;
					}

					// Convert byte array to binary string
					exports.buf2binstring = function ( buf ) {
						return buf2binstring( buf, buf.length );
					};

					// Convert binary string (typed, when possible)
					exports.binstring2buf = function ( str ) {
						var buf = new utils.Buf8( str.length );
						for ( var i = 0, len = buf.length; i < len; i++ ) {
							buf[ i ] = str.charCodeAt( i );
						}
						return buf;
					};

					// convert array to string
					exports.buf2string = function ( buf, max ) {
						var i, out, c, c_len;
						var len = max || buf.length;

						// Reserve max possible length (2 words per char)
						// NB: by unknown reasons, Array is significantly faster for
						//     String.fromCharCode.apply than Uint16Array.
						var utf16buf = new Array( len * 2 );

						for ( out = 0, i = 0; i < len;  ) {
							c = buf[ i++ ];
							// quick process ascii
							if ( c < 0x80 ) {
								utf16buf[ out++ ] = c;
								continue;
							}

							c_len = _utf8len[ c ];
							// skip 5 & 6 byte codes
							if ( c_len > 4 ) {
								utf16buf[ out++ ] = 0xfffd;
								i += c_len - 1;
								continue;
							}

							// apply mask on first byte
							c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
							// join the rest
							while ( c_len > 1 && i < len ) {
								c = ( c << 6 ) | ( buf[ i++ ] & 0x3f );
								c_len--;
							}

							// terminated by end of string?
							if ( c_len > 1 ) {
								utf16buf[ out++ ] = 0xfffd;
								continue;
							}

							if ( c < 0x10000 ) {
								utf16buf[ out++ ] = c;
							} else {
								c -= 0x10000;
								utf16buf[ out++ ] =
									0xd800 | ( ( c >> 10 ) & 0x3ff );
								utf16buf[ out++ ] = 0xdc00 | ( c & 0x3ff );
							}
						}

						return buf2binstring( utf16buf, out );
					};

					// Calculate max possible position in utf8 buffer,
					// that will not break sequence. If that's not possible
					// - (very small limits) return max size as is.
					//
					// buf[] - utf8 bytes array
					// max   - length limit (mandatory);
					exports.utf8border = function ( buf, max ) {
						var pos;

						max = max || buf.length;
						if ( max > buf.length ) {
							max = buf.length;
						}

						// go back from last position, until start of sequence found
						pos = max - 1;
						while ( pos >= 0 && ( buf[ pos ] & 0xc0 ) === 0x80 ) {
							pos--;
						}

						// Very small and broken sequence,
						// return max, because we should return something anyway.
						if ( pos < 0 ) {
							return max;
						}

						// If we came to start of buffer - that means buffer is too small,
						// return max too.
						if ( pos === 0 ) {
							return max;
						}

						return pos + _utf8len[ buf[ pos ] ] > max ? pos : max;
					};
				},
				{ './common': 1 },
			],
			3: [
				function ( require, module, exports ) {
					'use strict';

					// Note: adler32 takes 12% for level 0 and 2% for level 6.
					// It isn't worth it to make additional optimizations as in original.
					// Small size is preferable.

					// (C) 1995-2013 Jean-loup Gailly and Mark Adler
					// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
					//
					// This software is provided 'as-is', without any express or implied
					// warranty. In no event will the authors be held liable for any damages
					// arising from the use of this software.
					//
					// Permission is granted to anyone to use this software for any purpose,
					// including commercial applications, and to alter it and redistribute it
					// freely, subject to the following restrictions:
					//
					// 1. The origin of this software must not be misrepresented; you must not
					//   claim that you wrote the original software. If you use this software
					//   in a product, an acknowledgment in the product documentation would be
					//   appreciated but is not required.
					// 2. Altered source versions must be plainly marked as such, and must not be
					//   misrepresented as being the original software.
					// 3. This notice may not be removed or altered from any source distribution.

					function adler32( adler, buf, len, pos ) {
						var s1 = ( adler & 0xffff ) | 0,
							s2 = ( ( adler >>> 16 ) & 0xffff ) | 0,
							n = 0;

						while ( len !== 0 ) {
							// Set limit ~ twice less than 5552, to keep
							// s2 in 31-bits, because we force signed ints.
							// in other case %= will fail.
							n = len > 2000 ? 2000 : len;
							len -= n;

							do {
								s1 = ( s1 + buf[ pos++ ] ) | 0;
								s2 = ( s2 + s1 ) | 0;
							} while ( --n );

							s1 %= 65521;
							s2 %= 65521;
						}

						return s1 | ( s2 << 16 ) | 0;
					}

					module.exports = adler32;
				},
				{},
			],
			4: [
				function ( require, module, exports ) {
					'use strict';

					// (C) 1995-2013 Jean-loup Gailly and Mark Adler
					// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
					//
					// This software is provided 'as-is', without any express or implied
					// warranty. In no event will the authors be held liable for any damages
					// arising from the use of this software.
					//
					// Permission is granted to anyone to use this software for any purpose,
					// including commercial applications, and to alter it and redistribute it
					// freely, subject to the following restrictions:
					//
					// 1. The origin of this software must not be misrepresented; you must not
					//   claim that you wrote the original software. If you use this software
					//   in a product, an acknowledgment in the product documentation would be
					//   appreciated but is not required.
					// 2. Altered source versions must be plainly marked as such, and must not be
					//   misrepresented as being the original software.
					// 3. This notice may not be removed or altered from any source distribution.

					module.exports = {
						/* Allowed flush values; see deflate() and inflate() below for details */
						Z_NO_FLUSH: 0,
						Z_PARTIAL_FLUSH: 1,
						Z_SYNC_FLUSH: 2,
						Z_FULL_FLUSH: 3,
						Z_FINISH: 4,
						Z_BLOCK: 5,
						Z_TREES: 6,

						/* Return codes for the compression/decompression functions. Negative values
						 * are errors, positive values are used for special but normal events.
						 */
						Z_OK: 0,
						Z_STREAM_END: 1,
						Z_NEED_DICT: 2,
						Z_ERRNO: -1,
						Z_STREAM_ERROR: -2,
						Z_DATA_ERROR: -3,
						//Z_MEM_ERROR:     -4,
						Z_BUF_ERROR: -5,
						//Z_VERSION_ERROR: -6,

						/* compression levels */
						Z_NO_COMPRESSION: 0,
						Z_BEST_SPEED: 1,
						Z_BEST_COMPRESSION: 9,
						Z_DEFAULT_COMPRESSION: -1,

						Z_FILTERED: 1,
						Z_HUFFMAN_ONLY: 2,
						Z_RLE: 3,
						Z_FIXED: 4,
						Z_DEFAULT_STRATEGY: 0,

						/* Possible values of the data_type field (though see inflate()) */
						Z_BINARY: 0,
						Z_TEXT: 1,
						//Z_ASCII:                1, // = Z_TEXT (deprecated)
						Z_UNKNOWN: 2,

						/* The deflate compression method */
						Z_DEFLATED: 8,
						//Z_NULL:                 null // Use -1 or null inline, depending on var type
					};
				},
				{},
			],
			5: [
				function ( require, module, exports ) {
					'use strict';

					// Note: we can't get significant speed boost here.
					// So write code to minimize size - no pregenerated tables
					// and array tools dependencies.

					// (C) 1995-2013 Jean-loup Gailly and Mark Adler
					// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
					//
					// This software is provided 'as-is', without any express or implied
					// warranty. In no event will the authors be held liable for any damages
					// arising from the use of this software.
					//
					// Permission is granted to anyone to use this software for any purpose,
					// including commercial applications, and to alter it and redistribute it
					// freely, subject to the following restrictions:
					//
					// 1. The origin of this software must not be misrepresented; you must not
					//   claim that you wrote the original software. If you use this software
					//   in a product, an acknowledgment in the product documentation would be
					//   appreciated but is not required.
					// 2. Altered source versions must be plainly marked as such, and must not be
					//   misrepresented as being the original software.
					// 3. This notice may not be removed or altered from any source distribution.

					// Use ordinary array, since untyped makes no boost here
					function makeTable() {
						var c,
							table = [];

						for ( var n = 0; n < 256; n++ ) {
							c = n;
							for ( var k = 0; k < 8; k++ ) {
								c = c & 1 ? 0xedb88320 ^ ( c >>> 1 ) : c >>> 1;
							}
							table[ n ] = c;
						}

						return table;
					}

					// Create table on load. Just 255 signed longs. Not a problem.
					var crcTable = makeTable();

					function crc32( crc, buf, len, pos ) {
						var t = crcTable,
							end = pos + len;

						crc ^= -1;

						for ( var i = pos; i < end; i++ ) {
							crc =
								( crc >>> 8 ) ^ t[ ( crc ^ buf[ i ] ) & 0xff ];
						}

						return crc ^ -1; // >>> 0;
					}

					module.exports = crc32;
				},
				{},
			],
			6: [
				function ( require, module, exports ) {
					'use strict';

					// (C) 1995-2013 Jean-loup Gailly and Mark Adler
					// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
					//
					// This software is provided 'as-is', without any express or implied
					// warranty. In no event will the authors be held liable for any damages
					// arising from the use of this software.
					//
					// Permission is granted to anyone to use this software for any purpose,
					// including commercial applications, and to alter it and redistribute it
					// freely, subject to the following restrictions:
					//
					// 1. The origin of this software must not be misrepresented; you must not
					//   claim that you wrote the original software. If you use this software
					//   in a product, an acknowledgment in the product documentation would be
					//   appreciated but is not required.
					// 2. Altered source versions must be plainly marked as such, and must not be
					//   misrepresented as being the original software.
					// 3. This notice may not be removed or altered from any source distribution.

					function GZheader() {
						/* true if compressed data believed to be text */
						this.text = 0;
						/* modification time */
						this.time = 0;
						/* extra flags (not used when writing a gzip file) */
						this.xflags = 0;
						/* operating system */
						this.os = 0;
						/* pointer to extra field or Z_NULL if none */
						this.extra = null;
						/* extra field length (valid if extra != Z_NULL) */
						this.extra_len = 0; // Actually, we don't need it in JS,
						// but leave for few code modifications

						//
						// Setup limits is not necessary because in js we should not preallocate memory
						// for inflate use constant limit in 65536 bytes
						//

						/* space at extra (only when reading header) */
						// this.extra_max  = 0;
						/* pointer to zero-terminated file name or Z_NULL */
						this.name = '';
						/* space at name (only when reading header) */
						// this.name_max   = 0;
						/* pointer to zero-terminated comment or Z_NULL */
						this.comment = '';
						/* space at comment (only when reading header) */
						// this.comm_max   = 0;
						/* true if there was or will be a header crc */
						this.hcrc = 0;
						/* true when done reading gzip header (not used when writing a gzip file) */
						this.done = false;
					}

					module.exports = GZheader;
				},
				{},
			],
			7: [
				function ( require, module, exports ) {
					'use strict';

					// (C) 1995-2013 Jean-loup Gailly and Mark Adler
					// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
					//
					// This software is provided 'as-is', without any express or implied
					// warranty. In no event will the authors be held liable for any damages
					// arising from the use of this software.
					//
					// Permission is granted to anyone to use this software for any purpose,
					// including commercial applications, and to alter it and redistribute it
					// freely, subject to the following restrictions:
					//
					// 1. The origin of this software must not be misrepresented; you must not
					//   claim that you wrote the original software. If you use this software
					//   in a product, an acknowledgment in the product documentation would be
					//   appreciated but is not required.
					// 2. Altered source versions must be plainly marked as such, and must not be
					//   misrepresented as being the original software.
					// 3. This notice may not be removed or altered from any source distribution.

					// See state defs from inflate.js
					var BAD = 30; /* got a data error -- remain here until reset */
					var TYPE = 12; /* i: waiting for type bits, including last-flag bit */

					/*
     Decode literal, length, and distance codes and write out the resulting
     literal and match bytes until either not enough input or output is
     available, an end-of-block is encountered, or a data error is encountered.
     When large enough input and output buffers are supplied to inflate(), for
     example, a 16K input buffer and a 64K output buffer, more than 95% of the
     inflate execution time is spent in this routine.

     Entry assumptions:

          state.mode === LEN
          strm.avail_in >= 6
          strm.avail_out >= 258
          start >= strm.avail_out
          state.bits < 8

     On return, state.mode is one of:

          LEN -- ran out of enough output space or enough available input
          TYPE -- reached end of block code, inflate() to interpret next block
          BAD -- error in block data

     Notes:

      - The maximum input bits used by a length/distance pair is 15 bits for the
        length code, 5 bits for the length extra, 15 bits for the distance code,
        and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
        Therefore if strm.avail_in >= 6, then there is enough input to avoid
        checking for available input while decoding.

      - The maximum bytes that a single length/distance pair can output is 258
        bytes, which is the maximum length that can be coded.  inflate_fast()
        requires strm.avail_out >= 258 for each loop to avoid checking for
        output space.
   */
					module.exports = function inflate_fast( strm, start ) {
						var state;
						var _in; /* local strm.input */
						var last; /* have enough input while in < last */
						var _out; /* local strm.output */
						var beg; /* inflate()'s initial strm.output */
						var end; /* while out < end, enough space available */
						//#ifdef INFLATE_STRICT
						var dmax; /* maximum distance from zlib header */
						//#endif
						var wsize; /* window size or zero if not using window */
						var whave; /* valid bytes in the window */
						var wnext; /* window write index */
						// Use `s_window` instead `window`, avoid conflict with instrumentation tools
						var s_window; /* allocated sliding window, if wsize != 0 */
						var hold; /* local strm.hold */
						var bits; /* local strm.bits */
						var lcode; /* local strm.lencode */
						var dcode; /* local strm.distcode */
						var lmask; /* mask for first level of length codes */
						var dmask; /* mask for first level of distance codes */
						var here; /* retrieved table entry */
						var op; /* code bits, operation, extra bits, or */
						/*  window position, window bytes to copy */
						var len; /* match length, unused bytes */
						var dist; /* match distance */
						var from; /* where to copy match from */
						var from_source;

						var input, output; // JS specific, because we have no pointers

						/* copy state to local variables */
						state = strm.state;
						//here = state.here;
						_in = strm.next_in;
						input = strm.input;
						last = _in + ( strm.avail_in - 5 );
						_out = strm.next_out;
						output = strm.output;
						beg = _out - ( start - strm.avail_out );
						end = _out + ( strm.avail_out - 257 );
						//#ifdef INFLATE_STRICT
						dmax = state.dmax;
						//#endif
						wsize = state.wsize;
						whave = state.whave;
						wnext = state.wnext;
						s_window = state.window;
						hold = state.hold;
						bits = state.bits;
						lcode = state.lencode;
						dcode = state.distcode;
						lmask = ( 1 << state.lenbits ) - 1;
						dmask = ( 1 << state.distbits ) - 1;

						/* decode literals and length/distances until end-of-block or not enough
       input data or output space */

						top: do {
							if ( bits < 15 ) {
								hold += input[ _in++ ] << bits;
								bits += 8;
								hold += input[ _in++ ] << bits;
								bits += 8;
							}

							here = lcode[ hold & lmask ];

							dolen: for (;;) {
								// Goto emulation
								op = here >>> 24 /*here.bits*/;
								hold >>>= op;
								bits -= op;
								op = ( here >>> 16 ) & 0xff /*here.op*/;
								if ( op === 0 ) {
									/* literal */
									//Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
									//        "inflate:         literal '%c'\n" :
									//        "inflate:         literal 0x%02x\n", here.val));
									output[ _out++ ] =
										here & 0xffff /*here.val*/;
								} else if ( op & 16 ) {
									/* length base */
									len = here & 0xffff /*here.val*/;
									op &= 15; /* number of extra bits */
									if ( op ) {
										if ( bits < op ) {
											hold += input[ _in++ ] << bits;
											bits += 8;
										}
										len += hold & ( ( 1 << op ) - 1 );
										hold >>>= op;
										bits -= op;
									}
									//Tracevv((stderr, "inflate:         length %u\n", len));
									if ( bits < 15 ) {
										hold += input[ _in++ ] << bits;
										bits += 8;
										hold += input[ _in++ ] << bits;
										bits += 8;
									}
									here = dcode[ hold & dmask ];

									dodist: for (;;) {
										// goto emulation
										op = here >>> 24 /*here.bits*/;
										hold >>>= op;
										bits -= op;
										op = ( here >>> 16 ) & 0xff /*here.op*/;

										if ( op & 16 ) {
											/* distance base */
											dist = here & 0xffff /*here.val*/;
											op &= 15; /* number of extra bits */
											if ( bits < op ) {
												hold += input[ _in++ ] << bits;
												bits += 8;
												if ( bits < op ) {
													hold +=
														input[ _in++ ] << bits;
													bits += 8;
												}
											}
											dist += hold & ( ( 1 << op ) - 1 );
											//#ifdef INFLATE_STRICT
											if ( dist > dmax ) {
												strm.msg =
													'invalid distance too far back';
												state.mode = BAD;
												break top;
											}
											//#endif
											hold >>>= op;
											bits -= op;
											//Tracevv((stderr, "inflate:         distance %u\n", dist));
											op =
												_out -
												beg; /* max distance in output */
											if ( dist > op ) {
												/* see if copy from window */
												op =
													dist -
													op; /* distance back in window */
												if ( op > whave ) {
													if ( state.sane ) {
														strm.msg =
															'invalid distance too far back';
														state.mode = BAD;
														break top;
													}

													// (!) This block is disabled in zlib defaults,
													// don't enable it for binary compatibility
													//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
													//                if (len <= op - whave) {
													//                  do {
													//                    output[_out++] = 0;
													//                  } while (--len);
													//                  continue top;
													//                }
													//                len -= op - whave;
													//                do {
													//                  output[_out++] = 0;
													//                } while (--op > whave);
													//                if (op === 0) {
													//                  from = _out - dist;
													//                  do {
													//                    output[_out++] = output[from++];
													//                  } while (--len);
													//                  continue top;
													//                }
													//#endif
												}
												from = 0; // window index
												from_source = s_window;
												if ( wnext === 0 ) {
													/* very common case */
													from += wsize - op;
													if ( op < len ) {
														/* some from window */
														len -= op;
														do {
															output[ _out++ ] =
																s_window[
																	from++
																];
														} while ( --op );
														from =
															_out -
															dist; /* rest from output */
														from_source = output;
													}
												} else if ( wnext < op ) {
													/* wrap around window */
													from += wsize + wnext - op;
													op -= wnext;
													if ( op < len ) {
														/* some from end of window */
														len -= op;
														do {
															output[ _out++ ] =
																s_window[
																	from++
																];
														} while ( --op );
														from = 0;
														if ( wnext < len ) {
															/* some from start of window */
															op = wnext;
															len -= op;
															do {
																output[
																	_out++
																] =
																	s_window[
																		from++
																	];
															} while ( --op );
															from =
																_out -
																dist; /* rest from output */
															from_source =
																output;
														}
													}
												} else {
													/* contiguous in window */
													from += wnext - op;
													if ( op < len ) {
														/* some from window */
														len -= op;
														do {
															output[ _out++ ] =
																s_window[
																	from++
																];
														} while ( --op );
														from =
															_out -
															dist; /* rest from output */
														from_source = output;
													}
												}
												while ( len > 2 ) {
													output[ _out++ ] =
														from_source[ from++ ];
													output[ _out++ ] =
														from_source[ from++ ];
													output[ _out++ ] =
														from_source[ from++ ];
													len -= 3;
												}
												if ( len ) {
													output[ _out++ ] =
														from_source[ from++ ];
													if ( len > 1 ) {
														output[ _out++ ] =
															from_source[
																from++
															];
													}
												}
											} else {
												from =
													_out -
													dist; /* copy direct from output */
												do {
													/* minimum length is three */
													output[ _out++ ] =
														output[ from++ ];
													output[ _out++ ] =
														output[ from++ ];
													output[ _out++ ] =
														output[ from++ ];
													len -= 3;
												} while ( len > 2 );
												if ( len ) {
													output[ _out++ ] =
														output[ from++ ];
													if ( len > 1 ) {
														output[ _out++ ] =
															output[ from++ ];
													}
												}
											}
										} else if ( ( op & 64 ) === 0 ) {
											/* 2nd level distance code */
											here =
												dcode[
													( here &
														0xffff ) /*here.val*/ +
														( hold &
															( ( 1 << op ) -
																1 ) )
												];
											continue dodist;
										} else {
											strm.msg = 'invalid distance code';
											state.mode = BAD;
											break top;
										}

										break; // need to emulate goto via "continue"
									}
								} else if ( ( op & 64 ) === 0 ) {
									/* 2nd level length code */
									here =
										lcode[
											( here & 0xffff ) /*here.val*/ +
												( hold & ( ( 1 << op ) - 1 ) )
										];
									continue dolen;
								} else if ( op & 32 ) {
									/* end-of-block */
									//Tracevv((stderr, "inflate:         end of block\n"));
									state.mode = TYPE;
									break top;
								} else {
									strm.msg = 'invalid literal/length code';
									state.mode = BAD;
									break top;
								}

								break; // need to emulate goto via "continue"
							}
						} while ( _in < last && _out < end );

						/* return unused bytes (on entry, bits < 8, so in won't go too far back) */
						len = bits >> 3;
						_in -= len;
						bits -= len << 3;
						hold &= ( 1 << bits ) - 1;

						/* update state and return */
						strm.next_in = _in;
						strm.next_out = _out;
						strm.avail_in =
							_in < last
								? 5 + ( last - _in )
								: 5 - ( _in - last );
						strm.avail_out =
							_out < end
								? 257 + ( end - _out )
								: 257 - ( _out - end );
						state.hold = hold;
						state.bits = bits;
						return;
					};
				},
				{},
			],
			8: [
				function ( require, module, exports ) {
					'use strict';

					// (C) 1995-2013 Jean-loup Gailly and Mark Adler
					// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
					//
					// This software is provided 'as-is', without any express or implied
					// warranty. In no event will the authors be held liable for any damages
					// arising from the use of this software.
					//
					// Permission is granted to anyone to use this software for any purpose,
					// including commercial applications, and to alter it and redistribute it
					// freely, subject to the following restrictions:
					//
					// 1. The origin of this software must not be misrepresented; you must not
					//   claim that you wrote the original software. If you use this software
					//   in a product, an acknowledgment in the product documentation would be
					//   appreciated but is not required.
					// 2. Altered source versions must be plainly marked as such, and must not be
					//   misrepresented as being the original software.
					// 3. This notice may not be removed or altered from any source distribution.

					var utils = require( '../utils/common' );
					var adler32 = require( './adler32' );
					var crc32 = require( './crc32' );
					var inflate_fast = require( './inffast' );
					var inflate_table = require( './inftrees' );

					var CODES = 0;
					var LENS = 1;
					var DISTS = 2;

					/* Public constants ==========================================================*/
					/* ===========================================================================*/

					/* Allowed flush values; see deflate() and inflate() below for details */
					//var Z_NO_FLUSH      = 0;
					//var Z_PARTIAL_FLUSH = 1;
					//var Z_SYNC_FLUSH    = 2;
					//var Z_FULL_FLUSH    = 3;
					var Z_FINISH = 4;
					var Z_BLOCK = 5;
					var Z_TREES = 6;

					/* Return codes for the compression/decompression functions. Negative values
					 * are errors, positive values are used for special but normal events.
					 */
					var Z_OK = 0;
					var Z_STREAM_END = 1;
					var Z_NEED_DICT = 2;
					//var Z_ERRNO         = -1;
					var Z_STREAM_ERROR = -2;
					var Z_DATA_ERROR = -3;
					var Z_MEM_ERROR = -4;
					var Z_BUF_ERROR = -5;
					//var Z_VERSION_ERROR = -6;

					/* The deflate compression method */
					var Z_DEFLATED = 8;

					/* STATES ====================================================================*/
					/* ===========================================================================*/

					var HEAD = 1; /* i: waiting for magic header */
					var FLAGS = 2; /* i: waiting for method and flags (gzip) */
					var TIME = 3; /* i: waiting for modification time (gzip) */
					var OS = 4; /* i: waiting for extra flags and operating system (gzip) */
					var EXLEN = 5; /* i: waiting for extra length (gzip) */
					var EXTRA = 6; /* i: waiting for extra bytes (gzip) */
					var NAME = 7; /* i: waiting for end of file name (gzip) */
					var COMMENT = 8; /* i: waiting for end of comment (gzip) */
					var HCRC = 9; /* i: waiting for header crc (gzip) */
					var DICTID = 10; /* i: waiting for dictionary check value */
					var DICT = 11; /* waiting for inflateSetDictionary() call */
					var TYPE = 12; /* i: waiting for type bits, including last-flag bit */
					var TYPEDO = 13; /* i: same, but skip check to exit inflate on new block */
					var STORED = 14; /* i: waiting for stored size (length and complement) */
					var COPY_ = 15; /* i/o: same as COPY below, but only first time in */
					var COPY = 16; /* i/o: waiting for input or output to copy stored block */
					var TABLE = 17; /* i: waiting for dynamic block table lengths */
					var LENLENS = 18; /* i: waiting for code length code lengths */
					var CODELENS = 19; /* i: waiting for length/lit and distance code lengths */
					var LEN_ = 20; /* i: same as LEN below, but only first time in */
					var LEN = 21; /* i: waiting for length/lit/eob code */
					var LENEXT = 22; /* i: waiting for length extra bits */
					var DIST = 23; /* i: waiting for distance code */
					var DISTEXT = 24; /* i: waiting for distance extra bits */
					var MATCH = 25; /* o: waiting for output space to copy string */
					var LIT = 26; /* o: waiting for output space to write literal */
					var CHECK = 27; /* i: waiting for 32-bit check value */
					var LENGTH = 28; /* i: waiting for 32-bit length (gzip) */
					var DONE = 29; /* finished check, done -- remain here until reset */
					var BAD = 30; /* got a data error -- remain here until reset */
					var MEM = 31; /* got an inflate() memory error -- remain here until reset */
					var SYNC = 32; /* looking for synchronization bytes to restart inflate() */

					/* ===========================================================================*/

					var ENOUGH_LENS = 852;
					var ENOUGH_DISTS = 592;
					//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

					var MAX_WBITS = 15;
					/* 32K LZ77 window */
					var DEF_WBITS = MAX_WBITS;

					function zswap32( q ) {
						return (
							( ( q >>> 24 ) & 0xff ) +
							( ( q >>> 8 ) & 0xff00 ) +
							( ( q & 0xff00 ) << 8 ) +
							( ( q & 0xff ) << 24 )
						);
					}

					function InflateState() {
						this.mode = 0; /* current inflate mode */
						this.last = false; /* true if processing last block */
						this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */
						this.havedict = false; /* true if dictionary provided */
						this.flags = 0; /* gzip header method and flags (0 if zlib) */
						this.dmax = 0; /* zlib header max distance (INFLATE_STRICT) */
						this.check = 0; /* protected copy of check value */
						this.total = 0; /* protected copy of output count */
						// TODO: may be {}
						this.head =
							null; /* where to save gzip header information */

						/* sliding window */
						this.wbits = 0; /* log base 2 of requested window size */
						this.wsize = 0; /* window size or zero if not using window */
						this.whave = 0; /* valid bytes in the window */
						this.wnext = 0; /* window write index */
						this.window =
							null; /* allocated sliding window, if needed */

						/* bit accumulator */
						this.hold = 0; /* input bit accumulator */
						this.bits = 0; /* number of bits in "in" */

						/* for string and stored block copying */
						this.length = 0; /* literal or length of data to copy */
						this.offset = 0; /* distance back to copy string from */

						/* for table and code decoding */
						this.extra = 0; /* extra bits needed */

						/* fixed and dynamic code tables */
						this.lencode =
							null; /* starting table for length/literal codes */
						this.distcode =
							null; /* starting table for distance codes */
						this.lenbits = 0; /* index bits for lencode */
						this.distbits = 0; /* index bits for distcode */

						/* dynamic table building */
						this.ncode = 0; /* number of code length code lengths */
						this.nlen = 0; /* number of length code lengths */
						this.ndist = 0; /* number of distance code lengths */
						this.have = 0; /* number of code lengths in lens[] */
						this.next = null; /* next available space in codes[] */

						this.lens = new utils.Buf16(
							320
						); /* temporary storage for code lengths */
						this.work = new utils.Buf16(
							288
						); /* work area for code table building */

						/*
     because we don't have pointers in js, we use lencode and distcode directly
     as buffers so we don't need codes
    */
						//this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
						this.lendyn =
							null; /* dynamic table for length/literal codes (JS specific) */
						this.distdyn =
							null; /* dynamic table for distance codes (JS specific) */
						this.sane = 0; /* if false, allow invalid distance too far */
						this.back = 0; /* bits back of last unprocessed length/lit */
						this.was = 0; /* initial length of match */
					}

					function inflateResetKeep( strm ) {
						var state;

						if ( ! strm || ! strm.state ) {
							return Z_STREAM_ERROR;
						}
						state = strm.state;
						strm.total_in = strm.total_out = state.total = 0;
						strm.msg = ''; /*Z_NULL*/
						if ( state.wrap ) {
							/* to support ill-conceived Java test suite */
							strm.adler = state.wrap & 1;
						}
						state.mode = HEAD;
						state.last = 0;
						state.havedict = 0;
						state.dmax = 32768;
						state.head = null /*Z_NULL*/;
						state.hold = 0;
						state.bits = 0;
						//state.lencode = state.distcode = state.next = state.codes;
						state.lencode = state.lendyn = new utils.Buf32(
							ENOUGH_LENS
						);
						state.distcode = state.distdyn = new utils.Buf32(
							ENOUGH_DISTS
						);

						state.sane = 1;
						state.back = -1;
						//Tracev((stderr, "inflate: reset\n"));
						return Z_OK;
					}

					function inflateReset( strm ) {
						var state;

						if ( ! strm || ! strm.state ) {
							return Z_STREAM_ERROR;
						}
						state = strm.state;
						state.wsize = 0;
						state.whave = 0;
						state.wnext = 0;
						return inflateResetKeep( strm );
					}

					function inflateReset2( strm, windowBits ) {
						var wrap;
						var state;

						/* get the state */
						if ( ! strm || ! strm.state ) {
							return Z_STREAM_ERROR;
						}
						state = strm.state;

						/* extract wrap request from windowBits parameter */
						if ( windowBits < 0 ) {
							wrap = 0;
							windowBits = -windowBits;
						} else {
							wrap = ( windowBits >> 4 ) + 1;
							if ( windowBits < 48 ) {
								windowBits &= 15;
							}
						}

						/* set number of window bits, free window if different */
						if (
							windowBits &&
							( windowBits < 8 || windowBits > 15 )
						) {
							return Z_STREAM_ERROR;
						}
						if (
							state.window !== null &&
							state.wbits !== windowBits
						) {
							state.window = null;
						}

						/* update state and reset the rest of it */
						state.wrap = wrap;
						state.wbits = windowBits;
						return inflateReset( strm );
					}

					function inflateInit2( strm, windowBits ) {
						var ret;
						var state;

						if ( ! strm ) {
							return Z_STREAM_ERROR;
						}
						//strm.msg = Z_NULL;                 /* in case we return an error */

						state = new InflateState();

						//if (state === Z_NULL) return Z_MEM_ERROR;
						//Tracev((stderr, "inflate: allocated\n"));
						strm.state = state;
						state.window = null /*Z_NULL*/;
						ret = inflateReset2( strm, windowBits );
						if ( ret !== Z_OK ) {
							strm.state = null /*Z_NULL*/;
						}
						return ret;
					}

					function inflateInit( strm ) {
						return inflateInit2( strm, DEF_WBITS );
					}

					/*
   Return state with length and distance decoding tables and index sizes set to
   fixed code decoding.  Normally this returns fixed tables from inffixed.h.
   If BUILDFIXED is defined, then instead this routine builds the tables the
   first time it's called, and returns those tables the first time and
   thereafter.  This reduces the size of the code by about 2K bytes, in
   exchange for a little execution time.  However, BUILDFIXED should not be
   used for threaded applications, since the rewriting of the tables and virgin
   may not be thread-safe.
   */
					var virgin = true;

					var lenfix, distfix; // We have no pointers in JS, so keep tables separate

					function fixedtables( state ) {
						/* build fixed huffman tables if first call (may not be thread safe) */
						if ( virgin ) {
							var sym;

							lenfix = new utils.Buf32( 512 );
							distfix = new utils.Buf32( 32 );

							/* literal/length table */
							sym = 0;
							while ( sym < 144 ) {
								state.lens[ sym++ ] = 8;
							}
							while ( sym < 256 ) {
								state.lens[ sym++ ] = 9;
							}
							while ( sym < 280 ) {
								state.lens[ sym++ ] = 7;
							}
							while ( sym < 288 ) {
								state.lens[ sym++ ] = 8;
							}

							inflate_table(
								LENS,
								state.lens,
								0,
								288,
								lenfix,
								0,
								state.work,
								{ bits: 9 }
							);

							/* distance table */
							sym = 0;
							while ( sym < 32 ) {
								state.lens[ sym++ ] = 5;
							}

							inflate_table(
								DISTS,
								state.lens,
								0,
								32,
								distfix,
								0,
								state.work,
								{ bits: 5 }
							);

							/* do this just once */
							virgin = false;
						}

						state.lencode = lenfix;
						state.lenbits = 9;
						state.distcode = distfix;
						state.distbits = 5;
					}

					/*
   Update the window with the last wsize (normally 32K) bytes written before
   returning.  If window does not exist yet, create it.  This is only called
   when a window is already in use, or when output has been written during this
   inflate call, but the end of the deflate stream has not been reached yet.
   It is also called to create a window for dictionary data when a dictionary
   is loaded.

   Providing output buffers larger than 32K to inflate() should provide a speed
   advantage, since only the last 32K of output is copied to the sliding window
   upon return from inflate(), and since all distances after the first 32K of
   output will fall in the output data, making match copies simpler and faster.
   The advantage may be dependent on the size of the processor's data caches.
   */
					function updatewindow( strm, src, end, copy ) {
						var dist;
						var state = strm.state;

						/* if it hasn't been done already, allocate space for the window */
						if ( state.window === null ) {
							state.wsize = 1 << state.wbits;
							state.wnext = 0;
							state.whave = 0;

							state.window = new utils.Buf8( state.wsize );
						}

						/* copy state->wsize or less output bytes into the circular window */
						if ( copy >= state.wsize ) {
							utils.arraySet(
								state.window,
								src,
								end - state.wsize,
								state.wsize,
								0
							);
							state.wnext = 0;
							state.whave = state.wsize;
						} else {
							dist = state.wsize - state.wnext;
							if ( dist > copy ) {
								dist = copy;
							}
							//zmemcpy(state->window + state->wnext, end - copy, dist);
							utils.arraySet(
								state.window,
								src,
								end - copy,
								dist,
								state.wnext
							);
							copy -= dist;
							if ( copy ) {
								//zmemcpy(state->window, end - copy, copy);
								utils.arraySet(
									state.window,
									src,
									end - copy,
									copy,
									0
								);
								state.wnext = copy;
								state.whave = state.wsize;
							} else {
								state.wnext += dist;
								if ( state.wnext === state.wsize ) {
									state.wnext = 0;
								}
								if ( state.whave < state.wsize ) {
									state.whave += dist;
								}
							}
						}
						return 0;
					}

					function inflate( strm, flush ) {
						var state;
						var input, output; // input/output buffers
						var next; /* next input INDEX */
						var put; /* next output INDEX */
						var have, left; /* available input and output */
						var hold; /* bit buffer */
						var bits; /* bits in bit buffer */
						var _in,
							_out; /* save starting available input and output */
						var copy; /* number of stored or match bytes to copy */
						var from; /* where to copy match bytes from */
						var from_source;
						var here = 0; /* current decoding table entry */
						var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
						//var last;                   /* parent table entry */
						var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
						var len; /* length to copy for repeats, bits to drop */
						var ret; /* return code */
						var hbuf = new utils.Buf8(
							4
						); /* buffer for gzip header crc calculation */
						var opts;

						var n; // temporary var for NEED_BITS

						var order =
							/* permutation of code lengths */
							[
								16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3,
								13, 2, 14, 1, 15,
							];

						if (
							! strm ||
							! strm.state ||
							! strm.output ||
							( ! strm.input && strm.avail_in !== 0 )
						) {
							return Z_STREAM_ERROR;
						}

						state = strm.state;
						if ( state.mode === TYPE ) {
							state.mode = TYPEDO;
						} /* skip check */

						//--- LOAD() ---
						put = strm.next_out;
						output = strm.output;
						left = strm.avail_out;
						next = strm.next_in;
						input = strm.input;
						have = strm.avail_in;
						hold = state.hold;
						bits = state.bits;
						//---

						_in = have;
						_out = left;
						ret = Z_OK;

						// goto emulation
						inf_leave: for (;;) {
							switch ( state.mode ) {
								case HEAD:
									if ( state.wrap === 0 ) {
										state.mode = TYPEDO;
										break;
									}
									//=== NEEDBITS(16);
									while ( bits < 16 ) {
										if ( have === 0 ) {
											break inf_leave;
										}
										have--;
										hold += input[ next++ ] << bits;
										bits += 8;
									}
									//===//
									if ( state.wrap & 2 && hold === 0x8b1f ) {
										/* gzip header */
										state.check = 0 /*crc32(0L, Z_NULL, 0)*/;
										//=== CRC2(state.check, hold);
										hbuf[ 0 ] = hold & 0xff;
										hbuf[ 1 ] = ( hold >>> 8 ) & 0xff;
										state.check = crc32(
											state.check,
											hbuf,
											2,
											0
										);
										//===//

										//=== INITBITS();
										hold = 0;
										bits = 0;
										//===//
										state.mode = FLAGS;
										break;
									}
									state.flags = 0; /* expect zlib header */
									if ( state.head ) {
										state.head.done = false;
									}
									if (
										! (
											state.wrap & 1
										) /* check if zlib header allowed */ ||
										( ( ( hold & 0xff ) /*BITS(8)*/ << 8 ) +
											( hold >> 8 ) ) %
											31
									) {
										strm.msg = 'incorrect header check';
										state.mode = BAD;
										break;
									}
									if (
										( hold & 0x0f ) /*BITS(4)*/ !==
										Z_DEFLATED
									) {
										strm.msg = 'unknown compression method';
										state.mode = BAD;
										break;
									}
									//--- DROPBITS(4) ---//
									hold >>>= 4;
									bits -= 4;
									//---//
									len = ( hold & 0x0f ) /*BITS(4)*/ + 8;
									if ( state.wbits === 0 ) {
										state.wbits = len;
									} else if ( len > state.wbits ) {
										strm.msg = 'invalid window size';
										state.mode = BAD;
										break;
									}
									state.dmax = 1 << len;
									//Tracev((stderr, "inflate:   zlib header ok\n"));
									strm.adler =
										state.check = 1 /*adler32(0L, Z_NULL, 0)*/;
									state.mode = hold & 0x200 ? DICTID : TYPE;
									//=== INITBITS();
									hold = 0;
									bits = 0;
									//===//
									break;
								case FLAGS:
									//=== NEEDBITS(16); */
									while ( bits < 16 ) {
										if ( have === 0 ) {
											break inf_leave;
										}
										have--;
										hold += input[ next++ ] << bits;
										bits += 8;
									}
									//===//
									state.flags = hold;
									if (
										( state.flags & 0xff ) !==
										Z_DEFLATED
									) {
										strm.msg = 'unknown compression method';
										state.mode = BAD;
										break;
									}
									if ( state.flags & 0xe000 ) {
										strm.msg = 'unknown header flags set';
										state.mode = BAD;
										break;
									}
									if ( state.head ) {
										state.head.text = ( hold >> 8 ) & 1;
									}
									if ( state.flags & 0x0200 ) {
										//=== CRC2(state.check, hold);
										hbuf[ 0 ] = hold & 0xff;
										hbuf[ 1 ] = ( hold >>> 8 ) & 0xff;
										state.check = crc32(
											state.check,
											hbuf,
											2,
											0
										);
										//===//
									}
									//=== INITBITS();
									hold = 0;
									bits = 0;
									//===//
									state.mode = TIME;
								/* falls through */
								case TIME:
									//=== NEEDBITS(32); */
									while ( bits < 32 ) {
										if ( have === 0 ) {
											break inf_leave;
										}
										have--;
										hold += input[ next++ ] << bits;
										bits += 8;
									}
									//===//
									if ( state.head ) {
										state.head.time = hold;
									}
									if ( state.flags & 0x0200 ) {
										//=== CRC4(state.check, hold)
										hbuf[ 0 ] = hold & 0xff;
										hbuf[ 1 ] = ( hold >>> 8 ) & 0xff;
										hbuf[ 2 ] = ( hold >>> 16 ) & 0xff;
										hbuf[ 3 ] = ( hold >>> 24 ) & 0xff;
										state.check = crc32(
											state.check,
											hbuf,
											4,
											0
										);
										//===
									}
									//=== INITBITS();
									hold = 0;
									bits = 0;
									//===//
									state.mode = OS;
								/* falls through */
								case OS:
									//=== NEEDBITS(16); */
									while ( bits < 16 ) {
										if ( have === 0 ) {
											break inf_leave;
										}
										have--;
										hold += input[ next++ ] << bits;
										bits += 8;
									}
									//===//
									if ( state.head ) {
										state.head.xflags = hold & 0xff;
										state.head.os = hold >> 8;
									}
									if ( state.flags & 0x0200 ) {
										//=== CRC2(state.check, hold);
										hbuf[ 0 ] = hold & 0xff;
										hbuf[ 1 ] = ( hold >>> 8 ) & 0xff;
										state.check = crc32(
											state.check,
											hbuf,
											2,
											0
										);
										//===//
									}
									//=== INITBITS();
									hold = 0;
									bits = 0;
									//===//
									state.mode = EXLEN;
								/* falls through */
								case EXLEN:
									if ( state.flags & 0x0400 ) {
										//=== NEEDBITS(16); */
										while ( bits < 16 ) {
											if ( have === 0 ) {
												break inf_leave;
											}
											have--;
											hold += input[ next++ ] << bits;
											bits += 8;
										}
										//===//
										state.length = hold;
										if ( state.head ) {
											state.head.extra_len = hold;
										}
										if ( state.flags & 0x0200 ) {
											//=== CRC2(state.check, hold);
											hbuf[ 0 ] = hold & 0xff;
											hbuf[ 1 ] = ( hold >>> 8 ) & 0xff;
											state.check = crc32(
												state.check,
												hbuf,
												2,
												0
											);
											//===//
										}
										//=== INITBITS();
										hold = 0;
										bits = 0;
										//===//
									} else if ( state.head ) {
										state.head.extra = null /*Z_NULL*/;
									}
									state.mode = EXTRA;
								/* falls through */
								case EXTRA:
									if ( state.flags & 0x0400 ) {
										copy = state.length;
										if ( copy > have ) {
											copy = have;
										}
										if ( copy ) {
											if ( state.head ) {
												len =
													state.head.extra_len -
													state.length;
												if ( ! state.head.extra ) {
													// Use untyped array for more convenient processing later
													state.head.extra =
														new Array(
															state.head.extra_len
														);
												}
												utils.arraySet(
													state.head.extra,
													input,
													next,
													// extra field is limited to 65536 bytes
													// - no need for additional size check
													copy,
													/*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
													len
												);
												//zmemcpy(state.head.extra + len, next,
												//        len + copy > state.head.extra_max ?
												//        state.head.extra_max - len : copy);
											}
											if ( state.flags & 0x0200 ) {
												state.check = crc32(
													state.check,
													input,
													copy,
													next
												);
											}
											have -= copy;
											next += copy;
											state.length -= copy;
										}
										if ( state.length ) {
											break inf_leave;
										}
									}
									state.length = 0;
									state.mode = NAME;
								/* falls through */
								case NAME:
									if ( state.flags & 0x0800 ) {
										if ( have === 0 ) {
											break inf_leave;
										}
										copy = 0;
										do {
											// TODO: 2 or 1 bytes?
											len = input[ next + copy++ ];
											/* use constant limit because in js we should not preallocate memory */
											if (
												state.head &&
												len &&
												state.length <
													65536 /*state.head.name_max*/
											) {
												state.head.name +=
													String.fromCharCode( len );
											}
										} while ( len && copy < have );

										if ( state.flags & 0x0200 ) {
											state.check = crc32(
												state.check,
												input,
												copy,
												next
											);
										}
										have -= copy;
										next += copy;
										if ( len ) {
											break inf_leave;
										}
									} else if ( state.head ) {
										state.head.name = null;
									}
									state.length = 0;
									state.mode = COMMENT;
								/* falls through */
								case COMMENT:
									if ( state.flags & 0x1000 ) {
										if ( have === 0 ) {
											break inf_leave;
										}
										copy = 0;
										do {
											len = input[ next + copy++ ];
											/* use constant limit because in js we should not preallocate memory */
											if (
												state.head &&
												len &&
												state.length <
													65536 /*state.head.comm_max*/
											) {
												state.head.comment +=
													String.fromCharCode( len );
											}
										} while ( len && copy < have );
										if ( state.flags & 0x0200 ) {
											state.check = crc32(
												state.check,
												input,
												copy,
												next
											);
										}
										have -= copy;
										next += copy;
										if ( len ) {
											break inf_leave;
										}
									} else if ( state.head ) {
										state.head.comment = null;
									}
									state.mode = HCRC;
								/* falls through */
								case HCRC:
									if ( state.flags & 0x0200 ) {
										//=== NEEDBITS(16); */
										while ( bits < 16 ) {
											if ( have === 0 ) {
												break inf_leave;
											}
											have--;
											hold += input[ next++ ] << bits;
											bits += 8;
										}
										//===//
										if (
											hold !==
											( state.check & 0xffff )
										) {
											strm.msg = 'header crc mismatch';
											state.mode = BAD;
											break;
										}
										//=== INITBITS();
										hold = 0;
										bits = 0;
										//===//
									}
									if ( state.head ) {
										state.head.hcrc =
											( state.flags >> 9 ) & 1;
										state.head.done = true;
									}
									strm.adler = state.check = 0;
									state.mode = TYPE;
									break;
								case DICTID:
									//=== NEEDBITS(32); */
									while ( bits < 32 ) {
										if ( have === 0 ) {
											break inf_leave;
										}
										have--;
										hold += input[ next++ ] << bits;
										bits += 8;
									}
									//===//
									strm.adler = state.check = zswap32( hold );
									//=== INITBITS();
									hold = 0;
									bits = 0;
									//===//
									state.mode = DICT;
								/* falls through */
								case DICT:
									if ( state.havedict === 0 ) {
										//--- RESTORE() ---
										strm.next_out = put;
										strm.avail_out = left;
										strm.next_in = next;
										strm.avail_in = have;
										state.hold = hold;
										state.bits = bits;
										//---
										return Z_NEED_DICT;
									}
									strm.adler =
										state.check = 1 /*adler32(0L, Z_NULL, 0)*/;
									state.mode = TYPE;
								/* falls through */
								case TYPE:
									if (
										flush === Z_BLOCK ||
										flush === Z_TREES
									) {
										break inf_leave;
									}
								/* falls through */
								case TYPEDO:
									if ( state.last ) {
										//--- BYTEBITS() ---//
										hold >>>= bits & 7;
										bits -= bits & 7;
										//---//
										state.mode = CHECK;
										break;
									}
									//=== NEEDBITS(3); */
									while ( bits < 3 ) {
										if ( have === 0 ) {
											break inf_leave;
										}
										have--;
										hold += input[ next++ ] << bits;
										bits += 8;
									}
									//===//
									state.last = hold & 0x01 /*BITS(1)*/;
									//--- DROPBITS(1) ---//
									hold >>>= 1;
									bits -= 1;
									//---//

									switch ( hold & 0x03 /*BITS(2)*/ ) {
										case 0 /* stored block */:
											//Tracev((stderr, "inflate:     stored block%s\n",
											//        state.last ? " (last)" : ""));
											state.mode = STORED;
											break;
										case 1 /* fixed block */:
											fixedtables( state );
											//Tracev((stderr, "inflate:     fixed codes block%s\n",
											//        state.last ? " (last)" : ""));
											state.mode =
												LEN_; /* decode codes */
											if ( flush === Z_TREES ) {
												//--- DROPBITS(2) ---//
												hold >>>= 2;
												bits -= 2;
												//---//
												break inf_leave;
											}
											break;
										case 2 /* dynamic block */:
											//Tracev((stderr, "inflate:     dynamic codes block%s\n",
											//        state.last ? " (last)" : ""));
											state.mode = TABLE;
											break;
										case 3:
											strm.msg = 'invalid block type';
											state.mode = BAD;
									}
									//--- DROPBITS(2) ---//
									hold >>>= 2;
									bits -= 2;
									//---//
									break;
								case STORED:
									//--- BYTEBITS() ---// /* go to byte boundary */
									hold >>>= bits & 7;
									bits -= bits & 7;
									//---//
									//=== NEEDBITS(32); */
									while ( bits < 32 ) {
										if ( have === 0 ) {
											break inf_leave;
										}
										have--;
										hold += input[ next++ ] << bits;
										bits += 8;
									}
									//===//
									if (
										( hold & 0xffff ) !==
										( ( hold >>> 16 ) ^ 0xffff )
									) {
										strm.msg =
											'invalid stored block lengths';
										state.mode = BAD;
										break;
									}
									state.length = hold & 0xffff;
									//Tracev((stderr, "inflate:       stored length %u\n",
									//        state.length));
									//=== INITBITS();
									hold = 0;
									bits = 0;
									//===//
									state.mode = COPY_;
									if ( flush === Z_TREES ) {
										break inf_leave;
									}
								/* falls through */
								case COPY_:
									state.mode = COPY;
								/* falls through */
								case COPY:
									copy = state.length;
									if ( copy ) {
										if ( copy > have ) {
											copy = have;
										}
										if ( copy > left ) {
											copy = left;
										}
										if ( copy === 0 ) {
											break inf_leave;
										}
										//--- zmemcpy(put, next, copy); ---
										utils.arraySet(
											output,
											input,
											next,
											copy,
											put
										);
										//---//
										have -= copy;
										next += copy;
										left -= copy;
										put += copy;
										state.length -= copy;
										break;
									}
									//Tracev((stderr, "inflate:       stored end\n"));
									state.mode = TYPE;
									break;
								case TABLE:
									//=== NEEDBITS(14); */
									while ( bits < 14 ) {
										if ( have === 0 ) {
											break inf_leave;
										}
										have--;
										hold += input[ next++ ] << bits;
										bits += 8;
									}
									//===//
									state.nlen =
										( hold & 0x1f ) /*BITS(5)*/ + 257;
									//--- DROPBITS(5) ---//
									hold >>>= 5;
									bits -= 5;
									//---//
									state.ndist =
										( hold & 0x1f ) /*BITS(5)*/ + 1;
									//--- DROPBITS(5) ---//
									hold >>>= 5;
									bits -= 5;
									//---//
									state.ncode =
										( hold & 0x0f ) /*BITS(4)*/ + 4;
									//--- DROPBITS(4) ---//
									hold >>>= 4;
									bits -= 4;
									//---//
									//#ifndef PKZIP_BUG_WORKAROUND
									if (
										state.nlen > 286 ||
										state.ndist > 30
									) {
										strm.msg =
											'too many length or distance symbols';
										state.mode = BAD;
										break;
									}
									//#endif
									//Tracev((stderr, "inflate:       table sizes ok\n"));
									state.have = 0;
									state.mode = LENLENS;
								/* falls through */
								case LENLENS:
									while ( state.have < state.ncode ) {
										//=== NEEDBITS(3);
										while ( bits < 3 ) {
											if ( have === 0 ) {
												break inf_leave;
											}
											have--;
											hold += input[ next++ ] << bits;
											bits += 8;
										}
										//===//
										state.lens[ order[ state.have++ ] ] =
											hold & 0x07; //BITS(3);
										//--- DROPBITS(3) ---//
										hold >>>= 3;
										bits -= 3;
										//---//
									}
									while ( state.have < 19 ) {
										state.lens[ order[ state.have++ ] ] = 0;
									}
									// We have separate tables & no pointers. 2 commented lines below not needed.
									//state.next = state.codes;
									//state.lencode = state.next;
									// Switch to use dynamic table
									state.lencode = state.lendyn;
									state.lenbits = 7;

									opts = { bits: state.lenbits };
									ret = inflate_table(
										CODES,
										state.lens,
										0,
										19,
										state.lencode,
										0,
										state.work,
										opts
									);
									state.lenbits = opts.bits;

									if ( ret ) {
										strm.msg = 'invalid code lengths set';
										state.mode = BAD;
										break;
									}
									//Tracev((stderr, "inflate:       code lengths ok\n"));
									state.have = 0;
									state.mode = CODELENS;
								/* falls through */
								case CODELENS:
									while (
										state.have <
										state.nlen + state.ndist
									) {
										for (;;) {
											here =
												state.lencode[
													hold &
														( ( 1 <<
															state.lenbits ) -
															1 )
												]; /*BITS(state.lenbits)*/
											here_bits = here >>> 24;
											here_op = ( here >>> 16 ) & 0xff;
											here_val = here & 0xffff;

											if ( here_bits <= bits ) {
												break;
											}
											//--- PULLBYTE() ---//
											if ( have === 0 ) {
												break inf_leave;
											}
											have--;
											hold += input[ next++ ] << bits;
											bits += 8;
											//---//
										}
										if ( here_val < 16 ) {
											//--- DROPBITS(here.bits) ---//
											hold >>>= here_bits;
											bits -= here_bits;
											//---//
											state.lens[ state.have++ ] =
												here_val;
										} else {
											if ( here_val === 16 ) {
												//=== NEEDBITS(here.bits + 2);
												n = here_bits + 2;
												while ( bits < n ) {
													if ( have === 0 ) {
														break inf_leave;
													}
													have--;
													hold +=
														input[ next++ ] << bits;
													bits += 8;
												}
												//===//
												//--- DROPBITS(here.bits) ---//
												hold >>>= here_bits;
												bits -= here_bits;
												//---//
												if ( state.have === 0 ) {
													strm.msg =
														'invalid bit length repeat';
													state.mode = BAD;
													break;
												}
												len =
													state.lens[
														state.have - 1
													];
												copy = 3 + ( hold & 0x03 ); //BITS(2);
												//--- DROPBITS(2) ---//
												hold >>>= 2;
												bits -= 2;
												//---//
											} else if ( here_val === 17 ) {
												//=== NEEDBITS(here.bits + 3);
												n = here_bits + 3;
												while ( bits < n ) {
													if ( have === 0 ) {
														break inf_leave;
													}
													have--;
													hold +=
														input[ next++ ] << bits;
													bits += 8;
												}
												//===//
												//--- DROPBITS(here.bits) ---//
												hold >>>= here_bits;
												bits -= here_bits;
												//---//
												len = 0;
												copy = 3 + ( hold & 0x07 ); //BITS(3);
												//--- DROPBITS(3) ---//
												hold >>>= 3;
												bits -= 3;
												//---//
											} else {
												//=== NEEDBITS(here.bits + 7);
												n = here_bits + 7;
												while ( bits < n ) {
													if ( have === 0 ) {
														break inf_leave;
													}
													have--;
													hold +=
														input[ next++ ] << bits;
													bits += 8;
												}
												//===//
												//--- DROPBITS(here.bits) ---//
												hold >>>= here_bits;
												bits -= here_bits;
												//---//
												len = 0;
												copy = 11 + ( hold & 0x7f ); //BITS(7);
												//--- DROPBITS(7) ---//
												hold >>>= 7;
												bits -= 7;
												//---//
											}
											if (
												state.have + copy >
												state.nlen + state.ndist
											) {
												strm.msg =
													'invalid bit length repeat';
												state.mode = BAD;
												break;
											}
											while ( copy-- ) {
												state.lens[ state.have++ ] =
													len;
											}
										}
									}

									/* handle error breaks in while */
									if ( state.mode === BAD ) {
										break;
									}

									/* check for end-of-block code (better have one) */
									if ( state.lens[ 256 ] === 0 ) {
										strm.msg =
											'invalid code -- missing end-of-block';
										state.mode = BAD;
										break;
									}

									/* build code tables -- note: do not change the lenbits or distbits
             values here (9 and 6) without reading the comments in inftrees.h
             concerning the ENOUGH constants, which depend on those values */
									state.lenbits = 9;

									opts = { bits: state.lenbits };
									ret = inflate_table(
										LENS,
										state.lens,
										0,
										state.nlen,
										state.lencode,
										0,
										state.work,
										opts
									);
									// We have separate tables & no pointers. 2 commented lines below not needed.
									// state.next_index = opts.table_index;
									state.lenbits = opts.bits;
									// state.lencode = state.next;

									if ( ret ) {
										strm.msg =
											'invalid literal/lengths set';
										state.mode = BAD;
										break;
									}

									state.distbits = 6;
									//state.distcode.copy(state.codes);
									// Switch to use dynamic table
									state.distcode = state.distdyn;
									opts = { bits: state.distbits };
									ret = inflate_table(
										DISTS,
										state.lens,
										state.nlen,
										state.ndist,
										state.distcode,
										0,
										state.work,
										opts
									);
									// We have separate tables & no pointers. 2 commented lines below not needed.
									// state.next_index = opts.table_index;
									state.distbits = opts.bits;
									// state.distcode = state.next;

									if ( ret ) {
										strm.msg = 'invalid distances set';
										state.mode = BAD;
										break;
									}
									//Tracev((stderr, 'inflate:       codes ok\n'));
									state.mode = LEN_;
									if ( flush === Z_TREES ) {
										break inf_leave;
									}
								/* falls through */
								case LEN_:
									state.mode = LEN;
								/* falls through */
								case LEN:
									if ( have >= 6 && left >= 258 ) {
										//--- RESTORE() ---
										strm.next_out = put;
										strm.avail_out = left;
										strm.next_in = next;
										strm.avail_in = have;
										state.hold = hold;
										state.bits = bits;
										//---
										inflate_fast( strm, _out );
										//--- LOAD() ---
										put = strm.next_out;
										output = strm.output;
										left = strm.avail_out;
										next = strm.next_in;
										input = strm.input;
										have = strm.avail_in;
										hold = state.hold;
										bits = state.bits;
										//---

										if ( state.mode === TYPE ) {
											state.back = -1;
										}
										break;
									}
									state.back = 0;
									for (;;) {
										here =
											state.lencode[
												hold &
													( ( 1 << state.lenbits ) -
														1 )
											]; /*BITS(state.lenbits)*/
										here_bits = here >>> 24;
										here_op = ( here >>> 16 ) & 0xff;
										here_val = here & 0xffff;

										if ( here_bits <= bits ) {
											break;
										}
										//--- PULLBYTE() ---//
										if ( have === 0 ) {
											break inf_leave;
										}
										have--;
										hold += input[ next++ ] << bits;
										bits += 8;
										//---//
									}
									if ( here_op && ( here_op & 0xf0 ) === 0 ) {
										last_bits = here_bits;
										last_op = here_op;
										last_val = here_val;
										for (;;) {
											here =
												state.lencode[
													last_val +
														( ( hold &
															( ( 1 <<
																( last_bits +
																	last_op ) ) -
																1 ) ) /*BITS(last.bits + last.op)*/ >>
															last_bits )
												];
											here_bits = here >>> 24;
											here_op = ( here >>> 16 ) & 0xff;
											here_val = here & 0xffff;

											if (
												last_bits + here_bits <=
												bits
											) {
												break;
											}
											//--- PULLBYTE() ---//
											if ( have === 0 ) {
												break inf_leave;
											}
											have--;
											hold += input[ next++ ] << bits;
											bits += 8;
											//---//
										}
										//--- DROPBITS(last.bits) ---//
										hold >>>= last_bits;
										bits -= last_bits;
										//---//
										state.back += last_bits;
									}
									//--- DROPBITS(here.bits) ---//
									hold >>>= here_bits;
									bits -= here_bits;
									//---//
									state.back += here_bits;
									state.length = here_val;
									if ( here_op === 0 ) {
										//Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
										//        "inflate:         literal '%c'\n" :
										//        "inflate:         literal 0x%02x\n", here.val));
										state.mode = LIT;
										break;
									}
									if ( here_op & 32 ) {
										//Tracevv((stderr, "inflate:         end of block\n"));
										state.back = -1;
										state.mode = TYPE;
										break;
									}
									if ( here_op & 64 ) {
										strm.msg =
											'invalid literal/length code';
										state.mode = BAD;
										break;
									}
									state.extra = here_op & 15;
									state.mode = LENEXT;
								/* falls through */
								case LENEXT:
									if ( state.extra ) {
										//=== NEEDBITS(state.extra);
										n = state.extra;
										while ( bits < n ) {
											if ( have === 0 ) {
												break inf_leave;
											}
											have--;
											hold += input[ next++ ] << bits;
											bits += 8;
										}
										//===//
										state.length +=
											hold &
											( ( 1 << state.extra ) -
												1 ) /*BITS(state.extra)*/;
										//--- DROPBITS(state.extra) ---//
										hold >>>= state.extra;
										bits -= state.extra;
										//---//
										state.back += state.extra;
									}
									//Tracevv((stderr, "inflate:         length %u\n", state.length));
									state.was = state.length;
									state.mode = DIST;
								/* falls through */
								case DIST:
									for (;;) {
										here =
											state.distcode[
												hold &
													( ( 1 << state.distbits ) -
														1 )
											]; /*BITS(state.distbits)*/
										here_bits = here >>> 24;
										here_op = ( here >>> 16 ) & 0xff;
										here_val = here & 0xffff;

										if ( here_bits <= bits ) {
											break;
										}
										//--- PULLBYTE() ---//
										if ( have === 0 ) {
											break inf_leave;
										}
										have--;
										hold += input[ next++ ] << bits;
										bits += 8;
										//---//
									}
									if ( ( here_op & 0xf0 ) === 0 ) {
										last_bits = here_bits;
										last_op = here_op;
										last_val = here_val;
										for (;;) {
											here =
												state.distcode[
													last_val +
														( ( hold &
															( ( 1 <<
																( last_bits +
																	last_op ) ) -
																1 ) ) /*BITS(last.bits + last.op)*/ >>
															last_bits )
												];
											here_bits = here >>> 24;
											here_op = ( here >>> 16 ) & 0xff;
											here_val = here & 0xffff;

											if (
												last_bits + here_bits <=
												bits
											) {
												break;
											}
											//--- PULLBYTE() ---//
											if ( have === 0 ) {
												break inf_leave;
											}
											have--;
											hold += input[ next++ ] << bits;
											bits += 8;
											//---//
										}
										//--- DROPBITS(last.bits) ---//
										hold >>>= last_bits;
										bits -= last_bits;
										//---//
										state.back += last_bits;
									}
									//--- DROPBITS(here.bits) ---//
									hold >>>= here_bits;
									bits -= here_bits;
									//---//
									state.back += here_bits;
									if ( here_op & 64 ) {
										strm.msg = 'invalid distance code';
										state.mode = BAD;
										break;
									}
									state.offset = here_val;
									state.extra = here_op & 15;
									state.mode = DISTEXT;
								/* falls through */
								case DISTEXT:
									if ( state.extra ) {
										//=== NEEDBITS(state.extra);
										n = state.extra;
										while ( bits < n ) {
											if ( have === 0 ) {
												break inf_leave;
											}
											have--;
											hold += input[ next++ ] << bits;
											bits += 8;
										}
										//===//
										state.offset +=
											hold &
											( ( 1 << state.extra ) -
												1 ) /*BITS(state.extra)*/;
										//--- DROPBITS(state.extra) ---//
										hold >>>= state.extra;
										bits -= state.extra;
										//---//
										state.back += state.extra;
									}
									//#ifdef INFLATE_STRICT
									if ( state.offset > state.dmax ) {
										strm.msg =
											'invalid distance too far back';
										state.mode = BAD;
										break;
									}
									//#endif
									//Tracevv((stderr, "inflate:         distance %u\n", state.offset));
									state.mode = MATCH;
								/* falls through */
								case MATCH:
									if ( left === 0 ) {
										break inf_leave;
									}
									copy = _out - left;
									if ( state.offset > copy ) {
										/* copy from window */
										copy = state.offset - copy;
										if ( copy > state.whave ) {
											if ( state.sane ) {
												strm.msg =
													'invalid distance too far back';
												state.mode = BAD;
												break;
											}
											// (!) This block is disabled in zlib defaults,
											// don't enable it for binary compatibility
											//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
											//          Trace((stderr, "inflate.c too far\n"));
											//          copy -= state.whave;
											//          if (copy > state.length) { copy = state.length; }
											//          if (copy > left) { copy = left; }
											//          left -= copy;
											//          state.length -= copy;
											//          do {
											//            output[put++] = 0;
											//          } while (--copy);
											//          if (state.length === 0) { state.mode = LEN; }
											//          break;
											//#endif
										}
										if ( copy > state.wnext ) {
											copy -= state.wnext;
											from = state.wsize - copy;
										} else {
											from = state.wnext - copy;
										}
										if ( copy > state.length ) {
											copy = state.length;
										}
										from_source = state.window;
									} else {
										/* copy from output */
										from_source = output;
										from = put - state.offset;
										copy = state.length;
									}
									if ( copy > left ) {
										copy = left;
									}
									left -= copy;
									state.length -= copy;
									do {
										output[ put++ ] = from_source[ from++ ];
									} while ( --copy );
									if ( state.length === 0 ) {
										state.mode = LEN;
									}
									break;
								case LIT:
									if ( left === 0 ) {
										break inf_leave;
									}
									output[ put++ ] = state.length;
									left--;
									state.mode = LEN;
									break;
								case CHECK:
									if ( state.wrap ) {
										//=== NEEDBITS(32);
										while ( bits < 32 ) {
											if ( have === 0 ) {
												break inf_leave;
											}
											have--;
											// Use '|' instead of '+' to make sure that result is signed
											hold |= input[ next++ ] << bits;
											bits += 8;
										}
										//===//
										_out -= left;
										strm.total_out += _out;
										state.total += _out;
										if ( _out ) {
											strm.adler = state.check =
												/*UPDATE(state.check, put - _out, _out);*/
												state.flags
													? crc32(
															state.check,
															output,
															_out,
															put - _out
													  )
													: adler32(
															state.check,
															output,
															_out,
															put - _out
													  );
										}
										_out = left;
										// NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
										if (
											( state.flags
												? hold
												: zswap32( hold ) ) !==
											state.check
										) {
											strm.msg = 'incorrect data check';
											state.mode = BAD;
											break;
										}
										//=== INITBITS();
										hold = 0;
										bits = 0;
										//===//
										//Tracev((stderr, "inflate:   check matches trailer\n"));
									}
									state.mode = LENGTH;
								/* falls through */
								case LENGTH:
									if ( state.wrap && state.flags ) {
										//=== NEEDBITS(32);
										while ( bits < 32 ) {
											if ( have === 0 ) {
												break inf_leave;
											}
											have--;
											hold += input[ next++ ] << bits;
											bits += 8;
										}
										//===//
										if (
											hold !==
											( state.total & 0xffffffff )
										) {
											strm.msg = 'incorrect length check';
											state.mode = BAD;
											break;
										}
										//=== INITBITS();
										hold = 0;
										bits = 0;
										//===//
										//Tracev((stderr, "inflate:   length matches trailer\n"));
									}
									state.mode = DONE;
								/* falls through */
								case DONE:
									ret = Z_STREAM_END;
									break inf_leave;
								case BAD:
									ret = Z_DATA_ERROR;
									break inf_leave;
								case MEM:
									return Z_MEM_ERROR;
								case SYNC:
								/* falls through */
								default:
									return Z_STREAM_ERROR;
							}
						}

						// inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

						/*
       Return from inflate(), updating the total counts and the check value.
       If there was no progress during the inflate() call, return a buffer
       error.  Call updatewindow() to create and/or update the window state.
       Note: a memory error from inflate() is non-recoverable.
     */

						//--- RESTORE() ---
						strm.next_out = put;
						strm.avail_out = left;
						strm.next_in = next;
						strm.avail_in = have;
						state.hold = hold;
						state.bits = bits;
						//---

						if (
							state.wsize ||
							( _out !== strm.avail_out &&
								state.mode < BAD &&
								( state.mode < CHECK || flush !== Z_FINISH ) )
						) {
							if (
								updatewindow(
									strm,
									strm.output,
									strm.next_out,
									_out - strm.avail_out
								)
							) {
								state.mode = MEM;
								return Z_MEM_ERROR;
							}
						}
						_in -= strm.avail_in;
						_out -= strm.avail_out;
						strm.total_in += _in;
						strm.total_out += _out;
						state.total += _out;
						if ( state.wrap && _out ) {
							strm.adler = state.check =
								/*UPDATE(state.check, strm.next_out - _out, _out);*/
								state.flags
									? crc32(
											state.check,
											output,
											_out,
											strm.next_out - _out
									  )
									: adler32(
											state.check,
											output,
											_out,
											strm.next_out - _out
									  );
						}
						strm.data_type =
							state.bits +
							( state.last ? 64 : 0 ) +
							( state.mode === TYPE ? 128 : 0 ) +
							( state.mode === LEN_ || state.mode === COPY_
								? 256
								: 0 );
						if (
							( ( _in === 0 && _out === 0 ) ||
								flush === Z_FINISH ) &&
							ret === Z_OK
						) {
							ret = Z_BUF_ERROR;
						}
						return ret;
					}

					function inflateEnd( strm ) {
						if (
							! strm ||
							! strm.state /*|| strm->zfree == (free_func)0*/
						) {
							return Z_STREAM_ERROR;
						}

						var state = strm.state;
						if ( state.window ) {
							state.window = null;
						}
						strm.state = null;
						return Z_OK;
					}

					function inflateGetHeader( strm, head ) {
						var state;

						/* check state */
						if ( ! strm || ! strm.state ) {
							return Z_STREAM_ERROR;
						}
						state = strm.state;
						if ( ( state.wrap & 2 ) === 0 ) {
							return Z_STREAM_ERROR;
						}

						/* save header structure */
						state.head = head;
						head.done = false;
						return Z_OK;
					}

					function inflateSetDictionary( strm, dictionary ) {
						var dictLength = dictionary.length;

						var state;
						var dictid;
						var ret;

						/* check state */
						if (
							! strm /* == Z_NULL */ ||
							! strm.state /* == Z_NULL */
						) {
							return Z_STREAM_ERROR;
						}
						state = strm.state;

						if ( state.wrap !== 0 && state.mode !== DICT ) {
							return Z_STREAM_ERROR;
						}

						/* check for correct dictionary identifier */
						if ( state.mode === DICT ) {
							dictid = 1; /* adler32(0, null, 0)*/
							/* dictid = adler32(dictid, dictionary, dictLength); */
							dictid = adler32(
								dictid,
								dictionary,
								dictLength,
								0
							);
							if ( dictid !== state.check ) {
								return Z_DATA_ERROR;
							}
						}
						/* copy dictionary to window using updatewindow(), which will amend the
     existing dictionary if appropriate */
						ret = updatewindow(
							strm,
							dictionary,
							dictLength,
							dictLength
						);
						if ( ret ) {
							state.mode = MEM;
							return Z_MEM_ERROR;
						}
						state.havedict = 1;
						// Tracev((stderr, "inflate:   dictionary set\n"));
						return Z_OK;
					}

					exports.inflateReset = inflateReset;
					exports.inflateReset2 = inflateReset2;
					exports.inflateResetKeep = inflateResetKeep;
					exports.inflateInit = inflateInit;
					exports.inflateInit2 = inflateInit2;
					exports.inflate = inflate;
					exports.inflateEnd = inflateEnd;
					exports.inflateGetHeader = inflateGetHeader;
					exports.inflateSetDictionary = inflateSetDictionary;
					exports.inflateInfo = 'pako inflate (from Nodeca project)';

					/* Not implemented
  exports.inflateCopy = inflateCopy;
  exports.inflateGetDictionary = inflateGetDictionary;
  exports.inflateMark = inflateMark;
  exports.inflatePrime = inflatePrime;
  exports.inflateSync = inflateSync;
  exports.inflateSyncPoint = inflateSyncPoint;
  exports.inflateUndermine = inflateUndermine;
  */
				},
				{
					'../utils/common': 1,
					'./adler32': 3,
					'./crc32': 5,
					'./inffast': 7,
					'./inftrees': 9,
				},
			],
			9: [
				function ( require, module, exports ) {
					'use strict';

					// (C) 1995-2013 Jean-loup Gailly and Mark Adler
					// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
					//
					// This software is provided 'as-is', without any express or implied
					// warranty. In no event will the authors be held liable for any damages
					// arising from the use of this software.
					//
					// Permission is granted to anyone to use this software for any purpose,
					// including commercial applications, and to alter it and redistribute it
					// freely, subject to the following restrictions:
					//
					// 1. The origin of this software must not be misrepresented; you must not
					//   claim that you wrote the original software. If you use this software
					//   in a product, an acknowledgment in the product documentation would be
					//   appreciated but is not required.
					// 2. Altered source versions must be plainly marked as such, and must not be
					//   misrepresented as being the original software.
					// 3. This notice may not be removed or altered from any source distribution.

					var utils = require( '../utils/common' );

					var MAXBITS = 15;
					var ENOUGH_LENS = 852;
					var ENOUGH_DISTS = 592;
					//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

					var CODES = 0;
					var LENS = 1;
					var DISTS = 2;

					var lbase = [
						/* Length codes 257..285 base */ 3, 4, 5, 6, 7, 8, 9,
						10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67,
						83, 99, 115, 131, 163, 195, 227, 258, 0, 0,
					];

					var lext = [
						/* Length codes 257..285 extra */ 16, 16, 16, 16, 16,
						16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19,
						19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78,
					];

					var dbase = [
						/* Distance codes 0..29 base */ 1, 2, 3, 4, 5, 7, 9, 13,
						17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769,
						1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385,
						24577, 0, 0,
					];

					var dext = [
						/* Distance codes 0..29 extra */ 16, 16, 16, 16, 17, 17,
						18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24,
						25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64,
					];

					module.exports = function inflate_table(
						type,
						lens,
						lens_index,
						codes,
						table,
						table_index,
						work,
						opts
					) {
						var bits = opts.bits;
						//here = opts.here; /* table entry for duplication */

						var len = 0; /* a code's length in bits */
						var sym = 0; /* index of code symbols */
						var min = 0,
							max = 0; /* minimum and maximum code lengths */
						var root = 0; /* number of index bits for root table */
						var curr = 0; /* number of index bits for current table */
						var drop = 0; /* code bits to drop for sub-table */
						var left = 0; /* number of prefix codes available */
						var used = 0; /* code entries in table used */
						var huff = 0; /* Huffman code */
						var incr; /* for incrementing code, index */
						var fill; /* index for replicating entries */
						var low; /* low bits for current root entry */
						var mask; /* mask for low root bits */
						var next; /* next available space in table */
						var base = null; /* base value table to use */
						var base_index = 0;
						//  var shoextra;    /* extra bits table to use */
						var end; /* use base and extra for symbol > end */
						var count = new utils.Buf16( MAXBITS + 1 ); //[MAXBITS+1];    /* number of codes of each length */
						var offs = new utils.Buf16( MAXBITS + 1 ); //[MAXBITS+1];     /* offsets in table for each length */
						var extra = null;
						var extra_index = 0;

						var here_bits, here_op, here_val;

						/*
     Process a set of code lengths to create a canonical Huffman code.  The
     code lengths are lens[0..codes-1].  Each length corresponds to the
     symbols 0..codes-1.  The Huffman code is generated by first sorting the
     symbols by length from short to long, and retaining the symbol order
     for codes with equal lengths.  Then the code starts with all zero bits
     for the first code of the shortest length, and the codes are integer
     increments for the same length, and zeros are appended as the length
     increases.  For the deflate format, these bits are stored backwards
     from their more natural integer increment ordering, and so when the
     decoding tables are built in the large loop below, the integer codes
     are incremented backwards.

     This routine assumes, but does not check, that all of the entries in
     lens[] are in the range 0..MAXBITS.  The caller must assure this.
     1..MAXBITS is interpreted as that code length.  zero means that that
     symbol does not occur in this code.

     The codes are sorted by computing a count of codes for each length,
     creating from that a table of starting indices for each length in the
     sorted table, and then entering the symbols in order in the sorted
     table.  The sorted table is work[], with that space being provided by
     the caller.

     The length counts are used for other purposes as well, i.e. finding
     the minimum and maximum length codes, determining if there are any
     codes at all, checking for a valid set of lengths, and looking ahead
     at length counts to determine sub-table sizes when building the
     decoding tables.
     */

						/* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
						for ( len = 0; len <= MAXBITS; len++ ) {
							count[ len ] = 0;
						}
						for ( sym = 0; sym < codes; sym++ ) {
							count[ lens[ lens_index + sym ] ]++;
						}

						/* bound code lengths, force root to be within code lengths */
						root = bits;
						for ( max = MAXBITS; max >= 1; max-- ) {
							if ( count[ max ] !== 0 ) {
								break;
							}
						}
						if ( root > max ) {
							root = max;
						}
						if ( max === 0 ) {
							/* no symbols to code at all */
							//table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
							//table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
							//table.val[opts.table_index++] = 0;   //here.val = (var short)0;
							table[ table_index++ ] =
								( 1 << 24 ) | ( 64 << 16 ) | 0;

							//table.op[opts.table_index] = 64;
							//table.bits[opts.table_index] = 1;
							//table.val[opts.table_index++] = 0;
							table[ table_index++ ] =
								( 1 << 24 ) | ( 64 << 16 ) | 0;

							opts.bits = 1;
							return 0; /* no symbols, but wait for decoding to report error */
						}
						for ( min = 1; min < max; min++ ) {
							if ( count[ min ] !== 0 ) {
								break;
							}
						}
						if ( root < min ) {
							root = min;
						}

						/* check for an over-subscribed or incomplete set of lengths */
						left = 1;
						for ( len = 1; len <= MAXBITS; len++ ) {
							left <<= 1;
							left -= count[ len ];
							if ( left < 0 ) {
								return -1;
							} /* over-subscribed */
						}
						if ( left > 0 && ( type === CODES || max !== 1 ) ) {
							return -1; /* incomplete set */
						}

						/* generate offsets into symbol table for each length for sorting */
						offs[ 1 ] = 0;
						for ( len = 1; len < MAXBITS; len++ ) {
							offs[ len + 1 ] = offs[ len ] + count[ len ];
						}

						/* sort symbols by length, by symbol order within each length */
						for ( sym = 0; sym < codes; sym++ ) {
							if ( lens[ lens_index + sym ] !== 0 ) {
								work[ offs[ lens[ lens_index + sym ] ]++ ] =
									sym;
							}
						}

						/*
     Create and fill in decoding tables.  In this loop, the table being
     filled is at next and has curr index bits.  The code being used is huff
     with length len.  That code is converted to an index by dropping drop
     bits off of the bottom.  For codes where len is less than drop + curr,
     those top drop + curr - len bits are incremented through all values to
     fill the table with replicated entries.

     root is the number of index bits for the root table.  When len exceeds
     root, sub-tables are created pointed to by the root entry with an index
     of the low root bits of huff.  This is saved in low to check for when a
     new sub-table should be started.  drop is zero when the root table is
     being filled, and drop is root when sub-tables are being filled.

     When a new sub-table is needed, it is necessary to look ahead in the
     code lengths to determine what size sub-table is needed.  The length
     counts are used for this, and so count[] is decremented as codes are
     entered in the tables.

     used keeps track of how many table entries have been allocated from the
     provided *table space.  It is checked for LENS and DIST tables against
     the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
     the initial root table size constants.  See the comments in inftrees.h
     for more information.

     sym increments through all symbols, and the loop terminates when
     all codes of length max, i.e. all codes, have been processed.  This
     routine permits incomplete codes, so another loop after this one fills
     in the rest of the decoding tables with invalid code markers.
     */

						/* set up for code type */
						// poor man optimization - use if-else instead of switch,
						// to avoid deopts in old v8
						if ( type === CODES ) {
							base = extra = work; /* dummy value--not used */
							end = 19;
						} else if ( type === LENS ) {
							base = lbase;
							base_index -= 257;
							extra = lext;
							extra_index -= 257;
							end = 256;
						} else {
							/* DISTS */
							base = dbase;
							extra = dext;
							end = -1;
						}

						/* initialize opts for loop */
						huff = 0; /* starting code */
						sym = 0; /* starting code symbol */
						len = min; /* starting code length */
						next = table_index; /* current table to fill in */
						curr = root; /* current table index bits */
						drop = 0; /* current bits to drop from code for index */
						low = -1; /* trigger new sub-table when len > root */
						used = 1 << root; /* use root table entries */
						mask = used - 1; /* mask for comparing low */

						/* check available table space */
						if (
							( type === LENS && used > ENOUGH_LENS ) ||
							( type === DISTS && used > ENOUGH_DISTS )
						) {
							return 1;
						}

						/* process all codes and make table entries */
						for (;;) {
							/* create table entry */
							here_bits = len - drop;
							if ( work[ sym ] < end ) {
								here_op = 0;
								here_val = work[ sym ];
							} else if ( work[ sym ] > end ) {
								here_op = extra[ extra_index + work[ sym ] ];
								here_val = base[ base_index + work[ sym ] ];
							} else {
								here_op = 32 + 64; /* end of block */
								here_val = 0;
							}

							/* replicate for those indices with low len bits equal to huff */
							incr = 1 << ( len - drop );
							fill = 1 << curr;
							min = fill; /* save offset to next table */
							do {
								fill -= incr;
								table[ next + ( huff >> drop ) + fill ] =
									( here_bits << 24 ) |
									( here_op << 16 ) |
									here_val |
									0;
							} while ( fill !== 0 );

							/* backwards increment the len-bit code huff */
							incr = 1 << ( len - 1 );
							while ( huff & incr ) {
								incr >>= 1;
							}
							if ( incr !== 0 ) {
								huff &= incr - 1;
								huff += incr;
							} else {
								huff = 0;
							}

							/* go to next symbol, update count, len */
							sym++;
							if ( --count[ len ] === 0 ) {
								if ( len === max ) {
									break;
								}
								len = lens[ lens_index + work[ sym ] ];
							}

							/* create new sub-table if needed */
							if ( len > root && ( huff & mask ) !== low ) {
								/* if first time, transition to sub-tables */
								if ( drop === 0 ) {
									drop = root;
								}

								/* increment past last table */
								next += min; /* here min is 1 << curr */

								/* determine length of next table */
								curr = len - drop;
								left = 1 << curr;
								while ( curr + drop < max ) {
									left -= count[ curr + drop ];
									if ( left <= 0 ) {
										break;
									}
									curr++;
									left <<= 1;
								}

								/* check for enough space */
								used += 1 << curr;
								if (
									( type === LENS && used > ENOUGH_LENS ) ||
									( type === DISTS && used > ENOUGH_DISTS )
								) {
									return 1;
								}

								/* point entry in root table to sub-table */
								low = huff & mask;
								/*table.op[low] = curr;
        table.bits[low] = root;
        table.val[low] = next - opts.table_index;*/
								table[ low ] =
									( root << 24 ) |
									( curr << 16 ) |
									( next - table_index ) |
									0;
							}
						}

						/* fill in remaining table entry if code is incomplete (guaranteed to have
     at most one remaining entry, since if the code is incomplete, the
     maximum code length that was allowed to get this far is one bit) */
						if ( huff !== 0 ) {
							//table.op[next + huff] = 64;            /* invalid code marker */
							//table.bits[next + huff] = len - drop;
							//table.val[next + huff] = 0;
							table[ next + huff ] =
								( ( len - drop ) << 24 ) | ( 64 << 16 ) | 0;
						}

						/* set return parameters */
						//opts.table_index += used;
						opts.bits = root;
						return 0;
					};
				},
				{ '../utils/common': 1 },
			],
			10: [
				function ( require, module, exports ) {
					'use strict';

					// (C) 1995-2013 Jean-loup Gailly and Mark Adler
					// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
					//
					// This software is provided 'as-is', without any express or implied
					// warranty. In no event will the authors be held liable for any damages
					// arising from the use of this software.
					//
					// Permission is granted to anyone to use this software for any purpose,
					// including commercial applications, and to alter it and redistribute it
					// freely, subject to the following restrictions:
					//
					// 1. The origin of this software must not be misrepresented; you must not
					//   claim that you wrote the original software. If you use this software
					//   in a product, an acknowledgment in the product documentation would be
					//   appreciated but is not required.
					// 2. Altered source versions must be plainly marked as such, and must not be
					//   misrepresented as being the original software.
					// 3. This notice may not be removed or altered from any source distribution.

					module.exports = {
						2: 'need dictionary' /* Z_NEED_DICT       2  */,
						1: 'stream end' /* Z_STREAM_END      1  */,
						0: '' /* Z_OK              0  */,
						'-1': 'file error' /* Z_ERRNO         (-1) */,
						'-2': 'stream error' /* Z_STREAM_ERROR  (-2) */,
						'-3': 'data error' /* Z_DATA_ERROR    (-3) */,
						'-4': 'insufficient memory' /* Z_MEM_ERROR     (-4) */,
						'-5': 'buffer error' /* Z_BUF_ERROR     (-5) */,
						'-6': 'incompatible version' /* Z_VERSION_ERROR (-6) */,
					};
				},
				{},
			],
			11: [
				function ( require, module, exports ) {
					'use strict';

					// (C) 1995-2013 Jean-loup Gailly and Mark Adler
					// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
					//
					// This software is provided 'as-is', without any express or implied
					// warranty. In no event will the authors be held liable for any damages
					// arising from the use of this software.
					//
					// Permission is granted to anyone to use this software for any purpose,
					// including commercial applications, and to alter it and redistribute it
					// freely, subject to the following restrictions:
					//
					// 1. The origin of this software must not be misrepresented; you must not
					//   claim that you wrote the original software. If you use this software
					//   in a product, an acknowledgment in the product documentation would be
					//   appreciated but is not required.
					// 2. Altered source versions must be plainly marked as such, and must not be
					//   misrepresented as being the original software.
					// 3. This notice may not be removed or altered from any source distribution.

					function ZStream() {
						/* next input byte */
						this.input = null; // JS specific, because we have no pointers
						this.next_in = 0;
						/* number of bytes available at input */
						this.avail_in = 0;
						/* total number of input bytes read so far */
						this.total_in = 0;
						/* next output byte should be put there */
						this.output = null; // JS specific, because we have no pointers
						this.next_out = 0;
						/* remaining free space at output */
						this.avail_out = 0;
						/* total number of bytes output so far */
						this.total_out = 0;
						/* last error message, NULL if no error */
						this.msg = '' /*Z_NULL*/;
						/* not visible by applications */
						this.state = null;
						/* best guess about the data type: binary or text */
						this.data_type = 2 /*Z_UNKNOWN*/;
						/* adler32 value of the uncompressed data */
						this.adler = 0;
					}

					module.exports = ZStream;
				},
				{},
			],
			'/lib/inflate.js': [
				function ( require, module, exports ) {
					'use strict';

					var zlib_inflate = require( './zlib/inflate' );
					var utils = require( './utils/common' );
					var strings = require( './utils/strings' );
					var c = require( './zlib/constants' );
					var msg = require( './zlib/messages' );
					var ZStream = require( './zlib/zstream' );
					var GZheader = require( './zlib/gzheader' );

					var toString = Object.prototype.toString;

					/**
					 * class Inflate
					 *
					 * Generic JS-style wrapper for zlib calls. If you don't need
					 * streaming behaviour - use more simple functions: [[inflate]]
					 * and [[inflateRaw]].
					 **/

					/* internal
					 * inflate.chunks -> Array
					 *
					 * Chunks of output data, if [[Inflate#onData]] not overridden.
					 **/

					/**
					 * Inflate.result -> Uint8Array|Array|String
					 *
					 * Uncompressed result, generated by default [[Inflate#onData]]
					 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
					 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
					 * push a chunk with explicit flush (call [[Inflate#push]] with
					 * `Z_SYNC_FLUSH` param).
					 **/

					/**
					 * Inflate.err -> Number
					 *
					 * Error code after inflate finished. 0 (Z_OK) on success.
					 * Should be checked if broken data possible.
					 **/

					/**
					 * Inflate.msg -> String
					 *
					 * Error message, if [[Inflate.err]] != 0
					 **/

					/**
					 * new Inflate(options)
					 * - options (Object): zlib inflate options.
					 *
					 * Creates new inflator instance with specified params. Throws exception
					 * on bad params. Supported options:
					 *
					 * - `windowBits`
					 * - `dictionary`
					 *
					 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
					 * for more information on these.
					 *
					 * Additional options, for internal needs:
					 *
					 * - `chunkSize` - size of generated data chunks (16K by default)
					 * - `raw` (Boolean) - do raw inflate
					 * - `to` (String) - if equal to 'string', then result will be converted
					 *   from utf8 to utf16 (javascript) string. When string output requested,
					 *   chunk length can differ from `chunkSize`, depending on content.
					 *
					 * By default, when no options set, autodetect deflate/gzip data format via
					 * wrapper header.
					 *
					 * ##### Example:
					 *
					 * ```javascript
					 * var pako = require('pako')
					 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
					 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
					 *
					 * var inflate = new pako.Inflate({ level: 3});
					 *
					 * inflate.push(chunk1, false);
					 * inflate.push(chunk2, true);  // true -> last chunk
					 *
					 * if (inflate.err) { throw new Error(inflate.err); }
					 *
					 * console.log(inflate.result);
					 * ```
					 **/
					function Inflate( options ) {
						if ( ! ( this instanceof Inflate ) )
							return new Inflate( options );

						this.options = utils.assign(
							{
								chunkSize: 16384,
								windowBits: 0,
								to: '',
							},
							options || {}
						);

						var opt = this.options;

						// Force window size for `raw` data, if not set directly,
						// because we have no header for autodetect.
						if (
							opt.raw &&
							opt.windowBits >= 0 &&
							opt.windowBits < 16
						) {
							opt.windowBits = -opt.windowBits;
							if ( opt.windowBits === 0 ) {
								opt.windowBits = -15;
							}
						}

						// If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
						if (
							opt.windowBits >= 0 &&
							opt.windowBits < 16 &&
							! ( options && options.windowBits )
						) {
							opt.windowBits += 32;
						}

						// Gzip header has no info about windows size, we can do autodetect only
						// for deflate. So, if window size not set, force it to max when gzip possible
						if ( opt.windowBits > 15 && opt.windowBits < 48 ) {
							// bit 3 (16) -> gzipped data
							// bit 4 (32) -> autodetect gzip/deflate
							if ( ( opt.windowBits & 15 ) === 0 ) {
								opt.windowBits |= 15;
							}
						}

						this.err = 0; // error code, if happens (0 = Z_OK)
						this.msg = ''; // error message
						this.ended = false; // used to avoid multiple onEnd() calls
						this.chunks = []; // chunks of compressed data

						this.strm = new ZStream();
						this.strm.avail_out = 0;

						var status = zlib_inflate.inflateInit2(
							this.strm,
							opt.windowBits
						);

						if ( status !== c.Z_OK ) {
							throw new Error( msg[ status ] );
						}

						this.header = new GZheader();

						zlib_inflate.inflateGetHeader( this.strm, this.header );

						// Setup dictionary
						if ( opt.dictionary ) {
							// Convert data if needed
							if ( typeof opt.dictionary === 'string' ) {
								opt.dictionary = strings.string2buf(
									opt.dictionary
								);
							} else if (
								toString.call( opt.dictionary ) ===
								'[object ArrayBuffer]'
							) {
								opt.dictionary = new Uint8Array(
									opt.dictionary
								);
							}
							if ( opt.raw ) {
								//In raw mode we need to set the dictionary early
								status = zlib_inflate.inflateSetDictionary(
									this.strm,
									opt.dictionary
								);
								if ( status !== c.Z_OK ) {
									throw new Error( msg[ status ] );
								}
							}
						}
					}

					/**
					 * Inflate#push(data[, mode]) -> Boolean
					 * - data (Uint8Array|Array|ArrayBuffer|String): input data
					 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
					 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
					 *
					 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
					 * new output chunks. Returns `true` on success. The last data block must have
					 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
					 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
					 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
					 *
					 * On fail call [[Inflate#onEnd]] with error code and return false.
					 *
					 * We strongly recommend to use `Uint8Array` on input for best speed (output
					 * format is detected automatically). Also, don't skip last param and always
					 * use the same type in your code (boolean or number). That will improve JS speed.
					 *
					 * For regular `Array`-s make sure all elements are [0..255].
					 *
					 * ##### Example
					 *
					 * ```javascript
					 * push(chunk, false); // push one of data chunks
					 * ...
					 * push(chunk, true);  // push last chunk
					 * ```
					 **/
					Inflate.prototype.push = function ( data, mode ) {
						var strm = this.strm;
						var chunkSize = this.options.chunkSize;
						var dictionary = this.options.dictionary;
						var status, _mode;
						var next_out_utf8, tail, utf8str;

						// Flag to properly process Z_BUF_ERROR on testing inflate call
						// when we check that all output data was flushed.
						var allowBufError = false;

						if ( this.ended ) {
							return false;
						}
						_mode =
							mode === ~~mode
								? mode
								: mode === true
								? c.Z_FINISH
								: c.Z_NO_FLUSH;

						// Convert data if needed
						if ( typeof data === 'string' ) {
							// Only binary strings can be decompressed on practice
							strm.input = strings.binstring2buf( data );
						} else if (
							toString.call( data ) === '[object ArrayBuffer]'
						) {
							strm.input = new Uint8Array( data );
						} else {
							strm.input = data;
						}

						strm.next_in = 0;
						strm.avail_in = strm.input.length;

						do {
							if ( strm.avail_out === 0 ) {
								strm.output = new utils.Buf8( chunkSize );
								strm.next_out = 0;
								strm.avail_out = chunkSize;
							}

							status = zlib_inflate.inflate(
								strm,
								c.Z_NO_FLUSH
							); /* no bad return value */

							if ( status === c.Z_NEED_DICT && dictionary ) {
								status = zlib_inflate.inflateSetDictionary(
									this.strm,
									dictionary
								);
							}

							if (
								status === c.Z_BUF_ERROR &&
								allowBufError === true
							) {
								status = c.Z_OK;
								allowBufError = false;
							}

							if (
								status !== c.Z_STREAM_END &&
								status !== c.Z_OK
							) {
								this.onEnd( status );
								this.ended = true;
								return false;
							}

							if ( strm.next_out ) {
								if (
									strm.avail_out === 0 ||
									status === c.Z_STREAM_END ||
									( strm.avail_in === 0 &&
										( _mode === c.Z_FINISH ||
											_mode === c.Z_SYNC_FLUSH ) )
								) {
									if ( this.options.to === 'string' ) {
										next_out_utf8 = strings.utf8border(
											strm.output,
											strm.next_out
										);

										tail = strm.next_out - next_out_utf8;
										utf8str = strings.buf2string(
											strm.output,
											next_out_utf8
										);

										// move tail
										strm.next_out = tail;
										strm.avail_out = chunkSize - tail;
										if ( tail ) {
											utils.arraySet(
												strm.output,
												strm.output,
												next_out_utf8,
												tail,
												0
											);
										}

										this.onData( utf8str );
									} else {
										this.onData(
											utils.shrinkBuf(
												strm.output,
												strm.next_out
											)
										);
									}
								}
							}

							// When no more input data, we should check that internal inflate buffers
							// are flushed. The only way to do it when avail_out = 0 - run one more
							// inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
							// Here we set flag to process this error properly.
							//
							// NOTE. Deflate does not return error in this case and does not needs such
							// logic.
							if ( strm.avail_in === 0 && strm.avail_out === 0 ) {
								allowBufError = true;
							}
						} while (
							( strm.avail_in > 0 || strm.avail_out === 0 ) &&
							status !== c.Z_STREAM_END
						);

						if ( status === c.Z_STREAM_END ) {
							_mode = c.Z_FINISH;
						}

						// Finalize on the last chunk.
						if ( _mode === c.Z_FINISH ) {
							status = zlib_inflate.inflateEnd( this.strm );
							this.onEnd( status );
							this.ended = true;
							return status === c.Z_OK;
						}

						// callback interim results if Z_SYNC_FLUSH.
						if ( _mode === c.Z_SYNC_FLUSH ) {
							this.onEnd( c.Z_OK );
							strm.avail_out = 0;
							return true;
						}

						return true;
					};

					/**
					 * Inflate#onData(chunk) -> Void
					 * - chunk (Uint8Array|Array|String): output data. Type of array depends
					 *   on js engine support. When string output requested, each chunk
					 *   will be string.
					 *
					 * By default, stores data blocks in `chunks[]` property and glue
					 * those in `onEnd`. Override this handler, if you need another behaviour.
					 **/
					Inflate.prototype.onData = function ( chunk ) {
						this.chunks.push( chunk );
					};

					/**
					 * Inflate#onEnd(status) -> Void
					 * - status (Number): inflate status. 0 (Z_OK) on success,
					 *   other if not.
					 *
					 * Called either after you tell inflate that the input stream is
					 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
					 * or if an error happened. By default - join collected chunks,
					 * free memory and fill `results` / `err` properties.
					 **/
					Inflate.prototype.onEnd = function ( status ) {
						// On success - join
						if ( status === c.Z_OK ) {
							if ( this.options.to === 'string' ) {
								// Glue & convert here, until we teach pako to send
								// utf8 aligned strings to onData
								this.result = this.chunks.join( '' );
							} else {
								this.result = utils.flattenChunks(
									this.chunks
								);
							}
						}
						this.chunks = [];
						this.err = status;
						this.msg = this.strm.msg;
					};

					/**
					 * inflate(data[, options]) -> Uint8Array|Array|String
					 * - data (Uint8Array|Array|String): input data to decompress.
					 * - options (Object): zlib inflate options.
					 *
					 * Decompress `data` with inflate/ungzip and `options`. Autodetect
					 * format via wrapper header by default. That's why we don't provide
					 * separate `ungzip` method.
					 *
					 * Supported options are:
					 *
					 * - windowBits
					 *
					 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
					 * for more information.
					 *
					 * Sugar (options):
					 *
					 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
					 *   negative windowBits implicitly.
					 * - `to` (String) - if equal to 'string', then result will be converted
					 *   from utf8 to utf16 (javascript) string. When string output requested,
					 *   chunk length can differ from `chunkSize`, depending on content.
					 *
					 *
					 * ##### Example:
					 *
					 * ```javascript
					 * var pako = require('pako')
					 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
					 *   , output;
					 *
					 * try {
					 *   output = pako.inflate(input);
					 * } catch (err)
					 *   console.log(err);
					 * }
					 * ```
					 **/
					function inflate( input, options ) {
						var inflator = new Inflate( options );

						inflator.push( input, true );

						// That will never happens, if you don't cheat with options :)
						if ( inflator.err ) {
							throw inflator.msg || msg[ inflator.err ];
						}

						return inflator.result;
					}

					/**
					 * inflateRaw(data[, options]) -> Uint8Array|Array|String
					 * - data (Uint8Array|Array|String): input data to decompress.
					 * - options (Object): zlib inflate options.
					 *
					 * The same as [[inflate]], but creates raw data, without wrapper
					 * (header and adler32 crc).
					 **/
					function inflateRaw( input, options ) {
						options = options || {};
						options.raw = true;
						return inflate( input, options );
					}

					/**
					 * ungzip(data[, options]) -> Uint8Array|Array|String
					 * - data (Uint8Array|Array|String): input data to decompress.
					 * - options (Object): zlib inflate options.
					 *
					 * Just shortcut to [[inflate]], because it autodetects format
					 * by header.content. Done for convenience.
					 **/

					exports.Inflate = Inflate;
					exports.inflate = inflate;
					exports.inflateRaw = inflateRaw;
					exports.ungzip = inflate;
				},
				{
					'./utils/common': 1,
					'./utils/strings': 2,
					'./zlib/constants': 4,
					'./zlib/gzheader': 6,
					'./zlib/inflate': 8,
					'./zlib/messages': 10,
					'./zlib/zstream': 11,
				},
			],
		},
		{},
		[]
	)( '/lib/inflate.js' );
} );
/* eslint-enable */


/***/ }),

/***/ 8572:
/***/ ((module) => {

/* eslint eslint-comments/no-unlimited-disable: 0 */
/* eslint-disable */
( function ( f ) {
	if ( true ) {
		module.exports = f();
	} else { var g; }
} )( function () {
	var define, module, exports;
	return ( function () {
		function r( e, n, t ) {
			function o( i, f ) {
				if ( ! n[ i ] ) {
					if ( ! e[ i ] ) {
						var c = undefined;
						if ( ! f && c ) return require( i, ! 0 );
						if ( u ) return u( i, ! 0 );
						var a = new Error( "Cannot find module '" + i + "'" );
						throw ( ( a.code = 'MODULE_NOT_FOUND' ), a );
					}
					var p = ( n[ i ] = { exports: {} } );
					e[ i ][ 0 ].call(
						p.exports,
						function ( r ) {
							var n = e[ i ][ 1 ][ r ];
							return o( n || r );
						},
						p,
						p.exports,
						r,
						e,
						n,
						t
					);
				}
				return n[ i ].exports;
			}
			for (
				var u = undefined, i = 0;
				i < t.length;
				i++
			)
				o( t[ i ] );
			return o;
		}
		return r;
	} )()(
		{
			1: [
				function ( require, module, exports ) {
					/* Copyright 2013 Google Inc. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Bit reading helpers
*/

					var BROTLI_READ_SIZE = 4096;
					var BROTLI_IBUF_SIZE = 2 * BROTLI_READ_SIZE + 32;
					var BROTLI_IBUF_MASK = 2 * BROTLI_READ_SIZE - 1;

					var kBitMask = new Uint32Array( [
						0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095,
						8191, 16383, 32767, 65535, 131071, 262143, 524287,
						1048575, 2097151, 4194303, 8388607, 16777215,
					] );

					/* Input byte buffer, consist of a ringbuffer and a "slack" region where */
					/* bytes from the start of the ringbuffer are copied. */
					function BrotliBitReader( input ) {
						this.buf_ = new Uint8Array( BROTLI_IBUF_SIZE );
						this.input_ = input; /* input callback */

						this.reset();
					}

					BrotliBitReader.READ_SIZE = BROTLI_READ_SIZE;
					BrotliBitReader.IBUF_MASK = BROTLI_IBUF_MASK;

					BrotliBitReader.prototype.reset = function () {
						this.buf_ptr_ = 0; /* next input will write here */
						this.val_ = 0; /* pre-fetched bits */
						this.pos_ = 0; /* byte position in stream */
						this.bit_pos_ = 0; /* current bit-reading position in val_ */
						this.bit_end_pos_ = 0; /* bit-reading end position from LSB of val_ */
						this.eos_ = 0; /* input stream is finished */

						this.readMoreInput();
						for ( var i = 0; i < 4; i++ ) {
							this.val_ |= this.buf_[ this.pos_ ] << ( 8 * i );
							++this.pos_;
						}

						return this.bit_end_pos_ > 0;
					};

					/* Fills up the input ringbuffer by calling the input callback.

   Does nothing if there are at least 32 bytes present after current position.

   Returns 0 if either:
    - the input callback returned an error, or
    - there is no more input and the position is past the end of the stream.

   After encountering the end of the input stream, 32 additional zero bytes are
   copied to the ringbuffer, therefore it is safe to call this function after
   every 32 bytes of input is read.
*/
					BrotliBitReader.prototype.readMoreInput = function () {
						if ( this.bit_end_pos_ > 256 ) {
							return;
						} else if ( this.eos_ ) {
							if ( this.bit_pos_ > this.bit_end_pos_ )
								throw new Error(
									'Unexpected end of input ' +
										this.bit_pos_ +
										' ' +
										this.bit_end_pos_
								);
						} else {
							var dst = this.buf_ptr_;
							var bytes_read = this.input_.read(
								this.buf_,
								dst,
								BROTLI_READ_SIZE
							);
							if ( bytes_read < 0 ) {
								throw new Error( 'Unexpected end of input' );
							}

							if ( bytes_read < BROTLI_READ_SIZE ) {
								this.eos_ = 1;
								/* Store 32 bytes of zero after the stream end. */
								for ( var p = 0; p < 32; p++ )
									this.buf_[ dst + bytes_read + p ] = 0;
							}

							if ( dst === 0 ) {
								/* Copy the head of the ringbuffer to the slack region. */
								for ( var p = 0; p < 32; p++ )
									this.buf_[ ( BROTLI_READ_SIZE << 1 ) + p ] =
										this.buf_[ p ];

								this.buf_ptr_ = BROTLI_READ_SIZE;
							} else {
								this.buf_ptr_ = 0;
							}

							this.bit_end_pos_ += bytes_read << 3;
						}
					};

					/* Guarantees that there are at least 24 bits in the buffer. */
					BrotliBitReader.prototype.fillBitWindow = function () {
						while ( this.bit_pos_ >= 8 ) {
							this.val_ >>>= 8;
							this.val_ |=
								this.buf_[ this.pos_ & BROTLI_IBUF_MASK ] << 24;
							++this.pos_;
							this.bit_pos_ = ( this.bit_pos_ - 8 ) >>> 0;
							this.bit_end_pos_ = ( this.bit_end_pos_ - 8 ) >>> 0;
						}
					};

					/* Reads the specified number of bits from Read Buffer. */
					BrotliBitReader.prototype.readBits = function ( n_bits ) {
						if ( 32 - this.bit_pos_ < n_bits ) {
							this.fillBitWindow();
						}

						var val =
							( this.val_ >>> this.bit_pos_ ) &
							kBitMask[ n_bits ];
						this.bit_pos_ += n_bits;
						return val;
					};

					module.exports = BrotliBitReader;
				},
				{},
			],
			2: [
				function ( require, module, exports ) {
					/* Copyright 2013 Google Inc. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Lookup table to map the previous two bytes to a context id.

   There are four different context modeling modes defined here:
     CONTEXT_LSB6: context id is the least significant 6 bits of the last byte,
     CONTEXT_MSB6: context id is the most significant 6 bits of the last byte,
     CONTEXT_UTF8: second-order context model tuned for UTF8-encoded text,
     CONTEXT_SIGNED: second-order context model tuned for signed integers.

   The context id for the UTF8 context model is calculated as follows. If p1
   and p2 are the previous two bytes, we calcualte the context as

     context = kContextLookup[p1] | kContextLookup[p2 + 256].

   If the previous two bytes are ASCII characters (i.e. < 128), this will be
   equivalent to

     context = 4 * context1(p1) + context2(p2),

   where context1 is based on the previous byte in the following way:

     0  : non-ASCII control
     1  : \t, \n, \r
     2  : space
     3  : other punctuation
     4  : " '
     5  : %
     6  : ( < [ {
     7  : ) > ] }
     8  : , ; :
     9  : .
     10 : =
     11 : number
     12 : upper-case vowel
     13 : upper-case consonant
     14 : lower-case vowel
     15 : lower-case consonant

   and context2 is based on the second last byte:

     0 : control, space
     1 : punctuation
     2 : upper-case letter, number
     3 : lower-case letter

   If the last byte is ASCII, and the second last byte is not (in a valid UTF8
   stream it will be a continuation byte, value between 128 and 191), the
   context is the same as if the second last byte was an ASCII control or space.

   If the last byte is a UTF8 lead byte (value >= 192), then the next byte will
   be a continuation byte and the context id is 2 or 3 depending on the LSB of
   the last byte and to a lesser extent on the second last byte if it is ASCII.

   If the last byte is a UTF8 continuation byte, the second last byte can be:
     - continuation byte: the next byte is probably ASCII or lead byte (assuming
       4-byte UTF8 characters are rare) and the context id is 0 or 1.
     - lead byte (192 - 207): next byte is ASCII or lead byte, context is 0 or 1
     - lead byte (208 - 255): next byte is continuation byte, context is 2 or 3

   The possible value combinations of the previous two bytes, the range of
   context ids and the type of the next byte is summarized in the table below:

   |--------\-----------------------------------------------------------------|
   |         \                         Last byte                              |
   | Second   \---------------------------------------------------------------|
   | last byte \    ASCII            |   cont. byte        |   lead byte      |
   |            \   (0-127)          |   (128-191)         |   (192-)         |
   |=============|===================|=====================|==================|
   |  ASCII      | next: ASCII/lead  |  not valid          |  next: cont.     |
   |  (0-127)    | context: 4 - 63   |                     |  context: 2 - 3  |
   |-------------|-------------------|---------------------|------------------|
   |  cont. byte | next: ASCII/lead  |  next: ASCII/lead   |  next: cont.     |
   |  (128-191)  | context: 4 - 63   |  context: 0 - 1     |  context: 2 - 3  |
   |-------------|-------------------|---------------------|------------------|
   |  lead byte  | not valid         |  next: ASCII/lead   |  not valid       |
   |  (192-207)  |                   |  context: 0 - 1     |                  |
   |-------------|-------------------|---------------------|------------------|
   |  lead byte  | not valid         |  next: cont.        |  not valid       |
   |  (208-)     |                   |  context: 2 - 3     |                  |
   |-------------|-------------------|---------------------|------------------|

   The context id for the signed context mode is calculated as:

     context = (kContextLookup[512 + p1] << 3) | kContextLookup[512 + p2].

   For any context modeling modes, the context ids can be calculated by |-ing
   together two lookups from one table using context model dependent offsets:

     context = kContextLookup[offset1 + p1] | kContextLookup[offset2 + p2].

   where offset1 and offset2 are dependent on the context mode.
*/

					var CONTEXT_LSB6 = 0;
					var CONTEXT_MSB6 = 1;
					var CONTEXT_UTF8 = 2;
					var CONTEXT_SIGNED = 3;

					/* Common context lookup table for all context modes. */
					exports.lookup = new Uint8Array( [
						/* CONTEXT_UTF8, last byte. */
						/* ASCII range. */
						0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 4, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 12, 16, 12,
						12, 20, 12, 16, 24, 28, 12, 12, 32, 12, 36, 12, 44, 44,
						44, 44, 44, 44, 44, 44, 44, 44, 32, 32, 24, 40, 28, 12,
						12, 48, 52, 52, 52, 48, 52, 52, 52, 48, 52, 52, 52, 52,
						52, 48, 52, 52, 52, 52, 52, 48, 52, 52, 52, 52, 52, 24,
						12, 28, 12, 12, 12, 56, 60, 60, 60, 56, 60, 60, 60, 56,
						60, 60, 60, 60, 60, 56, 60, 60, 60, 60, 60, 56, 60, 60,
						60, 60, 60, 24, 12, 28, 12, 0,
						/* UTF8 continuation byte range. */
						0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
						1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
						0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
						1, 0, 1, 0, 1, 0, 1, /* UTF8 lead byte range. */
						2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
						3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3,
						2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
						3, 2, 3, 2, 3, 2, 3,
						/* CONTEXT_UTF8 second last byte. */
						/* ASCII range. */
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1,
						1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2,
						2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
						2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
						1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
						3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 0,
						/* UTF8 continuation byte range. */
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, /* UTF8 lead byte range. */
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2,
						2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
						2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
						/* CONTEXT_SIGNED, second last byte. */
						0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
						2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
						2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
						2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
						3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
						3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
						3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
						4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
						4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
						4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
						4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
						5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
						5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
						6, 6, 6, 6, 6, 6, 6, 6, 7,
						/* CONTEXT_SIGNED, last byte, same as the above values shifted by 3 bits. */
						0,
						8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 16,
						16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
						16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
						16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
						16, 16, 16, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
						24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
						24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
						24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
						24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 32, 32, 32,
						32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
						32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
						32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
						32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
						32, 32, 32, 32, 32, 40, 40, 40, 40, 40, 40, 40, 40, 40,
						40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
						40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
						40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 48, 48, 48,
						48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 56,
						/* CONTEXT_LSB6, last byte. */
						0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
						16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
						30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
						44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
						58, 59, 60, 61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
						10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
						24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
						38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
						52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 1, 2,
						3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
						19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
						33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
						47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
						61, 62, 63, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
						13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
						27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
						41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
						55, 56, 57, 58, 59, 60, 61, 62, 63,
						/* CONTEXT_MSB6, last byte. */
						0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4,
						4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9,
						9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12,
						13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16,
						16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19,
						20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23,
						23, 23, 24, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 26,
						27, 27, 27, 27, 28, 28, 28, 28, 29, 29, 29, 29, 30, 30,
						30, 30, 31, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33,
						34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37,
						37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 40, 40, 40, 40,
						41, 41, 41, 41, 42, 42, 42, 42, 43, 43, 43, 43, 44, 44,
						44, 44, 45, 45, 45, 45, 46, 46, 46, 46, 47, 47, 47, 47,
						48, 48, 48, 48, 49, 49, 49, 49, 50, 50, 50, 50, 51, 51,
						51, 51, 52, 52, 52, 52, 53, 53, 53, 53, 54, 54, 54, 54,
						55, 55, 55, 55, 56, 56, 56, 56, 57, 57, 57, 57, 58, 58,
						58, 58, 59, 59, 59, 59, 60, 60, 60, 60, 61, 61, 61, 61,
						62, 62, 62, 62, 63, 63, 63, 63,
						/* CONTEXT_{M,L}SB6, second last byte, */
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0,
					] );

					exports.lookupOffsets = new Uint16Array( [
						/* CONTEXT_LSB6 */
						1024, 1536, /* CONTEXT_MSB6 */
						1280, 1536, /* CONTEXT_UTF8 */
						0, 256, /* CONTEXT_SIGNED */
						768, 512,
					] );
				},
				{},
			],
			3: [
				function ( require, module, exports ) {
					/* Copyright 2013 Google Inc. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

					var BrotliInput = require( './streams' ).BrotliInput;
					var BrotliOutput = require( './streams' ).BrotliOutput;
					var BrotliBitReader = require( './bit_reader' );
					var BrotliDictionary = require( './dictionary' );
					var HuffmanCode = require( './huffman' ).HuffmanCode;
					var BrotliBuildHuffmanTable =
						require( './huffman' ).BrotliBuildHuffmanTable;
					var Context = require( './context' );
					var Prefix = require( './prefix' );
					var Transform = require( './transform' );

					var kDefaultCodeLength = 8;
					var kCodeLengthRepeatCode = 16;
					var kNumLiteralCodes = 256;
					var kNumInsertAndCopyCodes = 704;
					var kNumBlockLengthCodes = 26;
					var kLiteralContextBits = 6;
					var kDistanceContextBits = 2;

					var HUFFMAN_TABLE_BITS = 8;
					var HUFFMAN_TABLE_MASK = 0xff;
					/* Maximum possible Huffman table size for an alphabet size of 704, max code
					 * length 15 and root table bits 8. */
					var HUFFMAN_MAX_TABLE_SIZE = 1080;

					var CODE_LENGTH_CODES = 18;
					var kCodeLengthCodeOrder = new Uint8Array( [
						1, 2, 3, 4, 0, 5, 17, 6, 16, 7, 8, 9, 10, 11, 12, 13,
						14, 15,
					] );

					var NUM_DISTANCE_SHORT_CODES = 16;
					var kDistanceShortCodeIndexOffset = new Uint8Array( [
						3, 2, 1, 0, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2,
					] );

					var kDistanceShortCodeValueOffset = new Int8Array( [
						0, 0, 0, 0, -1, 1, -2, 2, -3, 3, -1, 1, -2, 2, -3, 3,
					] );

					var kMaxHuffmanTableSize = new Uint16Array( [
						256, 402, 436, 468, 500, 534, 566, 598, 630, 662, 694,
						726, 758, 790, 822, 854, 886, 920, 952, 984, 1016, 1048,
						1080,
					] );

					function DecodeWindowBits( br ) {
						var n;
						if ( br.readBits( 1 ) === 0 ) {
							return 16;
						}

						n = br.readBits( 3 );
						if ( n > 0 ) {
							return 17 + n;
						}

						n = br.readBits( 3 );
						if ( n > 0 ) {
							return 8 + n;
						}

						return 17;
					}

					/* Decodes a number in the range [0..255], by reading 1 - 11 bits. */
					function DecodeVarLenUint8( br ) {
						if ( br.readBits( 1 ) ) {
							var nbits = br.readBits( 3 );
							if ( nbits === 0 ) {
								return 1;
							} else {
								return br.readBits( nbits ) + ( 1 << nbits );
							}
						}
						return 0;
					}

					function MetaBlockLength() {
						this.meta_block_length = 0;
						this.input_end = 0;
						this.is_uncompressed = 0;
						this.is_metadata = false;
					}

					function DecodeMetaBlockLength( br ) {
						var out = new MetaBlockLength();
						var size_nibbles;
						var size_bytes;
						var i;

						out.input_end = br.readBits( 1 );
						if ( out.input_end && br.readBits( 1 ) ) {
							return out;
						}

						size_nibbles = br.readBits( 2 ) + 4;
						if ( size_nibbles === 7 ) {
							out.is_metadata = true;

							if ( br.readBits( 1 ) !== 0 )
								throw new Error( 'Invalid reserved bit' );

							size_bytes = br.readBits( 2 );
							if ( size_bytes === 0 ) return out;

							for ( i = 0; i < size_bytes; i++ ) {
								var next_byte = br.readBits( 8 );
								if (
									i + 1 === size_bytes &&
									size_bytes > 1 &&
									next_byte === 0
								)
									throw new Error( 'Invalid size byte' );

								out.meta_block_length |= next_byte << ( i * 8 );
							}
						} else {
							for ( i = 0; i < size_nibbles; ++i ) {
								var next_nibble = br.readBits( 4 );
								if (
									i + 1 === size_nibbles &&
									size_nibbles > 4 &&
									next_nibble === 0
								)
									throw new Error( 'Invalid size nibble' );

								out.meta_block_length |=
									next_nibble << ( i * 4 );
							}
						}

						++out.meta_block_length;

						if ( ! out.input_end && ! out.is_metadata ) {
							out.is_uncompressed = br.readBits( 1 );
						}

						return out;
					}

					/* Decodes the next Huffman code from bit-stream. */
					function ReadSymbol( table, index, br ) {
						var start_index = index;

						var nbits;
						br.fillBitWindow();
						index +=
							( br.val_ >>> br.bit_pos_ ) & HUFFMAN_TABLE_MASK;
						nbits = table[ index ].bits - HUFFMAN_TABLE_BITS;
						if ( nbits > 0 ) {
							br.bit_pos_ += HUFFMAN_TABLE_BITS;
							index += table[ index ].value;
							index +=
								( br.val_ >>> br.bit_pos_ ) &
								( ( 1 << nbits ) - 1 );
						}
						br.bit_pos_ += table[ index ].bits;
						return table[ index ].value;
					}

					function ReadHuffmanCodeLengths(
						code_length_code_lengths,
						num_symbols,
						code_lengths,
						br
					) {
						var symbol = 0;
						var prev_code_len = kDefaultCodeLength;
						var repeat = 0;
						var repeat_code_len = 0;
						var space = 32768;

						var table = [];
						for ( var i = 0; i < 32; i++ )
							table.push( new HuffmanCode( 0, 0 ) );

						BrotliBuildHuffmanTable(
							table,
							0,
							5,
							code_length_code_lengths,
							CODE_LENGTH_CODES
						);

						while ( symbol < num_symbols && space > 0 ) {
							var p = 0;
							var code_len;

							br.readMoreInput();
							br.fillBitWindow();
							p += ( br.val_ >>> br.bit_pos_ ) & 31;
							br.bit_pos_ += table[ p ].bits;
							code_len = table[ p ].value & 0xff;
							if ( code_len < kCodeLengthRepeatCode ) {
								repeat = 0;
								code_lengths[ symbol++ ] = code_len;
								if ( code_len !== 0 ) {
									prev_code_len = code_len;
									space -= 32768 >> code_len;
								}
							} else {
								var extra_bits = code_len - 14;
								var old_repeat;
								var repeat_delta;
								var new_len = 0;
								if ( code_len === kCodeLengthRepeatCode ) {
									new_len = prev_code_len;
								}
								if ( repeat_code_len !== new_len ) {
									repeat = 0;
									repeat_code_len = new_len;
								}
								old_repeat = repeat;
								if ( repeat > 0 ) {
									repeat -= 2;
									repeat <<= extra_bits;
								}
								repeat += br.readBits( extra_bits ) + 3;
								repeat_delta = repeat - old_repeat;
								if ( symbol + repeat_delta > num_symbols ) {
									throw new Error(
										'[ReadHuffmanCodeLengths] symbol + repeat_delta > num_symbols'
									);
								}

								for ( var x = 0; x < repeat_delta; x++ )
									code_lengths[ symbol + x ] =
										repeat_code_len;

								symbol += repeat_delta;

								if ( repeat_code_len !== 0 ) {
									space -=
										repeat_delta <<
										( 15 - repeat_code_len );
								}
							}
						}
						if ( space !== 0 ) {
							throw new Error(
								'[ReadHuffmanCodeLengths] space = ' + space
							);
						}

						for ( ; symbol < num_symbols; symbol++ )
							code_lengths[ symbol ] = 0;
					}

					function ReadHuffmanCode(
						alphabet_size,
						tables,
						table,
						br
					) {
						var table_size = 0;
						var simple_code_or_skip;
						var code_lengths = new Uint8Array( alphabet_size );

						br.readMoreInput();

						/* simple_code_or_skip is used as follows:
     1 for simple code;
     0 for no skipping, 2 skips 2 code lengths, 3 skips 3 code lengths */
						simple_code_or_skip = br.readBits( 2 );
						if ( simple_code_or_skip === 1 ) {
							/* Read symbols, codes & code lengths directly. */
							var i;
							var max_bits_counter = alphabet_size - 1;
							var max_bits = 0;
							var symbols = new Int32Array( 4 );
							var num_symbols = br.readBits( 2 ) + 1;
							while ( max_bits_counter ) {
								max_bits_counter >>= 1;
								++max_bits;
							}

							for ( i = 0; i < num_symbols; ++i ) {
								symbols[ i ] =
									br.readBits( max_bits ) % alphabet_size;
								code_lengths[ symbols[ i ] ] = 2;
							}
							code_lengths[ symbols[ 0 ] ] = 1;
							switch ( num_symbols ) {
								case 1:
									break;
								case 3:
									if (
										symbols[ 0 ] === symbols[ 1 ] ||
										symbols[ 0 ] === symbols[ 2 ] ||
										symbols[ 1 ] === symbols[ 2 ]
									) {
										throw new Error(
											'[ReadHuffmanCode] invalid symbols'
										);
									}
									break;
								case 2:
									if ( symbols[ 0 ] === symbols[ 1 ] ) {
										throw new Error(
											'[ReadHuffmanCode] invalid symbols'
										);
									}

									code_lengths[ symbols[ 1 ] ] = 1;
									break;
								case 4:
									if (
										symbols[ 0 ] === symbols[ 1 ] ||
										symbols[ 0 ] === symbols[ 2 ] ||
										symbols[ 0 ] === symbols[ 3 ] ||
										symbols[ 1 ] === symbols[ 2 ] ||
										symbols[ 1 ] === symbols[ 3 ] ||
										symbols[ 2 ] === symbols[ 3 ]
									) {
										throw new Error(
											'[ReadHuffmanCode] invalid symbols'
										);
									}

									if ( br.readBits( 1 ) ) {
										code_lengths[ symbols[ 2 ] ] = 3;
										code_lengths[ symbols[ 3 ] ] = 3;
									} else {
										code_lengths[ symbols[ 0 ] ] = 2;
									}
									break;
							}
						} else {
							/* Decode Huffman-coded code lengths. */
							var i;
							var code_length_code_lengths = new Uint8Array(
								CODE_LENGTH_CODES
							);
							var space = 32;
							var num_codes = 0;
							/* Static Huffman code for the code length code lengths */
							var huff = [
								new HuffmanCode( 2, 0 ),
								new HuffmanCode( 2, 4 ),
								new HuffmanCode( 2, 3 ),
								new HuffmanCode( 3, 2 ),
								new HuffmanCode( 2, 0 ),
								new HuffmanCode( 2, 4 ),
								new HuffmanCode( 2, 3 ),
								new HuffmanCode( 4, 1 ),
								new HuffmanCode( 2, 0 ),
								new HuffmanCode( 2, 4 ),
								new HuffmanCode( 2, 3 ),
								new HuffmanCode( 3, 2 ),
								new HuffmanCode( 2, 0 ),
								new HuffmanCode( 2, 4 ),
								new HuffmanCode( 2, 3 ),
								new HuffmanCode( 4, 5 ),
							];
							for (
								i = simple_code_or_skip;
								i < CODE_LENGTH_CODES && space > 0;
								++i
							) {
								var code_len_idx = kCodeLengthCodeOrder[ i ];
								var p = 0;
								var v;
								br.fillBitWindow();
								p += ( br.val_ >>> br.bit_pos_ ) & 15;
								br.bit_pos_ += huff[ p ].bits;
								v = huff[ p ].value;
								code_length_code_lengths[ code_len_idx ] = v;
								if ( v !== 0 ) {
									space -= 32 >> v;
									++num_codes;
								}
							}

							if ( ! ( num_codes === 1 || space === 0 ) )
								throw new Error(
									'[ReadHuffmanCode] invalid num_codes or space'
								);

							ReadHuffmanCodeLengths(
								code_length_code_lengths,
								alphabet_size,
								code_lengths,
								br
							);
						}

						table_size = BrotliBuildHuffmanTable(
							tables,
							table,
							HUFFMAN_TABLE_BITS,
							code_lengths,
							alphabet_size
						);

						if ( table_size === 0 ) {
							throw new Error(
								'[ReadHuffmanCode] BuildHuffmanTable failed: '
							);
						}

						return table_size;
					}

					function ReadBlockLength( table, index, br ) {
						var code;
						var nbits;
						code = ReadSymbol( table, index, br );
						nbits = Prefix.kBlockLengthPrefixCode[ code ].nbits;
						return (
							Prefix.kBlockLengthPrefixCode[ code ].offset +
							br.readBits( nbits )
						);
					}

					function TranslateShortCodes( code, ringbuffer, index ) {
						var val;
						if ( code < NUM_DISTANCE_SHORT_CODES ) {
							index += kDistanceShortCodeIndexOffset[ code ];
							index &= 3;
							val =
								ringbuffer[ index ] +
								kDistanceShortCodeValueOffset[ code ];
						} else {
							val = code - NUM_DISTANCE_SHORT_CODES + 1;
						}
						return val;
					}

					function MoveToFront( v, index ) {
						var value = v[ index ];
						var i = index;
						for ( ; i; --i ) v[ i ] = v[ i - 1 ];
						v[ 0 ] = value;
					}

					function InverseMoveToFrontTransform( v, v_len ) {
						var mtf = new Uint8Array( 256 );
						var i;
						for ( i = 0; i < 256; ++i ) {
							mtf[ i ] = i;
						}
						for ( i = 0; i < v_len; ++i ) {
							var index = v[ i ];
							v[ i ] = mtf[ index ];
							if ( index ) MoveToFront( mtf, index );
						}
					}

					/* Contains a collection of huffman trees with the same alphabet size. */
					function HuffmanTreeGroup( alphabet_size, num_htrees ) {
						this.alphabet_size = alphabet_size;
						this.num_htrees = num_htrees;
						this.codes = new Array(
							num_htrees +
								num_htrees *
									kMaxHuffmanTableSize[
										( alphabet_size + 31 ) >>> 5
									]
						);
						this.htrees = new Uint32Array( num_htrees );
					}

					HuffmanTreeGroup.prototype.decode = function ( br ) {
						var i;
						var table_size;
						var next = 0;
						for ( i = 0; i < this.num_htrees; ++i ) {
							this.htrees[ i ] = next;
							table_size = ReadHuffmanCode(
								this.alphabet_size,
								this.codes,
								next,
								br
							);
							next += table_size;
						}
					};

					function DecodeContextMap( context_map_size, br ) {
						var out = { num_htrees: null, context_map: null };
						var use_rle_for_zeros;
						var max_run_length_prefix = 0;
						var table;
						var i;

						br.readMoreInput();
						var num_htrees = ( out.num_htrees =
							DecodeVarLenUint8( br ) + 1 );

						var context_map = ( out.context_map = new Uint8Array(
							context_map_size
						) );
						if ( num_htrees <= 1 ) {
							return out;
						}

						use_rle_for_zeros = br.readBits( 1 );
						if ( use_rle_for_zeros ) {
							max_run_length_prefix = br.readBits( 4 ) + 1;
						}

						table = [];
						for ( i = 0; i < HUFFMAN_MAX_TABLE_SIZE; i++ ) {
							table[ i ] = new HuffmanCode( 0, 0 );
						}

						ReadHuffmanCode(
							num_htrees + max_run_length_prefix,
							table,
							0,
							br
						);

						for ( i = 0; i < context_map_size;  ) {
							var code;

							br.readMoreInput();
							code = ReadSymbol( table, 0, br );
							if ( code === 0 ) {
								context_map[ i ] = 0;
								++i;
							} else if ( code <= max_run_length_prefix ) {
								var reps =
									1 + ( 1 << code ) + br.readBits( code );
								while ( --reps ) {
									if ( i >= context_map_size ) {
										throw new Error(
											'[DecodeContextMap] i >= context_map_size'
										);
									}
									context_map[ i ] = 0;
									++i;
								}
							} else {
								context_map[ i ] = code - max_run_length_prefix;
								++i;
							}
						}
						if ( br.readBits( 1 ) ) {
							InverseMoveToFrontTransform(
								context_map,
								context_map_size
							);
						}

						return out;
					}

					function DecodeBlockType(
						max_block_type,
						trees,
						tree_type,
						block_types,
						ringbuffers,
						indexes,
						br
					) {
						var ringbuffer = tree_type * 2;
						var index = tree_type;
						var type_code = ReadSymbol(
							trees,
							tree_type * HUFFMAN_MAX_TABLE_SIZE,
							br
						);
						var block_type;
						if ( type_code === 0 ) {
							block_type =
								ringbuffers[
									ringbuffer + ( indexes[ index ] & 1 )
								];
						} else if ( type_code === 1 ) {
							block_type =
								ringbuffers[
									ringbuffer +
										( ( indexes[ index ] - 1 ) & 1 )
								] + 1;
						} else {
							block_type = type_code - 2;
						}
						if ( block_type >= max_block_type ) {
							block_type -= max_block_type;
						}
						block_types[ tree_type ] = block_type;
						ringbuffers[ ringbuffer + ( indexes[ index ] & 1 ) ] =
							block_type;
						++indexes[ index ];
					}

					function CopyUncompressedBlockToOutput(
						output,
						len,
						pos,
						ringbuffer,
						ringbuffer_mask,
						br
					) {
						var rb_size = ringbuffer_mask + 1;
						var rb_pos = pos & ringbuffer_mask;
						var br_pos = br.pos_ & BrotliBitReader.IBUF_MASK;
						var nbytes;

						/* For short lengths copy byte-by-byte */
						if (
							len < 8 ||
							br.bit_pos_ + ( len << 3 ) < br.bit_end_pos_
						) {
							while ( len-- > 0 ) {
								br.readMoreInput();
								ringbuffer[ rb_pos++ ] = br.readBits( 8 );
								if ( rb_pos === rb_size ) {
									output.write( ringbuffer, rb_size );
									rb_pos = 0;
								}
							}
							return;
						}

						if ( br.bit_end_pos_ < 32 ) {
							throw new Error(
								'[CopyUncompressedBlockToOutput] br.bit_end_pos_ < 32'
							);
						}

						/* Copy remaining 0-4 bytes from br.val_ to ringbuffer. */
						while ( br.bit_pos_ < 32 ) {
							ringbuffer[ rb_pos ] = br.val_ >>> br.bit_pos_;
							br.bit_pos_ += 8;
							++rb_pos;
							--len;
						}

						/* Copy remaining bytes from br.buf_ to ringbuffer. */
						nbytes = ( br.bit_end_pos_ - br.bit_pos_ ) >> 3;
						if ( br_pos + nbytes > BrotliBitReader.IBUF_MASK ) {
							var tail = BrotliBitReader.IBUF_MASK + 1 - br_pos;
							for ( var x = 0; x < tail; x++ )
								ringbuffer[ rb_pos + x ] =
									br.buf_[ br_pos + x ];

							nbytes -= tail;
							rb_pos += tail;
							len -= tail;
							br_pos = 0;
						}

						for ( var x = 0; x < nbytes; x++ )
							ringbuffer[ rb_pos + x ] = br.buf_[ br_pos + x ];

						rb_pos += nbytes;
						len -= nbytes;

						/* If we wrote past the logical end of the ringbuffer, copy the tail of the
     ringbuffer to its beginning and flush the ringbuffer to the output. */
						if ( rb_pos >= rb_size ) {
							output.write( ringbuffer, rb_size );
							rb_pos -= rb_size;
							for ( var x = 0; x < rb_pos; x++ )
								ringbuffer[ x ] = ringbuffer[ rb_size + x ];
						}

						/* If we have more to copy than the remaining size of the ringbuffer, then we
     first fill the ringbuffer from the input and then flush the ringbuffer to
     the output */
						while ( rb_pos + len >= rb_size ) {
							nbytes = rb_size - rb_pos;
							if (
								br.input_.read( ringbuffer, rb_pos, nbytes ) <
								nbytes
							) {
								throw new Error(
									'[CopyUncompressedBlockToOutput] not enough bytes'
								);
							}
							output.write( ringbuffer, rb_size );
							len -= nbytes;
							rb_pos = 0;
						}

						/* Copy straight from the input onto the ringbuffer. The ringbuffer will be
     flushed to the output at a later time. */
						if ( br.input_.read( ringbuffer, rb_pos, len ) < len ) {
							throw new Error(
								'[CopyUncompressedBlockToOutput] not enough bytes'
							);
						}

						/* Restore the state of the bit reader. */
						br.reset();
					}

					/* Advances the bit reader position to the next byte boundary and verifies
   that any skipped bits are set to zero. */
					function JumpToByteBoundary( br ) {
						var new_bit_pos = ( br.bit_pos_ + 7 ) & ~7;
						var pad_bits = br.readBits( new_bit_pos - br.bit_pos_ );
						return pad_bits == 0;
					}

					function BrotliDecompressedSize( buffer ) {
						var input = new BrotliInput( buffer );
						var br = new BrotliBitReader( input );
						DecodeWindowBits( br );
						var out = DecodeMetaBlockLength( br );
						return out.meta_block_length;
					}

					exports.BrotliDecompressedSize = BrotliDecompressedSize;

					function BrotliDecompressBuffer( buffer, output_size ) {
						var input = new BrotliInput( buffer );

						if ( output_size == null ) {
							output_size = BrotliDecompressedSize( buffer );
						}

						var output_buffer = new Uint8Array( output_size );
						var output = new BrotliOutput( output_buffer );

						BrotliDecompress( input, output );

						if ( output.pos < output.buffer.length ) {
							output.buffer = output.buffer.subarray(
								0,
								output.pos
							);
						}

						return output.buffer;
					}

					exports.BrotliDecompressBuffer = BrotliDecompressBuffer;

					function BrotliDecompress( input, output ) {
						var i;
						var pos = 0;
						var input_end = 0;
						var window_bits = 0;
						var max_backward_distance;
						var max_distance = 0;
						var ringbuffer_size;
						var ringbuffer_mask;
						var ringbuffer;
						var ringbuffer_end;
						/* This ring buffer holds a few past copy distances that will be used by */
						/* some special distance codes. */
						var dist_rb = [ 16, 15, 11, 4 ];
						var dist_rb_idx = 0;
						/* The previous 2 bytes used for context. */
						var prev_byte1 = 0;
						var prev_byte2 = 0;
						var hgroup = [
							new HuffmanTreeGroup( 0, 0 ),
							new HuffmanTreeGroup( 0, 0 ),
							new HuffmanTreeGroup( 0, 0 ),
						];
						var block_type_trees;
						var block_len_trees;
						var br;

						/* We need the slack region for the following reasons:
       - always doing two 8-byte copies for fast backward copying
       - transforms
       - flushing the input ringbuffer when decoding uncompressed blocks */
						var kRingBufferWriteAheadSlack =
							128 + BrotliBitReader.READ_SIZE;

						br = new BrotliBitReader( input );

						/* Decode window size. */
						window_bits = DecodeWindowBits( br );
						max_backward_distance = ( 1 << window_bits ) - 16;

						ringbuffer_size = 1 << window_bits;
						ringbuffer_mask = ringbuffer_size - 1;
						ringbuffer = new Uint8Array(
							ringbuffer_size +
								kRingBufferWriteAheadSlack +
								BrotliDictionary.maxDictionaryWordLength
						);
						ringbuffer_end = ringbuffer_size;

						block_type_trees = [];
						block_len_trees = [];
						for ( var x = 0; x < 3 * HUFFMAN_MAX_TABLE_SIZE; x++ ) {
							block_type_trees[ x ] = new HuffmanCode( 0, 0 );
							block_len_trees[ x ] = new HuffmanCode( 0, 0 );
						}

						while ( ! input_end ) {
							var meta_block_remaining_len = 0;
							var is_uncompressed;
							var block_length = [ 1 << 28, 1 << 28, 1 << 28 ];
							var block_type = [ 0 ];
							var num_block_types = [ 1, 1, 1 ];
							var block_type_rb = [ 0, 1, 0, 1, 0, 1 ];
							var block_type_rb_index = [ 0 ];
							var distance_postfix_bits;
							var num_direct_distance_codes;
							var distance_postfix_mask;
							var num_distance_codes;
							var context_map = null;
							var context_modes = null;
							var num_literal_htrees;
							var dist_context_map = null;
							var num_dist_htrees;
							var context_offset = 0;
							var context_map_slice = null;
							var literal_htree_index = 0;
							var dist_context_offset = 0;
							var dist_context_map_slice = null;
							var dist_htree_index = 0;
							var context_lookup_offset1 = 0;
							var context_lookup_offset2 = 0;
							var context_mode;
							var htree_command;

							for ( i = 0; i < 3; ++i ) {
								hgroup[ i ].codes = null;
								hgroup[ i ].htrees = null;
							}

							br.readMoreInput();

							var _out = DecodeMetaBlockLength( br );
							meta_block_remaining_len = _out.meta_block_length;
							if (
								pos + meta_block_remaining_len >
								output.buffer.length
							) {
								/* We need to grow the output buffer to fit the additional data. */
								var tmp = new Uint8Array(
									pos + meta_block_remaining_len
								);
								tmp.set( output.buffer );
								output.buffer = tmp;
							}
							input_end = _out.input_end;
							is_uncompressed = _out.is_uncompressed;

							if ( _out.is_metadata ) {
								JumpToByteBoundary( br );

								for (
									;
									meta_block_remaining_len > 0;
									--meta_block_remaining_len
								) {
									br.readMoreInput();
									/* Read one byte and ignore it. */
									br.readBits( 8 );
								}

								continue;
							}

							if ( meta_block_remaining_len === 0 ) {
								continue;
							}

							if ( is_uncompressed ) {
								br.bit_pos_ = ( br.bit_pos_ + 7 ) & ~7;
								CopyUncompressedBlockToOutput(
									output,
									meta_block_remaining_len,
									pos,
									ringbuffer,
									ringbuffer_mask,
									br
								);
								pos += meta_block_remaining_len;
								continue;
							}

							for ( i = 0; i < 3; ++i ) {
								num_block_types[ i ] =
									DecodeVarLenUint8( br ) + 1;
								if ( num_block_types[ i ] >= 2 ) {
									ReadHuffmanCode(
										num_block_types[ i ] + 2,
										block_type_trees,
										i * HUFFMAN_MAX_TABLE_SIZE,
										br
									);
									ReadHuffmanCode(
										kNumBlockLengthCodes,
										block_len_trees,
										i * HUFFMAN_MAX_TABLE_SIZE,
										br
									);
									block_length[ i ] = ReadBlockLength(
										block_len_trees,
										i * HUFFMAN_MAX_TABLE_SIZE,
										br
									);
									block_type_rb_index[ i ] = 1;
								}
							}

							br.readMoreInput();

							distance_postfix_bits = br.readBits( 2 );
							num_direct_distance_codes =
								NUM_DISTANCE_SHORT_CODES +
								( br.readBits( 4 ) << distance_postfix_bits );
							distance_postfix_mask =
								( 1 << distance_postfix_bits ) - 1;
							num_distance_codes =
								num_direct_distance_codes +
								( 48 << distance_postfix_bits );
							context_modes = new Uint8Array(
								num_block_types[ 0 ]
							);

							for ( i = 0; i < num_block_types[ 0 ]; ++i ) {
								br.readMoreInput();
								context_modes[ i ] = br.readBits( 2 ) << 1;
							}

							var _o1 = DecodeContextMap(
								num_block_types[ 0 ] << kLiteralContextBits,
								br
							);
							num_literal_htrees = _o1.num_htrees;
							context_map = _o1.context_map;

							var _o2 = DecodeContextMap(
								num_block_types[ 2 ] << kDistanceContextBits,
								br
							);
							num_dist_htrees = _o2.num_htrees;
							dist_context_map = _o2.context_map;

							hgroup[ 0 ] = new HuffmanTreeGroup(
								kNumLiteralCodes,
								num_literal_htrees
							);
							hgroup[ 1 ] = new HuffmanTreeGroup(
								kNumInsertAndCopyCodes,
								num_block_types[ 1 ]
							);
							hgroup[ 2 ] = new HuffmanTreeGroup(
								num_distance_codes,
								num_dist_htrees
							);

							for ( i = 0; i < 3; ++i ) {
								hgroup[ i ].decode( br );
							}

							context_map_slice = 0;
							dist_context_map_slice = 0;
							context_mode = context_modes[ block_type[ 0 ] ];
							context_lookup_offset1 =
								Context.lookupOffsets[ context_mode ];
							context_lookup_offset2 =
								Context.lookupOffsets[ context_mode + 1 ];
							htree_command = hgroup[ 1 ].htrees[ 0 ];

							while ( meta_block_remaining_len > 0 ) {
								var cmd_code;
								var range_idx;
								var insert_code;
								var copy_code;
								var insert_length;
								var copy_length;
								var distance_code;
								var distance;
								var context;
								var j;
								var copy_dst;

								br.readMoreInput();

								if ( block_length[ 1 ] === 0 ) {
									DecodeBlockType(
										num_block_types[ 1 ],
										block_type_trees,
										1,
										block_type,
										block_type_rb,
										block_type_rb_index,
										br
									);
									block_length[ 1 ] = ReadBlockLength(
										block_len_trees,
										HUFFMAN_MAX_TABLE_SIZE,
										br
									);
									htree_command =
										hgroup[ 1 ].htrees[ block_type[ 1 ] ];
								}
								--block_length[ 1 ];
								cmd_code = ReadSymbol(
									hgroup[ 1 ].codes,
									htree_command,
									br
								);
								range_idx = cmd_code >> 6;
								if ( range_idx >= 2 ) {
									range_idx -= 2;
									distance_code = -1;
								} else {
									distance_code = 0;
								}
								insert_code =
									Prefix.kInsertRangeLut[ range_idx ] +
									( ( cmd_code >> 3 ) & 7 );
								copy_code =
									Prefix.kCopyRangeLut[ range_idx ] +
									( cmd_code & 7 );
								insert_length =
									Prefix.kInsertLengthPrefixCode[
										insert_code
									].offset +
									br.readBits(
										Prefix.kInsertLengthPrefixCode[
											insert_code
										].nbits
									);
								copy_length =
									Prefix.kCopyLengthPrefixCode[ copy_code ]
										.offset +
									br.readBits(
										Prefix.kCopyLengthPrefixCode[
											copy_code
										].nbits
									);
								prev_byte1 =
									ringbuffer[ ( pos - 1 ) & ringbuffer_mask ];
								prev_byte2 =
									ringbuffer[ ( pos - 2 ) & ringbuffer_mask ];
								for ( j = 0; j < insert_length; ++j ) {
									br.readMoreInput();

									if ( block_length[ 0 ] === 0 ) {
										DecodeBlockType(
											num_block_types[ 0 ],
											block_type_trees,
											0,
											block_type,
											block_type_rb,
											block_type_rb_index,
											br
										);
										block_length[ 0 ] = ReadBlockLength(
											block_len_trees,
											0,
											br
										);
										context_offset =
											block_type[ 0 ] <<
											kLiteralContextBits;
										context_map_slice = context_offset;
										context_mode =
											context_modes[ block_type[ 0 ] ];
										context_lookup_offset1 =
											Context.lookupOffsets[
												context_mode
											];
										context_lookup_offset2 =
											Context.lookupOffsets[
												context_mode + 1
											];
									}
									context =
										Context.lookup[
											context_lookup_offset1 + prev_byte1
										] |
										Context.lookup[
											context_lookup_offset2 + prev_byte2
										];
									literal_htree_index =
										context_map[
											context_map_slice + context
										];
									--block_length[ 0 ];
									prev_byte2 = prev_byte1;
									prev_byte1 = ReadSymbol(
										hgroup[ 0 ].codes,
										hgroup[ 0 ].htrees[
											literal_htree_index
										],
										br
									);
									ringbuffer[ pos & ringbuffer_mask ] =
										prev_byte1;
									if (
										( pos & ringbuffer_mask ) ===
										ringbuffer_mask
									) {
										output.write(
											ringbuffer,
											ringbuffer_size
										);
									}
									++pos;
								}
								meta_block_remaining_len -= insert_length;
								if ( meta_block_remaining_len <= 0 ) break;

								if ( distance_code < 0 ) {
									var context;

									br.readMoreInput();
									if ( block_length[ 2 ] === 0 ) {
										DecodeBlockType(
											num_block_types[ 2 ],
											block_type_trees,
											2,
											block_type,
											block_type_rb,
											block_type_rb_index,
											br
										);
										block_length[ 2 ] = ReadBlockLength(
											block_len_trees,
											2 * HUFFMAN_MAX_TABLE_SIZE,
											br
										);
										dist_context_offset =
											block_type[ 2 ] <<
											kDistanceContextBits;
										dist_context_map_slice =
											dist_context_offset;
									}
									--block_length[ 2 ];
									context =
										( copy_length > 4
											? 3
											: copy_length - 2 ) & 0xff;
									dist_htree_index =
										dist_context_map[
											dist_context_map_slice + context
										];
									distance_code = ReadSymbol(
										hgroup[ 2 ].codes,
										hgroup[ 2 ].htrees[ dist_htree_index ],
										br
									);
									if (
										distance_code >=
										num_direct_distance_codes
									) {
										var nbits;
										var postfix;
										var offset;
										distance_code -=
											num_direct_distance_codes;
										postfix =
											distance_code &
											distance_postfix_mask;
										distance_code >>= distance_postfix_bits;
										nbits = ( distance_code >> 1 ) + 1;
										offset =
											( ( 2 + ( distance_code & 1 ) ) <<
												nbits ) -
											4;
										distance_code =
											num_direct_distance_codes +
											( ( offset +
												br.readBits( nbits ) ) <<
												distance_postfix_bits ) +
											postfix;
									}
								}

								/* Convert the distance code to the actual distance by possibly looking */
								/* up past distnaces from the ringbuffer. */
								distance = TranslateShortCodes(
									distance_code,
									dist_rb,
									dist_rb_idx
								);
								if ( distance < 0 ) {
									throw new Error(
										'[BrotliDecompress] invalid distance'
									);
								}

								if (
									pos < max_backward_distance &&
									max_distance !== max_backward_distance
								) {
									max_distance = pos;
								} else {
									max_distance = max_backward_distance;
								}

								copy_dst = pos & ringbuffer_mask;

								if ( distance > max_distance ) {
									if (
										copy_length >=
											BrotliDictionary.minDictionaryWordLength &&
										copy_length <=
											BrotliDictionary.maxDictionaryWordLength
									) {
										var offset =
											BrotliDictionary.offsetsByLength[
												copy_length
											];
										var word_id =
											distance - max_distance - 1;
										var shift =
											BrotliDictionary.sizeBitsByLength[
												copy_length
											];
										var mask = ( 1 << shift ) - 1;
										var word_idx = word_id & mask;
										var transform_idx = word_id >> shift;
										offset += word_idx * copy_length;
										if (
											transform_idx <
											Transform.kNumTransforms
										) {
											var len =
												Transform.transformDictionaryWord(
													ringbuffer,
													copy_dst,
													offset,
													copy_length,
													transform_idx
												);
											copy_dst += len;
											pos += len;
											meta_block_remaining_len -= len;
											if ( copy_dst >= ringbuffer_end ) {
												output.write(
													ringbuffer,
													ringbuffer_size
												);

												for (
													var _x = 0;
													_x <
													copy_dst - ringbuffer_end;
													_x++
												)
													ringbuffer[ _x ] =
														ringbuffer[
															ringbuffer_end + _x
														];
											}
										} else {
											throw new Error(
												'Invalid backward reference. pos: ' +
													pos +
													' distance: ' +
													distance +
													' len: ' +
													copy_length +
													' bytes left: ' +
													meta_block_remaining_len
											);
										}
									} else {
										throw new Error(
											'Invalid backward reference. pos: ' +
												pos +
												' distance: ' +
												distance +
												' len: ' +
												copy_length +
												' bytes left: ' +
												meta_block_remaining_len
										);
									}
								} else {
									if ( distance_code > 0 ) {
										dist_rb[ dist_rb_idx & 3 ] = distance;
										++dist_rb_idx;
									}

									if (
										copy_length > meta_block_remaining_len
									) {
										throw new Error(
											'Invalid backward reference. pos: ' +
												pos +
												' distance: ' +
												distance +
												' len: ' +
												copy_length +
												' bytes left: ' +
												meta_block_remaining_len
										);
									}

									for ( j = 0; j < copy_length; ++j ) {
										ringbuffer[ pos & ringbuffer_mask ] =
											ringbuffer[
												( pos - distance ) &
													ringbuffer_mask
											];
										if (
											( pos & ringbuffer_mask ) ===
											ringbuffer_mask
										) {
											output.write(
												ringbuffer,
												ringbuffer_size
											);
										}
										++pos;
										--meta_block_remaining_len;
									}
								}

								/* When we get here, we must have inserted at least one literal and */
								/* made a copy of at least length two, therefore accessing the last 2 */
								/* bytes is valid. */
								prev_byte1 =
									ringbuffer[ ( pos - 1 ) & ringbuffer_mask ];
								prev_byte2 =
									ringbuffer[ ( pos - 2 ) & ringbuffer_mask ];
							}

							/* Protect pos from overflow, wrap it around at every GB of input data */
							pos &= 0x3fffffff;
						}

						output.write( ringbuffer, pos & ringbuffer_mask );
					}

					exports.BrotliDecompress = BrotliDecompress;

					BrotliDictionary.init();
				},
				{
					'./bit_reader': 1,
					'./context': 2,
					'./dictionary': 6,
					'./huffman': 7,
					'./prefix': 9,
					'./streams': 10,
					'./transform': 11,
				},
			],
			4: [
				function ( require, module, exports ) {
					var base64 = require( 'base64-js' );
					//var fs = require('fs');

					/**
					 * The normal dictionary-data.js is quite large, which makes it
					 * unsuitable for browser usage. In order to make it smaller,
					 * we read dictionary.bin, which is a compressed version of
					 * the dictionary, and on initial load, Brotli decompresses
					 * it's own dictionary. 😜
					 */
					exports.init = function () {
						var BrotliDecompressBuffer =
							require( './decode' ).BrotliDecompressBuffer;
						var compressed = base64.toByteArray(
							require( './dictionary.bin.js' )
						);
						return BrotliDecompressBuffer( compressed );
					};
				},
				{ './decode': 3, './dictionary.bin.js': 5, 'base64-js': 8 },
			],
			5: [
				function ( require, module, exports ) {
					module.exports =
						'';
				},
				{},
			],
			6: [
				function ( require, module, exports ) {
					/* Copyright 2013 Google Inc. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Collection of static dictionary words.
*/

					var data = require( './dictionary-browser' );
					exports.init = function () {
						exports.dictionary = data.init();
					};

					exports.offsetsByLength = new Uint32Array( [
						0, 0, 0, 0, 0, 4096, 9216, 21504, 35840, 44032, 53248,
						63488, 74752, 87040, 93696, 100864, 104704, 106752,
						108928, 113536, 115968, 118528, 119872, 121280, 122016,
					] );

					exports.sizeBitsByLength = new Uint8Array( [
						0, 0, 0, 0, 10, 10, 11, 11, 10, 10, 10, 10, 10, 9, 9, 8,
						7, 7, 8, 7, 7, 6, 6, 5, 5,
					] );

					exports.minDictionaryWordLength = 4;
					exports.maxDictionaryWordLength = 24;
				},
				{ './dictionary-browser': 4 },
			],
			7: [
				function ( require, module, exports ) {
					function HuffmanCode( bits, value ) {
						this.bits =
							bits; /* number of bits used for this symbol */
						this.value = value; /* symbol value or table offset */
					}

					exports.HuffmanCode = HuffmanCode;

					var MAX_LENGTH = 15;

					/* Returns reverse(reverse(key, len) + 1, len), where reverse(key, len) is the
   bit-wise reversal of the len least significant bits of key. */
					function GetNextKey( key, len ) {
						var step = 1 << ( len - 1 );
						while ( key & step ) {
							step >>= 1;
						}
						return ( key & ( step - 1 ) ) + step;
					}

					/* Stores code in table[0], table[step], table[2*step], ..., table[end] */
					/* Assumes that end is an integer multiple of step */
					function ReplicateValue( table, i, step, end, code ) {
						do {
							end -= step;
							table[ i + end ] = new HuffmanCode(
								code.bits,
								code.value
							);
						} while ( end > 0 );
					}

					/* Returns the table width of the next 2nd level table. count is the histogram
   of bit lengths for the remaining symbols, len is the code length of the next
   processed symbol */
					function NextTableBitSize( count, len, root_bits ) {
						var left = 1 << ( len - root_bits );
						while ( len < MAX_LENGTH ) {
							left -= count[ len ];
							if ( left <= 0 ) break;
							++len;
							left <<= 1;
						}
						return len - root_bits;
					}

					exports.BrotliBuildHuffmanTable = function (
						root_table,
						table,
						root_bits,
						code_lengths,
						code_lengths_size
					) {
						var start_table = table;
						var code; /* current table entry */
						var len; /* current code length */
						var symbol; /* symbol index in original or sorted table */
						var key; /* reversed prefix code */
						var step; /* step size to replicate values in current table */
						var low; /* low bits for current root entry */
						var mask; /* mask for low bits */
						var table_bits; /* key length of current table */
						var table_size; /* size of current table */
						var total_size; /* sum of root table size and 2nd level table sizes */
						var sorted; /* symbols sorted by code length */
						var count = new Int32Array(
							MAX_LENGTH + 1
						); /* number of codes of each length */
						var offset = new Int32Array(
							MAX_LENGTH + 1
						); /* offsets in sorted table for each length */

						sorted = new Int32Array( code_lengths_size );

						/* build histogram of code lengths */
						for (
							symbol = 0;
							symbol < code_lengths_size;
							symbol++
						) {
							count[ code_lengths[ symbol ] ]++;
						}

						/* generate offsets into sorted symbol table by code length */
						offset[ 1 ] = 0;
						for ( len = 1; len < MAX_LENGTH; len++ ) {
							offset[ len + 1 ] = offset[ len ] + count[ len ];
						}

						/* sort symbols by length, by symbol order within each length */
						for (
							symbol = 0;
							symbol < code_lengths_size;
							symbol++
						) {
							if ( code_lengths[ symbol ] !== 0 ) {
								sorted[ offset[ code_lengths[ symbol ] ]++ ] =
									symbol;
							}
						}

						table_bits = root_bits;
						table_size = 1 << table_bits;
						total_size = table_size;

						/* special case code with only one value */
						if ( offset[ MAX_LENGTH ] === 1 ) {
							for ( key = 0; key < total_size; ++key ) {
								root_table[ table + key ] = new HuffmanCode(
									0,
									sorted[ 0 ] & 0xffff
								);
							}

							return total_size;
						}

						/* fill in root table */
						key = 0;
						symbol = 0;
						for (
							len = 1, step = 2;
							len <= root_bits;
							++len, step <<= 1
						) {
							for ( ; count[ len ] > 0; --count[ len ] ) {
								code = new HuffmanCode(
									len & 0xff,
									sorted[ symbol++ ] & 0xffff
								);
								ReplicateValue(
									root_table,
									table + key,
									step,
									table_size,
									code
								);
								key = GetNextKey( key, len );
							}
						}

						/* fill in 2nd level tables and add pointers to root table */
						mask = total_size - 1;
						low = -1;
						for (
							len = root_bits + 1, step = 2;
							len <= MAX_LENGTH;
							++len, step <<= 1
						) {
							for ( ; count[ len ] > 0; --count[ len ] ) {
								if ( ( key & mask ) !== low ) {
									table += table_size;
									table_bits = NextTableBitSize(
										count,
										len,
										root_bits
									);
									table_size = 1 << table_bits;
									total_size += table_size;
									low = key & mask;
									root_table[ start_table + low ] =
										new HuffmanCode(
											( table_bits + root_bits ) & 0xff,
											( table - start_table - low ) &
												0xffff
										);
								}
								code = new HuffmanCode(
									( len - root_bits ) & 0xff,
									sorted[ symbol++ ] & 0xffff
								);
								ReplicateValue(
									root_table,
									table + ( key >> root_bits ),
									step,
									table_size,
									code
								);
								key = GetNextKey( key, len );
							}
						}

						return total_size;
					};
				},
				{},
			],
			8: [
				function ( require, module, exports ) {
					'use strict';

					exports.byteLength = byteLength;
					exports.toByteArray = toByteArray;
					exports.fromByteArray = fromByteArray;

					var lookup = [];
					var revLookup = [];
					var Arr =
						typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

					var code =
						'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
					for ( var i = 0, len = code.length; i < len; ++i ) {
						lookup[ i ] = code[ i ];
						revLookup[ code.charCodeAt( i ) ] = i;
					}

					// Support decoding URL-safe base64 strings, as Node.js does.
					// See: https://en.wikipedia.org/wiki/Base64#URL_applications
					revLookup[ '-'.charCodeAt( 0 ) ] = 62;
					revLookup[ '_'.charCodeAt( 0 ) ] = 63;

					function getLens( b64 ) {
						var len = b64.length;

						if ( len % 4 > 0 ) {
							throw new Error(
								'Invalid string. Length must be a multiple of 4'
							);
						}

						// Trim off extra bytes after placeholder bytes are found
						// See: https://github.com/beatgammit/base64-js/issues/42
						var validLen = b64.indexOf( '=' );
						if ( validLen === -1 ) validLen = len;

						var placeHoldersLen =
							validLen === len ? 0 : 4 - ( validLen % 4 );

						return [ validLen, placeHoldersLen ];
					}

					// base64 is 4/3 + up to two characters of the original data
					function byteLength( b64 ) {
						var lens = getLens( b64 );
						var validLen = lens[ 0 ];
						var placeHoldersLen = lens[ 1 ];
						return (
							( ( validLen + placeHoldersLen ) * 3 ) / 4 -
							placeHoldersLen
						);
					}

					function _byteLength( b64, validLen, placeHoldersLen ) {
						return (
							( ( validLen + placeHoldersLen ) * 3 ) / 4 -
							placeHoldersLen
						);
					}

					function toByteArray( b64 ) {
						var tmp;
						var lens = getLens( b64 );
						var validLen = lens[ 0 ];
						var placeHoldersLen = lens[ 1 ];

						var arr = new Arr(
							_byteLength( b64, validLen, placeHoldersLen )
						);

						var curByte = 0;

						// if there are placeholders, only get up to the last complete 4 chars
						var len = placeHoldersLen > 0 ? validLen - 4 : validLen;

						for ( var i = 0; i < len; i += 4 ) {
							tmp =
								( revLookup[ b64.charCodeAt( i ) ] << 18 ) |
								( revLookup[ b64.charCodeAt( i + 1 ) ] << 12 ) |
								( revLookup[ b64.charCodeAt( i + 2 ) ] << 6 ) |
								revLookup[ b64.charCodeAt( i + 3 ) ];
							arr[ curByte++ ] = ( tmp >> 16 ) & 0xff;
							arr[ curByte++ ] = ( tmp >> 8 ) & 0xff;
							arr[ curByte++ ] = tmp & 0xff;
						}

						if ( placeHoldersLen === 2 ) {
							tmp =
								( revLookup[ b64.charCodeAt( i ) ] << 2 ) |
								( revLookup[ b64.charCodeAt( i + 1 ) ] >> 4 );
							arr[ curByte++ ] = tmp & 0xff;
						}

						if ( placeHoldersLen === 1 ) {
							tmp =
								( revLookup[ b64.charCodeAt( i ) ] << 10 ) |
								( revLookup[ b64.charCodeAt( i + 1 ) ] << 4 ) |
								( revLookup[ b64.charCodeAt( i + 2 ) ] >> 2 );
							arr[ curByte++ ] = ( tmp >> 8 ) & 0xff;
							arr[ curByte++ ] = tmp & 0xff;
						}

						return arr;
					}

					function tripletToBase64( num ) {
						return (
							lookup[ ( num >> 18 ) & 0x3f ] +
							lookup[ ( num >> 12 ) & 0x3f ] +
							lookup[ ( num >> 6 ) & 0x3f ] +
							lookup[ num & 0x3f ]
						);
					}

					function encodeChunk( uint8, start, end ) {
						var tmp;
						var output = [];
						for ( var i = start; i < end; i += 3 ) {
							tmp =
								( ( uint8[ i ] << 16 ) & 0xff0000 ) +
								( ( uint8[ i + 1 ] << 8 ) & 0xff00 ) +
								( uint8[ i + 2 ] & 0xff );
							output.push( tripletToBase64( tmp ) );
						}
						return output.join( '' );
					}

					function fromByteArray( uint8 ) {
						var tmp;
						var len = uint8.length;
						var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
						var parts = [];
						var maxChunkLength = 16383; // must be multiple of 3

						// go through the array every three bytes, we'll deal with trailing stuff later
						for (
							var i = 0, len2 = len - extraBytes;
							i < len2;
							i += maxChunkLength
						) {
							parts.push(
								encodeChunk(
									uint8,
									i,
									i + maxChunkLength > len2
										? len2
										: i + maxChunkLength
								)
							);
						}

						// pad the end with zeros, but make sure to not forget the extra bytes
						if ( extraBytes === 1 ) {
							tmp = uint8[ len - 1 ];
							parts.push(
								lookup[ tmp >> 2 ] +
									lookup[ ( tmp << 4 ) & 0x3f ] +
									'=='
							);
						} else if ( extraBytes === 2 ) {
							tmp = ( uint8[ len - 2 ] << 8 ) + uint8[ len - 1 ];
							parts.push(
								lookup[ tmp >> 10 ] +
									lookup[ ( tmp >> 4 ) & 0x3f ] +
									lookup[ ( tmp << 2 ) & 0x3f ] +
									'='
							);
						}

						return parts.join( '' );
					}
				},
				{},
			],
			9: [
				function ( require, module, exports ) {
					/* Copyright 2013 Google Inc. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Lookup tables to map prefix codes to value ranges. This is used during
   decoding of the block lengths, literal insertion lengths and copy lengths.
*/

					/* Represents the range of values belonging to a prefix code: */
					/* [offset, offset + 2^nbits) */
					function PrefixCodeRange( offset, nbits ) {
						this.offset = offset;
						this.nbits = nbits;
					}

					exports.kBlockLengthPrefixCode = [
						new PrefixCodeRange( 1, 2 ),
						new PrefixCodeRange( 5, 2 ),
						new PrefixCodeRange( 9, 2 ),
						new PrefixCodeRange( 13, 2 ),
						new PrefixCodeRange( 17, 3 ),
						new PrefixCodeRange( 25, 3 ),
						new PrefixCodeRange( 33, 3 ),
						new PrefixCodeRange( 41, 3 ),
						new PrefixCodeRange( 49, 4 ),
						new PrefixCodeRange( 65, 4 ),
						new PrefixCodeRange( 81, 4 ),
						new PrefixCodeRange( 97, 4 ),
						new PrefixCodeRange( 113, 5 ),
						new PrefixCodeRange( 145, 5 ),
						new PrefixCodeRange( 177, 5 ),
						new PrefixCodeRange( 209, 5 ),
						new PrefixCodeRange( 241, 6 ),
						new PrefixCodeRange( 305, 6 ),
						new PrefixCodeRange( 369, 7 ),
						new PrefixCodeRange( 497, 8 ),
						new PrefixCodeRange( 753, 9 ),
						new PrefixCodeRange( 1265, 10 ),
						new PrefixCodeRange( 2289, 11 ),
						new PrefixCodeRange( 4337, 12 ),
						new PrefixCodeRange( 8433, 13 ),
						new PrefixCodeRange( 16625, 24 ),
					];

					exports.kInsertLengthPrefixCode = [
						new PrefixCodeRange( 0, 0 ),
						new PrefixCodeRange( 1, 0 ),
						new PrefixCodeRange( 2, 0 ),
						new PrefixCodeRange( 3, 0 ),
						new PrefixCodeRange( 4, 0 ),
						new PrefixCodeRange( 5, 0 ),
						new PrefixCodeRange( 6, 1 ),
						new PrefixCodeRange( 8, 1 ),
						new PrefixCodeRange( 10, 2 ),
						new PrefixCodeRange( 14, 2 ),
						new PrefixCodeRange( 18, 3 ),
						new PrefixCodeRange( 26, 3 ),
						new PrefixCodeRange( 34, 4 ),
						new PrefixCodeRange( 50, 4 ),
						new PrefixCodeRange( 66, 5 ),
						new PrefixCodeRange( 98, 5 ),
						new PrefixCodeRange( 130, 6 ),
						new PrefixCodeRange( 194, 7 ),
						new PrefixCodeRange( 322, 8 ),
						new PrefixCodeRange( 578, 9 ),
						new PrefixCodeRange( 1090, 10 ),
						new PrefixCodeRange( 2114, 12 ),
						new PrefixCodeRange( 6210, 14 ),
						new PrefixCodeRange( 22594, 24 ),
					];

					exports.kCopyLengthPrefixCode = [
						new PrefixCodeRange( 2, 0 ),
						new PrefixCodeRange( 3, 0 ),
						new PrefixCodeRange( 4, 0 ),
						new PrefixCodeRange( 5, 0 ),
						new PrefixCodeRange( 6, 0 ),
						new PrefixCodeRange( 7, 0 ),
						new PrefixCodeRange( 8, 0 ),
						new PrefixCodeRange( 9, 0 ),
						new PrefixCodeRange( 10, 1 ),
						new PrefixCodeRange( 12, 1 ),
						new PrefixCodeRange( 14, 2 ),
						new PrefixCodeRange( 18, 2 ),
						new PrefixCodeRange( 22, 3 ),
						new PrefixCodeRange( 30, 3 ),
						new PrefixCodeRange( 38, 4 ),
						new PrefixCodeRange( 54, 4 ),
						new PrefixCodeRange( 70, 5 ),
						new PrefixCodeRange( 102, 5 ),
						new PrefixCodeRange( 134, 6 ),
						new PrefixCodeRange( 198, 7 ),
						new PrefixCodeRange( 326, 8 ),
						new PrefixCodeRange( 582, 9 ),
						new PrefixCodeRange( 1094, 10 ),
						new PrefixCodeRange( 2118, 24 ),
					];

					exports.kInsertRangeLut = [ 0, 0, 8, 8, 0, 16, 8, 16, 16 ];

					exports.kCopyRangeLut = [ 0, 8, 0, 8, 16, 0, 16, 8, 16 ];
				},
				{},
			],
			10: [
				function ( require, module, exports ) {
					function BrotliInput( buffer ) {
						this.buffer = buffer;
						this.pos = 0;
					}

					BrotliInput.prototype.read = function ( buf, i, count ) {
						if ( this.pos + count > this.buffer.length ) {
							count = this.buffer.length - this.pos;
						}

						for ( var p = 0; p < count; p++ )
							buf[ i + p ] = this.buffer[ this.pos + p ];

						this.pos += count;
						return count;
					};

					exports.BrotliInput = BrotliInput;

					function BrotliOutput( buf ) {
						this.buffer = buf;
						this.pos = 0;
					}

					BrotliOutput.prototype.write = function ( buf, count ) {
						if ( this.pos + count > this.buffer.length )
							throw new Error(
								'Output buffer is not large enough'
							);

						this.buffer.set( buf.subarray( 0, count ), this.pos );
						this.pos += count;
						return count;
					};

					exports.BrotliOutput = BrotliOutput;
				},
				{},
			],
			11: [
				function ( require, module, exports ) {
					/* Copyright 2013 Google Inc. All Rights Reserved.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   Transformations on dictionary words.
*/

					var BrotliDictionary = require( './dictionary' );

					var kIdentity = 0;
					var kOmitLast1 = 1;
					var kOmitLast2 = 2;
					var kOmitLast3 = 3;
					var kOmitLast4 = 4;
					var kOmitLast5 = 5;
					var kOmitLast6 = 6;
					var kOmitLast7 = 7;
					var kOmitLast8 = 8;
					var kOmitLast9 = 9;
					var kUppercaseFirst = 10;
					var kUppercaseAll = 11;
					var kOmitFirst1 = 12;
					var kOmitFirst2 = 13;
					var kOmitFirst3 = 14;
					var kOmitFirst4 = 15;
					var kOmitFirst5 = 16;
					var kOmitFirst6 = 17;
					var kOmitFirst7 = 18;
					var kOmitFirst8 = 19;
					var kOmitFirst9 = 20;

					function Transform( prefix, transform, suffix ) {
						this.prefix = new Uint8Array( prefix.length );
						this.transform = transform;
						this.suffix = new Uint8Array( suffix.length );

						for ( var i = 0; i < prefix.length; i++ )
							this.prefix[ i ] = prefix.charCodeAt( i );

						for ( var i = 0; i < suffix.length; i++ )
							this.suffix[ i ] = suffix.charCodeAt( i );
					}

					var kTransforms = [
						new Transform( '', kIdentity, '' ),
						new Transform( '', kIdentity, ' ' ),
						new Transform( ' ', kIdentity, ' ' ),
						new Transform( '', kOmitFirst1, '' ),
						new Transform( '', kUppercaseFirst, ' ' ),
						new Transform( '', kIdentity, ' the ' ),
						new Transform( ' ', kIdentity, '' ),
						new Transform( 's ', kIdentity, ' ' ),
						new Transform( '', kIdentity, ' of ' ),
						new Transform( '', kUppercaseFirst, '' ),
						new Transform( '', kIdentity, ' and ' ),
						new Transform( '', kOmitFirst2, '' ),
						new Transform( '', kOmitLast1, '' ),
						new Transform( ', ', kIdentity, ' ' ),
						new Transform( '', kIdentity, ', ' ),
						new Transform( ' ', kUppercaseFirst, ' ' ),
						new Transform( '', kIdentity, ' in ' ),
						new Transform( '', kIdentity, ' to ' ),
						new Transform( 'e ', kIdentity, ' ' ),
						new Transform( '', kIdentity, '"' ),
						new Transform( '', kIdentity, '.' ),
						new Transform( '', kIdentity, '">' ),
						new Transform( '', kIdentity, '\n' ),
						new Transform( '', kOmitLast3, '' ),
						new Transform( '', kIdentity, ']' ),
						new Transform( '', kIdentity, ' for ' ),
						new Transform( '', kOmitFirst3, '' ),
						new Transform( '', kOmitLast2, '' ),
						new Transform( '', kIdentity, ' a ' ),
						new Transform( '', kIdentity, ' that ' ),
						new Transform( ' ', kUppercaseFirst, '' ),
						new Transform( '', kIdentity, '. ' ),
						new Transform( '.', kIdentity, '' ),
						new Transform( ' ', kIdentity, ', ' ),
						new Transform( '', kOmitFirst4, '' ),
						new Transform( '', kIdentity, ' with ' ),
						new Transform( '', kIdentity, "'" ),
						new Transform( '', kIdentity, ' from ' ),
						new Transform( '', kIdentity, ' by ' ),
						new Transform( '', kOmitFirst5, '' ),
						new Transform( '', kOmitFirst6, '' ),
						new Transform( ' the ', kIdentity, '' ),
						new Transform( '', kOmitLast4, '' ),
						new Transform( '', kIdentity, '. The ' ),
						new Transform( '', kUppercaseAll, '' ),
						new Transform( '', kIdentity, ' on ' ),
						new Transform( '', kIdentity, ' as ' ),
						new Transform( '', kIdentity, ' is ' ),
						new Transform( '', kOmitLast7, '' ),
						new Transform( '', kOmitLast1, 'ing ' ),
						new Transform( '', kIdentity, '\n\t' ),
						new Transform( '', kIdentity, ':' ),
						new Transform( ' ', kIdentity, '. ' ),
						new Transform( '', kIdentity, 'ed ' ),
						new Transform( '', kOmitFirst9, '' ),
						new Transform( '', kOmitFirst7, '' ),
						new Transform( '', kOmitLast6, '' ),
						new Transform( '', kIdentity, '(' ),
						new Transform( '', kUppercaseFirst, ', ' ),
						new Transform( '', kOmitLast8, '' ),
						new Transform( '', kIdentity, ' at ' ),
						new Transform( '', kIdentity, 'ly ' ),
						new Transform( ' the ', kIdentity, ' of ' ),
						new Transform( '', kOmitLast5, '' ),
						new Transform( '', kOmitLast9, '' ),
						new Transform( ' ', kUppercaseFirst, ', ' ),
						new Transform( '', kUppercaseFirst, '"' ),
						new Transform( '.', kIdentity, '(' ),
						new Transform( '', kUppercaseAll, ' ' ),
						new Transform( '', kUppercaseFirst, '">' ),
						new Transform( '', kIdentity, '="' ),
						new Transform( ' ', kIdentity, '.' ),
						new Transform( '.com/', kIdentity, '' ),
						new Transform( ' the ', kIdentity, ' of the ' ),
						new Transform( '', kUppercaseFirst, "'" ),
						new Transform( '', kIdentity, '. This ' ),
						new Transform( '', kIdentity, ',' ),
						new Transform( '.', kIdentity, ' ' ),
						new Transform( '', kUppercaseFirst, '(' ),
						new Transform( '', kUppercaseFirst, '.' ),
						new Transform( '', kIdentity, ' not ' ),
						new Transform( ' ', kIdentity, '="' ),
						new Transform( '', kIdentity, 'er ' ),
						new Transform( ' ', kUppercaseAll, ' ' ),
						new Transform( '', kIdentity, 'al ' ),
						new Transform( ' ', kUppercaseAll, '' ),
						new Transform( '', kIdentity, "='" ),
						new Transform( '', kUppercaseAll, '"' ),
						new Transform( '', kUppercaseFirst, '. ' ),
						new Transform( ' ', kIdentity, '(' ),
						new Transform( '', kIdentity, 'ful ' ),
						new Transform( ' ', kUppercaseFirst, '. ' ),
						new Transform( '', kIdentity, 'ive ' ),
						new Transform( '', kIdentity, 'less ' ),
						new Transform( '', kUppercaseAll, "'" ),
						new Transform( '', kIdentity, 'est ' ),
						new Transform( ' ', kUppercaseFirst, '.' ),
						new Transform( '', kUppercaseAll, '">' ),
						new Transform( ' ', kIdentity, "='" ),
						new Transform( '', kUppercaseFirst, ',' ),
						new Transform( '', kIdentity, 'ize ' ),
						new Transform( '', kUppercaseAll, '.' ),
						new Transform( '\xc2\xa0', kIdentity, '' ),
						new Transform( ' ', kIdentity, ',' ),
						new Transform( '', kUppercaseFirst, '="' ),
						new Transform( '', kUppercaseAll, '="' ),
						new Transform( '', kIdentity, 'ous ' ),
						new Transform( '', kUppercaseAll, ', ' ),
						new Transform( '', kUppercaseFirst, "='" ),
						new Transform( ' ', kUppercaseFirst, ',' ),
						new Transform( ' ', kUppercaseAll, '="' ),
						new Transform( ' ', kUppercaseAll, ', ' ),
						new Transform( '', kUppercaseAll, ',' ),
						new Transform( '', kUppercaseAll, '(' ),
						new Transform( '', kUppercaseAll, '. ' ),
						new Transform( ' ', kUppercaseAll, '.' ),
						new Transform( '', kUppercaseAll, "='" ),
						new Transform( ' ', kUppercaseAll, '. ' ),
						new Transform( ' ', kUppercaseFirst, '="' ),
						new Transform( ' ', kUppercaseAll, "='" ),
						new Transform( ' ', kUppercaseFirst, "='" ),
					];

					exports.kTransforms = kTransforms;
					exports.kNumTransforms = kTransforms.length;

					function ToUpperCase( p, i ) {
						if ( p[ i ] < 0xc0 ) {
							if ( p[ i ] >= 97 && p[ i ] <= 122 ) {
								p[ i ] ^= 32;
							}
							return 1;
						}

						/* An overly simplified uppercasing model for utf-8. */
						if ( p[ i ] < 0xe0 ) {
							p[ i + 1 ] ^= 32;
							return 2;
						}

						/* An arbitrary transform for three byte characters. */
						p[ i + 2 ] ^= 5;
						return 3;
					}

					exports.transformDictionaryWord = function (
						dst,
						idx,
						word,
						len,
						transform
					) {
						var prefix = kTransforms[ transform ].prefix;
						var suffix = kTransforms[ transform ].suffix;
						var t = kTransforms[ transform ].transform;
						var skip =
							t < kOmitFirst1 ? 0 : t - ( kOmitFirst1 - 1 );
						var i = 0;
						var start_idx = idx;
						var uppercase;

						if ( skip > len ) {
							skip = len;
						}

						var prefix_pos = 0;
						while ( prefix_pos < prefix.length ) {
							dst[ idx++ ] = prefix[ prefix_pos++ ];
						}

						word += skip;
						len -= skip;

						if ( t <= kOmitLast9 ) {
							len -= t;
						}

						for ( i = 0; i < len; i++ ) {
							dst[ idx++ ] =
								BrotliDictionary.dictionary[ word + i ];
						}

						uppercase = idx - len;

						if ( t === kUppercaseFirst ) {
							ToUpperCase( dst, uppercase );
						} else if ( t === kUppercaseAll ) {
							while ( len > 0 ) {
								var step = ToUpperCase( dst, uppercase );
								uppercase += step;
								len -= step;
							}
						}

						var suffix_pos = 0;
						while ( suffix_pos < suffix.length ) {
							dst[ idx++ ] = suffix[ suffix_pos++ ];
						}

						return idx - start_idx;
					};
				},
				{ './dictionary': 6 },
			],
			12: [
				function ( require, module, exports ) {
					module.exports =
						require( './dec/decode' ).BrotliDecompressBuffer;
				},
				{ './dec/decode': 3 },
			],
		},
		{},
		[ 12 ]
	)( 12 );
} );
/* eslint-enable */


/***/ }),

/***/ 4306:
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	autosize 4.0.4
	license: MIT
	http://www.jacklmoore.com/autosize
*/
(function (global, factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else { var mod; }
})(this, function (module, exports) {
	'use strict';

	var map = typeof Map === "function" ? new Map() : function () {
		var keys = [];
		var values = [];

		return {
			has: function has(key) {
				return keys.indexOf(key) > -1;
			},
			get: function get(key) {
				return values[keys.indexOf(key)];
			},
			set: function set(key, value) {
				if (keys.indexOf(key) === -1) {
					keys.push(key);
					values.push(value);
				}
			},
			delete: function _delete(key) {
				var index = keys.indexOf(key);
				if (index > -1) {
					keys.splice(index, 1);
					values.splice(index, 1);
				}
			}
		};
	}();

	var createEvent = function createEvent(name) {
		return new Event(name, { bubbles: true });
	};
	try {
		new Event('test');
	} catch (e) {
		// IE does not support `new Event()`
		createEvent = function createEvent(name) {
			var evt = document.createEvent('Event');
			evt.initEvent(name, true, false);
			return evt;
		};
	}

	function assign(ta) {
		if (!ta || !ta.nodeName || ta.nodeName !== 'TEXTAREA' || map.has(ta)) return;

		var heightOffset = null;
		var clientWidth = null;
		var cachedHeight = null;

		function init() {
			var style = window.getComputedStyle(ta, null);

			if (style.resize === 'vertical') {
				ta.style.resize = 'none';
			} else if (style.resize === 'both') {
				ta.style.resize = 'horizontal';
			}

			if (style.boxSizing === 'content-box') {
				heightOffset = -(parseFloat(style.paddingTop) + parseFloat(style.paddingBottom));
			} else {
				heightOffset = parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth);
			}
			// Fix when a textarea is not on document body and heightOffset is Not a Number
			if (isNaN(heightOffset)) {
				heightOffset = 0;
			}

			update();
		}

		function changeOverflow(value) {
			{
				// Chrome/Safari-specific fix:
				// When the textarea y-overflow is hidden, Chrome/Safari do not reflow the text to account for the space
				// made available by removing the scrollbar. The following forces the necessary text reflow.
				var width = ta.style.width;
				ta.style.width = '0px';
				// Force reflow:
				/* jshint ignore:start */
				ta.offsetWidth;
				/* jshint ignore:end */
				ta.style.width = width;
			}

			ta.style.overflowY = value;
		}

		function getParentOverflows(el) {
			var arr = [];

			while (el && el.parentNode && el.parentNode instanceof Element) {
				if (el.parentNode.scrollTop) {
					arr.push({
						node: el.parentNode,
						scrollTop: el.parentNode.scrollTop
					});
				}
				el = el.parentNode;
			}

			return arr;
		}

		function resize() {
			if (ta.scrollHeight === 0) {
				// If the scrollHeight is 0, then the element probably has display:none or is detached from the DOM.
				return;
			}

			var overflows = getParentOverflows(ta);
			var docTop = document.documentElement && document.documentElement.scrollTop; // Needed for Mobile IE (ticket #240)

			ta.style.height = '';
			ta.style.height = ta.scrollHeight + heightOffset + 'px';

			// used to check if an update is actually necessary on window.resize
			clientWidth = ta.clientWidth;

			// prevents scroll-position jumping
			overflows.forEach(function (el) {
				el.node.scrollTop = el.scrollTop;
			});

			if (docTop) {
				document.documentElement.scrollTop = docTop;
			}
		}

		function update() {
			resize();

			var styleHeight = Math.round(parseFloat(ta.style.height));
			var computed = window.getComputedStyle(ta, null);

			// Using offsetHeight as a replacement for computed.height in IE, because IE does not account use of border-box
			var actualHeight = computed.boxSizing === 'content-box' ? Math.round(parseFloat(computed.height)) : ta.offsetHeight;

			// The actual height not matching the style height (set via the resize method) indicates that 
			// the max-height has been exceeded, in which case the overflow should be allowed.
			if (actualHeight < styleHeight) {
				if (computed.overflowY === 'hidden') {
					changeOverflow('scroll');
					resize();
					actualHeight = computed.boxSizing === 'content-box' ? Math.round(parseFloat(window.getComputedStyle(ta, null).height)) : ta.offsetHeight;
				}
			} else {
				// Normally keep overflow set to hidden, to avoid flash of scrollbar as the textarea expands.
				if (computed.overflowY !== 'hidden') {
					changeOverflow('hidden');
					resize();
					actualHeight = computed.boxSizing === 'content-box' ? Math.round(parseFloat(window.getComputedStyle(ta, null).height)) : ta.offsetHeight;
				}
			}

			if (cachedHeight !== actualHeight) {
				cachedHeight = actualHeight;
				var evt = createEvent('autosize:resized');
				try {
					ta.dispatchEvent(evt);
				} catch (err) {
					// Firefox will throw an error on dispatchEvent for a detached element
					// https://bugzilla.mozilla.org/show_bug.cgi?id=889376
				}
			}
		}

		var pageResize = function pageResize() {
			if (ta.clientWidth !== clientWidth) {
				update();
			}
		};

		var destroy = function (style) {
			window.removeEventListener('resize', pageResize, false);
			ta.removeEventListener('input', update, false);
			ta.removeEventListener('keyup', update, false);
			ta.removeEventListener('autosize:destroy', destroy, false);
			ta.removeEventListener('autosize:update', update, false);

			Object.keys(style).forEach(function (key) {
				ta.style[key] = style[key];
			});

			map.delete(ta);
		}.bind(ta, {
			height: ta.style.height,
			resize: ta.style.resize,
			overflowY: ta.style.overflowY,
			overflowX: ta.style.overflowX,
			wordWrap: ta.style.wordWrap
		});

		ta.addEventListener('autosize:destroy', destroy, false);

		// IE9 does not fire onpropertychange or oninput for deletions,
		// so binding to onkeyup to catch most of those events.
		// There is no way that I know of to detect something like 'cut' in IE9.
		if ('onpropertychange' in ta && 'oninput' in ta) {
			ta.addEventListener('keyup', update, false);
		}

		window.addEventListener('resize', pageResize, false);
		ta.addEventListener('input', update, false);
		ta.addEventListener('autosize:update', update, false);
		ta.style.overflowX = 'hidden';
		ta.style.wordWrap = 'break-word';

		map.set(ta, {
			destroy: destroy,
			update: update
		});

		init();
	}

	function destroy(ta) {
		var methods = map.get(ta);
		if (methods) {
			methods.destroy();
		}
	}

	function update(ta) {
		var methods = map.get(ta);
		if (methods) {
			methods.update();
		}
	}

	var autosize = null;

	// Do nothing in Node.js environment and IE8 (or lower)
	if (typeof window === 'undefined' || typeof window.getComputedStyle !== 'function') {
		autosize = function autosize(el) {
			return el;
		};
		autosize.destroy = function (el) {
			return el;
		};
		autosize.update = function (el) {
			return el;
		};
	} else {
		autosize = function autosize(el, options) {
			if (el) {
				Array.prototype.forEach.call(el.length ? el : [el], function (x) {
					return assign(x, options);
				});
			}
			return el;
		};
		autosize.destroy = function (el) {
			if (el) {
				Array.prototype.forEach.call(el.length ? el : [el], destroy);
			}
			return el;
		};
		autosize.update = function (el) {
			if (el) {
				Array.prototype.forEach.call(el.length ? el : [el], update);
			}
			return el;
		};
	}

	exports.default = autosize;
	module.exports = exports['default'];
});

/***/ }),

/***/ 5755:
/***/ ((module, exports) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;
	var nativeCodeString = '[native code]';

	function classNames() {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg)) {
				if (arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				}
			} else if (argType === 'object') {
				if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {
					classes.push(arg.toString());
					continue;
				}

				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if ( true && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (true) {
		// register as 'classnames', consistent with npm package name
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return classNames;
		}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
}());


/***/ }),

/***/ 6109:
/***/ ((module) => {

// This code has been refactored for 140 bytes
// You can see the original here: https://github.com/twolfson/computedStyle/blob/04cd1da2e30fa45844f95f5cb1ac898e9b9ef050/lib/computedStyle.js
var computedStyle = function (el, prop, getComputedStyle) {
  getComputedStyle = window.getComputedStyle;

  // In one fell swoop
  return (
    // If we have getComputedStyle
    getComputedStyle ?
      // Query it
      // TODO: From CSS-Query notes, we might need (node, null) for FF
      getComputedStyle(el) :

    // Otherwise, we are in IE and use currentStyle
      el.currentStyle
  )[
    // Switch to camelCase for CSSOM
    // DEV: Grabbed from jQuery
    // https://github.com/jquery/jquery/blob/1.9-stable/src/css.js#L191-L194
    // https://github.com/jquery/jquery/blob/1.9-stable/src/core.js#L593-L597
    prop.replace(/-(\w)/gi, function (word, letter) {
      return letter.toUpperCase();
    })
  ];
};

module.exports = computedStyle;


/***/ }),

/***/ 66:
/***/ ((module) => {

"use strict";


var isMergeableObject = function isMergeableObject(value) {
	return isNonNullObject(value)
		&& !isSpecial(value)
};

function isNonNullObject(value) {
	return !!value && typeof value === 'object'
}

function isSpecial(value) {
	var stringValue = Object.prototype.toString.call(value);

	return stringValue === '[object RegExp]'
		|| stringValue === '[object Date]'
		|| isReactElement(value)
}

// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

function isReactElement(value) {
	return value.$$typeof === REACT_ELEMENT_TYPE
}

function emptyTarget(val) {
	return Array.isArray(val) ? [] : {}
}

function cloneUnlessOtherwiseSpecified(value, options) {
	return (options.clone !== false && options.isMergeableObject(value))
		? deepmerge(emptyTarget(value), value, options)
		: value
}

function defaultArrayMerge(target, source, options) {
	return target.concat(source).map(function(element) {
		return cloneUnlessOtherwiseSpecified(element, options)
	})
}

function getMergeFunction(key, options) {
	if (!options.customMerge) {
		return deepmerge
	}
	var customMerge = options.customMerge(key);
	return typeof customMerge === 'function' ? customMerge : deepmerge
}

function getEnumerableOwnPropertySymbols(target) {
	return Object.getOwnPropertySymbols
		? Object.getOwnPropertySymbols(target).filter(function(symbol) {
			return Object.propertyIsEnumerable.call(target, symbol)
		})
		: []
}

function getKeys(target) {
	return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))
}

function propertyIsOnObject(object, property) {
	try {
		return property in object
	} catch(_) {
		return false
	}
}

// Protects from prototype poisoning and unexpected merging up the prototype chain.
function propertyIsUnsafe(target, key) {
	return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
		&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
			&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.
}

function mergeObject(target, source, options) {
	var destination = {};
	if (options.isMergeableObject(target)) {
		getKeys(target).forEach(function(key) {
			destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
		});
	}
	getKeys(source).forEach(function(key) {
		if (propertyIsUnsafe(target, key)) {
			return
		}

		if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
			destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
		} else {
			destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
		}
	});
	return destination
}

function deepmerge(target, source, options) {
	options = options || {};
	options.arrayMerge = options.arrayMerge || defaultArrayMerge;
	options.isMergeableObject = options.isMergeableObject || isMergeableObject;
	// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
	// implementations can use it. The caller may not replace it.
	options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;

	var sourceIsArray = Array.isArray(source);
	var targetIsArray = Array.isArray(target);
	var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

	if (!sourceAndTargetTypesMatch) {
		return cloneUnlessOtherwiseSpecified(source, options)
	} else if (sourceIsArray) {
		return options.arrayMerge(target, source, options)
	} else {
		return mergeObject(target, source, options)
	}
}

deepmerge.all = function deepmergeAll(array, options) {
	if (!Array.isArray(array)) {
		throw new Error('first argument should be an array')
	}

	return array.reduce(function(prev, next) {
		return deepmerge(prev, next, options)
	}, {})
};

var deepmerge_1 = deepmerge;

module.exports = deepmerge_1;


/***/ }),

/***/ 461:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// Load in dependencies
var computedStyle = __webpack_require__(6109);

/**
 * Calculate the `line-height` of a given node
 * @param {HTMLElement} node Element to calculate line height of. Must be in the DOM.
 * @returns {Number} `line-height` of the element in pixels
 */
function lineHeight(node) {
  // Grab the line-height via style
  var lnHeightStr = computedStyle(node, 'line-height');
  var lnHeight = parseFloat(lnHeightStr, 10);

  // If the lineHeight did not contain a unit (i.e. it was numeric), convert it to ems (e.g. '2.3' === '2.3em')
  if (lnHeightStr === lnHeight + '') {
    // Save the old lineHeight style and update the em unit to the element
    var _lnHeightStyle = node.style.lineHeight;
    node.style.lineHeight = lnHeightStr + 'em';

    // Calculate the em based height
    lnHeightStr = computedStyle(node, 'line-height');
    lnHeight = parseFloat(lnHeightStr, 10);

    // Revert the lineHeight style
    if (_lnHeightStyle) {
      node.style.lineHeight = _lnHeightStyle;
    } else {
      delete node.style.lineHeight;
    }
  }

  // If the lineHeight is in `pt`, convert it to pixels (4px for 3pt)
  // DEV: `em` units are converted to `pt` in IE6
  // Conversion ratio from https://developer.mozilla.org/en-US/docs/Web/CSS/length
  if (lnHeightStr.indexOf('pt') !== -1) {
    lnHeight *= 4;
    lnHeight /= 3;
  // Otherwise, if the lineHeight is in `mm`, convert it to pixels (96px for 25.4mm)
  } else if (lnHeightStr.indexOf('mm') !== -1) {
    lnHeight *= 96;
    lnHeight /= 25.4;
  // Otherwise, if the lineHeight is in `cm`, convert it to pixels (96px for 2.54cm)
  } else if (lnHeightStr.indexOf('cm') !== -1) {
    lnHeight *= 96;
    lnHeight /= 2.54;
  // Otherwise, if the lineHeight is in `in`, convert it to pixels (96px for 1in)
  } else if (lnHeightStr.indexOf('in') !== -1) {
    lnHeight *= 96;
  // Otherwise, if the lineHeight is in `pc`, convert it to pixels (12pt for 1pc)
  } else if (lnHeightStr.indexOf('pc') !== -1) {
    lnHeight *= 16;
  }

  // Continue our computation
  lnHeight = Math.round(lnHeight);

  // If the line-height is "normal", calculate by font-size
  if (lnHeightStr === 'normal') {
    // Create a temporary node
    var nodeName = node.nodeName;
    var _node = document.createElement(nodeName);
    _node.innerHTML = '&nbsp;';

    // If we have a text area, reset it to only 1 row
    // https://github.com/twolfson/line-height/issues/4
    if (nodeName.toUpperCase() === 'TEXTAREA') {
      _node.setAttribute('rows', '1');
    }

    // Set the font-size of the element
    var fontSizeStr = computedStyle(node, 'font-size');
    _node.style.fontSize = fontSizeStr;

    // Remove default padding/border which can affect offset height
    // https://github.com/twolfson/line-height/issues/4
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetHeight
    _node.style.padding = '0px';
    _node.style.border = '0px';

    // Append it to the body
    var body = document.body;
    body.appendChild(_node);

    // Assume the line height of the element is the height
    var height = _node.offsetHeight;
    lnHeight = height;

    // Remove our child from the DOM
    body.removeChild(_node);
  }

  // Return the calculated height
  return lnHeight;
}

// Export lineHeight
module.exports = lineHeight;


/***/ }),

/***/ 628:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = __webpack_require__(4067);

function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;

module.exports = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error(
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
    err.name = 'Invariant Violation';
    throw err;
  };
  shim.isRequired = shim;
  function getShim() {
    return shim;
  };
  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bigint: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,

    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };

  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};


/***/ }),

/***/ 5826:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (false) { var throwOnDirectAccess, ReactIs; } else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = __webpack_require__(628)();
}


/***/ }),

/***/ 4067:
/***/ ((module) => {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;


/***/ }),

/***/ 4462:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
exports.__esModule = true;
var React = __webpack_require__(1609);
var PropTypes = __webpack_require__(5826);
var autosize = __webpack_require__(4306);
var _getLineHeight = __webpack_require__(461);
var getLineHeight = _getLineHeight;
var RESIZED = "autosize:resized";
/**
 * A light replacement for built-in textarea component
 * which automaticaly adjusts its height to match the content
 */
var TextareaAutosizeClass = /** @class */ (function (_super) {
    __extends(TextareaAutosizeClass, _super);
    function TextareaAutosizeClass() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            lineHeight: null
        };
        _this.textarea = null;
        _this.onResize = function (e) {
            if (_this.props.onResize) {
                _this.props.onResize(e);
            }
        };
        _this.updateLineHeight = function () {
            if (_this.textarea) {
                _this.setState({
                    lineHeight: getLineHeight(_this.textarea)
                });
            }
        };
        _this.onChange = function (e) {
            var onChange = _this.props.onChange;
            _this.currentValue = e.currentTarget.value;
            onChange && onChange(e);
        };
        return _this;
    }
    TextareaAutosizeClass.prototype.componentDidMount = function () {
        var _this = this;
        var _a = this.props, maxRows = _a.maxRows, async = _a.async;
        if (typeof maxRows === "number") {
            this.updateLineHeight();
        }
        if (typeof maxRows === "number" || async) {
            /*
              the defer is needed to:
                - force "autosize" to activate the scrollbar when this.props.maxRows is passed
                - support StyledComponents (see #71)
            */
            setTimeout(function () { return _this.textarea && autosize(_this.textarea); });
        }
        else {
            this.textarea && autosize(this.textarea);
        }
        if (this.textarea) {
            this.textarea.addEventListener(RESIZED, this.onResize);
        }
    };
    TextareaAutosizeClass.prototype.componentWillUnmount = function () {
        if (this.textarea) {
            this.textarea.removeEventListener(RESIZED, this.onResize);
            autosize.destroy(this.textarea);
        }
    };
    TextareaAutosizeClass.prototype.render = function () {
        var _this = this;
        var _a = this, _b = _a.props, onResize = _b.onResize, maxRows = _b.maxRows, onChange = _b.onChange, style = _b.style, innerRef = _b.innerRef, children = _b.children, props = __rest(_b, ["onResize", "maxRows", "onChange", "style", "innerRef", "children"]), lineHeight = _a.state.lineHeight;
        var maxHeight = maxRows && lineHeight ? lineHeight * maxRows : null;
        return (React.createElement("textarea", __assign({}, props, { onChange: this.onChange, style: maxHeight ? __assign({}, style, { maxHeight: maxHeight }) : style, ref: function (element) {
                _this.textarea = element;
                if (typeof _this.props.innerRef === 'function') {
                    _this.props.innerRef(element);
                }
                else if (_this.props.innerRef) {
                    _this.props.innerRef.current = element;
                }
            } }), children));
    };
    TextareaAutosizeClass.prototype.componentDidUpdate = function () {
        this.textarea && autosize.update(this.textarea);
    };
    TextareaAutosizeClass.defaultProps = {
        rows: 1,
        async: false
    };
    TextareaAutosizeClass.propTypes = {
        rows: PropTypes.number,
        maxRows: PropTypes.number,
        onResize: PropTypes.func,
        innerRef: PropTypes.any,
        async: PropTypes.bool
    };
    return TextareaAutosizeClass;
}(React.Component));
exports.TextareaAutosize = React.forwardRef(function (props, ref) {
    return React.createElement(TextareaAutosizeClass, __assign({}, props, { innerRef: ref }));
});


/***/ }),

/***/ 4132:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var __webpack_unused_export__;

__webpack_unused_export__ = true;
var TextareaAutosize_1 = __webpack_require__(4462);
exports.A = TextareaAutosize_1.TextareaAutosize;


/***/ }),

/***/ 3394:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var __webpack_unused_export__;
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var f=__webpack_require__(1609),k=Symbol.for("react.element"),l=Symbol.for("react.fragment"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};
function q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=""+g);void 0!==a.key&&(e=""+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}__webpack_unused_export__=l;exports.jsx=q;__webpack_unused_export__=q;


/***/ }),

/***/ 4922:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (true) {
  module.exports = __webpack_require__(3394);
} else {}


/***/ }),

/***/ 9681:
/***/ ((module) => {

var characterMap = {
	"À": "A",
	"Á": "A",
	"Â": "A",
	"Ã": "A",
	"Ä": "A",
	"Å": "A",
	"Ấ": "A",
	"Ắ": "A",
	"Ẳ": "A",
	"Ẵ": "A",
	"Ặ": "A",
	"Æ": "AE",
	"Ầ": "A",
	"Ằ": "A",
	"Ȃ": "A",
	"Ả": "A",
	"Ạ": "A",
	"Ẩ": "A",
	"Ẫ": "A",
	"Ậ": "A",
	"Ç": "C",
	"Ḉ": "C",
	"È": "E",
	"É": "E",
	"Ê": "E",
	"Ë": "E",
	"Ế": "E",
	"Ḗ": "E",
	"Ề": "E",
	"Ḕ": "E",
	"Ḝ": "E",
	"Ȇ": "E",
	"Ẻ": "E",
	"Ẽ": "E",
	"Ẹ": "E",
	"Ể": "E",
	"Ễ": "E",
	"Ệ": "E",
	"Ì": "I",
	"Í": "I",
	"Î": "I",
	"Ï": "I",
	"Ḯ": "I",
	"Ȋ": "I",
	"Ỉ": "I",
	"Ị": "I",
	"Ð": "D",
	"Ñ": "N",
	"Ò": "O",
	"Ó": "O",
	"Ô": "O",
	"Õ": "O",
	"Ö": "O",
	"Ø": "O",
	"Ố": "O",
	"Ṍ": "O",
	"Ṓ": "O",
	"Ȏ": "O",
	"Ỏ": "O",
	"Ọ": "O",
	"Ổ": "O",
	"Ỗ": "O",
	"Ộ": "O",
	"Ờ": "O",
	"Ở": "O",
	"Ỡ": "O",
	"Ớ": "O",
	"Ợ": "O",
	"Ù": "U",
	"Ú": "U",
	"Û": "U",
	"Ü": "U",
	"Ủ": "U",
	"Ụ": "U",
	"Ử": "U",
	"Ữ": "U",
	"Ự": "U",
	"Ý": "Y",
	"à": "a",
	"á": "a",
	"â": "a",
	"ã": "a",
	"ä": "a",
	"å": "a",
	"ấ": "a",
	"ắ": "a",
	"ẳ": "a",
	"ẵ": "a",
	"ặ": "a",
	"æ": "ae",
	"ầ": "a",
	"ằ": "a",
	"ȃ": "a",
	"ả": "a",
	"ạ": "a",
	"ẩ": "a",
	"ẫ": "a",
	"ậ": "a",
	"ç": "c",
	"ḉ": "c",
	"è": "e",
	"é": "e",
	"ê": "e",
	"ë": "e",
	"ế": "e",
	"ḗ": "e",
	"ề": "e",
	"ḕ": "e",
	"ḝ": "e",
	"ȇ": "e",
	"ẻ": "e",
	"ẽ": "e",
	"ẹ": "e",
	"ể": "e",
	"ễ": "e",
	"ệ": "e",
	"ì": "i",
	"í": "i",
	"î": "i",
	"ï": "i",
	"ḯ": "i",
	"ȋ": "i",
	"ỉ": "i",
	"ị": "i",
	"ð": "d",
	"ñ": "n",
	"ò": "o",
	"ó": "o",
	"ô": "o",
	"õ": "o",
	"ö": "o",
	"ø": "o",
	"ố": "o",
	"ṍ": "o",
	"ṓ": "o",
	"ȏ": "o",
	"ỏ": "o",
	"ọ": "o",
	"ổ": "o",
	"ỗ": "o",
	"ộ": "o",
	"ờ": "o",
	"ở": "o",
	"ỡ": "o",
	"ớ": "o",
	"ợ": "o",
	"ù": "u",
	"ú": "u",
	"û": "u",
	"ü": "u",
	"ủ": "u",
	"ụ": "u",
	"ử": "u",
	"ữ": "u",
	"ự": "u",
	"ý": "y",
	"ÿ": "y",
	"Ā": "A",
	"ā": "a",
	"Ă": "A",
	"ă": "a",
	"Ą": "A",
	"ą": "a",
	"Ć": "C",
	"ć": "c",
	"Ĉ": "C",
	"ĉ": "c",
	"Ċ": "C",
	"ċ": "c",
	"Č": "C",
	"č": "c",
	"C̆": "C",
	"c̆": "c",
	"Ď": "D",
	"ď": "d",
	"Đ": "D",
	"đ": "d",
	"Ē": "E",
	"ē": "e",
	"Ĕ": "E",
	"ĕ": "e",
	"Ė": "E",
	"ė": "e",
	"Ę": "E",
	"ę": "e",
	"Ě": "E",
	"ě": "e",
	"Ĝ": "G",
	"Ǵ": "G",
	"ĝ": "g",
	"ǵ": "g",
	"Ğ": "G",
	"ğ": "g",
	"Ġ": "G",
	"ġ": "g",
	"Ģ": "G",
	"ģ": "g",
	"Ĥ": "H",
	"ĥ": "h",
	"Ħ": "H",
	"ħ": "h",
	"Ḫ": "H",
	"ḫ": "h",
	"Ĩ": "I",
	"ĩ": "i",
	"Ī": "I",
	"ī": "i",
	"Ĭ": "I",
	"ĭ": "i",
	"Į": "I",
	"į": "i",
	"İ": "I",
	"ı": "i",
	"Ĳ": "IJ",
	"ĳ": "ij",
	"Ĵ": "J",
	"ĵ": "j",
	"Ķ": "K",
	"ķ": "k",
	"Ḱ": "K",
	"ḱ": "k",
	"K̆": "K",
	"k̆": "k",
	"Ĺ": "L",
	"ĺ": "l",
	"Ļ": "L",
	"ļ": "l",
	"Ľ": "L",
	"ľ": "l",
	"Ŀ": "L",
	"ŀ": "l",
	"Ł": "l",
	"ł": "l",
	"Ḿ": "M",
	"ḿ": "m",
	"M̆": "M",
	"m̆": "m",
	"Ń": "N",
	"ń": "n",
	"Ņ": "N",
	"ņ": "n",
	"Ň": "N",
	"ň": "n",
	"ŉ": "n",
	"N̆": "N",
	"n̆": "n",
	"Ō": "O",
	"ō": "o",
	"Ŏ": "O",
	"ŏ": "o",
	"Ő": "O",
	"ő": "o",
	"Œ": "OE",
	"œ": "oe",
	"P̆": "P",
	"p̆": "p",
	"Ŕ": "R",
	"ŕ": "r",
	"Ŗ": "R",
	"ŗ": "r",
	"Ř": "R",
	"ř": "r",
	"R̆": "R",
	"r̆": "r",
	"Ȓ": "R",
	"ȓ": "r",
	"Ś": "S",
	"ś": "s",
	"Ŝ": "S",
	"ŝ": "s",
	"Ş": "S",
	"Ș": "S",
	"ș": "s",
	"ş": "s",
	"Š": "S",
	"š": "s",
	"Ţ": "T",
	"ţ": "t",
	"ț": "t",
	"Ț": "T",
	"Ť": "T",
	"ť": "t",
	"Ŧ": "T",
	"ŧ": "t",
	"T̆": "T",
	"t̆": "t",
	"Ũ": "U",
	"ũ": "u",
	"Ū": "U",
	"ū": "u",
	"Ŭ": "U",
	"ŭ": "u",
	"Ů": "U",
	"ů": "u",
	"Ű": "U",
	"ű": "u",
	"Ų": "U",
	"ų": "u",
	"Ȗ": "U",
	"ȗ": "u",
	"V̆": "V",
	"v̆": "v",
	"Ŵ": "W",
	"ŵ": "w",
	"Ẃ": "W",
	"ẃ": "w",
	"X̆": "X",
	"x̆": "x",
	"Ŷ": "Y",
	"ŷ": "y",
	"Ÿ": "Y",
	"Y̆": "Y",
	"y̆": "y",
	"Ź": "Z",
	"ź": "z",
	"Ż": "Z",
	"ż": "z",
	"Ž": "Z",
	"ž": "z",
	"ſ": "s",
	"ƒ": "f",
	"Ơ": "O",
	"ơ": "o",
	"Ư": "U",
	"ư": "u",
	"Ǎ": "A",
	"ǎ": "a",
	"Ǐ": "I",
	"ǐ": "i",
	"Ǒ": "O",
	"ǒ": "o",
	"Ǔ": "U",
	"ǔ": "u",
	"Ǖ": "U",
	"ǖ": "u",
	"Ǘ": "U",
	"ǘ": "u",
	"Ǚ": "U",
	"ǚ": "u",
	"Ǜ": "U",
	"ǜ": "u",
	"Ứ": "U",
	"ứ": "u",
	"Ṹ": "U",
	"ṹ": "u",
	"Ǻ": "A",
	"ǻ": "a",
	"Ǽ": "AE",
	"ǽ": "ae",
	"Ǿ": "O",
	"ǿ": "o",
	"Þ": "TH",
	"þ": "th",
	"Ṕ": "P",
	"ṕ": "p",
	"Ṥ": "S",
	"ṥ": "s",
	"X́": "X",
	"x́": "x",
	"Ѓ": "Г",
	"ѓ": "г",
	"Ќ": "К",
	"ќ": "к",
	"A̋": "A",
	"a̋": "a",
	"E̋": "E",
	"e̋": "e",
	"I̋": "I",
	"i̋": "i",
	"Ǹ": "N",
	"ǹ": "n",
	"Ồ": "O",
	"ồ": "o",
	"Ṑ": "O",
	"ṑ": "o",
	"Ừ": "U",
	"ừ": "u",
	"Ẁ": "W",
	"ẁ": "w",
	"Ỳ": "Y",
	"ỳ": "y",
	"Ȁ": "A",
	"ȁ": "a",
	"Ȅ": "E",
	"ȅ": "e",
	"Ȉ": "I",
	"ȉ": "i",
	"Ȍ": "O",
	"ȍ": "o",
	"Ȑ": "R",
	"ȑ": "r",
	"Ȕ": "U",
	"ȕ": "u",
	"B̌": "B",
	"b̌": "b",
	"Č̣": "C",
	"č̣": "c",
	"Ê̌": "E",
	"ê̌": "e",
	"F̌": "F",
	"f̌": "f",
	"Ǧ": "G",
	"ǧ": "g",
	"Ȟ": "H",
	"ȟ": "h",
	"J̌": "J",
	"ǰ": "j",
	"Ǩ": "K",
	"ǩ": "k",
	"M̌": "M",
	"m̌": "m",
	"P̌": "P",
	"p̌": "p",
	"Q̌": "Q",
	"q̌": "q",
	"Ř̩": "R",
	"ř̩": "r",
	"Ṧ": "S",
	"ṧ": "s",
	"V̌": "V",
	"v̌": "v",
	"W̌": "W",
	"w̌": "w",
	"X̌": "X",
	"x̌": "x",
	"Y̌": "Y",
	"y̌": "y",
	"A̧": "A",
	"a̧": "a",
	"B̧": "B",
	"b̧": "b",
	"Ḑ": "D",
	"ḑ": "d",
	"Ȩ": "E",
	"ȩ": "e",
	"Ɛ̧": "E",
	"ɛ̧": "e",
	"Ḩ": "H",
	"ḩ": "h",
	"I̧": "I",
	"i̧": "i",
	"Ɨ̧": "I",
	"ɨ̧": "i",
	"M̧": "M",
	"m̧": "m",
	"O̧": "O",
	"o̧": "o",
	"Q̧": "Q",
	"q̧": "q",
	"U̧": "U",
	"u̧": "u",
	"X̧": "X",
	"x̧": "x",
	"Z̧": "Z",
	"z̧": "z",
	"й":"и",
	"Й":"И",
	"ё":"е",
	"Ё":"Е",
};

var chars = Object.keys(characterMap).join('|');
var allAccents = new RegExp(chars, 'g');
var firstAccent = new RegExp(chars, '');

function matcher(match) {
	return characterMap[match];
}

var removeAccents = function(string) {
	return string.replace(allAccents, matcher);
};

var hasAccents = function(string) {
	return !!string.match(firstAccent);
};

module.exports = removeAccents;
module.exports.has = hasAccents;
module.exports.remove = removeAccents;


/***/ }),

/***/ 8477:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/**
 * @license React
 * use-sync-external-store-shim.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var e=__webpack_require__(1609);function h(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var k="function"===typeof Object.is?Object.is:h,l=e.useState,m=e.useEffect,n=e.useLayoutEffect,p=e.useDebugValue;function q(a,b){var d=b(),f=l({inst:{value:d,getSnapshot:b}}),c=f[0].inst,g=f[1];n(function(){c.value=d;c.getSnapshot=b;r(c)&&g({inst:c})},[a,d,b]);m(function(){r(c)&&g({inst:c});return a(function(){r(c)&&g({inst:c})})},[a]);p(d);return d}
function r(a){var b=a.getSnapshot;a=a.value;try{var d=b();return!k(a,d)}catch(f){return!0}}function t(a,b){return b()}var u="undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement?t:q;exports.useSyncExternalStore=void 0!==e.useSyncExternalStore?e.useSyncExternalStore:u;


/***/ }),

/***/ 422:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (true) {
  module.exports = __webpack_require__(8477);
} else {}


/***/ }),

/***/ 1609:
/***/ ((module) => {

"use strict";
module.exports = window["React"];

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/create fake namespace object */
/******/ 	(() => {
/******/ 		var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 		var leafPrototypes;
/******/ 		// create a fake namespace object
/******/ 		// mode & 1: value is a module id, require it
/******/ 		// mode & 2: merge all properties of value into the ns
/******/ 		// mode & 4: return value when already ns object
/******/ 		// mode & 16: return value when it's Promise-like
/******/ 		// mode & 8|1: behave like require
/******/ 		__webpack_require__.t = function(value, mode) {
/******/ 			if(mode & 1) value = this(value);
/******/ 			if(mode & 8) return value;
/******/ 			if(typeof value === 'object' && value) {
/******/ 				if((mode & 4) && value.__esModule) return value;
/******/ 				if((mode & 16) && typeof value.then === 'function') return value;
/******/ 			}
/******/ 			var ns = Object.create(null);
/******/ 			__webpack_require__.r(ns);
/******/ 			var def = {};
/******/ 			leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 			for(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 				Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 			}
/******/ 			def['default'] = () => (value);
/******/ 			__webpack_require__.d(ns, def);
/******/ 			return ns;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  PluginMoreMenuItem: () => (/* reexport */ plugin_more_menu_item),
  PluginSidebar: () => (/* reexport */ PluginSidebarEditSite),
  PluginSidebarMoreMenuItem: () => (/* reexport */ PluginSidebarMoreMenuItem),
  PluginTemplateSettingPanel: () => (/* reexport */ plugin_template_setting_panel),
  initializeEditor: () => (/* binding */ initializeEditor),
  reinitializeEditor: () => (/* binding */ reinitializeEditor),
  store: () => (/* reexport */ store_store)
});

// NAMESPACE OBJECT: ./node_modules/@wordpress/interface/build-module/store/actions.js
var actions_namespaceObject = {};
__webpack_require__.r(actions_namespaceObject);
__webpack_require__.d(actions_namespaceObject, {
  closeModal: () => (closeModal),
  disableComplementaryArea: () => (disableComplementaryArea),
  enableComplementaryArea: () => (enableComplementaryArea),
  openModal: () => (openModal),
  pinItem: () => (pinItem),
  setDefaultComplementaryArea: () => (setDefaultComplementaryArea),
  setFeatureDefaults: () => (setFeatureDefaults),
  setFeatureValue: () => (setFeatureValue),
  toggleFeature: () => (toggleFeature),
  unpinItem: () => (unpinItem)
});

// NAMESPACE OBJECT: ./node_modules/@wordpress/interface/build-module/store/selectors.js
var selectors_namespaceObject = {};
__webpack_require__.r(selectors_namespaceObject);
__webpack_require__.d(selectors_namespaceObject, {
  getActiveComplementaryArea: () => (getActiveComplementaryArea),
  isComplementaryAreaLoading: () => (isComplementaryAreaLoading),
  isFeatureActive: () => (isFeatureActive),
  isItemPinned: () => (isItemPinned),
  isModalActive: () => (isModalActive)
});

// NAMESPACE OBJECT: ./node_modules/@wordpress/edit-site/build-module/store/private-actions.js
var private_actions_namespaceObject = {};
__webpack_require__.r(private_actions_namespaceObject);
__webpack_require__.d(private_actions_namespaceObject, {
  removeTemplates: () => (removeTemplates),
  setCanvasMode: () => (setCanvasMode),
  setEditorCanvasContainerView: () => (setEditorCanvasContainerView)
});

// NAMESPACE OBJECT: ./node_modules/@wordpress/edit-site/build-module/store/actions.js
var store_actions_namespaceObject = {};
__webpack_require__.r(store_actions_namespaceObject);
__webpack_require__.d(store_actions_namespaceObject, {
  __experimentalSetPreviewDeviceType: () => (__experimentalSetPreviewDeviceType),
  addTemplate: () => (addTemplate),
  closeGeneralSidebar: () => (closeGeneralSidebar),
  openGeneralSidebar: () => (openGeneralSidebar),
  openNavigationPanelToMenu: () => (openNavigationPanelToMenu),
  removeTemplate: () => (removeTemplate),
  revertTemplate: () => (revertTemplate),
  setEditedEntity: () => (setEditedEntity),
  setEditedPostContext: () => (setEditedPostContext),
  setHasPageContentFocus: () => (setHasPageContentFocus),
  setHomeTemplateId: () => (setHomeTemplateId),
  setIsInserterOpened: () => (setIsInserterOpened),
  setIsListViewOpened: () => (setIsListViewOpened),
  setIsNavigationPanelOpened: () => (setIsNavigationPanelOpened),
  setIsSaveViewOpened: () => (setIsSaveViewOpened),
  setNavigationMenu: () => (setNavigationMenu),
  setNavigationPanelActiveMenu: () => (setNavigationPanelActiveMenu),
  setPage: () => (setPage),
  setTemplate: () => (setTemplate),
  setTemplatePart: () => (setTemplatePart),
  switchEditorMode: () => (switchEditorMode),
  toggleDistractionFree: () => (toggleDistractionFree),
  toggleFeature: () => (actions_toggleFeature),
  updateSettings: () => (updateSettings)
});

// NAMESPACE OBJECT: ./node_modules/@wordpress/edit-site/build-module/store/selectors.js
var store_selectors_namespaceObject = {};
__webpack_require__.r(store_selectors_namespaceObject);
__webpack_require__.d(store_selectors_namespaceObject, {
  __experimentalGetInsertionPoint: () => (__experimentalGetInsertionPoint),
  __experimentalGetPreviewDeviceType: () => (__experimentalGetPreviewDeviceType),
  getCanUserCreateMedia: () => (getCanUserCreateMedia),
  getCurrentTemplateNavigationPanelSubMenu: () => (getCurrentTemplateNavigationPanelSubMenu),
  getCurrentTemplateTemplateParts: () => (getCurrentTemplateTemplateParts),
  getEditedPostContext: () => (getEditedPostContext),
  getEditedPostId: () => (getEditedPostId),
  getEditedPostType: () => (getEditedPostType),
  getEditorMode: () => (getEditorMode),
  getHomeTemplateId: () => (getHomeTemplateId),
  getNavigationPanelActiveMenu: () => (getNavigationPanelActiveMenu),
  getPage: () => (getPage),
  getReusableBlocks: () => (getReusableBlocks),
  getSettings: () => (getSettings),
  hasPageContentFocus: () => (hasPageContentFocus),
  isFeatureActive: () => (selectors_isFeatureActive),
  isInserterOpened: () => (isInserterOpened),
  isListViewOpened: () => (isListViewOpened),
  isNavigationOpened: () => (isNavigationOpened),
  isPage: () => (isPage),
  isSaveViewOpened: () => (isSaveViewOpened)
});

// NAMESPACE OBJECT: ./node_modules/@wordpress/edit-site/build-module/store/private-selectors.js
var private_selectors_namespaceObject = {};
__webpack_require__.r(private_selectors_namespaceObject);
__webpack_require__.d(private_selectors_namespaceObject, {
  getCanvasMode: () => (getCanvasMode),
  getEditorCanvasContainerView: () => (getEditorCanvasContainerView)
});

// EXTERNAL MODULE: external "React"
var external_React_ = __webpack_require__(1609);
var external_React_namespaceObject = /*#__PURE__*/__webpack_require__.t(external_React_, 2);
;// CONCATENATED MODULE: external ["wp","blocks"]
const external_wp_blocks_namespaceObject = window["wp"]["blocks"];
;// CONCATENATED MODULE: external ["wp","blockLibrary"]
const external_wp_blockLibrary_namespaceObject = window["wp"]["blockLibrary"];
;// CONCATENATED MODULE: external ["wp","data"]
const external_wp_data_namespaceObject = window["wp"]["data"];
;// CONCATENATED MODULE: external ["wp","deprecated"]
const external_wp_deprecated_namespaceObject = window["wp"]["deprecated"];
var external_wp_deprecated_default = /*#__PURE__*/__webpack_require__.n(external_wp_deprecated_namespaceObject);
;// CONCATENATED MODULE: external ["wp","element"]
const external_wp_element_namespaceObject = window["wp"]["element"];
;// CONCATENATED MODULE: external ["wp","editor"]
const external_wp_editor_namespaceObject = window["wp"]["editor"];
// EXTERNAL MODULE: ./node_modules/classnames/index.js
var classnames = __webpack_require__(5755);
var classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);
;// CONCATENATED MODULE: external ["wp","components"]
const external_wp_components_namespaceObject = window["wp"]["components"];
;// CONCATENATED MODULE: external ["wp","i18n"]
const external_wp_i18n_namespaceObject = window["wp"]["i18n"];
;// CONCATENATED MODULE: external ["wp","primitives"]
const external_wp_primitives_namespaceObject = window["wp"]["primitives"];
;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/check.js

/**
 * WordPress dependencies
 */

const check = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M16.7 7.1l-6.3 8.5-3.3-2.5-.9 1.2 4.5 3.4L17.9 8z"
}));
/* harmony default export */ const library_check = (check);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/star-filled.js

/**
 * WordPress dependencies
 */

const starFilled = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M11.776 4.454a.25.25 0 01.448 0l2.069 4.192a.25.25 0 00.188.137l4.626.672a.25.25 0 01.139.426l-3.348 3.263a.25.25 0 00-.072.222l.79 4.607a.25.25 0 01-.362.263l-4.138-2.175a.25.25 0 00-.232 0l-4.138 2.175a.25.25 0 01-.363-.263l.79-4.607a.25.25 0 00-.071-.222L4.754 9.881a.25.25 0 01.139-.426l4.626-.672a.25.25 0 00.188-.137l2.069-4.192z"
}));
/* harmony default export */ const star_filled = (starFilled);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/star-empty.js

/**
 * WordPress dependencies
 */

const starEmpty = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  fillRule: "evenodd",
  d: "M9.706 8.646a.25.25 0 01-.188.137l-4.626.672a.25.25 0 00-.139.427l3.348 3.262a.25.25 0 01.072.222l-.79 4.607a.25.25 0 00.362.264l4.138-2.176a.25.25 0 01.233 0l4.137 2.175a.25.25 0 00.363-.263l-.79-4.607a.25.25 0 01.072-.222l3.347-3.262a.25.25 0 00-.139-.427l-4.626-.672a.25.25 0 01-.188-.137l-2.069-4.192a.25.25 0 00-.448 0L9.706 8.646zM12 7.39l-.948 1.921a1.75 1.75 0 01-1.317.957l-2.12.308 1.534 1.495c.412.402.6.982.503 1.55l-.362 2.11 1.896-.997a1.75 1.75 0 011.629 0l1.895.997-.362-2.11a1.75 1.75 0 01.504-1.55l1.533-1.495-2.12-.308a1.75 1.75 0 01-1.317-.957L12 7.39z",
  clipRule: "evenodd"
}));
/* harmony default export */ const star_empty = (starEmpty);

;// CONCATENATED MODULE: external ["wp","viewport"]
const external_wp_viewport_namespaceObject = window["wp"]["viewport"];
;// CONCATENATED MODULE: external ["wp","preferences"]
const external_wp_preferences_namespaceObject = window["wp"]["preferences"];
;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/close-small.js

/**
 * WordPress dependencies
 */

const closeSmall = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M12 13.06l3.712 3.713 1.061-1.06L13.061 12l3.712-3.712-1.06-1.06L12 10.938 8.288 7.227l-1.061 1.06L10.939 12l-3.712 3.712 1.06 1.061L12 13.061z"
}));
/* harmony default export */ const close_small = (closeSmall);

;// CONCATENATED MODULE: ./node_modules/@wordpress/interface/build-module/store/actions.js
/**
 * WordPress dependencies
 */



/**
 * Set a default complementary area.
 *
 * @param {string} scope Complementary area scope.
 * @param {string} area  Area identifier.
 *
 * @return {Object} Action object.
 */
const setDefaultComplementaryArea = (scope, area) => ({
  type: 'SET_DEFAULT_COMPLEMENTARY_AREA',
  scope,
  area
});

/**
 * Enable the complementary area.
 *
 * @param {string} scope Complementary area scope.
 * @param {string} area  Area identifier.
 */
const enableComplementaryArea = (scope, area) => ({
  registry,
  dispatch
}) => {
  // Return early if there's no area.
  if (!area) {
    return;
  }
  const isComplementaryAreaVisible = registry.select(external_wp_preferences_namespaceObject.store).get(scope, 'isComplementaryAreaVisible');
  if (!isComplementaryAreaVisible) {
    registry.dispatch(external_wp_preferences_namespaceObject.store).set(scope, 'isComplementaryAreaVisible', true);
  }
  dispatch({
    type: 'ENABLE_COMPLEMENTARY_AREA',
    scope,
    area
  });
};

/**
 * Disable the complementary area.
 *
 * @param {string} scope Complementary area scope.
 */
const disableComplementaryArea = scope => ({
  registry
}) => {
  const isComplementaryAreaVisible = registry.select(external_wp_preferences_namespaceObject.store).get(scope, 'isComplementaryAreaVisible');
  if (isComplementaryAreaVisible) {
    registry.dispatch(external_wp_preferences_namespaceObject.store).set(scope, 'isComplementaryAreaVisible', false);
  }
};

/**
 * Pins an item.
 *
 * @param {string} scope Item scope.
 * @param {string} item  Item identifier.
 *
 * @return {Object} Action object.
 */
const pinItem = (scope, item) => ({
  registry
}) => {
  // Return early if there's no item.
  if (!item) {
    return;
  }
  const pinnedItems = registry.select(external_wp_preferences_namespaceObject.store).get(scope, 'pinnedItems');

  // The item is already pinned, there's nothing to do.
  if (pinnedItems?.[item] === true) {
    return;
  }
  registry.dispatch(external_wp_preferences_namespaceObject.store).set(scope, 'pinnedItems', {
    ...pinnedItems,
    [item]: true
  });
};

/**
 * Unpins an item.
 *
 * @param {string} scope Item scope.
 * @param {string} item  Item identifier.
 */
const unpinItem = (scope, item) => ({
  registry
}) => {
  // Return early if there's no item.
  if (!item) {
    return;
  }
  const pinnedItems = registry.select(external_wp_preferences_namespaceObject.store).get(scope, 'pinnedItems');
  registry.dispatch(external_wp_preferences_namespaceObject.store).set(scope, 'pinnedItems', {
    ...pinnedItems,
    [item]: false
  });
};

/**
 * Returns an action object used in signalling that a feature should be toggled.
 *
 * @param {string} scope       The feature scope (e.g. core/edit-post).
 * @param {string} featureName The feature name.
 */
function toggleFeature(scope, featureName) {
  return function ({
    registry
  }) {
    external_wp_deprecated_default()(`dispatch( 'core/interface' ).toggleFeature`, {
      since: '6.0',
      alternative: `dispatch( 'core/preferences' ).toggle`
    });
    registry.dispatch(external_wp_preferences_namespaceObject.store).toggle(scope, featureName);
  };
}

/**
 * Returns an action object used in signalling that a feature should be set to
 * a true or false value
 *
 * @param {string}  scope       The feature scope (e.g. core/edit-post).
 * @param {string}  featureName The feature name.
 * @param {boolean} value       The value to set.
 *
 * @return {Object} Action object.
 */
function setFeatureValue(scope, featureName, value) {
  return function ({
    registry
  }) {
    external_wp_deprecated_default()(`dispatch( 'core/interface' ).setFeatureValue`, {
      since: '6.0',
      alternative: `dispatch( 'core/preferences' ).set`
    });
    registry.dispatch(external_wp_preferences_namespaceObject.store).set(scope, featureName, !!value);
  };
}

/**
 * Returns an action object used in signalling that defaults should be set for features.
 *
 * @param {string}                  scope    The feature scope (e.g. core/edit-post).
 * @param {Object<string, boolean>} defaults A key/value map of feature names to values.
 *
 * @return {Object} Action object.
 */
function setFeatureDefaults(scope, defaults) {
  return function ({
    registry
  }) {
    external_wp_deprecated_default()(`dispatch( 'core/interface' ).setFeatureDefaults`, {
      since: '6.0',
      alternative: `dispatch( 'core/preferences' ).setDefaults`
    });
    registry.dispatch(external_wp_preferences_namespaceObject.store).setDefaults(scope, defaults);
  };
}

/**
 * Returns an action object used in signalling that the user opened a modal.
 *
 * @param {string} name A string that uniquely identifies the modal.
 *
 * @return {Object} Action object.
 */
function openModal(name) {
  return {
    type: 'OPEN_MODAL',
    name
  };
}

/**
 * Returns an action object signalling that the user closed a modal.
 *
 * @return {Object} Action object.
 */
function closeModal() {
  return {
    type: 'CLOSE_MODAL'
  };
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/interface/build-module/store/selectors.js
/**
 * WordPress dependencies
 */




/**
 * Returns the complementary area that is active in a given scope.
 *
 * @param {Object} state Global application state.
 * @param {string} scope Item scope.
 *
 * @return {string | null | undefined} The complementary area that is active in the given scope.
 */
const getActiveComplementaryArea = (0,external_wp_data_namespaceObject.createRegistrySelector)(select => (state, scope) => {
  const isComplementaryAreaVisible = select(external_wp_preferences_namespaceObject.store).get(scope, 'isComplementaryAreaVisible');

  // Return `undefined` to indicate that the user has never toggled
  // visibility, this is the vanilla default. Other code relies on this
  // nuance in the return value.
  if (isComplementaryAreaVisible === undefined) {
    return undefined;
  }

  // Return `null` to indicate the user hid the complementary area.
  if (isComplementaryAreaVisible === false) {
    return null;
  }
  return state?.complementaryAreas?.[scope];
});
const isComplementaryAreaLoading = (0,external_wp_data_namespaceObject.createRegistrySelector)(select => (state, scope) => {
  const isVisible = select(external_wp_preferences_namespaceObject.store).get(scope, 'isComplementaryAreaVisible');
  const identifier = state?.complementaryAreas?.[scope];
  return isVisible && identifier === undefined;
});

/**
 * Returns a boolean indicating if an item is pinned or not.
 *
 * @param {Object} state Global application state.
 * @param {string} scope Scope.
 * @param {string} item  Item to check.
 *
 * @return {boolean} True if the item is pinned and false otherwise.
 */
const isItemPinned = (0,external_wp_data_namespaceObject.createRegistrySelector)(select => (state, scope, item) => {
  var _pinnedItems$item;
  const pinnedItems = select(external_wp_preferences_namespaceObject.store).get(scope, 'pinnedItems');
  return (_pinnedItems$item = pinnedItems?.[item]) !== null && _pinnedItems$item !== void 0 ? _pinnedItems$item : true;
});

/**
 * Returns a boolean indicating whether a feature is active for a particular
 * scope.
 *
 * @param {Object} state       The store state.
 * @param {string} scope       The scope of the feature (e.g. core/edit-post).
 * @param {string} featureName The name of the feature.
 *
 * @return {boolean} Is the feature enabled?
 */
const isFeatureActive = (0,external_wp_data_namespaceObject.createRegistrySelector)(select => (state, scope, featureName) => {
  external_wp_deprecated_default()(`select( 'core/interface' ).isFeatureActive( scope, featureName )`, {
    since: '6.0',
    alternative: `select( 'core/preferences' ).get( scope, featureName )`
  });
  return !!select(external_wp_preferences_namespaceObject.store).get(scope, featureName);
});

/**
 * Returns true if a modal is active, or false otherwise.
 *
 * @param {Object} state     Global application state.
 * @param {string} modalName A string that uniquely identifies the modal.
 *
 * @return {boolean} Whether the modal is active.
 */
function isModalActive(state, modalName) {
  return state.activeModal === modalName;
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/interface/build-module/store/reducer.js
/**
 * WordPress dependencies
 */

function complementaryAreas(state = {}, action) {
  switch (action.type) {
    case 'SET_DEFAULT_COMPLEMENTARY_AREA':
      {
        const {
          scope,
          area
        } = action;

        // If there's already an area, don't overwrite it.
        if (state[scope]) {
          return state;
        }
        return {
          ...state,
          [scope]: area
        };
      }
    case 'ENABLE_COMPLEMENTARY_AREA':
      {
        const {
          scope,
          area
        } = action;
        return {
          ...state,
          [scope]: area
        };
      }
  }
  return state;
}

/**
 * Reducer for storing the name of the open modal, or null if no modal is open.
 *
 * @param {Object} state  Previous state.
 * @param {Object} action Action object containing the `name` of the modal
 *
 * @return {Object} Updated state
 */
function activeModal(state = null, action) {
  switch (action.type) {
    case 'OPEN_MODAL':
      return action.name;
    case 'CLOSE_MODAL':
      return null;
  }
  return state;
}
/* harmony default export */ const reducer = ((0,external_wp_data_namespaceObject.combineReducers)({
  complementaryAreas,
  activeModal
}));

;// CONCATENATED MODULE: ./node_modules/@wordpress/interface/build-module/store/constants.js
/**
 * The identifier for the data store.
 *
 * @type {string}
 */
const STORE_NAME = 'core/interface';

;// CONCATENATED MODULE: ./node_modules/@wordpress/interface/build-module/store/index.js
/**
 * WordPress dependencies
 */


/**
 * Internal dependencies
 */





/**
 * Store definition for the interface namespace.
 *
 * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#createReduxStore
 *
 * @type {Object}
 */
const store = (0,external_wp_data_namespaceObject.createReduxStore)(STORE_NAME, {
  reducer: reducer,
  actions: actions_namespaceObject,
  selectors: selectors_namespaceObject
});

// Once we build a more generic persistence plugin that works across types of stores
// we'd be able to replace this with a register call.
(0,external_wp_data_namespaceObject.register)(store);

;// CONCATENATED MODULE: external ["wp","plugins"]
const external_wp_plugins_namespaceObject = window["wp"]["plugins"];
;// CONCATENATED MODULE: ./node_modules/@wordpress/interface/build-module/components/complementary-area-context/index.js
/**
 * WordPress dependencies
 */

/* harmony default export */ const complementary_area_context = ((0,external_wp_plugins_namespaceObject.withPluginContext)((context, ownProps) => {
  return {
    icon: ownProps.icon || context.icon,
    identifier: ownProps.identifier || `${context.name}/${ownProps.name}`
  };
}));

;// CONCATENATED MODULE: ./node_modules/@wordpress/interface/build-module/components/complementary-area-toggle/index.js

/**
 * WordPress dependencies
 */



/**
 * Internal dependencies
 */


function ComplementaryAreaToggle({
  as = external_wp_components_namespaceObject.Button,
  scope,
  identifier,
  icon,
  selectedIcon,
  name,
  ...props
}) {
  const ComponentToUse = as;
  const isSelected = (0,external_wp_data_namespaceObject.useSelect)(select => select(store).getActiveComplementaryArea(scope) === identifier, [identifier, scope]);
  const {
    enableComplementaryArea,
    disableComplementaryArea
  } = (0,external_wp_data_namespaceObject.useDispatch)(store);
  return (0,external_React_.createElement)(ComponentToUse, {
    icon: selectedIcon && isSelected ? selectedIcon : icon,
    "aria-controls": identifier.replace('/', ':'),
    onClick: () => {
      if (isSelected) {
        disableComplementaryArea(scope);
      } else {
        enableComplementaryArea(scope, identifier);
      }
    },
    ...props
  });
}
/* harmony default export */ const complementary_area_toggle = (complementary_area_context(ComplementaryAreaToggle));

;// CONCATENATED MODULE: ./node_modules/@wordpress/interface/build-module/components/complementary-area-header/index.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */


/**
 * Internal dependencies
 */

const ComplementaryAreaHeader = ({
  smallScreenTitle,
  children,
  className,
  toggleButtonProps
}) => {
  const toggleButton = (0,external_React_.createElement)(complementary_area_toggle, {
    icon: close_small,
    ...toggleButtonProps
  });
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)("div", {
    className: "components-panel__header interface-complementary-area-header__small"
  }, smallScreenTitle && (0,external_React_.createElement)("span", {
    className: "interface-complementary-area-header__small-title"
  }, smallScreenTitle), toggleButton), (0,external_React_.createElement)("div", {
    className: classnames_default()('components-panel__header', 'interface-complementary-area-header', className),
    tabIndex: -1
  }, children, toggleButton));
};
/* harmony default export */ const complementary_area_header = (ComplementaryAreaHeader);

;// CONCATENATED MODULE: ./node_modules/@wordpress/interface/build-module/components/action-item/index.js

/**
 * WordPress dependencies
 */


const noop = () => {};
function ActionItemSlot({
  name,
  as: Component = external_wp_components_namespaceObject.ButtonGroup,
  fillProps = {},
  bubblesVirtually,
  ...props
}) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Slot, {
    name: name,
    bubblesVirtually: bubblesVirtually,
    fillProps: fillProps
  }, fills => {
    if (!external_wp_element_namespaceObject.Children.toArray(fills).length) {
      return null;
    }

    // Special handling exists for backward compatibility.
    // It ensures that menu items created by plugin authors aren't
    // duplicated with automatically injected menu items coming
    // from pinnable plugin sidebars.
    // @see https://github.com/WordPress/gutenberg/issues/14457
    const initializedByPlugins = [];
    external_wp_element_namespaceObject.Children.forEach(fills, ({
      props: {
        __unstableExplicitMenuItem,
        __unstableTarget
      }
    }) => {
      if (__unstableTarget && __unstableExplicitMenuItem) {
        initializedByPlugins.push(__unstableTarget);
      }
    });
    const children = external_wp_element_namespaceObject.Children.map(fills, child => {
      if (!child.props.__unstableExplicitMenuItem && initializedByPlugins.includes(child.props.__unstableTarget)) {
        return null;
      }
      return child;
    });
    return (0,external_React_.createElement)(Component, {
      ...props
    }, children);
  });
}
function ActionItem({
  name,
  as: Component = external_wp_components_namespaceObject.Button,
  onClick,
  ...props
}) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Fill, {
    name: name
  }, ({
    onClick: fpOnClick
  }) => {
    return (0,external_React_.createElement)(Component, {
      onClick: onClick || fpOnClick ? (...args) => {
        (onClick || noop)(...args);
        (fpOnClick || noop)(...args);
      } : undefined,
      ...props
    });
  });
}
ActionItem.Slot = ActionItemSlot;
/* harmony default export */ const action_item = (ActionItem);

;// CONCATENATED MODULE: ./node_modules/@wordpress/interface/build-module/components/complementary-area-more-menu-item/index.js

/**
 * WordPress dependencies
 */



/**
 * Internal dependencies
 */


const PluginsMenuItem = ({
  // Menu item is marked with unstable prop for backward compatibility.
  // They are removed so they don't leak to DOM elements.
  // @see https://github.com/WordPress/gutenberg/issues/14457
  __unstableExplicitMenuItem,
  __unstableTarget,
  ...restProps
}) => (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
  ...restProps
});
function ComplementaryAreaMoreMenuItem({
  scope,
  target,
  __unstableExplicitMenuItem,
  ...props
}) {
  return (0,external_React_.createElement)(complementary_area_toggle, {
    as: toggleProps => {
      return (0,external_React_.createElement)(action_item, {
        __unstableExplicitMenuItem: __unstableExplicitMenuItem,
        __unstableTarget: `${scope}/${target}`,
        as: PluginsMenuItem,
        name: `${scope}/plugin-more-menu`,
        ...toggleProps
      });
    },
    role: "menuitemcheckbox",
    selectedIcon: library_check,
    name: target,
    scope: scope,
    ...props
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/interface/build-module/components/pinned-items/index.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */

function PinnedItems({
  scope,
  ...props
}) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Fill, {
    name: `PinnedItems/${scope}`,
    ...props
  });
}
function PinnedItemsSlot({
  scope,
  className,
  ...props
}) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Slot, {
    name: `PinnedItems/${scope}`,
    ...props
  }, fills => fills?.length > 0 && (0,external_React_.createElement)("div", {
    className: classnames_default()(className, 'interface-pinned-items')
  }, fills));
}
PinnedItems.Slot = PinnedItemsSlot;
/* harmony default export */ const pinned_items = (PinnedItems);

;// CONCATENATED MODULE: ./node_modules/@wordpress/interface/build-module/components/complementary-area/index.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */








/**
 * Internal dependencies
 */






function ComplementaryAreaSlot({
  scope,
  ...props
}) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Slot, {
    name: `ComplementaryArea/${scope}`,
    ...props
  });
}
function ComplementaryAreaFill({
  scope,
  children,
  className,
  id
}) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Fill, {
    name: `ComplementaryArea/${scope}`
  }, (0,external_React_.createElement)("div", {
    id: id,
    className: className
  }, children));
}
function useAdjustComplementaryListener(scope, identifier, activeArea, isActive, isSmall) {
  const previousIsSmall = (0,external_wp_element_namespaceObject.useRef)(false);
  const shouldOpenWhenNotSmall = (0,external_wp_element_namespaceObject.useRef)(false);
  const {
    enableComplementaryArea,
    disableComplementaryArea
  } = (0,external_wp_data_namespaceObject.useDispatch)(store);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    // If the complementary area is active and the editor is switching from
    // a big to a small window size.
    if (isActive && isSmall && !previousIsSmall.current) {
      disableComplementaryArea(scope);
      // Flag the complementary area to be reopened when the window size
      // goes from small to big.
      shouldOpenWhenNotSmall.current = true;
    } else if (
    // If there is a flag indicating the complementary area should be
    // enabled when we go from small to big window size and we are going
    // from a small to big window size.
    shouldOpenWhenNotSmall.current && !isSmall && previousIsSmall.current) {
      // Remove the flag indicating the complementary area should be
      // enabled.
      shouldOpenWhenNotSmall.current = false;
      enableComplementaryArea(scope, identifier);
    } else if (
    // If the flag is indicating the current complementary should be
    // reopened but another complementary area becomes active, remove
    // the flag.
    shouldOpenWhenNotSmall.current && activeArea && activeArea !== identifier) {
      shouldOpenWhenNotSmall.current = false;
    }
    if (isSmall !== previousIsSmall.current) {
      previousIsSmall.current = isSmall;
    }
  }, [isActive, isSmall, scope, identifier, activeArea, disableComplementaryArea, enableComplementaryArea]);
}
function ComplementaryArea({
  children,
  className,
  closeLabel = (0,external_wp_i18n_namespaceObject.__)('Close plugin'),
  identifier,
  header,
  headerClassName,
  icon,
  isPinnable = true,
  panelClassName,
  scope,
  name,
  smallScreenTitle,
  title,
  toggleShortcut,
  isActiveByDefault
}) {
  const {
    isLoading,
    isActive,
    isPinned,
    activeArea,
    isSmall,
    isLarge,
    showIconLabels
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getActiveComplementaryArea,
      isComplementaryAreaLoading,
      isItemPinned
    } = select(store);
    const {
      get
    } = select(external_wp_preferences_namespaceObject.store);
    const _activeArea = getActiveComplementaryArea(scope);
    return {
      isLoading: isComplementaryAreaLoading(scope),
      isActive: _activeArea === identifier,
      isPinned: isItemPinned(scope, identifier),
      activeArea: _activeArea,
      isSmall: select(external_wp_viewport_namespaceObject.store).isViewportMatch('< medium'),
      isLarge: select(external_wp_viewport_namespaceObject.store).isViewportMatch('large'),
      showIconLabels: get('core', 'showIconLabels')
    };
  }, [identifier, scope]);
  useAdjustComplementaryListener(scope, identifier, activeArea, isActive, isSmall);
  const {
    enableComplementaryArea,
    disableComplementaryArea,
    pinItem,
    unpinItem
  } = (0,external_wp_data_namespaceObject.useDispatch)(store);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    // Set initial visibility: For large screens, enable if it's active by
    // default. For small screens, always initially disable.
    if (isActiveByDefault && activeArea === undefined && !isSmall) {
      enableComplementaryArea(scope, identifier);
    } else if (activeArea === undefined && isSmall) {
      disableComplementaryArea(scope, identifier);
    }
  }, [activeArea, isActiveByDefault, scope, identifier, isSmall, enableComplementaryArea, disableComplementaryArea]);
  return (0,external_React_.createElement)(external_React_.Fragment, null, isPinnable && (0,external_React_.createElement)(pinned_items, {
    scope: scope
  }, isPinned && (0,external_React_.createElement)(complementary_area_toggle, {
    scope: scope,
    identifier: identifier,
    isPressed: isActive && (!showIconLabels || isLarge),
    "aria-expanded": isActive,
    "aria-disabled": isLoading,
    label: title,
    icon: showIconLabels ? library_check : icon,
    showTooltip: !showIconLabels,
    variant: showIconLabels ? 'tertiary' : undefined,
    size: "compact"
  })), name && isPinnable && (0,external_React_.createElement)(ComplementaryAreaMoreMenuItem, {
    target: name,
    scope: scope,
    icon: icon
  }, title), isActive && (0,external_React_.createElement)(ComplementaryAreaFill, {
    className: classnames_default()('interface-complementary-area', className),
    scope: scope,
    id: identifier.replace('/', ':')
  }, (0,external_React_.createElement)(complementary_area_header, {
    className: headerClassName,
    closeLabel: closeLabel,
    onClose: () => disableComplementaryArea(scope),
    smallScreenTitle: smallScreenTitle,
    toggleButtonProps: {
      label: closeLabel,
      shortcut: toggleShortcut,
      scope,
      identifier
    }
  }, header || (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)("strong", null, title), isPinnable && (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    className: "interface-complementary-area__pin-unpin-item",
    icon: isPinned ? star_filled : star_empty,
    label: isPinned ? (0,external_wp_i18n_namespaceObject.__)('Unpin from toolbar') : (0,external_wp_i18n_namespaceObject.__)('Pin to toolbar'),
    onClick: () => (isPinned ? unpinItem : pinItem)(scope, identifier),
    isPressed: isPinned,
    "aria-expanded": isPinned
  }))), (0,external_React_.createElement)(external_wp_components_namespaceObject.Panel, {
    className: panelClassName
  }, children)));
}
const ComplementaryAreaWrapped = complementary_area_context(ComplementaryArea);
ComplementaryAreaWrapped.Slot = ComplementaryAreaSlot;
/* harmony default export */ const complementary_area = (ComplementaryAreaWrapped);

;// CONCATENATED MODULE: external ["wp","compose"]
const external_wp_compose_namespaceObject = window["wp"]["compose"];
;// CONCATENATED MODULE: ./node_modules/@wordpress/interface/build-module/components/navigable-region/index.js

/**
 * External dependencies
 */

function NavigableRegion({
  children,
  className,
  ariaLabel,
  as: Tag = 'div',
  ...props
}) {
  return (0,external_React_.createElement)(Tag, {
    className: classnames_default()('interface-navigable-region', className),
    "aria-label": ariaLabel,
    role: "region",
    tabIndex: "-1",
    ...props
  }, children);
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/interface/build-module/components/interface-skeleton/index.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */





/**
 * Internal dependencies
 */

function useHTMLClass(className) {
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    const element = document && document.querySelector(`html:not(.${className})`);
    if (!element) {
      return;
    }
    element.classList.toggle(className);
    return () => {
      element.classList.toggle(className);
    };
  }, [className]);
}
const headerVariants = {
  hidden: {
    opacity: 0
  },
  hover: {
    opacity: 1,
    transition: {
      type: 'tween',
      delay: 0.2,
      delayChildren: 0.2
    }
  },
  distractionFreeInactive: {
    opacity: 1,
    transition: {
      delay: 0
    }
  }
};
function InterfaceSkeleton({
  isDistractionFree,
  footer,
  header,
  editorNotices,
  sidebar,
  secondarySidebar,
  notices,
  content,
  actions,
  labels,
  className,
  enableRegionNavigation = true,
  // Todo: does this need to be a prop.
  // Can we use a dependency to keyboard-shortcuts directly?
  shortcuts
}, ref) {
  const navigateRegionsProps = (0,external_wp_components_namespaceObject.__unstableUseNavigateRegions)(shortcuts);
  useHTMLClass('interface-interface-skeleton__html-container');
  const defaultLabels = {
    /* translators: accessibility text for the top bar landmark region. */
    header: (0,external_wp_i18n_namespaceObject._x)('Header', 'header landmark area'),
    /* translators: accessibility text for the content landmark region. */
    body: (0,external_wp_i18n_namespaceObject.__)('Content'),
    /* translators: accessibility text for the secondary sidebar landmark region. */
    secondarySidebar: (0,external_wp_i18n_namespaceObject.__)('Block Library'),
    /* translators: accessibility text for the settings landmark region. */
    sidebar: (0,external_wp_i18n_namespaceObject.__)('Settings'),
    /* translators: accessibility text for the publish landmark region. */
    actions: (0,external_wp_i18n_namespaceObject.__)('Publish'),
    /* translators: accessibility text for the footer landmark region. */
    footer: (0,external_wp_i18n_namespaceObject.__)('Footer')
  };
  const mergedLabels = {
    ...defaultLabels,
    ...labels
  };
  return (0,external_React_.createElement)("div", {
    ...(enableRegionNavigation ? navigateRegionsProps : {}),
    ref: (0,external_wp_compose_namespaceObject.useMergeRefs)([ref, enableRegionNavigation ? navigateRegionsProps.ref : undefined]),
    className: classnames_default()(className, 'interface-interface-skeleton', navigateRegionsProps.className, !!footer && 'has-footer')
  }, (0,external_React_.createElement)("div", {
    className: "interface-interface-skeleton__editor"
  }, !!header && (0,external_React_.createElement)(NavigableRegion, {
    as: external_wp_components_namespaceObject.__unstableMotion.div,
    className: "interface-interface-skeleton__header",
    "aria-label": mergedLabels.header,
    initial: isDistractionFree ? 'hidden' : 'distractionFreeInactive',
    whileHover: isDistractionFree ? 'hover' : 'distractionFreeInactive',
    animate: isDistractionFree ? 'hidden' : 'distractionFreeInactive',
    variants: headerVariants,
    transition: isDistractionFree ? {
      type: 'tween',
      delay: 0.8
    } : undefined
  }, header), isDistractionFree && (0,external_React_.createElement)("div", {
    className: "interface-interface-skeleton__header"
  }, editorNotices), (0,external_React_.createElement)("div", {
    className: "interface-interface-skeleton__body"
  }, !!secondarySidebar && (0,external_React_.createElement)(NavigableRegion, {
    className: "interface-interface-skeleton__secondary-sidebar",
    ariaLabel: mergedLabels.secondarySidebar
  }, secondarySidebar), !!notices && (0,external_React_.createElement)("div", {
    className: "interface-interface-skeleton__notices"
  }, notices), (0,external_React_.createElement)(NavigableRegion, {
    className: "interface-interface-skeleton__content",
    ariaLabel: mergedLabels.body
  }, content), !!sidebar && (0,external_React_.createElement)(NavigableRegion, {
    className: "interface-interface-skeleton__sidebar",
    ariaLabel: mergedLabels.sidebar
  }, sidebar), !!actions && (0,external_React_.createElement)(NavigableRegion, {
    className: "interface-interface-skeleton__actions",
    ariaLabel: mergedLabels.actions
  }, actions))), !!footer && (0,external_React_.createElement)(NavigableRegion, {
    className: "interface-interface-skeleton__footer",
    ariaLabel: mergedLabels.footer
  }, footer));
}
/* harmony default export */ const interface_skeleton = ((0,external_wp_element_namespaceObject.forwardRef)(InterfaceSkeleton));

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/more-vertical.js

/**
 * WordPress dependencies
 */

const moreVertical = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M13 19h-2v-2h2v2zm0-6h-2v-2h2v2zm0-6h-2V5h2v2z"
}));
/* harmony default export */ const more_vertical = (moreVertical);

;// CONCATENATED MODULE: ./node_modules/@wordpress/interface/build-module/components/more-menu-dropdown/index.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */



function MoreMenuDropdown({
  as: DropdownComponent = external_wp_components_namespaceObject.DropdownMenu,
  className,
  /* translators: button label text should, if possible, be under 16 characters. */
  label = (0,external_wp_i18n_namespaceObject.__)('Options'),
  popoverProps,
  toggleProps,
  children
}) {
  return (0,external_React_.createElement)(DropdownComponent, {
    className: classnames_default()('interface-more-menu-dropdown', className),
    icon: more_vertical,
    label: label,
    popoverProps: {
      placement: 'bottom-end',
      ...popoverProps,
      className: classnames_default()('interface-more-menu-dropdown__content', popoverProps?.className)
    },
    toggleProps: {
      tooltipPosition: 'bottom',
      ...toggleProps,
      size: 'compact'
    }
  }, onClose => children(onClose));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/interface/build-module/components/index.js










;// CONCATENATED MODULE: ./node_modules/@wordpress/interface/build-module/index.js



;// CONCATENATED MODULE: external ["wp","widgets"]
const external_wp_widgets_namespaceObject = window["wp"]["widgets"];
;// CONCATENATED MODULE: external ["wp","hooks"]
const external_wp_hooks_namespaceObject = window["wp"]["hooks"];
;// CONCATENATED MODULE: external ["wp","mediaUtils"]
const external_wp_mediaUtils_namespaceObject = window["wp"]["mediaUtils"];
;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/hooks/components.js
/**
 * WordPress dependencies
 */


(0,external_wp_hooks_namespaceObject.addFilter)('editor.MediaUpload', 'core/edit-site/components/media-upload', () => external_wp_mediaUtils_namespaceObject.MediaUpload);

;// CONCATENATED MODULE: external ["wp","blockEditor"]
const external_wp_blockEditor_namespaceObject = window["wp"]["blockEditor"];
;// CONCATENATED MODULE: external ["wp","notices"]
const external_wp_notices_namespaceObject = window["wp"]["notices"];
;// CONCATENATED MODULE: external ["wp","coreData"]
const external_wp_coreData_namespaceObject = window["wp"]["coreData"];
;// CONCATENATED MODULE: ./node_modules/colord/index.mjs
var r={grad:.9,turn:360,rad:360/(2*Math.PI)},t=function(r){return"string"==typeof r?r.length>0:"number"==typeof r},n=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=Math.pow(10,t)),Math.round(n*r)/n+0},e=function(r,t,n){return void 0===t&&(t=0),void 0===n&&(n=1),r>n?n:r>t?r:t},u=function(r){return(r=isFinite(r)?r%360:0)>0?r:r+360},a=function(r){return{r:e(r.r,0,255),g:e(r.g,0,255),b:e(r.b,0,255),a:e(r.a)}},o=function(r){return{r:n(r.r),g:n(r.g),b:n(r.b),a:n(r.a,3)}},i=/^#([0-9a-f]{3,8})$/i,s=function(r){var t=r.toString(16);return t.length<2?"0"+t:t},h=function(r){var t=r.r,n=r.g,e=r.b,u=r.a,a=Math.max(t,n,e),o=a-Math.min(t,n,e),i=o?a===t?(n-e)/o:a===n?2+(e-t)/o:4+(t-n)/o:0;return{h:60*(i<0?i+6:i),s:a?o/a*100:0,v:a/255*100,a:u}},b=function(r){var t=r.h,n=r.s,e=r.v,u=r.a;t=t/360*6,n/=100,e/=100;var a=Math.floor(t),o=e*(1-n),i=e*(1-(t-a)*n),s=e*(1-(1-t+a)*n),h=a%6;return{r:255*[e,i,o,o,s,e][h],g:255*[s,e,e,i,o,o][h],b:255*[o,o,s,e,e,i][h],a:u}},g=function(r){return{h:u(r.h),s:e(r.s,0,100),l:e(r.l,0,100),a:e(r.a)}},d=function(r){return{h:n(r.h),s:n(r.s),l:n(r.l),a:n(r.a,3)}},f=function(r){return b((n=(t=r).s,{h:t.h,s:(n*=((e=t.l)<50?e:100-e)/100)>0?2*n/(e+n)*100:0,v:e+n,a:t.a}));var t,n,e},c=function(r){return{h:(t=h(r)).h,s:(u=(200-(n=t.s))*(e=t.v)/100)>0&&u<200?n*e/100/(u<=100?u:200-u)*100:0,l:u/2,a:t.a};var t,n,e,u},l=/^hsla?\(\s*([+-]?\d*\.?\d+)(deg|rad|grad|turn)?\s*,\s*([+-]?\d*\.?\d+)%\s*,\s*([+-]?\d*\.?\d+)%\s*(?:,\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i,colord_p=/^hsla?\(\s*([+-]?\d*\.?\d+)(deg|rad|grad|turn)?\s+([+-]?\d*\.?\d+)%\s+([+-]?\d*\.?\d+)%\s*(?:\/\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i,v=/^rgba?\(\s*([+-]?\d*\.?\d+)(%)?\s*,\s*([+-]?\d*\.?\d+)(%)?\s*,\s*([+-]?\d*\.?\d+)(%)?\s*(?:,\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i,m=/^rgba?\(\s*([+-]?\d*\.?\d+)(%)?\s+([+-]?\d*\.?\d+)(%)?\s+([+-]?\d*\.?\d+)(%)?\s*(?:\/\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i,y={string:[[function(r){var t=i.exec(r);return t?(r=t[1]).length<=4?{r:parseInt(r[0]+r[0],16),g:parseInt(r[1]+r[1],16),b:parseInt(r[2]+r[2],16),a:4===r.length?n(parseInt(r[3]+r[3],16)/255,2):1}:6===r.length||8===r.length?{r:parseInt(r.substr(0,2),16),g:parseInt(r.substr(2,2),16),b:parseInt(r.substr(4,2),16),a:8===r.length?n(parseInt(r.substr(6,2),16)/255,2):1}:null:null},"hex"],[function(r){var t=v.exec(r)||m.exec(r);return t?t[2]!==t[4]||t[4]!==t[6]?null:a({r:Number(t[1])/(t[2]?100/255:1),g:Number(t[3])/(t[4]?100/255:1),b:Number(t[5])/(t[6]?100/255:1),a:void 0===t[7]?1:Number(t[7])/(t[8]?100:1)}):null},"rgb"],[function(t){var n=l.exec(t)||colord_p.exec(t);if(!n)return null;var e,u,a=g({h:(e=n[1],u=n[2],void 0===u&&(u="deg"),Number(e)*(r[u]||1)),s:Number(n[3]),l:Number(n[4]),a:void 0===n[5]?1:Number(n[5])/(n[6]?100:1)});return f(a)},"hsl"]],object:[[function(r){var n=r.r,e=r.g,u=r.b,o=r.a,i=void 0===o?1:o;return t(n)&&t(e)&&t(u)?a({r:Number(n),g:Number(e),b:Number(u),a:Number(i)}):null},"rgb"],[function(r){var n=r.h,e=r.s,u=r.l,a=r.a,o=void 0===a?1:a;if(!t(n)||!t(e)||!t(u))return null;var i=g({h:Number(n),s:Number(e),l:Number(u),a:Number(o)});return f(i)},"hsl"],[function(r){var n=r.h,a=r.s,o=r.v,i=r.a,s=void 0===i?1:i;if(!t(n)||!t(a)||!t(o))return null;var h=function(r){return{h:u(r.h),s:e(r.s,0,100),v:e(r.v,0,100),a:e(r.a)}}({h:Number(n),s:Number(a),v:Number(o),a:Number(s)});return b(h)},"hsv"]]},N=function(r,t){for(var n=0;n<t.length;n++){var e=t[n][0](r);if(e)return[e,t[n][1]]}return[null,void 0]},x=function(r){return"string"==typeof r?N(r.trim(),y.string):"object"==typeof r&&null!==r?N(r,y.object):[null,void 0]},I=function(r){return x(r)[1]},M=function(r,t){var n=c(r);return{h:n.h,s:e(n.s+100*t,0,100),l:n.l,a:n.a}},H=function(r){return(299*r.r+587*r.g+114*r.b)/1e3/255},$=function(r,t){var n=c(r);return{h:n.h,s:n.s,l:e(n.l+100*t,0,100),a:n.a}},j=function(){function r(r){this.parsed=x(r)[0],this.rgba=this.parsed||{r:0,g:0,b:0,a:1}}return r.prototype.isValid=function(){return null!==this.parsed},r.prototype.brightness=function(){return n(H(this.rgba),2)},r.prototype.isDark=function(){return H(this.rgba)<.5},r.prototype.isLight=function(){return H(this.rgba)>=.5},r.prototype.toHex=function(){return r=o(this.rgba),t=r.r,e=r.g,u=r.b,i=(a=r.a)<1?s(n(255*a)):"","#"+s(t)+s(e)+s(u)+i;var r,t,e,u,a,i},r.prototype.toRgb=function(){return o(this.rgba)},r.prototype.toRgbString=function(){return r=o(this.rgba),t=r.r,n=r.g,e=r.b,(u=r.a)<1?"rgba("+t+", "+n+", "+e+", "+u+")":"rgb("+t+", "+n+", "+e+")";var r,t,n,e,u},r.prototype.toHsl=function(){return d(c(this.rgba))},r.prototype.toHslString=function(){return r=d(c(this.rgba)),t=r.h,n=r.s,e=r.l,(u=r.a)<1?"hsla("+t+", "+n+"%, "+e+"%, "+u+")":"hsl("+t+", "+n+"%, "+e+"%)";var r,t,n,e,u},r.prototype.toHsv=function(){return r=h(this.rgba),{h:n(r.h),s:n(r.s),v:n(r.v),a:n(r.a,3)};var r},r.prototype.invert=function(){return w({r:255-(r=this.rgba).r,g:255-r.g,b:255-r.b,a:r.a});var r},r.prototype.saturate=function(r){return void 0===r&&(r=.1),w(M(this.rgba,r))},r.prototype.desaturate=function(r){return void 0===r&&(r=.1),w(M(this.rgba,-r))},r.prototype.grayscale=function(){return w(M(this.rgba,-1))},r.prototype.lighten=function(r){return void 0===r&&(r=.1),w($(this.rgba,r))},r.prototype.darken=function(r){return void 0===r&&(r=.1),w($(this.rgba,-r))},r.prototype.rotate=function(r){return void 0===r&&(r=15),this.hue(this.hue()+r)},r.prototype.alpha=function(r){return"number"==typeof r?w({r:(t=this.rgba).r,g:t.g,b:t.b,a:r}):n(this.rgba.a,3);var t},r.prototype.hue=function(r){var t=c(this.rgba);return"number"==typeof r?w({h:r,s:t.s,l:t.l,a:t.a}):n(t.h)},r.prototype.isEqual=function(r){return this.toHex()===w(r).toHex()},r}(),w=function(r){return r instanceof j?r:new j(r)},S=[],k=function(r){r.forEach(function(r){S.indexOf(r)<0&&(r(j,y),S.push(r))})},E=function(){return new j({r:255*Math.random(),g:255*Math.random(),b:255*Math.random()})};

;// CONCATENATED MODULE: ./node_modules/colord/plugins/a11y.mjs
var a11y_o=function(o){var t=o/255;return t<.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)},a11y_t=function(t){return.2126*a11y_o(t.r)+.7152*a11y_o(t.g)+.0722*a11y_o(t.b)};/* harmony default export */ function a11y(o){o.prototype.luminance=function(){return o=a11y_t(this.rgba),void 0===(r=2)&&(r=0),void 0===n&&(n=Math.pow(10,r)),Math.round(n*o)/n+0;var o,r,n},o.prototype.contrast=function(r){void 0===r&&(r="#FFF");var n,a,i,e,v,u,d,c=r instanceof o?r:new o(r);return e=this.rgba,v=c.toRgb(),u=a11y_t(e),d=a11y_t(v),n=u>d?(u+.05)/(d+.05):(d+.05)/(u+.05),void 0===(a=2)&&(a=0),void 0===i&&(i=Math.pow(10,a)),Math.floor(i*n)/i+0},o.prototype.isReadable=function(o,t){return void 0===o&&(o="#FFF"),void 0===t&&(t={}),this.contrast(o)>=(e=void 0===(i=(r=t).size)?"normal":i,"AAA"===(a=void 0===(n=r.level)?"AA":n)&&"normal"===e?7:"AA"===a&&"large"===e?3:4.5);var r,n,a,i,e}}

;// CONCATENATED MODULE: external ["wp","privateApis"]
const external_wp_privateApis_namespaceObject = window["wp"]["privateApis"];
;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/lock-unlock.js
/**
 * WordPress dependencies
 */

const {
  lock,
  unlock
} = (0,external_wp_privateApis_namespaceObject.__dangerousOptInToUnstableAPIsOnlyForCoreModules)('I know using unstable features means my theme or plugin will inevitably break in the next version of WordPress.', '@wordpress/edit-site');

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/hooks.js
/**
 * External dependencies
 */



/**
 * WordPress dependencies
 */



/**
 * Internal dependencies
 */


const {
  useGlobalSetting,
  useGlobalStyle
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);

// Enable colord's a11y plugin.
k([a11y]);
function useColorRandomizer(name) {
  const [themeColors, setThemeColors] = useGlobalSetting('color.palette.theme', name);
  function randomizeColors() {
    /* eslint-disable no-restricted-syntax */
    const randomRotationValue = Math.floor(Math.random() * 225);
    /* eslint-enable no-restricted-syntax */

    const newColors = themeColors.map(colorObject => {
      const {
        color
      } = colorObject;
      const newColor = w(color).rotate(randomRotationValue).toHex();
      return {
        ...colorObject,
        color: newColor
      };
    });
    setThemeColors(newColors);
  }
  return window.__experimentalEnableColorRandomizer ? [randomizeColors] : [];
}
function useStylesPreviewColors() {
  const [textColor = 'black'] = useGlobalStyle('color.text');
  const [backgroundColor = 'white'] = useGlobalStyle('color.background');
  const [headingColor = textColor] = useGlobalStyle('elements.h1.color.text');
  const [coreColors] = useGlobalSetting('color.palette.core');
  const [themeColors] = useGlobalSetting('color.palette.theme');
  const [customColors] = useGlobalSetting('color.palette.custom');
  const paletteColors = (themeColors !== null && themeColors !== void 0 ? themeColors : []).concat(customColors !== null && customColors !== void 0 ? customColors : []).concat(coreColors !== null && coreColors !== void 0 ? coreColors : []);
  const highlightedColors = paletteColors.filter(
  // we exclude these two colors because they are already visible in the preview.
  ({
    color
  }) => color !== backgroundColor && color !== headingColor).slice(0, 2);
  return {
    paletteColors,
    highlightedColors
  };
}
function useSupportedStyles(name, element) {
  const {
    supportedPanels
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    return {
      supportedPanels: unlock(select(external_wp_blocks_namespaceObject.store)).getSupportedStyles(name, element)
    };
  }, [name, element]);
  return supportedPanels;
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/utils/set-nested-value.js
/**
 * Sets the value at path of object.
 * If a portion of path doesn’t exist, it’s created.
 * Arrays are created for missing index properties while objects are created
 * for all other missing properties.
 *
 * This function intentionally mutates the input object.
 *
 * Inspired by _.set().
 *
 * @see https://lodash.com/docs/4.17.15#set
 *
 * @todo Needs to be deduplicated with its copy in `@wordpress/core-data`.
 *
 * @param {Object} object Object to modify
 * @param {Array}  path   Path of the property to set.
 * @param {*}      value  Value to set.
 */
function setNestedValue(object, path, value) {
  if (!object || typeof object !== 'object') {
    return object;
  }
  path.reduce((acc, key, idx) => {
    if (acc[key] === undefined) {
      if (Number.isInteger(path[idx + 1])) {
        acc[key] = [];
      } else {
        acc[key] = {};
      }
    }
    if (idx === path.length - 1) {
      acc[key] = value;
    }
    return acc[key];
  }, object);
  return object;
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/hooks/push-changes-to-global-styles/index.js

/**
 * WordPress dependencies
 */











/**
 * Internal dependencies
 */



const {
  cleanEmptyObject,
  GlobalStylesContext
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);

// Block Gap is a special case and isn't defined within the blocks
// style properties config. We'll add it here to allow it to be pushed
// to global styles as well.
const STYLE_PROPERTY = {
  ...external_wp_blocks_namespaceObject.__EXPERIMENTAL_STYLE_PROPERTY,
  blockGap: {
    value: ['spacing', 'blockGap']
  }
};

// TODO: Temporary duplication of constant in @wordpress/block-editor. Can be
// removed by moving PushChangesToGlobalStylesControl to
// @wordpress/block-editor.
const STYLE_PATH_TO_CSS_VAR_INFIX = {
  'border.color': 'color',
  'color.background': 'color',
  'color.text': 'color',
  'elements.link.color.text': 'color',
  'elements.link.:hover.color.text': 'color',
  'elements.link.typography.fontFamily': 'font-family',
  'elements.link.typography.fontSize': 'font-size',
  'elements.button.color.text': 'color',
  'elements.button.color.background': 'color',
  'elements.button.typography.fontFamily': 'font-family',
  'elements.button.typography.fontSize': 'font-size',
  'elements.caption.color.text': 'color',
  'elements.heading.color': 'color',
  'elements.heading.color.background': 'color',
  'elements.heading.typography.fontFamily': 'font-family',
  'elements.heading.gradient': 'gradient',
  'elements.heading.color.gradient': 'gradient',
  'elements.h1.color': 'color',
  'elements.h1.color.background': 'color',
  'elements.h1.typography.fontFamily': 'font-family',
  'elements.h1.color.gradient': 'gradient',
  'elements.h2.color': 'color',
  'elements.h2.color.background': 'color',
  'elements.h2.typography.fontFamily': 'font-family',
  'elements.h2.color.gradient': 'gradient',
  'elements.h3.color': 'color',
  'elements.h3.color.background': 'color',
  'elements.h3.typography.fontFamily': 'font-family',
  'elements.h3.color.gradient': 'gradient',
  'elements.h4.color': 'color',
  'elements.h4.color.background': 'color',
  'elements.h4.typography.fontFamily': 'font-family',
  'elements.h4.color.gradient': 'gradient',
  'elements.h5.color': 'color',
  'elements.h5.color.background': 'color',
  'elements.h5.typography.fontFamily': 'font-family',
  'elements.h5.color.gradient': 'gradient',
  'elements.h6.color': 'color',
  'elements.h6.color.background': 'color',
  'elements.h6.typography.fontFamily': 'font-family',
  'elements.h6.color.gradient': 'gradient',
  'color.gradient': 'gradient',
  blockGap: 'spacing',
  'typography.fontSize': 'font-size',
  'typography.fontFamily': 'font-family'
};

// TODO: Temporary duplication of constant in @wordpress/block-editor. Can be
// removed by moving PushChangesToGlobalStylesControl to
// @wordpress/block-editor.
const STYLE_PATH_TO_PRESET_BLOCK_ATTRIBUTE = {
  'border.color': 'borderColor',
  'color.background': 'backgroundColor',
  'color.text': 'textColor',
  'color.gradient': 'gradient',
  'typography.fontSize': 'fontSize',
  'typography.fontFamily': 'fontFamily'
};
const SUPPORTED_STYLES = ['border', 'color', 'spacing', 'typography'];
const getValueFromObjectPath = (object, path) => {
  let value = object;
  path.forEach(fieldName => {
    value = value?.[fieldName];
  });
  return value;
};
const flatBorderProperties = ['borderColor', 'borderWidth', 'borderStyle'];
const sides = ['top', 'right', 'bottom', 'left'];
function getBorderStyleChanges(border, presetColor, userStyle) {
  if (!border && !presetColor) {
    return [];
  }
  const changes = [...getFallbackBorderStyleChange('top', border, userStyle), ...getFallbackBorderStyleChange('right', border, userStyle), ...getFallbackBorderStyleChange('bottom', border, userStyle), ...getFallbackBorderStyleChange('left', border, userStyle)];

  // Handle a flat border i.e. all sides the same, CSS shorthand.
  const {
    color: customColor,
    style,
    width
  } = border || {};
  const hasColorOrWidth = presetColor || customColor || width;
  if (hasColorOrWidth && !style) {
    // Global Styles need individual side configurations to overcome
    // theme.json configurations which are per side as well.
    sides.forEach(side => {
      // Only add fallback border-style if global styles don't already
      // have something set.
      if (!userStyle?.[side]?.style) {
        changes.push({
          path: ['border', side, 'style'],
          value: 'solid'
        });
      }
    });
  }
  return changes;
}
function getFallbackBorderStyleChange(side, border, globalBorderStyle) {
  if (!border?.[side] || globalBorderStyle?.[side]?.style) {
    return [];
  }
  const {
    color,
    style,
    width
  } = border[side];
  const hasColorOrWidth = color || width;
  if (!hasColorOrWidth || style) {
    return [];
  }
  return [{
    path: ['border', side, 'style'],
    value: 'solid'
  }];
}
function useChangesToPush(name, attributes, userConfig) {
  const supports = useSupportedStyles(name);
  const blockUserConfig = userConfig?.styles?.blocks?.[name];
  return (0,external_wp_element_namespaceObject.useMemo)(() => {
    const changes = supports.flatMap(key => {
      if (!STYLE_PROPERTY[key]) {
        return [];
      }
      const {
        value: path
      } = STYLE_PROPERTY[key];
      const presetAttributeKey = path.join('.');
      const presetAttributeValue = attributes[STYLE_PATH_TO_PRESET_BLOCK_ATTRIBUTE[presetAttributeKey]];
      const value = presetAttributeValue ? `var:preset|${STYLE_PATH_TO_CSS_VAR_INFIX[presetAttributeKey]}|${presetAttributeValue}` : getValueFromObjectPath(attributes.style, path);

      // Links only have a single support entry but have two element
      // style properties, color and hover color. The following check
      // will add the hover color to the changes if required.
      if (key === 'linkColor') {
        const linkChanges = value ? [{
          path,
          value
        }] : [];
        const hoverPath = ['elements', 'link', ':hover', 'color', 'text'];
        const hoverValue = getValueFromObjectPath(attributes.style, hoverPath);
        if (hoverValue) {
          linkChanges.push({
            path: hoverPath,
            value: hoverValue
          });
        }
        return linkChanges;
      }

      // The shorthand border styles can't be mapped directly as global
      // styles requires longhand config.
      if (flatBorderProperties.includes(key) && value) {
        // The shorthand config path is included to clear the block attribute.
        const borderChanges = [{
          path,
          value
        }];
        sides.forEach(side => {
          const currentPath = [...path];
          currentPath.splice(-1, 0, side);
          borderChanges.push({
            path: currentPath,
            value
          });
        });
        return borderChanges;
      }
      return value ? [{
        path,
        value
      }] : [];
    });

    // To ensure display of a visible border, global styles require a
    // default border style if a border color or width is present.
    getBorderStyleChanges(attributes.style?.border, attributes.borderColor, blockUserConfig?.border).forEach(change => changes.push(change));
    return changes;
  }, [supports, attributes, blockUserConfig]);
}
function cloneDeep(object) {
  return !object ? {} : JSON.parse(JSON.stringify(object));
}
function PushChangesToGlobalStylesControl({
  name,
  attributes,
  setAttributes
}) {
  const {
    user: userConfig,
    setUserConfig
  } = (0,external_wp_element_namespaceObject.useContext)(GlobalStylesContext);
  const changes = useChangesToPush(name, attributes, userConfig);
  const {
    __unstableMarkNextChangeAsNotPersistent
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_blockEditor_namespaceObject.store);
  const {
    createSuccessNotice
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_notices_namespaceObject.store);
  const pushChanges = (0,external_wp_element_namespaceObject.useCallback)(() => {
    if (changes.length === 0) {
      return;
    }
    if (changes.length > 0) {
      const {
        style: blockStyles
      } = attributes;
      const newBlockStyles = cloneDeep(blockStyles);
      const newUserConfig = cloneDeep(userConfig);
      for (const {
        path,
        value
      } of changes) {
        setNestedValue(newBlockStyles, path, undefined);
        setNestedValue(newUserConfig, ['styles', 'blocks', name, ...path], value);
      }
      const newBlockAttributes = {
        borderColor: undefined,
        backgroundColor: undefined,
        textColor: undefined,
        gradient: undefined,
        fontSize: undefined,
        fontFamily: undefined,
        style: cleanEmptyObject(newBlockStyles)
      };

      // @wordpress/core-data doesn't support editing multiple entity types in
      // a single undo level. So for now, we disable @wordpress/core-data undo
      // tracking and implement our own Undo button in the snackbar
      // notification.
      __unstableMarkNextChangeAsNotPersistent();
      setAttributes(newBlockAttributes);
      setUserConfig(() => newUserConfig, {
        undoIgnore: true
      });
      createSuccessNotice((0,external_wp_i18n_namespaceObject.sprintf)(
      // translators: %s: Title of the block e.g. 'Heading'.
      (0,external_wp_i18n_namespaceObject.__)('%s styles applied.'), (0,external_wp_blocks_namespaceObject.getBlockType)(name).title), {
        type: 'snackbar',
        actions: [{
          label: (0,external_wp_i18n_namespaceObject.__)('Undo'),
          onClick() {
            __unstableMarkNextChangeAsNotPersistent();
            setAttributes(attributes);
            setUserConfig(() => userConfig, {
              undoIgnore: true
            });
          }
        }]
      });
    }
  }, [__unstableMarkNextChangeAsNotPersistent, attributes, changes, createSuccessNotice, name, setAttributes, setUserConfig, userConfig]);
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.BaseControl, {
    className: "edit-site-push-changes-to-global-styles-control",
    help: (0,external_wp_i18n_namespaceObject.sprintf)(
    // translators: %s: Title of the block e.g. 'Heading'.
    (0,external_wp_i18n_namespaceObject.__)('Apply this block’s typography, spacing, dimensions, and color styles to all %s blocks.'), (0,external_wp_blocks_namespaceObject.getBlockType)(name).title)
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.BaseControl.VisualLabel, null, (0,external_wp_i18n_namespaceObject.__)('Styles')), (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    variant: "primary",
    disabled: changes.length === 0,
    onClick: pushChanges
  }, (0,external_wp_i18n_namespaceObject.__)('Apply globally')));
}
function PushChangesToGlobalStyles(props) {
  const blockEditingMode = (0,external_wp_blockEditor_namespaceObject.useBlockEditingMode)();
  const isBlockBasedTheme = (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_coreData_namespaceObject.store).getCurrentTheme()?.is_block_theme, []);
  const supportsStyles = SUPPORTED_STYLES.some(feature => (0,external_wp_blocks_namespaceObject.hasBlockSupport)(props.name, feature));
  const isDisplayed = blockEditingMode === 'default' && supportsStyles && isBlockBasedTheme;
  if (!isDisplayed) {
    return null;
  }
  return (0,external_React_.createElement)(external_wp_blockEditor_namespaceObject.InspectorAdvancedControls, null, (0,external_React_.createElement)(PushChangesToGlobalStylesControl, {
    ...props
  }));
}
const withPushChangesToGlobalStyles = (0,external_wp_compose_namespaceObject.createHigherOrderComponent)(BlockEdit => props => (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(BlockEdit, {
  ...props
}), props.isSelected && (0,external_React_.createElement)(PushChangesToGlobalStyles, {
  ...props
})));
(0,external_wp_hooks_namespaceObject.addFilter)('editor.BlockEdit', 'core/edit-site/push-changes-to-global-styles', withPushChangesToGlobalStyles);

;// CONCATENATED MODULE: external ["wp","router"]
const external_wp_router_namespaceObject = window["wp"]["router"];
;// CONCATENATED MODULE: external ["wp","url"]
const external_wp_url_namespaceObject = window["wp"]["url"];
;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/utils/is-previewing-theme.js
/**
 * WordPress dependencies
 */

function isPreviewingTheme() {
  return (0,external_wp_url_namespaceObject.getQueryArg)(window.location.href, 'wp_theme_preview') !== undefined;
}
function currentlyPreviewingTheme() {
  if (isPreviewingTheme()) {
    return (0,external_wp_url_namespaceObject.getQueryArg)(window.location.href, 'wp_theme_preview');
  }
  return null;
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/routes/link.js

/**
 * WordPress dependencies
 */



/**
 * Internal dependencies
 */


const {
  useHistory
} = unlock(external_wp_router_namespaceObject.privateApis);
function useLink(params, state, shouldReplace = false) {
  const history = useHistory();
  function onClick(event) {
    event?.preventDefault();
    if (shouldReplace) {
      history.replace(params, state);
    } else {
      history.push(params, state);
    }
  }
  const currentArgs = (0,external_wp_url_namespaceObject.getQueryArgs)(window.location.href);
  const currentUrlWithoutArgs = (0,external_wp_url_namespaceObject.removeQueryArgs)(window.location.href, ...Object.keys(currentArgs));
  if (isPreviewingTheme()) {
    params = {
      ...params,
      wp_theme_preview: currentlyPreviewingTheme()
    };
  }
  const newUrl = (0,external_wp_url_namespaceObject.addQueryArgs)(currentUrlWithoutArgs, params);
  return {
    href: newUrl,
    onClick
  };
}
function Link({
  params = {},
  state,
  replace: shouldReplace = false,
  children,
  ...props
}) {
  const {
    href,
    onClick
  } = useLink(params, state, shouldReplace);
  return (0,external_React_.createElement)("a", {
    href: href,
    onClick: onClick,
    ...props
  }, children);
}

;// CONCATENATED MODULE: external ["wp","patterns"]
const external_wp_patterns_namespaceObject = window["wp"]["patterns"];
;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/utils/constants.js
/**
 * WordPress dependencies
 */



/**
 * Internal dependencies
 */


// Navigation
const NAVIGATION_POST_TYPE = 'wp_navigation';

// Templates.
const constants_TEMPLATE_POST_TYPE = 'wp_template';
const TEMPLATE_PART_POST_TYPE = 'wp_template_part';
const TEMPLATE_ORIGINS = {
  custom: 'custom',
  theme: 'theme',
  plugin: 'plugin'
};
const TEMPLATE_PART_AREA_DEFAULT_CATEGORY = 'uncategorized';

// Patterns.
const {
  PATTERN_TYPES,
  PATTERN_DEFAULT_CATEGORY,
  PATTERN_USER_CATEGORY,
  EXCLUDED_PATTERN_SOURCES,
  PATTERN_SYNC_TYPES
} = unlock(external_wp_patterns_namespaceObject.privateApis);

// Entities that are editable in focus mode.
const FOCUSABLE_ENTITIES = [TEMPLATE_PART_POST_TYPE, NAVIGATION_POST_TYPE, PATTERN_TYPES.user];
const POST_TYPE_LABELS = {
  [constants_TEMPLATE_POST_TYPE]: (0,external_wp_i18n_namespaceObject.__)('Template'),
  [TEMPLATE_PART_POST_TYPE]: (0,external_wp_i18n_namespaceObject.__)('Template part'),
  [PATTERN_TYPES.user]: (0,external_wp_i18n_namespaceObject.__)('Pattern'),
  [NAVIGATION_POST_TYPE]: (0,external_wp_i18n_namespaceObject.__)('Navigation')
};

// DataViews constants
const LAYOUT_GRID = 'grid';
const LAYOUT_TABLE = 'table';
const LAYOUT_LIST = 'list';
const ENUMERATION_TYPE = 'enumeration';
const OPERATOR_IN = 'in';
const OPERATOR_NOT_IN = 'notIn';

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/hooks/template-part-edit.js

/**
 * WordPress dependencies
 */









/**
 * Internal dependencies
 */



const {
  useLocation
} = unlock(external_wp_router_namespaceObject.privateApis);
function EditTemplatePartMenuItem({
  attributes
}) {
  const {
    theme,
    slug
  } = attributes;
  const {
    params
  } = useLocation();
  const templatePart = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getCurrentTheme,
      getEntityRecord
    } = select(external_wp_coreData_namespaceObject.store);
    return getEntityRecord('postType', TEMPLATE_PART_POST_TYPE,
    // Ideally this should be an official public API.
    `${theme || getCurrentTheme()?.stylesheet}//${slug}`);
  }, [theme, slug]);
  const linkProps = useLink({
    postId: templatePart?.id,
    postType: templatePart?.type,
    canvas: 'edit'
  }, {
    fromTemplateId: params.postId || templatePart?.id
  });
  if (!templatePart) {
    return null;
  }
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.ToolbarButton, {
    ...linkProps,
    onClick: event => {
      linkProps.onClick(event);
    }
  }, (0,external_wp_i18n_namespaceObject.__)('Edit'));
}
const withEditBlockControls = (0,external_wp_compose_namespaceObject.createHigherOrderComponent)(BlockEdit => props => {
  const {
    attributes,
    name
  } = props;
  const isDisplayed = name === 'core/template-part' && attributes.slug;
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(BlockEdit, {
    key: "edit",
    ...props
  }), isDisplayed && (0,external_React_.createElement)(external_wp_blockEditor_namespaceObject.BlockControls, {
    group: "other"
  }, (0,external_React_.createElement)(EditTemplatePartMenuItem, {
    attributes: attributes
  })));
}, 'withEditBlockControls');
(0,external_wp_hooks_namespaceObject.addFilter)('editor.BlockEdit', 'core/edit-site/template-part-edit-button', withEditBlockControls);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/hooks/navigation-menu-edit.js

/**
 * WordPress dependencies
 */









/**
 * Internal dependencies
 */



const {
  useLocation: navigation_menu_edit_useLocation
} = unlock(external_wp_router_namespaceObject.privateApis);
function NavigationMenuEdit({
  attributes
}) {
  const {
    ref
  } = attributes;
  const {
    params
  } = navigation_menu_edit_useLocation();
  const blockEditingMode = (0,external_wp_blockEditor_namespaceObject.useBlockEditingMode)();
  const navigationMenu = (0,external_wp_data_namespaceObject.useSelect)(select => {
    return select(external_wp_coreData_namespaceObject.store).getEntityRecord('postType', NAVIGATION_POST_TYPE,
    // Ideally this should be an official public API.
    ref);
  }, [ref]);
  const linkProps = useLink({
    postId: navigationMenu?.id,
    postType: navigationMenu?.type,
    canvas: 'edit'
  }, {
    // this applies to Navigation Menus as well.
    fromTemplateId: params.postId || navigationMenu?.id
  });

  // A non-default setting for block editing mode indicates that the
  // editor should restrict "editing" actions. Therefore the `Edit` button
  // should not be displayed.
  if (!navigationMenu || blockEditingMode !== 'default') {
    return null;
  }
  return (0,external_React_.createElement)(external_wp_blockEditor_namespaceObject.BlockControls, {
    group: "other"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.ToolbarButton, {
    ...linkProps,
    onClick: event => {
      linkProps.onClick(event);
    }
  }, (0,external_wp_i18n_namespaceObject.__)('Edit')));
}
const navigation_menu_edit_withEditBlockControls = (0,external_wp_compose_namespaceObject.createHigherOrderComponent)(BlockEdit => props => {
  const {
    attributes,
    name
  } = props;
  const isDisplayed = name === 'core/navigation' && attributes.ref;
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(BlockEdit, {
    ...props
  }), isDisplayed && (0,external_React_.createElement)(NavigationMenuEdit, {
    attributes: attributes
  }));
}, 'withEditBlockControls');
(0,external_wp_hooks_namespaceObject.addFilter)('editor.BlockEdit', 'core/edit-site/navigation-edit-button', navigation_menu_edit_withEditBlockControls);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/hooks/index.js
/**
 * Internal dependencies
 */





;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/store/reducer.js
/**
 * WordPress dependencies
 */


/**
 * Reducer returning the settings.
 *
 * @param {Object} state  Current state.
 * @param {Object} action Dispatched action.
 *
 * @return {Object} Updated state.
 */
function settings(state = {}, action) {
  switch (action.type) {
    case 'UPDATE_SETTINGS':
      return {
        ...state,
        ...action.settings
      };
  }
  return state;
}

/**
 * Reducer keeping track of the currently edited Post Type,
 * Post Id and the context provided to fill the content of the block editor.
 *
 * @param {Object} state  Current edited post.
 * @param {Object} action Dispatched action.
 *
 * @return {Object} Updated state.
 */
function editedPost(state = {}, action) {
  switch (action.type) {
    case 'SET_EDITED_POST':
      return {
        postType: action.postType,
        id: action.id,
        context: action.context
      };
    case 'SET_EDITED_POST_CONTEXT':
      return {
        ...state,
        context: action.context
      };
  }
  return state;
}

/**
 * Reducer to set the save view panel open or closed.
 *
 * @param {Object} state  Current state.
 * @param {Object} action Dispatched action.
 */
function saveViewPanel(state = false, action) {
  switch (action.type) {
    case 'SET_IS_SAVE_VIEW_OPENED':
      return action.isOpen;
    case 'SET_CANVAS_MODE':
      return false;
  }
  return state;
}

/**
 * Reducer used to track the site editor canvas mode (edit or view).
 *
 * @param {Object} state  Current state.
 * @param {Object} action Dispatched action.
 */
function canvasMode(state = 'init', action) {
  switch (action.type) {
    case 'SET_CANVAS_MODE':
      return action.mode;
  }
  return state;
}

/**
 * Reducer used to track the site editor canvas container view.
 * Default is `undefined`, denoting the default, visual block editor.
 * This could be, for example, `'style-book'` (the style book).
 *
 * @param {string|undefined} state  Current state.
 * @param {Object}           action Dispatched action.
 */
function editorCanvasContainerView(state = undefined, action) {
  switch (action.type) {
    case 'SET_EDITOR_CANVAS_CONTAINER_VIEW':
      return action.view;
  }
  return state;
}
/* harmony default export */ const store_reducer = ((0,external_wp_data_namespaceObject.combineReducers)({
  settings,
  editedPost,
  saveViewPanel,
  canvasMode,
  editorCanvasContainerView
}));

;// CONCATENATED MODULE: external ["wp","apiFetch"]
const external_wp_apiFetch_namespaceObject = window["wp"]["apiFetch"];
var external_wp_apiFetch_default = /*#__PURE__*/__webpack_require__.n(external_wp_apiFetch_namespaceObject);
;// CONCATENATED MODULE: external ["wp","a11y"]
const external_wp_a11y_namespaceObject = window["wp"]["a11y"];
;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/store/constants.js
/**
 * The identifier for the data store.
 *
 * @type {string}
 */
const constants_STORE_NAME = 'core/edit-site';

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/utils/is-template-revertable.js
/**
 * Internal dependencies
 */


/**
 * Check if a template is revertable to its original theme-provided template file.
 *
 * @param {Object} template The template entity to check.
 * @return {boolean} Whether the template is revertable.
 */
function isTemplateRevertable(template) {
  if (!template) {
    return false;
  }
  /* eslint-disable camelcase */
  return template?.source === TEMPLATE_ORIGINS.custom && template?.has_theme_file;
  /* eslint-enable camelcase */
}

;// CONCATENATED MODULE: external ["wp","htmlEntities"]
const external_wp_htmlEntities_namespaceObject = window["wp"]["htmlEntities"];
;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/store/private-actions.js
/**
 * WordPress dependencies
 */








/**
 * Internal dependencies
 */


/**
 * Action that switches the canvas mode.
 *
 * @param {?string} mode Canvas mode.
 */
const setCanvasMode = mode => ({
  registry,
  dispatch
}) => {
  const isMediumOrBigger = window.matchMedia('(min-width: 782px)').matches;
  registry.dispatch(external_wp_blockEditor_namespaceObject.store).__unstableSetEditorMode('edit');
  dispatch({
    type: 'SET_CANVAS_MODE',
    mode
  });
  // Check if the block list view should be open by default.
  // If `distractionFree` mode is enabled, the block list view should not be open.
  // This behavior is disabled for small viewports.
  if (isMediumOrBigger && mode === 'edit' && registry.select(external_wp_preferences_namespaceObject.store).get('core', 'showListViewByDefault') && !registry.select(external_wp_preferences_namespaceObject.store).get('core', 'distractionFree')) {
    registry.dispatch(external_wp_editor_namespaceObject.store).setIsListViewOpened(true);
  } else {
    registry.dispatch(external_wp_editor_namespaceObject.store).setIsListViewOpened(false);
  }
  registry.dispatch(external_wp_editor_namespaceObject.store).setIsInserterOpened(false);
};

/**
 * Action that switches the editor canvas container view.
 *
 * @param {?string} view Editor canvas container view.
 */
const setEditorCanvasContainerView = view => ({
  dispatch
}) => {
  dispatch({
    type: 'SET_EDITOR_CANVAS_CONTAINER_VIEW',
    view
  });
};

/**
 * Action that removes an array of templates.
 *
 * @param {Array} items An array of template or template part objects to remove.
 */
const removeTemplates = items => async ({
  registry
}) => {
  const isTemplate = items[0].type === constants_TEMPLATE_POST_TYPE;
  const promiseResult = await Promise.allSettled(items.map(item => {
    return registry.dispatch(external_wp_coreData_namespaceObject.store).deleteEntityRecord('postType', item.type, item.id, {
      force: true
    }, {
      throwOnError: true
    });
  }));

  // If all the promises were fulfilled with sucess.
  if (promiseResult.every(({
    status
  }) => status === 'fulfilled')) {
    let successMessage;
    if (items.length === 1) {
      // Depending on how the entity was retrieved its title might be
      // an object or simple string.
      const title = typeof items[0].title === 'string' ? items[0].title : items[0].title?.rendered;
      successMessage = (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: The template/part's name. */
      (0,external_wp_i18n_namespaceObject.__)('"%s" deleted.'), (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(title));
    } else {
      successMessage = isTemplate ? (0,external_wp_i18n_namespaceObject.__)('Templates deleted.') : (0,external_wp_i18n_namespaceObject.__)('Template parts deleted.');
    }
    registry.dispatch(external_wp_notices_namespaceObject.store).createSuccessNotice(successMessage, {
      type: 'snackbar',
      id: 'site-editor-template-deleted-success'
    });
  } else {
    // If there was at lease one failure.
    let errorMessage;
    // If we were trying to delete a single template.
    if (promiseResult.length === 1) {
      if (promiseResult[0].reason?.message) {
        errorMessage = promiseResult[0].reason.message;
      } else {
        errorMessage = isTemplate ? (0,external_wp_i18n_namespaceObject.__)('An error occurred while deleting the template.') : (0,external_wp_i18n_namespaceObject.__)('An error occurred while deleting the template part.');
      }
      // If we were trying to delete a multiple templates
    } else {
      const errorMessages = new Set();
      const failedPromises = promiseResult.filter(({
        status
      }) => status === 'rejected');
      for (const failedPromise of failedPromises) {
        if (failedPromise.reason?.message) {
          errorMessages.add(failedPromise.reason.message);
        }
      }
      if (errorMessages.size === 0) {
        errorMessage = isTemplate ? (0,external_wp_i18n_namespaceObject.__)('An error occurred while deleting the templates.') : (0,external_wp_i18n_namespaceObject.__)('An error occurred while deleting the template parts.');
      } else if (errorMessages.size === 1) {
        errorMessage = isTemplate ? (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: an error message */
        (0,external_wp_i18n_namespaceObject.__)('An error occurred while deleting the templates: %s'), [...errorMessages][0]) : (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: an error message */
        (0,external_wp_i18n_namespaceObject.__)('An error occurred while deleting the template parts: %s'), [...errorMessages][0]);
      } else {
        errorMessage = isTemplate ? (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: a list of comma separated error messages */
        (0,external_wp_i18n_namespaceObject.__)('Some errors occurred while deleting the templates: %s'), [...errorMessages].join(',')) : (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: a list of comma separated error messages */
        (0,external_wp_i18n_namespaceObject.__)('Some errors occurred while deleting the template parts: %s'), [...errorMessages].join(','));
      }
    }
    registry.dispatch(external_wp_notices_namespaceObject.store).createErrorNotice(errorMessage, {
      type: 'snackbar'
    });
  }
};

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/store/actions.js
/**
 * WordPress dependencies
 */













/**
 * Internal dependencies
 */





/**
 * Dispatches an action that toggles a feature flag.
 *
 * @param {string} featureName Feature name.
 */
function actions_toggleFeature(featureName) {
  return function ({
    registry
  }) {
    external_wp_deprecated_default()("dispatch( 'core/edit-site' ).toggleFeature( featureName )", {
      since: '6.0',
      alternative: "dispatch( 'core/preferences').toggle( 'core/edit-site', featureName )"
    });
    registry.dispatch(external_wp_preferences_namespaceObject.store).toggle('core/edit-site', featureName);
  };
}

/**
 * Action that changes the width of the editing canvas.
 *
 * @deprecated
 *
 * @param {string} deviceType
 *
 * @return {Object} Action object.
 */
const __experimentalSetPreviewDeviceType = deviceType => ({
  registry
}) => {
  external_wp_deprecated_default()("dispatch( 'core/edit-site' ).__experimentalSetPreviewDeviceType", {
    since: '6.5',
    version: '6.7',
    hint: 'registry.dispatch( editorStore ).setDeviceType'
  });
  registry.dispatch(external_wp_editor_namespaceObject.store).setDeviceType(deviceType);
};

/**
 * Action that sets a template, optionally fetching it from REST API.
 *
 * @return {Object} Action object.
 */
function setTemplate() {
  external_wp_deprecated_default()("dispatch( 'core/edit-site' ).setTemplate", {
    since: '6.5',
    version: '6.8',
    hint: 'The setTemplate is not needed anymore, the correct entity is resolved from the URL automatically.'
  });
  return {
    type: 'NOTHING'
  };
}

/**
 * Action that adds a new template and sets it as the current template.
 *
 * @param {Object} template The template.
 *
 * @deprecated
 *
 * @return {Object} Action object used to set the current template.
 */
const addTemplate = template => async ({
  dispatch,
  registry
}) => {
  external_wp_deprecated_default()("dispatch( 'core/edit-site' ).addTemplate", {
    since: '6.5',
    version: '6.8',
    hint: 'use saveEntityRecord directly'
  });
  const newTemplate = await registry.dispatch(external_wp_coreData_namespaceObject.store).saveEntityRecord('postType', constants_TEMPLATE_POST_TYPE, template);
  if (template.content) {
    registry.dispatch(external_wp_coreData_namespaceObject.store).editEntityRecord('postType', constants_TEMPLATE_POST_TYPE, newTemplate.id, {
      blocks: (0,external_wp_blocks_namespaceObject.parse)(template.content)
    }, {
      undoIgnore: true
    });
  }
  dispatch({
    type: 'SET_EDITED_POST',
    postType: constants_TEMPLATE_POST_TYPE,
    id: newTemplate.id
  });
};

/**
 * Action that removes a template.
 *
 * @param {Object} template The template object.
 */
const removeTemplate = template => {
  return removeTemplates([template]);
};

/**
 * Action that sets a template part.
 *
 * @param {string} templatePartId The template part ID.
 *
 * @return {Object} Action object.
 */
function setTemplatePart(templatePartId) {
  return {
    type: 'SET_EDITED_POST',
    postType: TEMPLATE_PART_POST_TYPE,
    id: templatePartId
  };
}

/**
 * Action that sets a navigation menu.
 *
 * @param {string} navigationMenuId The Navigation Menu Post ID.
 *
 * @return {Object} Action object.
 */
function setNavigationMenu(navigationMenuId) {
  return {
    type: 'SET_EDITED_POST',
    postType: NAVIGATION_POST_TYPE,
    id: navigationMenuId
  };
}

/**
 * Action that sets an edited entity.
 *
 * @param {string} postType The entity's post type.
 * @param {string} postId   The entity's ID.
 * @param {Object} context  The entity's context.
 *
 * @return {Object} Action object.
 */
function setEditedEntity(postType, postId, context) {
  return {
    type: 'SET_EDITED_POST',
    postType,
    id: postId,
    context
  };
}

/**
 * @deprecated
 */
function setHomeTemplateId() {
  external_wp_deprecated_default()("dispatch( 'core/edit-site' ).setHomeTemplateId", {
    since: '6.2',
    version: '6.4'
  });
  return {
    type: 'NOTHING'
  };
}

/**
 * Set's the current block editor context.
 *
 * @param {Object} context The context object.
 *
 * @return {Object} Action object.
 */
function setEditedPostContext(context) {
  return {
    type: 'SET_EDITED_POST_CONTEXT',
    context
  };
}

/**
 * Resolves the template for a page and displays both. If no path is given, attempts
 * to use the postId to generate a path like `?p=${ postId }`.
 *
 * @deprecated
 *
 * @return {number} The resolved template ID for the page route.
 */
function setPage() {
  external_wp_deprecated_default()("dispatch( 'core/edit-site' ).setPage", {
    since: '6.5',
    version: '6.8',
    hint: 'The setPage is not needed anymore, the correct entity is resolved from the URL automatically.'
  });
  return {
    type: 'NOTHING'
  };
}

/**
 * Action that sets the active navigation panel menu.
 *
 * @deprecated
 *
 * @return {Object} Action object.
 */
function setNavigationPanelActiveMenu() {
  external_wp_deprecated_default()("dispatch( 'core/edit-site' ).setNavigationPanelActiveMenu", {
    since: '6.2',
    version: '6.4'
  });
  return {
    type: 'NOTHING'
  };
}

/**
 * Opens the navigation panel and sets its active menu at the same time.
 *
 * @deprecated
 */
function openNavigationPanelToMenu() {
  external_wp_deprecated_default()("dispatch( 'core/edit-site' ).openNavigationPanelToMenu", {
    since: '6.2',
    version: '6.4'
  });
  return {
    type: 'NOTHING'
  };
}

/**
 * Sets whether the navigation panel should be open.
 *
 * @deprecated
 */
function setIsNavigationPanelOpened() {
  external_wp_deprecated_default()("dispatch( 'core/edit-site' ).setIsNavigationPanelOpened", {
    since: '6.2',
    version: '6.4'
  });
  return {
    type: 'NOTHING'
  };
}

/**
 * Returns an action object used to open/close the inserter.
 *
 * @deprecated
 *
 * @param {boolean|Object} value Whether the inserter should be opened (true) or closed (false).
 */
const setIsInserterOpened = value => ({
  registry
}) => {
  external_wp_deprecated_default()("dispatch( 'core/edit-site' ).setIsInserterOpened", {
    since: '6.5',
    alternative: "dispatch( 'core/editor').setIsInserterOpened"
  });
  registry.dispatch(external_wp_editor_namespaceObject.store).setIsInserterOpened(value);
};

/**
 * Returns an action object used to open/close the list view.
 *
 * @deprecated
 *
 * @param {boolean} isOpen A boolean representing whether the list view should be opened or closed.
 */
const setIsListViewOpened = isOpen => ({
  registry
}) => {
  external_wp_deprecated_default()("dispatch( 'core/edit-site' ).setIsListViewOpened", {
    since: '6.5',
    alternative: "dispatch( 'core/editor').setIsListViewOpened"
  });
  registry.dispatch(external_wp_editor_namespaceObject.store).setIsListViewOpened(isOpen);
};

/**
 * Returns an action object used to update the settings.
 *
 * @param {Object} settings New settings.
 *
 * @return {Object} Action object.
 */
function updateSettings(settings) {
  return {
    type: 'UPDATE_SETTINGS',
    settings
  };
}

/**
 * Sets whether the save view panel should be open.
 *
 * @param {boolean} isOpen If true, opens the save view. If false, closes it.
 *                         It does not toggle the state, but sets it directly.
 */
function setIsSaveViewOpened(isOpen) {
  return {
    type: 'SET_IS_SAVE_VIEW_OPENED',
    isOpen
  };
}

/**
 * Reverts a template to its original theme-provided file.
 *
 * @param {Object}  template            The template to revert.
 * @param {Object}  [options]
 * @param {boolean} [options.allowUndo] Whether to allow the user to undo
 *                                      reverting the template. Default true.
 */
const revertTemplate = (template, {
  allowUndo = true
} = {}) => async ({
  registry
}) => {
  const noticeId = 'edit-site-template-reverted';
  registry.dispatch(external_wp_notices_namespaceObject.store).removeNotice(noticeId);
  if (!isTemplateRevertable(template)) {
    registry.dispatch(external_wp_notices_namespaceObject.store).createErrorNotice((0,external_wp_i18n_namespaceObject.__)('This template is not revertable.'), {
      type: 'snackbar'
    });
    return;
  }
  try {
    const templateEntityConfig = registry.select(external_wp_coreData_namespaceObject.store).getEntityConfig('postType', template.type);
    if (!templateEntityConfig) {
      registry.dispatch(external_wp_notices_namespaceObject.store).createErrorNotice((0,external_wp_i18n_namespaceObject.__)('The editor has encountered an unexpected error. Please reload.'), {
        type: 'snackbar'
      });
      return;
    }
    const fileTemplatePath = (0,external_wp_url_namespaceObject.addQueryArgs)(`${templateEntityConfig.baseURL}/${template.id}`, {
      context: 'edit',
      source: 'theme'
    });
    const fileTemplate = await external_wp_apiFetch_default()({
      path: fileTemplatePath
    });
    if (!fileTemplate) {
      registry.dispatch(external_wp_notices_namespaceObject.store).createErrorNotice((0,external_wp_i18n_namespaceObject.__)('The editor has encountered an unexpected error. Please reload.'), {
        type: 'snackbar'
      });
      return;
    }
    const serializeBlocks = ({
      blocks: blocksForSerialization = []
    }) => (0,external_wp_blocks_namespaceObject.__unstableSerializeAndClean)(blocksForSerialization);
    const edited = registry.select(external_wp_coreData_namespaceObject.store).getEditedEntityRecord('postType', template.type, template.id);

    // We are fixing up the undo level here to make sure we can undo
    // the revert in the header toolbar correctly.
    registry.dispatch(external_wp_coreData_namespaceObject.store).editEntityRecord('postType', template.type, template.id, {
      content: serializeBlocks,
      // Required to make the `undo` behave correctly.
      blocks: edited.blocks,
      // Required to revert the blocks in the editor.
      source: 'custom' // required to avoid turning the editor into a dirty state
    }, {
      undoIgnore: true // Required to merge this edit with the last undo level.
    });
    const blocks = (0,external_wp_blocks_namespaceObject.parse)(fileTemplate?.content?.raw);
    registry.dispatch(external_wp_coreData_namespaceObject.store).editEntityRecord('postType', template.type, fileTemplate.id, {
      content: serializeBlocks,
      blocks,
      source: 'theme'
    });
    if (allowUndo) {
      const undoRevert = () => {
        registry.dispatch(external_wp_coreData_namespaceObject.store).editEntityRecord('postType', template.type, edited.id, {
          content: serializeBlocks,
          blocks: edited.blocks,
          source: 'custom'
        });
      };
      registry.dispatch(external_wp_notices_namespaceObject.store).createSuccessNotice((0,external_wp_i18n_namespaceObject.__)('Template reverted.'), {
        type: 'snackbar',
        id: noticeId,
        actions: [{
          label: (0,external_wp_i18n_namespaceObject.__)('Undo'),
          onClick: undoRevert
        }]
      });
    }
  } catch (error) {
    const errorMessage = error.message && error.code !== 'unknown_error' ? error.message : (0,external_wp_i18n_namespaceObject.__)('Template revert failed. Please reload.');
    registry.dispatch(external_wp_notices_namespaceObject.store).createErrorNotice(errorMessage, {
      type: 'snackbar'
    });
  }
};
/**
 * Action that opens an editor sidebar.
 *
 * @param {?string} name Sidebar name to be opened.
 */
const openGeneralSidebar = name => ({
  dispatch,
  registry
}) => {
  const isDistractionFree = registry.select(external_wp_preferences_namespaceObject.store).get('core', 'distractionFree');
  if (isDistractionFree) {
    dispatch.toggleDistractionFree();
  }
  registry.dispatch(store).enableComplementaryArea(constants_STORE_NAME, name);
};

/**
 * Action that closes the sidebar.
 */
const closeGeneralSidebar = () => ({
  registry
}) => {
  registry.dispatch(store).disableComplementaryArea(constants_STORE_NAME);
};
const switchEditorMode = mode => ({
  dispatch,
  registry
}) => {
  registry.dispatch('core/preferences').set('core', 'editorMode', mode);

  // Unselect blocks when we switch to a non visual mode.
  if (mode !== 'visual') {
    registry.dispatch(external_wp_blockEditor_namespaceObject.store).clearSelectedBlock();
  }
  if (mode === 'visual') {
    (0,external_wp_a11y_namespaceObject.speak)((0,external_wp_i18n_namespaceObject.__)('Visual editor selected'), 'assertive');
  } else if (mode === 'text') {
    const isDistractionFree = registry.select(external_wp_preferences_namespaceObject.store).get('core', 'distractionFree');
    if (isDistractionFree) {
      dispatch.toggleDistractionFree();
    }
    (0,external_wp_a11y_namespaceObject.speak)((0,external_wp_i18n_namespaceObject.__)('Code editor selected'), 'assertive');
  }
};

/**
 * Sets whether or not the editor allows only page content to be edited.
 *
 * @param {boolean} hasPageContentFocus True to allow only page content to be
 *                                      edited, false to allow template to be
 *                                      edited.
 */
const setHasPageContentFocus = hasPageContentFocus => ({
  dispatch,
  registry
}) => {
  external_wp_deprecated_default()(`dispatch( 'core/edit-site' ).setHasPageContentFocus`, {
    since: '6.5'
  });
  if (hasPageContentFocus) {
    registry.dispatch(external_wp_blockEditor_namespaceObject.store).clearSelectedBlock();
  }
  dispatch({
    type: 'SET_HAS_PAGE_CONTENT_FOCUS',
    hasPageContentFocus
  });
};

/**
 * Action that toggles Distraction free mode.
 * Distraction free mode expects there are no sidebars, as due to the
 * z-index values set, you can't close sidebars.
 */
const toggleDistractionFree = () => ({
  dispatch,
  registry
}) => {
  const isDistractionFree = registry.select(external_wp_preferences_namespaceObject.store).get('core', 'distractionFree');
  if (isDistractionFree) {
    registry.dispatch(external_wp_preferences_namespaceObject.store).set('core', 'fixedToolbar', false);
  }
  if (!isDistractionFree) {
    registry.batch(() => {
      registry.dispatch(external_wp_preferences_namespaceObject.store).set('core', 'fixedToolbar', true);
      registry.dispatch(external_wp_editor_namespaceObject.store).setIsInserterOpened(false);
      registry.dispatch(external_wp_editor_namespaceObject.store).setIsListViewOpened(false);
      dispatch.closeGeneralSidebar();
    });
  }
  registry.batch(() => {
    registry.dispatch(external_wp_preferences_namespaceObject.store).set('core', 'distractionFree', !isDistractionFree);
    registry.dispatch(external_wp_notices_namespaceObject.store).createInfoNotice(isDistractionFree ? (0,external_wp_i18n_namespaceObject.__)('Distraction free off.') : (0,external_wp_i18n_namespaceObject.__)('Distraction free on.'), {
      id: 'core/edit-site/distraction-free-mode/notice',
      type: 'snackbar',
      actions: [{
        label: (0,external_wp_i18n_namespaceObject.__)('Undo'),
        onClick: () => {
          registry.batch(() => {
            registry.dispatch(external_wp_preferences_namespaceObject.store).set('core', 'fixedToolbar', isDistractionFree ? true : false);
            registry.dispatch(external_wp_preferences_namespaceObject.store).toggle('core', 'distractionFree');
          });
        }
      }]
    });
  });
};

;// CONCATENATED MODULE: ./node_modules/memize/dist/index.js
/**
 * Memize options object.
 *
 * @typedef MemizeOptions
 *
 * @property {number} [maxSize] Maximum size of the cache.
 */

/**
 * Internal cache entry.
 *
 * @typedef MemizeCacheNode
 *
 * @property {?MemizeCacheNode|undefined} [prev] Previous node.
 * @property {?MemizeCacheNode|undefined} [next] Next node.
 * @property {Array<*>}                   args   Function arguments for cache
 *                                               entry.
 * @property {*}                          val    Function result.
 */

/**
 * Properties of the enhanced function for controlling cache.
 *
 * @typedef MemizeMemoizedFunction
 *
 * @property {()=>void} clear Clear the cache.
 */

/**
 * Accepts a function to be memoized, and returns a new memoized function, with
 * optional options.
 *
 * @template {(...args: any[]) => any} F
 *
 * @param {F}             fn        Function to memoize.
 * @param {MemizeOptions} [options] Options object.
 *
 * @return {((...args: Parameters<F>) => ReturnType<F>) & MemizeMemoizedFunction} Memoized function.
 */
function memize(fn, options) {
	var size = 0;

	/** @type {?MemizeCacheNode|undefined} */
	var head;

	/** @type {?MemizeCacheNode|undefined} */
	var tail;

	options = options || {};

	function memoized(/* ...args */) {
		var node = head,
			len = arguments.length,
			args,
			i;

		searchCache: while (node) {
			// Perform a shallow equality test to confirm that whether the node
			// under test is a candidate for the arguments passed. Two arrays
			// are shallowly equal if their length matches and each entry is
			// strictly equal between the two sets. Avoid abstracting to a
			// function which could incur an arguments leaking deoptimization.

			// Check whether node arguments match arguments length
			if (node.args.length !== arguments.length) {
				node = node.next;
				continue;
			}

			// Check whether node arguments match arguments values
			for (i = 0; i < len; i++) {
				if (node.args[i] !== arguments[i]) {
					node = node.next;
					continue searchCache;
				}
			}

			// At this point we can assume we've found a match

			// Surface matched node to head if not already
			if (node !== head) {
				// As tail, shift to previous. Must only shift if not also
				// head, since if both head and tail, there is no previous.
				if (node === tail) {
					tail = node.prev;
				}

				// Adjust siblings to point to each other. If node was tail,
				// this also handles new tail's empty `next` assignment.
				/** @type {MemizeCacheNode} */ (node.prev).next = node.next;
				if (node.next) {
					node.next.prev = node.prev;
				}

				node.next = head;
				node.prev = null;
				/** @type {MemizeCacheNode} */ (head).prev = node;
				head = node;
			}

			// Return immediately
			return node.val;
		}

		// No cached value found. Continue to insertion phase:

		// Create a copy of arguments (avoid leaking deoptimization)
		args = new Array(len);
		for (i = 0; i < len; i++) {
			args[i] = arguments[i];
		}

		node = {
			args: args,

			// Generate the result from original function
			val: fn.apply(null, args),
		};

		// Don't need to check whether node is already head, since it would
		// have been returned above already if it was

		// Shift existing head down list
		if (head) {
			head.prev = node;
			node.next = head;
		} else {
			// If no head, follows that there's no tail (at initial or reset)
			tail = node;
		}

		// Trim tail if we're reached max size and are pending cache insertion
		if (size === /** @type {MemizeOptions} */ (options).maxSize) {
			tail = /** @type {MemizeCacheNode} */ (tail).prev;
			/** @type {MemizeCacheNode} */ (tail).next = null;
		} else {
			size++;
		}

		head = node;

		return node.val;
	}

	memoized.clear = function () {
		head = null;
		tail = null;
		size = 0;
	};

	// Ignore reason: There's not a clear solution to create an intersection of
	// the function with additional properties, where the goal is to retain the
	// function signature of the incoming argument and add control properties
	// on the return value.

	// @ts-ignore
	return memoized;
}



;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/store/utils.js
/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */

const EMPTY_ARRAY = [];

/**
 * Get a flattened and filtered list of template parts and the matching block for that template part.
 *
 * Takes a list of blocks defined within a template, and a list of template parts, and returns a
 * flattened list of template parts and the matching block for that template part.
 *
 * @param {Array}  blocks        Blocks to flatten.
 * @param {?Array} templateParts Available template parts.
 * @return {Array} An array of template parts and their blocks.
 */
function getFilteredTemplatePartBlocks(blocks = EMPTY_ARRAY, templateParts) {
  const templatePartsById = templateParts ?
  // Key template parts by their ID.
  templateParts.reduce((newTemplateParts, part) => ({
    ...newTemplateParts,
    [part.id]: part
  }), {}) : {};
  const result = [];

  // Iterate over all blocks, recursing into inner blocks.
  // Output will be based on a depth-first traversal.
  const stack = [...blocks];
  while (stack.length) {
    const {
      innerBlocks,
      ...block
    } = stack.shift();
    // Place inner blocks at the beginning of the stack to preserve order.
    stack.unshift(...innerBlocks);
    if ((0,external_wp_blocks_namespaceObject.isTemplatePart)(block)) {
      const {
        attributes: {
          theme,
          slug
        }
      } = block;
      const templatePartId = `${theme}//${slug}`;
      const templatePart = templatePartsById[templatePartId];

      // Only add to output if the found template part block is in the list of available template parts.
      if (templatePart) {
        result.push({
          templatePart,
          block
        });
      }
    }
  }
  return result;
}
const memoizedGetFilteredTemplatePartBlocks = memize(getFilteredTemplatePartBlocks);


;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/store/selectors.js
/**
 * WordPress dependencies
 */








/**
 * Internal dependencies
 */




/**
 * @typedef {'template'|'template_type'} TemplateType Template type.
 */

/**
 * Returns whether the given feature is enabled or not.
 *
 * @deprecated
 * @param {Object} state       Global application state.
 * @param {string} featureName Feature slug.
 *
 * @return {boolean} Is active.
 */
const selectors_isFeatureActive = (0,external_wp_data_namespaceObject.createRegistrySelector)(select => (_, featureName) => {
  external_wp_deprecated_default()(`select( 'core/edit-site' ).isFeatureActive`, {
    since: '6.0',
    alternative: `select( 'core/preferences' ).get`
  });
  return !!select(external_wp_preferences_namespaceObject.store).get('core/edit-site', featureName);
});

/**
 * Returns the current editing canvas device type.
 *
 * @deprecated
 *
 * @param {Object} state Global application state.
 *
 * @return {string} Device type.
 */
const __experimentalGetPreviewDeviceType = (0,external_wp_data_namespaceObject.createRegistrySelector)(select => () => {
  external_wp_deprecated_default()(`select( 'core/edit-site' ).__experimentalGetPreviewDeviceType`, {
    since: '6.5',
    version: '6.7',
    alternative: `select( 'core/editor' ).getDeviceType`
  });
  return select(external_wp_editor_namespaceObject.store).getDeviceType();
});

/**
 * Returns whether the current user can create media or not.
 *
 * @param {Object} state Global application state.
 *
 * @return {Object} Whether the current user can create media or not.
 */
const getCanUserCreateMedia = (0,external_wp_data_namespaceObject.createRegistrySelector)(select => () => select(external_wp_coreData_namespaceObject.store).canUser('create', 'media'));

/**
 * Returns any available Reusable blocks.
 *
 * @param {Object} state Global application state.
 *
 * @return {Array} The available reusable blocks.
 */
const getReusableBlocks = (0,external_wp_data_namespaceObject.createRegistrySelector)(select => () => {
  external_wp_deprecated_default()("select( 'core/core' ).getEntityRecords( 'postType', 'wp_block' )", {
    since: '6.5',
    version: '6.8'
  });
  const isWeb = external_wp_element_namespaceObject.Platform.OS === 'web';
  return isWeb ? select(external_wp_coreData_namespaceObject.store).getEntityRecords('postType', 'wp_block', {
    per_page: -1
  }) : [];
});

/**
 * Returns the site editor settings.
 *
 * @param {Object} state Global application state.
 *
 * @return {Object} Settings.
 */
function getSettings(state) {
  // It is important that we don't inject anything into these settings locally.
  // The reason for this is that we have an effect in place that calls setSettings based on the previous value of getSettings.
  // If we add computed settings here, we'll be adding these computed settings to the state which is very unexpected.
  return state.settings;
}

/**
 * @deprecated
 */
function getHomeTemplateId() {
  external_wp_deprecated_default()("select( 'core/edit-site' ).getHomeTemplateId", {
    since: '6.2',
    version: '6.4'
  });
}

/**
 * Returns the current edited post type (wp_template or wp_template_part).
 *
 * @param {Object} state Global application state.
 *
 * @return {TemplateType?} Template type.
 */
function getEditedPostType(state) {
  return state.editedPost.postType;
}

/**
 * Returns the ID of the currently edited template or template part.
 *
 * @param {Object} state Global application state.
 *
 * @return {string?} Post ID.
 */
function getEditedPostId(state) {
  return state.editedPost.id;
}

/**
 * Returns the edited post's context object.
 *
 * @deprecated
 * @param {Object} state Global application state.
 *
 * @return {Object} Page.
 */
function getEditedPostContext(state) {
  return state.editedPost.context;
}

/**
 * Returns the current page object.
 *
 * @deprecated
 * @param {Object} state Global application state.
 *
 * @return {Object} Page.
 */
function getPage(state) {
  return {
    context: state.editedPost.context
  };
}

/**
 * Returns true if the inserter is opened.
 *
 * @deprecated
 *
 * @param {Object} state Global application state.
 *
 * @return {boolean} Whether the inserter is opened.
 */
const isInserterOpened = (0,external_wp_data_namespaceObject.createRegistrySelector)(select => () => {
  external_wp_deprecated_default()(`select( 'core/edit-site' ).isInserterOpened`, {
    since: '6.5',
    alternative: `select( 'core/editor' ).isInserterOpened`
  });
  return select(external_wp_editor_namespaceObject.store).isInserterOpened();
});

/**
 * Get the insertion point for the inserter.
 *
 * @deprecated
 *
 * @param {Object} state Global application state.
 *
 * @return {Object} The root client ID, index to insert at and starting filter value.
 */
const __experimentalGetInsertionPoint = (0,external_wp_data_namespaceObject.createRegistrySelector)(select => () => {
  external_wp_deprecated_default()(`select( 'core/edit-site' ).__experimentalGetInsertionPoint`, {
    since: '6.5',
    version: '6.7'
  });
  return unlock(select(external_wp_editor_namespaceObject.store)).getInsertionPoint();
});

/**
 * Returns true if the list view is opened.
 *
 * @param {Object} state Global application state.
 *
 * @return {boolean} Whether the list view is opened.
 */
const isListViewOpened = (0,external_wp_data_namespaceObject.createRegistrySelector)(select => () => {
  external_wp_deprecated_default()(`select( 'core/edit-site' ).isListViewOpened`, {
    since: '6.5',
    alternative: `select( 'core/editor' ).isListViewOpened`
  });
  return select(external_wp_editor_namespaceObject.store).isListViewOpened();
});

/**
 * Returns the current opened/closed state of the save panel.
 *
 * @param {Object} state Global application state.
 *
 * @return {boolean} True if the save panel should be open; false if closed.
 */
function isSaveViewOpened(state) {
  return state.saveViewPanel;
}

/**
 * Returns the template parts and their blocks for the current edited template.
 *
 * @param {Object} state Global application state.
 * @return {Array} Template parts and their blocks in an array.
 */
const getCurrentTemplateTemplateParts = (0,external_wp_data_namespaceObject.createRegistrySelector)(select => () => {
  const templateParts = select(external_wp_coreData_namespaceObject.store).getEntityRecords('postType', TEMPLATE_PART_POST_TYPE, {
    per_page: -1
  });
  const clientIds = select(external_wp_blockEditor_namespaceObject.store).getBlocksByName('core/template-part');
  const blocks = select(external_wp_blockEditor_namespaceObject.store).getBlocksByClientId(clientIds);
  return memoizedGetFilteredTemplatePartBlocks(blocks, templateParts);
});

/**
 * Returns the current editing mode.
 *
 * @param {Object} state Global application state.
 *
 * @return {string} Editing mode.
 */
const getEditorMode = (0,external_wp_data_namespaceObject.createRegistrySelector)(select => () => {
  return select(external_wp_preferences_namespaceObject.store).get('core', 'editorMode');
});

/**
 * @deprecated
 */
function getCurrentTemplateNavigationPanelSubMenu() {
  external_wp_deprecated_default()("dispatch( 'core/edit-site' ).getCurrentTemplateNavigationPanelSubMenu", {
    since: '6.2',
    version: '6.4'
  });
}

/**
 * @deprecated
 */
function getNavigationPanelActiveMenu() {
  external_wp_deprecated_default()("dispatch( 'core/edit-site' ).getNavigationPanelActiveMenu", {
    since: '6.2',
    version: '6.4'
  });
}

/**
 * @deprecated
 */
function isNavigationOpened() {
  external_wp_deprecated_default()("dispatch( 'core/edit-site' ).isNavigationOpened", {
    since: '6.2',
    version: '6.4'
  });
}

/**
 * Whether or not the editor has a page loaded into it.
 *
 * @see setPage
 *
 * @param {Object} state Global application state.
 *
 * @return {boolean} Whether or not the editor has a page loaded into it.
 */
function isPage(state) {
  return !!state.editedPost.context?.postId;
}

/**
 * Whether or not the editor allows only page content to be edited.
 *
 * @deprecated
 *
 * @return {boolean} Whether or not focus is on editing page content.
 */
function hasPageContentFocus() {
  external_wp_deprecated_default()(`select( 'core/edit-site' ).hasPageContentFocus`, {
    since: '6.5'
  });
  return false;
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/store/private-selectors.js
/**
 * Returns the current canvas mode.
 *
 * @param {Object} state Global application state.
 *
 * @return {string} Canvas mode.
 */
function getCanvasMode(state) {
  return state.canvasMode;
}

/**
 * Returns the editor canvas container view.
 *
 * @param {Object} state Global application state.
 *
 * @return {string} Editor canvas container view.
 */
function getEditorCanvasContainerView(state) {
  return state.editorCanvasContainerView;
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/store/index.js
/**
 * WordPress dependencies
 */


/**
 * Internal dependencies
 */







const storeConfig = {
  reducer: store_reducer,
  actions: store_actions_namespaceObject,
  selectors: store_selectors_namespaceObject
};
const store_store = (0,external_wp_data_namespaceObject.createReduxStore)(constants_STORE_NAME, storeConfig);
(0,external_wp_data_namespaceObject.register)(store_store);
unlock(store_store).registerPrivateSelectors(private_selectors_namespaceObject);
unlock(store_store).registerPrivateActions(private_actions_namespaceObject);

;// CONCATENATED MODULE: external ["wp","keyboardShortcuts"]
const external_wp_keyboardShortcuts_namespaceObject = window["wp"]["keyboardShortcuts"];
;// CONCATENATED MODULE: external ["wp","commands"]
const external_wp_commands_namespaceObject = window["wp"]["commands"];
;// CONCATENATED MODULE: external ["wp","coreCommands"]
const external_wp_coreCommands_namespaceObject = window["wp"]["coreCommands"];
;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/navigation.js

/**
 * WordPress dependencies
 */

const navigation = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M12 4c-4.4 0-8 3.6-8 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm0 14.5c-3.6 0-6.5-2.9-6.5-6.5S8.4 5.5 12 5.5s6.5 2.9 6.5 6.5-2.9 6.5-6.5 6.5zM9 16l4.5-3L15 8.4l-4.5 3L9 16z"
}));
/* harmony default export */ const library_navigation = (navigation);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/styles.js

/**
 * WordPress dependencies
 */

const styles = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M12 4c-4.4 0-8 3.6-8 8v.1c0 4.1 3.2 7.5 7.2 7.9h.8c4.4 0 8-3.6 8-8s-3.6-8-8-8zm0 15V5c3.9 0 7 3.1 7 7s-3.1 7-7 7z"
}));
/* harmony default export */ const library_styles = (styles);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/page.js

/**
 * WordPress dependencies
 */

const page = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M15.5 7.5h-7V9h7V7.5Zm-7 3.5h7v1.5h-7V11Zm7 3.5h-7V16h7v-1.5Z"
}), (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M17 4H7a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2ZM7 5.5h10a.5.5 0 0 1 .5.5v12a.5.5 0 0 1-.5.5H7a.5.5 0 0 1-.5-.5V6a.5.5 0 0 1 .5-.5Z"
}));
/* harmony default export */ const library_page = (page);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/layout.js

/**
 * WordPress dependencies
 */

const layout = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M18 5.5H6a.5.5 0 00-.5.5v3h13V6a.5.5 0 00-.5-.5zm.5 5H10v8h8a.5.5 0 00.5-.5v-7.5zm-10 0h-3V18a.5.5 0 00.5.5h2.5v-8zM6 4h12a2 2 0 012 2v12a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2z"
}));
/* harmony default export */ const library_layout = (layout);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/symbol.js

/**
 * WordPress dependencies
 */

const symbol = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M21.3 10.8l-5.6-5.6c-.7-.7-1.8-.7-2.5 0l-5.6 5.6c-.7.7-.7 1.8 0 2.5l5.6 5.6c.3.3.8.5 1.2.5s.9-.2 1.2-.5l5.6-5.6c.8-.7.8-1.9.1-2.5zm-1 1.4l-5.6 5.6c-.1.1-.3.1-.4 0l-5.6-5.6c-.1-.1-.1-.3 0-.4l5.6-5.6s.1-.1.2-.1.1 0 .2.1l5.6 5.6c.1.1.1.3 0 .4zm-16.6-.4L10 5.5l-1-1-6.3 6.3c-.7.7-.7 1.8 0 2.5L9 19.5l1.1-1.1-6.3-6.3c-.2 0-.2-.2-.1-.3z"
}));
/* harmony default export */ const library_symbol = (symbol);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/chevron-right.js

/**
 * WordPress dependencies
 */

const chevronRight = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M10.6 6L9.4 7l4.6 5-4.6 5 1.2 1 5.4-6z"
}));
/* harmony default export */ const chevron_right = (chevronRight);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/chevron-left.js

/**
 * WordPress dependencies
 */

const chevronLeft = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M14.6 7l-1.2-1L8 12l5.4 6 1.2-1-4.6-5z"
}));
/* harmony default export */ const chevron_left = (chevronLeft);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-button/index.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */

function SidebarButton(props) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    ...props,
    className: classnames_default()('edit-site-sidebar-button', props.className)
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen/index.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */







/**
 * Internal dependencies
 */




const {
  useLocation: sidebar_navigation_screen_useLocation
} = unlock(external_wp_router_namespaceObject.privateApis);
function SidebarNavigationScreen({
  isRoot,
  title,
  actions,
  meta,
  content,
  footer,
  description,
  backPath: backPathProp
}) {
  const {
    dashboardLink,
    dashboardLinkText,
    previewingThemeName
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getSettings
    } = unlock(select(store_store));
    const currentlyPreviewingThemeId = currentlyPreviewingTheme();
    return {
      dashboardLink: getSettings().__experimentalDashboardLink,
      dashboardLinkText: getSettings().__experimentalDashboardLinkText,
      // Do not call `getTheme` with null, it will cause a request to
      // the server.
      previewingThemeName: currentlyPreviewingThemeId ? select(external_wp_coreData_namespaceObject.store).getTheme(currentlyPreviewingThemeId)?.name?.rendered : undefined
    };
  }, []);
  const location = sidebar_navigation_screen_useLocation();
  const navigator = (0,external_wp_components_namespaceObject.__experimentalUseNavigator)();
  const icon = (0,external_wp_i18n_namespaceObject.isRTL)() ? chevron_right : chevron_left;
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    className: classnames_default()('edit-site-sidebar-navigation-screen__main', {
      'has-footer': !!footer
    }),
    spacing: 0,
    justify: "flex-start"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    spacing: 4,
    alignment: "flex-start",
    className: "edit-site-sidebar-navigation-screen__title-icon"
  }, !isRoot && (0,external_React_.createElement)(SidebarButton, {
    onClick: () => {
      const backPath = backPathProp !== null && backPathProp !== void 0 ? backPathProp : location.state?.backPath;
      if (backPath) {
        navigator.goTo(backPath, {
          isBack: true
        });
      } else {
        navigator.goToParent();
      }
    },
    icon: icon,
    label: (0,external_wp_i18n_namespaceObject.__)('Back'),
    showTooltip: false
  }), isRoot && (0,external_React_.createElement)(SidebarButton, {
    icon: icon,
    label: dashboardLinkText || (0,external_wp_i18n_namespaceObject.__)('Go to the Dashboard'),
    href: dashboardLink || 'index.php'
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHeading, {
    className: "edit-site-sidebar-navigation-screen__title",
    color: '#e0e0e0' /* $gray-200 */,
    level: 1,
    size: 20
  }, !isPreviewingTheme() ? title : (0,external_wp_i18n_namespaceObject.sprintf)('Previewing %1$s: %2$s', previewingThemeName, title)), actions && (0,external_React_.createElement)("div", {
    className: "edit-site-sidebar-navigation-screen__actions"
  }, actions)), meta && (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)("div", {
    className: "edit-site-sidebar-navigation-screen__meta"
  }, meta)), (0,external_React_.createElement)("div", {
    className: "edit-site-sidebar-navigation-screen__content"
  }, description && (0,external_React_.createElement)("p", {
    className: "edit-site-sidebar-navigation-screen__description"
  }, description), content)), footer && (0,external_React_.createElement)("footer", {
    className: "edit-site-sidebar-navigation-screen__footer"
  }, footer));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/icon/index.js
/**
 * WordPress dependencies
 */


/** @typedef {{icon: JSX.Element, size?: number} & import('@wordpress/primitives').SVGProps} IconProps */

/**
 * Return an SVG icon.
 *
 * @param {IconProps}                                 props icon is the SVG component to render
 *                                                          size is a number specifiying the icon size in pixels
 *                                                          Other props will be passed to wrapped SVG component
 * @param {import('react').ForwardedRef<HTMLElement>} ref   The forwarded ref to the SVG element.
 *
 * @return {JSX.Element}  Icon component
 */
function icon_Icon({
  icon,
  size = 24,
  ...props
}, ref) {
  return (0,external_wp_element_namespaceObject.cloneElement)(icon, {
    width: size,
    height: size,
    ...props,
    ref
  });
}
/* harmony default export */ const build_module_icon = ((0,external_wp_element_namespaceObject.forwardRef)(icon_Icon));

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/chevron-left-small.js

/**
 * WordPress dependencies
 */

const chevronLeftSmall = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "m13.1 16-3.4-4 3.4-4 1.1 1-2.6 3 2.6 3-1.1 1z"
}));
/* harmony default export */ const chevron_left_small = (chevronLeftSmall);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/chevron-right-small.js

/**
 * WordPress dependencies
 */

const chevronRightSmall = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M10.8622 8.04053L14.2805 12.0286L10.8622 16.0167L9.72327 15.0405L12.3049 12.0286L9.72327 9.01672L10.8622 8.04053Z"
}));
/* harmony default export */ const chevron_right_small = (chevronRightSmall);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-item/index.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */



function SidebarNavigationItem({
  className,
  icon,
  withChevron = false,
  suffix,
  children,
  ...props
}) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItem, {
    className: classnames_default()('edit-site-sidebar-navigation-item', {
      'with-suffix': !withChevron && suffix
    }, className),
    ...props
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    justify: "flex-start"
  }, icon && (0,external_React_.createElement)(build_module_icon, {
    style: {
      fill: 'currentcolor'
    },
    icon: icon,
    size: 24
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.FlexBlock, null, children), withChevron && (0,external_React_.createElement)(build_module_icon, {
    icon: (0,external_wp_i18n_namespaceObject.isRTL)() ? chevron_left_small : chevron_right_small,
    className: "edit-site-sidebar-navigation-item__drilldown-indicator",
    size: 24
  }), !withChevron && suffix));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/seen.js

/**
 * WordPress dependencies
 */

const seen = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M3.99961 13C4.67043 13.3354 4.6703 13.3357 4.67017 13.3359L4.67298 13.3305C4.67621 13.3242 4.68184 13.3135 4.68988 13.2985C4.70595 13.2686 4.7316 13.2218 4.76695 13.1608C4.8377 13.0385 4.94692 12.8592 5.09541 12.6419C5.39312 12.2062 5.84436 11.624 6.45435 11.0431C7.67308 9.88241 9.49719 8.75 11.9996 8.75C14.502 8.75 16.3261 9.88241 17.5449 11.0431C18.1549 11.624 18.6061 12.2062 18.9038 12.6419C19.0523 12.8592 19.1615 13.0385 19.2323 13.1608C19.2676 13.2218 19.2933 13.2686 19.3093 13.2985C19.3174 13.3135 19.323 13.3242 19.3262 13.3305L19.3291 13.3359C19.3289 13.3357 19.3288 13.3354 19.9996 13C20.6704 12.6646 20.6703 12.6643 20.6701 12.664L20.6697 12.6632L20.6688 12.6614L20.6662 12.6563L20.6583 12.6408C20.6517 12.6282 20.6427 12.6108 20.631 12.5892C20.6078 12.5459 20.5744 12.4852 20.5306 12.4096C20.4432 12.2584 20.3141 12.0471 20.1423 11.7956C19.7994 11.2938 19.2819 10.626 18.5794 9.9569C17.1731 8.61759 14.9972 7.25 11.9996 7.25C9.00203 7.25 6.82614 8.61759 5.41987 9.9569C4.71736 10.626 4.19984 11.2938 3.85694 11.7956C3.68511 12.0471 3.55605 12.2584 3.4686 12.4096C3.42484 12.4852 3.39142 12.5459 3.36818 12.5892C3.35656 12.6108 3.34748 12.6282 3.34092 12.6408L3.33297 12.6563L3.33041 12.6614L3.32948 12.6632L3.32911 12.664C3.32894 12.6643 3.32879 12.6646 3.99961 13ZM11.9996 16C13.9326 16 15.4996 14.433 15.4996 12.5C15.4996 10.567 13.9326 9 11.9996 9C10.0666 9 8.49961 10.567 8.49961 12.5C8.49961 14.433 10.0666 16 11.9996 16Z"
}));
/* harmony default export */ const library_seen = (seen);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/pencil.js

/**
 * WordPress dependencies
 */

const pencil = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "m19 7-3-3-8.5 8.5-1 4 4-1L19 7Zm-7 11.5H5V20h7v-1.5Z"
}));
/* harmony default export */ const library_pencil = (pencil);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/edit.js
/**
 * Internal dependencies
 */


/* harmony default export */ const edit = (library_pencil);

;// CONCATENATED MODULE: external ["wp","keycodes"]
const external_wp_keycodes_namespaceObject = window["wp"]["keycodes"];
// EXTERNAL MODULE: ./node_modules/deepmerge/dist/cjs.js
var cjs = __webpack_require__(66);
var cjs_default = /*#__PURE__*/__webpack_require__.n(cjs);
;// CONCATENATED MODULE: ./node_modules/is-plain-object/dist/is-plain-object.mjs
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

function isObject(o) {
  return Object.prototype.toString.call(o) === '[object Object]';
}

function isPlainObject(o) {
  var ctor,prot;

  if (isObject(o) === false) return false;

  // If has modified constructor
  ctor = o.constructor;
  if (ctor === undefined) return true;

  // If has modified prototype
  prot = ctor.prototype;
  if (isObject(prot) === false) return false;

  // If constructor does not have an Object-specific method
  if (prot.hasOwnProperty('isPrototypeOf') === false) {
    return false;
  }

  // Most likely a plain Object
  return true;
}



;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/global-styles-provider.js

/**
 * External dependencies
 */



/**
 * WordPress dependencies
 */





/**
 * Internal dependencies
 */

const {
  GlobalStylesContext: global_styles_provider_GlobalStylesContext,
  cleanEmptyObject: global_styles_provider_cleanEmptyObject
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
function mergeBaseAndUserConfigs(base, user) {
  return cjs_default()(base, user, {
    // We only pass as arrays the presets,
    // in which case we want the new array of values
    // to override the old array (no merging).
    isMergeableObject: isPlainObject
  });
}
function useGlobalStylesUserConfig() {
  const {
    globalStylesId,
    isReady,
    settings,
    styles
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getEditedEntityRecord,
      hasFinishedResolution
    } = select(external_wp_coreData_namespaceObject.store);
    const _globalStylesId = select(external_wp_coreData_namespaceObject.store).__experimentalGetCurrentGlobalStylesId();
    const record = _globalStylesId ? getEditedEntityRecord('root', 'globalStyles', _globalStylesId) : undefined;
    let hasResolved = false;
    if (hasFinishedResolution('__experimentalGetCurrentGlobalStylesId')) {
      hasResolved = _globalStylesId ? hasFinishedResolution('getEditedEntityRecord', ['root', 'globalStyles', _globalStylesId]) : true;
    }
    return {
      globalStylesId: _globalStylesId,
      isReady: hasResolved,
      settings: record?.settings,
      styles: record?.styles
    };
  }, []);
  const {
    getEditedEntityRecord
  } = (0,external_wp_data_namespaceObject.useSelect)(external_wp_coreData_namespaceObject.store);
  const {
    editEntityRecord
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_coreData_namespaceObject.store);
  const config = (0,external_wp_element_namespaceObject.useMemo)(() => {
    return {
      settings: settings !== null && settings !== void 0 ? settings : {},
      styles: styles !== null && styles !== void 0 ? styles : {}
    };
  }, [settings, styles]);
  const setConfig = (0,external_wp_element_namespaceObject.useCallback)((callback, options = {}) => {
    var _record$styles, _record$settings;
    const record = getEditedEntityRecord('root', 'globalStyles', globalStylesId);
    const currentConfig = {
      styles: (_record$styles = record?.styles) !== null && _record$styles !== void 0 ? _record$styles : {},
      settings: (_record$settings = record?.settings) !== null && _record$settings !== void 0 ? _record$settings : {}
    };
    const updatedConfig = callback(currentConfig);
    editEntityRecord('root', 'globalStyles', globalStylesId, {
      styles: global_styles_provider_cleanEmptyObject(updatedConfig.styles) || {},
      settings: global_styles_provider_cleanEmptyObject(updatedConfig.settings) || {}
    }, options);
  }, [globalStylesId]);
  return [isReady, config, setConfig];
}
function useGlobalStylesBaseConfig() {
  const baseConfig = (0,external_wp_data_namespaceObject.useSelect)(select => {
    return select(external_wp_coreData_namespaceObject.store).__experimentalGetCurrentThemeBaseGlobalStyles();
  }, []);
  return [!!baseConfig, baseConfig];
}
function useGlobalStylesContext() {
  const [isUserConfigReady, userConfig, setUserConfig] = useGlobalStylesUserConfig();
  const [isBaseConfigReady, baseConfig] = useGlobalStylesBaseConfig();
  const mergedConfig = (0,external_wp_element_namespaceObject.useMemo)(() => {
    if (!baseConfig || !userConfig) {
      return {};
    }
    return mergeBaseAndUserConfigs(baseConfig, userConfig);
  }, [userConfig, baseConfig]);
  const context = (0,external_wp_element_namespaceObject.useMemo)(() => {
    return {
      isReady: isUserConfigReady && isBaseConfigReady,
      user: userConfig,
      base: baseConfig,
      merged: mergedConfig,
      setUserConfig
    };
  }, [mergedConfig, userConfig, baseConfig, setUserConfig, isUserConfigReady, isBaseConfigReady]);
  return context;
}
function GlobalStylesProvider({
  children
}) {
  const context = useGlobalStylesContext();
  if (!context.isReady) {
    return null;
  }
  return (0,external_React_.createElement)(global_styles_provider_GlobalStylesContext.Provider, {
    value: context
  }, children);
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/preview.js

/**
 * WordPress dependencies
 */





/**
 * Internal dependencies
 */


const {
  useGlobalStyle: preview_useGlobalStyle,
  useGlobalStylesOutput
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
const firstFrame = {
  start: {
    scale: 1,
    opacity: 1
  },
  hover: {
    scale: 0,
    opacity: 0
  }
};
const midFrame = {
  hover: {
    opacity: 1
  },
  start: {
    opacity: 0.5
  }
};
const secondFrame = {
  hover: {
    scale: 1,
    opacity: 1
  },
  start: {
    scale: 0,
    opacity: 0
  }
};
const normalizedWidth = 248;
const normalizedHeight = 152;
const normalizedColorSwatchSize = 32;

// Throttle options for useThrottle. Must be defined outside of the component,
// so that the object reference is the same on each render.
const THROTTLE_OPTIONS = {
  leading: true,
  trailing: true
};
const StylesPreview = ({
  label,
  isFocused,
  withHoverView
}) => {
  const [fontWeight] = preview_useGlobalStyle('typography.fontWeight');
  const [fontFamily = 'serif'] = preview_useGlobalStyle('typography.fontFamily');
  const [headingFontFamily = fontFamily] = preview_useGlobalStyle('elements.h1.typography.fontFamily');
  const [headingFontWeight = fontWeight] = preview_useGlobalStyle('elements.h1.typography.fontWeight');
  const [textColor = 'black'] = preview_useGlobalStyle('color.text');
  const [headingColor = textColor] = preview_useGlobalStyle('elements.h1.color.text');
  const [backgroundColor = 'white'] = preview_useGlobalStyle('color.background');
  const [gradientValue] = preview_useGlobalStyle('color.gradient');
  const [styles] = useGlobalStylesOutput();
  const disableMotion = (0,external_wp_compose_namespaceObject.useReducedMotion)();
  const [isHovered, setIsHovered] = (0,external_wp_element_namespaceObject.useState)(false);
  const [containerResizeListener, {
    width
  }] = (0,external_wp_compose_namespaceObject.useResizeObserver)();
  const [throttledWidth, setThrottledWidthState] = (0,external_wp_element_namespaceObject.useState)(width);
  const [ratioState, setRatioState] = (0,external_wp_element_namespaceObject.useState)();
  const setThrottledWidth = (0,external_wp_compose_namespaceObject.useThrottle)(setThrottledWidthState, 250, THROTTLE_OPTIONS);

  // Must use useLayoutEffect to avoid a flash of the iframe at the wrong
  // size before the width is set.
  (0,external_wp_element_namespaceObject.useLayoutEffect)(() => {
    if (width) {
      setThrottledWidth(width);
    }
  }, [width, setThrottledWidth]);

  // Must use useLayoutEffect to avoid a flash of the iframe at the wrong
  // size before the width is set.
  (0,external_wp_element_namespaceObject.useLayoutEffect)(() => {
    const newRatio = throttledWidth ? throttledWidth / normalizedWidth : 1;
    const ratioDiff = newRatio - (ratioState || 0);

    // Only update the ratio state if the difference is big enough
    // or if the ratio state is not yet set. This is to avoid an
    // endless loop of updates at particular viewport heights when the
    // presence of a scrollbar causes the width to change slightly.
    const isRatioDiffBigEnough = Math.abs(ratioDiff) > 0.1;
    if (isRatioDiffBigEnough || !ratioState) {
      setRatioState(newRatio);
    }
  }, [throttledWidth, ratioState]);

  // Set a fallbackRatio to use before the throttled ratio has been set.
  const fallbackRatio = width ? width / normalizedWidth : 1;
  // Use the throttled ratio if it has been calculated, otherwise
  // use the fallback ratio. The throttled ratio is used to avoid
  // an endless loop of updates at particular viewport heights.
  // See: https://github.com/WordPress/gutenberg/issues/55112
  const ratio = ratioState ? ratioState : fallbackRatio;
  const {
    paletteColors,
    highlightedColors
  } = useStylesPreviewColors();

  // Reset leaked styles from WP common.css and remove main content layout padding and border.
  const editorStyles = (0,external_wp_element_namespaceObject.useMemo)(() => {
    if (styles) {
      return [...styles, {
        css: 'html{overflow:hidden}body{min-width: 0;padding: 0;border: none;}',
        isGlobalStyles: true
      }];
    }
    return styles;
  }, [styles]);
  const isReady = !!width;
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)("div", {
    style: {
      position: 'relative'
    }
  }, containerResizeListener), isReady && (0,external_React_.createElement)(external_wp_blockEditor_namespaceObject.__unstableIframe, {
    className: "edit-site-global-styles-preview__iframe",
    style: {
      width: '100%',
      height: normalizedHeight * ratio
    },
    onMouseEnter: () => setIsHovered(true),
    onMouseLeave: () => setIsHovered(false),
    tabIndex: -1
  }, (0,external_React_.createElement)(external_wp_blockEditor_namespaceObject.__unstableEditorStyles, {
    styles: editorStyles
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__unstableMotion.div, {
    style: {
      height: normalizedHeight * ratio,
      width: '100%',
      background: gradientValue !== null && gradientValue !== void 0 ? gradientValue : backgroundColor,
      cursor: withHoverView ? 'pointer' : undefined
    },
    initial: "start",
    animate: (isHovered || isFocused) && !disableMotion && label ? 'hover' : 'start'
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__unstableMotion.div, {
    variants: firstFrame,
    style: {
      height: '100%',
      overflow: 'hidden'
    }
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    spacing: 10 * ratio,
    justify: "center",
    style: {
      height: '100%',
      overflow: 'hidden'
    }
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__unstableMotion.div, {
    style: {
      fontFamily: headingFontFamily,
      fontSize: 65 * ratio,
      color: headingColor,
      fontWeight: headingFontWeight
    },
    animate: {
      scale: 1,
      opacity: 1
    },
    initial: {
      scale: 0.1,
      opacity: 0
    },
    transition: {
      delay: 0.3,
      type: 'tween'
    }
  }, "Aa"), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    spacing: 4 * ratio
  }, highlightedColors.map(({
    slug,
    color
  }, index) => (0,external_React_.createElement)(external_wp_components_namespaceObject.__unstableMotion.div, {
    key: slug,
    style: {
      height: normalizedColorSwatchSize * ratio,
      width: normalizedColorSwatchSize * ratio,
      background: color,
      borderRadius: normalizedColorSwatchSize * ratio / 2
    },
    animate: {
      scale: 1,
      opacity: 1
    },
    initial: {
      scale: 0.1,
      opacity: 0
    },
    transition: {
      delay: index === 1 ? 0.2 : 0.1
    }
  }))))), (0,external_React_.createElement)(external_wp_components_namespaceObject.__unstableMotion.div, {
    variants: withHoverView && midFrame,
    style: {
      height: '100%',
      width: '100%',
      position: 'absolute',
      top: 0,
      overflow: 'hidden',
      filter: 'blur(60px)',
      opacity: 0.1
    }
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    spacing: 0,
    justify: "flex-start",
    style: {
      height: '100%',
      overflow: 'hidden'
    }
  }, paletteColors.slice(0, 4).map(({
    color
  }, index) => (0,external_React_.createElement)("div", {
    key: index,
    style: {
      height: '100%',
      background: color,
      flexGrow: 1
    }
  })))), (0,external_React_.createElement)(external_wp_components_namespaceObject.__unstableMotion.div, {
    variants: secondFrame,
    style: {
      height: '100%',
      width: '100%',
      overflow: 'hidden',
      position: 'absolute',
      top: 0
    }
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    spacing: 3 * ratio,
    justify: "center",
    style: {
      height: '100%',
      overflow: 'hidden',
      padding: 10 * ratio,
      boxSizing: 'border-box'
    }
  }, label && (0,external_React_.createElement)("div", {
    style: {
      fontSize: 40 * ratio,
      fontFamily: headingFontFamily,
      color: headingColor,
      fontWeight: headingFontWeight,
      lineHeight: '1em',
      textAlign: 'center'
    }
  }, label))))));
};
/* harmony default export */ const preview = (StylesPreview);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/style-variations-container.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */








/**
 * Internal dependencies
 */



const {
  GlobalStylesContext: style_variations_container_GlobalStylesContext,
  areGlobalStyleConfigsEqual
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
function Variation({
  variation
}) {
  const [isFocused, setIsFocused] = (0,external_wp_element_namespaceObject.useState)(false);
  const {
    base,
    user,
    setUserConfig
  } = (0,external_wp_element_namespaceObject.useContext)(style_variations_container_GlobalStylesContext);
  const context = (0,external_wp_element_namespaceObject.useMemo)(() => {
    var _variation$settings, _variation$styles;
    return {
      user: {
        settings: (_variation$settings = variation.settings) !== null && _variation$settings !== void 0 ? _variation$settings : {},
        styles: (_variation$styles = variation.styles) !== null && _variation$styles !== void 0 ? _variation$styles : {}
      },
      base,
      merged: mergeBaseAndUserConfigs(base, variation),
      setUserConfig: () => {}
    };
  }, [variation, base]);
  const selectVariation = () => {
    setUserConfig(() => {
      return {
        settings: variation.settings,
        styles: variation.styles
      };
    });
  };
  const selectOnEnter = event => {
    if (event.keyCode === external_wp_keycodes_namespaceObject.ENTER) {
      event.preventDefault();
      selectVariation();
    }
  };
  const isActive = (0,external_wp_element_namespaceObject.useMemo)(() => {
    return areGlobalStyleConfigsEqual(user, variation);
  }, [user, variation]);
  let label = variation?.title;
  if (variation?.description) {
    label = (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %1$s: variation title. %2$s variation description. */
    (0,external_wp_i18n_namespaceObject.__)('%1$s (%2$s)'), variation?.title, variation?.description);
  }
  return (0,external_React_.createElement)(style_variations_container_GlobalStylesContext.Provider, {
    value: context
  }, (0,external_React_.createElement)("div", {
    className: classnames_default()('edit-site-global-styles-variations_item', {
      'is-active': isActive
    }),
    role: "button",
    onClick: selectVariation,
    onKeyDown: selectOnEnter,
    tabIndex: "0",
    "aria-label": label,
    "aria-current": isActive,
    onFocus: () => setIsFocused(true),
    onBlur: () => setIsFocused(false)
  }, (0,external_React_.createElement)("div", {
    className: "edit-site-global-styles-variations_item-preview"
  }, (0,external_React_.createElement)(preview, {
    label: variation?.title,
    isFocused: isFocused,
    withHoverView: true
  }))));
}
function StyleVariationsContainer() {
  const variations = (0,external_wp_data_namespaceObject.useSelect)(select => {
    return select(external_wp_coreData_namespaceObject.store).__experimentalGetCurrentThemeGlobalStylesVariations();
  }, []);
  const withEmptyVariation = (0,external_wp_element_namespaceObject.useMemo)(() => {
    return [{
      title: (0,external_wp_i18n_namespaceObject.__)('Default'),
      settings: {},
      styles: {}
    }, ...(variations !== null && variations !== void 0 ? variations : []).map(variation => {
      var _variation$settings2, _variation$styles2;
      return {
        ...variation,
        settings: (_variation$settings2 = variation.settings) !== null && _variation$settings2 !== void 0 ? _variation$settings2 : {},
        styles: (_variation$styles2 = variation.styles) !== null && _variation$styles2 !== void 0 ? _variation$styles2 : {}
      };
    })];
  }, [variations]);
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalGrid, {
    columns: 2,
    className: "edit-site-global-styles-style-variations-container"
  }, withEmptyVariation.map((variation, index) => (0,external_React_.createElement)(Variation, {
    key: index,
    variation: variation
  })));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/block-editor/resize-handle.js

/**
 * WordPress dependencies
 */



const DELTA_DISTANCE = 20; // The distance to resize per keydown in pixels.

function ResizeHandle({
  variation = 'default',
  direction,
  resizeWidthBy
}) {
  function handleKeyDown(event) {
    const {
      keyCode
    } = event;
    if (direction === 'left' && keyCode === external_wp_keycodes_namespaceObject.LEFT || direction === 'right' && keyCode === external_wp_keycodes_namespaceObject.RIGHT) {
      resizeWidthBy(DELTA_DISTANCE);
    } else if (direction === 'left' && keyCode === external_wp_keycodes_namespaceObject.RIGHT || direction === 'right' && keyCode === external_wp_keycodes_namespaceObject.LEFT) {
      resizeWidthBy(-DELTA_DISTANCE);
    }
  }
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)("button", {
    className: `resizable-editor__drag-handle is-${direction} is-variation-${variation}`,
    "aria-label": (0,external_wp_i18n_namespaceObject.__)('Drag to resize'),
    "aria-describedby": `resizable-editor__resize-help-${direction}`,
    onKeyDown: handleKeyDown,
    type: "button"
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.VisuallyHidden, {
    id: `resizable-editor__resize-help-${direction}`
  }, (0,external_wp_i18n_namespaceObject.__)('Use left and right arrow keys to resize the canvas.')));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/block-editor/resizable-editor.js

/**
 * WordPress dependencies
 */



/**
 * Internal dependencies
 */


// Removes the inline styles in the drag handles.
const HANDLE_STYLES_OVERRIDE = {
  position: undefined,
  userSelect: undefined,
  cursor: undefined,
  width: undefined,
  height: undefined,
  top: undefined,
  right: undefined,
  bottom: undefined,
  left: undefined
};
function ResizableEditor({
  enableResizing,
  height,
  children
}) {
  const [width, setWidth] = (0,external_wp_element_namespaceObject.useState)('100%');
  const resizableRef = (0,external_wp_element_namespaceObject.useRef)();
  const resizeWidthBy = (0,external_wp_element_namespaceObject.useCallback)(deltaPixels => {
    if (resizableRef.current) {
      setWidth(resizableRef.current.offsetWidth + deltaPixels);
    }
  }, []);
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.ResizableBox, {
    ref: api => {
      resizableRef.current = api?.resizable;
    },
    size: {
      width: enableResizing ? width : '100%',
      height: enableResizing && height ? height : '100%'
    },
    onResizeStop: (event, direction, element) => {
      setWidth(element.style.width);
    },
    minWidth: 300,
    maxWidth: "100%",
    maxHeight: "100%",
    enable: {
      left: enableResizing,
      right: enableResizing
    },
    showHandle: enableResizing
    // The editor is centered horizontally, resizing it only
    // moves half the distance. Hence double the ratio to correctly
    // align the cursor to the resizer handle.
    ,
    resizeRatio: 2,
    handleComponent: {
      left: (0,external_React_.createElement)(ResizeHandle, {
        direction: "left",
        resizeWidthBy: resizeWidthBy
      }),
      right: (0,external_React_.createElement)(ResizeHandle, {
        direction: "right",
        resizeWidthBy: resizeWidthBy
      })
    },
    handleClasses: undefined,
    handleStyles: {
      left: HANDLE_STYLES_OVERRIDE,
      right: HANDLE_STYLES_OVERRIDE
    }
  }, children);
}
/* harmony default export */ const resizable_editor = (ResizableEditor);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/editor-canvas-container/index.js

/**
 * WordPress dependencies
 */










/**
 * Internal dependencies
 */




/**
 * Returns a translated string for the title of the editor canvas container.
 *
 * @param {string} view Editor canvas container view.
 *
 * @return {string} Translated string corresponding to value of view. Default is ''.
 */
function getEditorCanvasContainerTitle(view) {
  switch (view) {
    case 'style-book':
      return (0,external_wp_i18n_namespaceObject.__)('Style Book');
    case 'global-styles-revisions':
    case 'global-styles-revisions:style-book':
      return (0,external_wp_i18n_namespaceObject.__)('Style Revisions');
    default:
      return '';
  }
}

// Creates a private slot fill.
const {
  createPrivateSlotFill
} = unlock(external_wp_components_namespaceObject.privateApis);
const SLOT_FILL_NAME = 'EditSiteEditorCanvasContainerSlot';
const {
  privateKey,
  Slot: EditorCanvasContainerSlot,
  Fill: EditorCanvasContainerFill
} = createPrivateSlotFill(SLOT_FILL_NAME);
function EditorCanvasContainer({
  children,
  closeButtonLabel,
  onClose,
  enableResizing = false
}) {
  const {
    editorCanvasContainerView,
    showListViewByDefault
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const _editorCanvasContainerView = unlock(select(store_store)).getEditorCanvasContainerView();
    const _showListViewByDefault = select(external_wp_preferences_namespaceObject.store).get('core', 'showListViewByDefault');
    return {
      editorCanvasContainerView: _editorCanvasContainerView,
      showListViewByDefault: _showListViewByDefault
    };
  }, []);
  const [isClosed, setIsClosed] = (0,external_wp_element_namespaceObject.useState)(false);
  const {
    setEditorCanvasContainerView
  } = unlock((0,external_wp_data_namespaceObject.useDispatch)(store_store));
  const {
    setIsListViewOpened
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_editor_namespaceObject.store);
  const focusOnMountRef = (0,external_wp_compose_namespaceObject.useFocusOnMount)('firstElement');
  const sectionFocusReturnRef = (0,external_wp_compose_namespaceObject.useFocusReturn)();
  const title = (0,external_wp_element_namespaceObject.useMemo)(() => getEditorCanvasContainerTitle(editorCanvasContainerView), [editorCanvasContainerView]);
  function onCloseContainer() {
    setIsListViewOpened(showListViewByDefault);
    setEditorCanvasContainerView(undefined);
    setIsClosed(true);
    if (typeof onClose === 'function') {
      onClose();
    }
  }
  function closeOnEscape(event) {
    if (event.keyCode === external_wp_keycodes_namespaceObject.ESCAPE && !event.defaultPrevented) {
      event.preventDefault();
      onCloseContainer();
    }
  }
  const childrenWithProps = Array.isArray(children) ? external_wp_element_namespaceObject.Children.map(children, (child, index) => index === 0 ? (0,external_wp_element_namespaceObject.cloneElement)(child, {
    ref: sectionFocusReturnRef
  }) : child) : (0,external_wp_element_namespaceObject.cloneElement)(children, {
    ref: sectionFocusReturnRef
  });
  if (isClosed) {
    return null;
  }
  const shouldShowCloseButton = onClose || closeButtonLabel;
  return (0,external_React_.createElement)(EditorCanvasContainerFill, null, (0,external_React_.createElement)(resizable_editor, {
    enableResizing: enableResizing
  }, (0,external_React_.createElement)("section", {
    className: "edit-site-editor-canvas-container",
    ref: shouldShowCloseButton ? focusOnMountRef : null,
    onKeyDown: closeOnEscape,
    "aria-label": title
  }, shouldShowCloseButton && (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    className: "edit-site-editor-canvas-container__close-button",
    icon: close_small,
    label: closeButtonLabel || (0,external_wp_i18n_namespaceObject.__)('Close'),
    onClick: onCloseContainer,
    showTooltip: false
  }), childrenWithProps)));
}
function useHasEditorCanvasContainer() {
  const fills = (0,external_wp_components_namespaceObject.__experimentalUseSlotFills)(privateKey);
  return !!fills?.length;
}
EditorCanvasContainer.Slot = EditorCanvasContainerSlot;
/* harmony default export */ const editor_canvas_container = (EditorCanvasContainer);


;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/style-book/index.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */









/**
 * Internal dependencies
 */



const {
  ExperimentalBlockEditorProvider,
  useGlobalStyle: style_book_useGlobalStyle,
  GlobalStylesContext: style_book_GlobalStylesContext,
  useGlobalStylesOutputWithConfig
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
const {
  CompositeV2: Composite,
  CompositeItemV2: CompositeItem,
  useCompositeStoreV2: useCompositeStore,
  Tabs
} = unlock(external_wp_components_namespaceObject.privateApis);

// The content area of the Style Book is rendered within an iframe so that global styles
// are applied to elements within the entire content area. To support elements that are
// not part of the block previews, such as headings and layout for the block previews,
// additional CSS rules need to be passed into the iframe. These are hard-coded below.
// Note that button styles are unset, and then focus rules from the `Button` component are
// applied to the `button` element, targeted via `.edit-site-style-book__example`.
// This is to ensure that browser default styles for buttons are not applied to the previews.
const STYLE_BOOK_IFRAME_STYLES = `
	.edit-site-style-book__examples {
		max-width: 900px;
		margin: 0 auto;
	}

	.edit-site-style-book__example {
		border-radius: 2px;
		cursor: pointer;
		display: flex;
		flex-direction: column;
		gap: 40px;
		margin-bottom: 40px;
		padding: 16px;
		width: 100%;
		box-sizing: border-box;
		scroll-margin-top: 32px;
		scroll-margin-bottom: 32px;
	}

	.edit-site-style-book__example.is-selected {
		box-shadow: 0 0 0 1px var(--wp-components-color-accent, var(--wp-admin-theme-color, #007cba));
	}

	.edit-site-style-book__example:focus:not(:disabled) {
		box-shadow: 0 0 0 var(--wp-admin-border-width-focus) var(--wp-components-color-accent, var(--wp-admin-theme-color, #007cba));
		outline: 3px solid transparent;
	}

	.edit-site-style-book__examples.is-wide .edit-site-style-book__example {
		flex-direction: row;
	}

	.edit-site-style-book__example-title {
		font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
		font-size: 11px;
		font-weight: 500;
		line-height: normal;
		margin: 0;
		text-align: left;
		text-transform: uppercase;
	}

	.edit-site-style-book__examples.is-wide .edit-site-style-book__example-title {
		text-align: right;
		width: 120px;
	}

	.edit-site-style-book__example-preview {
		width: 100%;
	}

	.edit-site-style-book__example-preview .block-editor-block-list__insertion-point,
	.edit-site-style-book__example-preview .block-list-appender {
		display: none;
	}

	.edit-site-style-book__example-preview .is-root-container > .wp-block:first-child {
		margin-top: 0;
	}
	.edit-site-style-book__example-preview .is-root-container > .wp-block:last-child {
		margin-bottom: 0;
	}
`;
function isObjectEmpty(object) {
  return !object || Object.keys(object).length === 0;
}
function getExamples() {
  // Use our own example for the Heading block so that we can show multiple
  // heading levels.
  const headingsExample = {
    name: 'core/heading',
    title: (0,external_wp_i18n_namespaceObject.__)('Headings'),
    category: 'text',
    blocks: [(0,external_wp_blocks_namespaceObject.createBlock)('core/heading', {
      content: (0,external_wp_i18n_namespaceObject.__)('Code Is Poetry'),
      level: 1
    }), (0,external_wp_blocks_namespaceObject.createBlock)('core/heading', {
      content: (0,external_wp_i18n_namespaceObject.__)('Code Is Poetry'),
      level: 2
    }), (0,external_wp_blocks_namespaceObject.createBlock)('core/heading', {
      content: (0,external_wp_i18n_namespaceObject.__)('Code Is Poetry'),
      level: 3
    }), (0,external_wp_blocks_namespaceObject.createBlock)('core/heading', {
      content: (0,external_wp_i18n_namespaceObject.__)('Code Is Poetry'),
      level: 4
    }), (0,external_wp_blocks_namespaceObject.createBlock)('core/heading', {
      content: (0,external_wp_i18n_namespaceObject.__)('Code Is Poetry'),
      level: 5
    })]
  };
  const otherExamples = (0,external_wp_blocks_namespaceObject.getBlockTypes)().filter(blockType => {
    const {
      name,
      example,
      supports
    } = blockType;
    return name !== 'core/heading' && !!example && supports.inserter !== false;
  }).map(blockType => ({
    name: blockType.name,
    title: blockType.title,
    category: blockType.category,
    blocks: (0,external_wp_blocks_namespaceObject.getBlockFromExample)(blockType.name, blockType.example)
  }));
  return [headingsExample, ...otherExamples];
}
function StyleBook({
  enableResizing = true,
  isSelected,
  onClick,
  onSelect,
  showCloseButton = true,
  onClose,
  showTabs = true,
  userConfig = {}
}) {
  const [resizeObserver, sizes] = (0,external_wp_compose_namespaceObject.useResizeObserver)();
  const [textColor] = style_book_useGlobalStyle('color.text');
  const [backgroundColor] = style_book_useGlobalStyle('color.background');
  const examples = (0,external_wp_element_namespaceObject.useMemo)(getExamples, []);
  const tabs = (0,external_wp_element_namespaceObject.useMemo)(() => (0,external_wp_blocks_namespaceObject.getCategories)().filter(category => examples.some(example => example.category === category.slug)).map(category => ({
    name: category.slug,
    title: category.title,
    icon: category.icon
  })), [examples]);
  const {
    base: baseConfig
  } = (0,external_wp_element_namespaceObject.useContext)(style_book_GlobalStylesContext);
  const mergedConfig = (0,external_wp_element_namespaceObject.useMemo)(() => {
    if (!isObjectEmpty(userConfig) && !isObjectEmpty(baseConfig)) {
      return mergeBaseAndUserConfigs(baseConfig, userConfig);
    }
    return {};
  }, [baseConfig, userConfig]);

  // Copied from packages/edit-site/src/components/revisions/index.js
  // could we create a shared hook?
  const originalSettings = (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_blockEditor_namespaceObject.store).getSettings(), []);
  const settings = (0,external_wp_element_namespaceObject.useMemo)(() => ({
    ...originalSettings,
    __unstableIsPreviewMode: true
  }), [originalSettings]);
  const [globalStyles] = useGlobalStylesOutputWithConfig(mergedConfig);
  settings.styles = !isObjectEmpty(globalStyles) && !isObjectEmpty(userConfig) ? globalStyles : settings.styles;
  return (0,external_React_.createElement)(editor_canvas_container, {
    onClose: onClose,
    enableResizing: enableResizing,
    closeButtonLabel: showCloseButton ? (0,external_wp_i18n_namespaceObject.__)('Close Style Book') : null
  }, (0,external_React_.createElement)("div", {
    className: classnames_default()('edit-site-style-book', {
      'is-wide': sizes.width > 600,
      'is-button': !!onClick
    }),
    style: {
      color: textColor,
      background: backgroundColor
    }
  }, resizeObserver, showTabs ? (0,external_React_.createElement)("div", {
    className: "edit-site-style-book__tabs"
  }, (0,external_React_.createElement)(Tabs, null, (0,external_React_.createElement)(Tabs.TabList, null, tabs.map(tab => (0,external_React_.createElement)(Tabs.Tab, {
    tabId: tab.name,
    key: tab.name
  }, tab.title))), tabs.map(tab => (0,external_React_.createElement)(Tabs.TabPanel, {
    key: tab.name,
    tabId: tab.name,
    focusable: false
  }, (0,external_React_.createElement)(StyleBookBody, {
    category: tab.name,
    examples: examples,
    isSelected: isSelected,
    onSelect: onSelect,
    settings: settings,
    sizes: sizes,
    title: tab.title
  }))))) : (0,external_React_.createElement)(StyleBookBody, {
    examples: examples,
    isSelected: isSelected,
    onClick: onClick,
    onSelect: onSelect,
    settings: settings,
    sizes: sizes
  })));
}
const StyleBookBody = ({
  category,
  examples,
  isSelected,
  onClick,
  onSelect,
  settings,
  sizes,
  title
}) => {
  const [isFocused, setIsFocused] = (0,external_wp_element_namespaceObject.useState)(false);

  // The presence of an `onClick` prop indicates that the Style Book is being used as a button.
  // In this case, add additional props to the iframe to make it behave like a button.
  const buttonModeProps = {
    role: 'button',
    onFocus: () => setIsFocused(true),
    onBlur: () => setIsFocused(false),
    onKeyDown: event => {
      if (event.defaultPrevented) {
        return;
      }
      const {
        keyCode
      } = event;
      if (onClick && (keyCode === external_wp_keycodes_namespaceObject.ENTER || keyCode === external_wp_keycodes_namespaceObject.SPACE)) {
        event.preventDefault();
        onClick(event);
      }
    },
    onClick: event => {
      if (event.defaultPrevented) {
        return;
      }
      if (onClick) {
        event.preventDefault();
        onClick(event);
      }
    },
    readonly: true
  };
  const buttonModeStyles = onClick ? 'body { cursor: pointer; } body * { pointer-events: none; }' : '';
  return (0,external_React_.createElement)(external_wp_blockEditor_namespaceObject.__unstableIframe, {
    className: classnames_default()('edit-site-style-book__iframe', {
      'is-focused': isFocused && !!onClick,
      'is-button': !!onClick
    }),
    name: "style-book-canvas",
    tabIndex: 0,
    ...(onClick ? buttonModeProps : {})
  }, (0,external_React_.createElement)(external_wp_blockEditor_namespaceObject.__unstableEditorStyles, {
    styles: settings.styles
  }), (0,external_React_.createElement)("style", null,
  // Forming a "block formatting context" to prevent margin collapsing.
  // @see https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context
  `.is-root-container { display: flow-root; }
						body { position: relative; padding: 32px !important; }` + STYLE_BOOK_IFRAME_STYLES + buttonModeStyles), (0,external_React_.createElement)(Examples, {
    className: classnames_default()('edit-site-style-book__examples', {
      'is-wide': sizes.width > 600
    }),
    examples: examples,
    category: category,
    label: title ? (0,external_wp_i18n_namespaceObject.sprintf)(
    // translators: %s: Category of blocks, e.g. Text.
    (0,external_wp_i18n_namespaceObject.__)('Examples of blocks in the %s category'), title) : (0,external_wp_i18n_namespaceObject.__)('Examples of blocks'),
    isSelected: isSelected,
    onSelect: onSelect,
    key: category
  }));
};
const Examples = (0,external_wp_element_namespaceObject.memo)(({
  className,
  examples,
  category,
  label,
  isSelected,
  onSelect
}) => {
  const compositeStore = useCompositeStore({
    orientation: 'vertical'
  });
  return (0,external_React_.createElement)(Composite, {
    store: compositeStore,
    className: className,
    "aria-label": label,
    role: "grid"
  }, examples.filter(example => category ? example.category === category : true).map(example => (0,external_React_.createElement)(Example, {
    key: example.name,
    id: `example-${example.name}`,
    title: example.title,
    blocks: example.blocks,
    isSelected: isSelected(example.name),
    onClick: () => {
      onSelect?.(example.name);
    }
  })));
});
const Example = ({
  id,
  title,
  blocks,
  isSelected,
  onClick
}) => {
  const originalSettings = (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_blockEditor_namespaceObject.store).getSettings(), []);
  const settings = (0,external_wp_element_namespaceObject.useMemo)(() => ({
    ...originalSettings,
    focusMode: false,
    // Disable "Spotlight mode".
    __unstableIsPreviewMode: true
  }), [originalSettings]);

  // Cache the list of blocks to avoid additional processing when the component is re-rendered.
  const renderedBlocks = (0,external_wp_element_namespaceObject.useMemo)(() => Array.isArray(blocks) ? blocks : [blocks], [blocks]);
  return (0,external_React_.createElement)("div", {
    role: "row"
  }, (0,external_React_.createElement)("div", {
    role: "gridcell"
  }, (0,external_React_.createElement)(CompositeItem, {
    className: classnames_default()('edit-site-style-book__example', {
      'is-selected': isSelected
    }),
    id: id,
    "aria-label": (0,external_wp_i18n_namespaceObject.sprintf)(
    // translators: %s: Title of a block, e.g. Heading.
    (0,external_wp_i18n_namespaceObject.__)('Open %s styles in Styles panel'), title),
    render: (0,external_React_.createElement)("div", null),
    role: "button",
    onClick: onClick
  }, (0,external_React_.createElement)("span", {
    className: "edit-site-style-book__example-title"
  }, title), (0,external_React_.createElement)("div", {
    className: "edit-site-style-book__example-preview",
    "aria-hidden": true
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Disabled, {
    className: "edit-site-style-book__example-preview__content"
  }, (0,external_React_.createElement)(ExperimentalBlockEditorProvider, {
    value: renderedBlocks,
    settings: settings
  }, (0,external_React_.createElement)(external_wp_blockEditor_namespaceObject.BlockList, {
    renderAppender: false
  })))))));
};
/* harmony default export */ const style_book = (StyleBook);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/screen-revisions/use-global-styles-revisions.js
/**
 * WordPress dependencies
 */





/**
 * Internal dependencies
 */

const SITE_EDITOR_AUTHORS_QUERY = {
  per_page: -1,
  _fields: 'id,name,avatar_urls',
  context: 'view',
  capabilities: ['edit_theme_options']
};
const DEFAULT_QUERY = {
  per_page: 100,
  page: 1
};
const use_global_styles_revisions_EMPTY_ARRAY = [];
const {
  GlobalStylesContext: use_global_styles_revisions_GlobalStylesContext
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
function useGlobalStylesRevisions({
  query
} = {}) {
  const {
    user: userConfig
  } = (0,external_wp_element_namespaceObject.useContext)(use_global_styles_revisions_GlobalStylesContext);
  const _query = {
    ...DEFAULT_QUERY,
    ...query
  };
  const {
    authors,
    currentUser,
    isDirty,
    revisions,
    isLoadingGlobalStylesRevisions,
    revisionsCount
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    var _globalStyles$_links$;
    const {
      __experimentalGetDirtyEntityRecords,
      getCurrentUser,
      getUsers,
      getRevisions,
      __experimentalGetCurrentGlobalStylesId,
      getEntityRecord,
      isResolving
    } = select(external_wp_coreData_namespaceObject.store);
    const dirtyEntityRecords = __experimentalGetDirtyEntityRecords();
    const _currentUser = getCurrentUser();
    const _isDirty = dirtyEntityRecords.length > 0;
    const globalStylesId = __experimentalGetCurrentGlobalStylesId();
    const globalStyles = globalStylesId ? getEntityRecord('root', 'globalStyles', globalStylesId) : undefined;
    const _revisionsCount = (_globalStyles$_links$ = globalStyles?._links?.['version-history']?.[0]?.count) !== null && _globalStyles$_links$ !== void 0 ? _globalStyles$_links$ : 0;
    const globalStylesRevisions = getRevisions('root', 'globalStyles', globalStylesId, _query) || use_global_styles_revisions_EMPTY_ARRAY;
    const _authors = getUsers(SITE_EDITOR_AUTHORS_QUERY) || use_global_styles_revisions_EMPTY_ARRAY;
    const _isResolving = isResolving('getRevisions', ['root', 'globalStyles', globalStylesId, _query]);
    return {
      authors: _authors,
      currentUser: _currentUser,
      isDirty: _isDirty,
      revisions: globalStylesRevisions,
      isLoadingGlobalStylesRevisions: _isResolving,
      revisionsCount: _revisionsCount
    };
  }, [query]);
  return (0,external_wp_element_namespaceObject.useMemo)(() => {
    if (!authors.length || isLoadingGlobalStylesRevisions) {
      return {
        revisions: use_global_styles_revisions_EMPTY_ARRAY,
        hasUnsavedChanges: isDirty,
        isLoading: true,
        revisionsCount
      };
    }

    // Adds author details to each revision.
    const _modifiedRevisions = revisions.map(revision => {
      return {
        ...revision,
        author: authors.find(author => author.id === revision.author)
      };
    });
    const fetchedRevisionsCount = revisions.length;
    if (fetchedRevisionsCount) {
      // Flags the most current saved revision.
      if (_modifiedRevisions[0].id !== 'unsaved' && _query.page === 1) {
        _modifiedRevisions[0].isLatest = true;
      }

      // Adds an item for unsaved changes.
      if (isDirty && userConfig && Object.keys(userConfig).length > 0 && currentUser && _query.page === 1) {
        const unsavedRevision = {
          id: 'unsaved',
          styles: userConfig?.styles,
          settings: userConfig?.settings,
          author: {
            name: currentUser?.name,
            avatar_urls: currentUser?.avatar_urls
          },
          modified: new Date()
        };
        _modifiedRevisions.unshift(unsavedRevision);
      }
      if (_query.page === Math.ceil(revisionsCount / _query.per_page)) {
        // Adds an item for the default theme styles.
        _modifiedRevisions.push({
          id: 'parent',
          styles: {},
          settings: {}
        });
      }
    }
    return {
      revisions: _modifiedRevisions,
      hasUnsavedChanges: isDirty,
      isLoading: false,
      revisionsCount
    };
  }, [isDirty, revisions, currentUser, authors, userConfig, isLoadingGlobalStylesRevisions]);
}

;// CONCATENATED MODULE: external ["wp","date"]
const external_wp_date_namespaceObject = window["wp"]["date"];
;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/backup.js

/**
 * WordPress dependencies
 */

const backup = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M5.5 12h1.75l-2.5 3-2.5-3H4a8 8 0 113.134 6.35l.907-1.194A6.5 6.5 0 105.5 12zm9.53 1.97l-2.28-2.28V8.5a.75.75 0 00-1.5 0V12a.747.747 0 00.218.529l1.282-.84-1.28.842 2.5 2.5a.75.75 0 101.06-1.061z"
}));
/* harmony default export */ const library_backup = (backup);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-details-panel/sidebar-navigation-screen-details-panel-label.js

/**
 * WordPress dependencies
 */

function SidebarNavigationScreenDetailsPanelLabel({
  children
}) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    className: "edit-site-sidebar-navigation-details-screen-panel__label"
  }, children);
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-details-panel/sidebar-navigation-screen-details-panel-row.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */

function SidebarNavigationScreenDetailsPanelRow({
  label,
  children,
  className,
  ...extraProps
}) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    key: label,
    spacing: 5,
    alignment: "left",
    className: classnames_default()('edit-site-sidebar-navigation-details-screen-panel__row', className),
    ...extraProps
  }, children);
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-details-panel/sidebar-navigation-screen-details-panel-value.js

/**
 * WordPress dependencies
 */

function SidebarNavigationScreenDetailsPanelValue({
  children
}) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    className: "edit-site-sidebar-navigation-details-screen-panel__value"
  }, children);
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-details-panel/index.js

/**
 * WordPress dependencies
 */


/**
 * Internal dependencies
 */



function SidebarNavigationScreenDetailsPanel({
  title,
  children,
  spacing
}) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    className: "edit-site-sidebar-navigation-details-screen-panel",
    spacing: spacing
  }, title && (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHeading, {
    className: "edit-site-sidebar-navigation-details-screen-panel__heading",
    level: 2
  }, title), children);
}


;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-details-footer/index.js

/**
 * WordPress dependencies
 */







/**
 * Internal dependencies
 */


function SidebarNavigationScreenDetailsFooter({
  record,
  ...otherProps
}) {
  /*
   * There might be other items in the future,
   * but for now it's just modified date.
   * Later we might render a list of items and isolate
   * the following logic.
   */
  const hrefProps = {};
  if (record?._links?.['predecessor-version']?.[0]?.id) {
    hrefProps.href = (0,external_wp_url_namespaceObject.addQueryArgs)('revision.php', {
      revision: record?._links['predecessor-version'][0].id
    });
    hrefProps.as = 'a';
  }
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItemGroup, {
    className: "edit-site-sidebar-navigation-screen-details-footer"
  }, (0,external_React_.createElement)(SidebarNavigationItem, {
    "aria-label": (0,external_wp_i18n_namespaceObject.__)('Revisions'),
    ...hrefProps,
    ...otherProps
  }, (0,external_React_.createElement)(SidebarNavigationScreenDetailsPanelRow, {
    justify: "space-between"
  }, (0,external_React_.createElement)(SidebarNavigationScreenDetailsPanelLabel, null, (0,external_wp_i18n_namespaceObject.__)('Last modified')), (0,external_React_.createElement)(SidebarNavigationScreenDetailsPanelValue, null, (0,external_wp_element_namespaceObject.createInterpolateElement)((0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: is the relative time when the post was last modified. */
  (0,external_wp_i18n_namespaceObject.__)('<time>%s</time>'), (0,external_wp_date_namespaceObject.humanTimeDiff)(record.modified)), {
    time: (0,external_React_.createElement)("time", {
      dateTime: record.modified
    })
  })), (0,external_React_.createElement)(external_wp_components_namespaceObject.Icon, {
    className: "edit-site-sidebar-navigation-screen-details-footer__icon",
    icon: library_backup
  }))));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-global-styles/index.js

/**
 * WordPress dependencies
 */










/**
 * Internal dependencies
 */









const sidebar_navigation_screen_global_styles_noop = () => {};
function SidebarNavigationItemGlobalStyles(props) {
  const {
    openGeneralSidebar
  } = (0,external_wp_data_namespaceObject.useDispatch)(store_store);
  const {
    setCanvasMode
  } = unlock((0,external_wp_data_namespaceObject.useDispatch)(store_store));
  const hasGlobalStyleVariations = (0,external_wp_data_namespaceObject.useSelect)(select => !!select(external_wp_coreData_namespaceObject.store).__experimentalGetCurrentThemeGlobalStylesVariations()?.length, []);
  if (hasGlobalStyleVariations) {
    return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalNavigatorButton, {
      ...props,
      as: SidebarNavigationItem,
      path: "/wp_global_styles"
    });
  }
  return (0,external_React_.createElement)(SidebarNavigationItem, {
    ...props,
    onClick: () => {
      // Switch to edit mode.
      setCanvasMode('edit');
      // Open global styles sidebar.
      openGeneralSidebar('edit-site/global-styles');
    }
  });
}
function SidebarNavigationScreenGlobalStylesContent() {
  const {
    storedSettings
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getSettings
    } = unlock(select(store_store));
    return {
      storedSettings: getSettings()
    };
  }, []);

  // Wrap in a BlockEditorProvider to ensure that the Iframe's dependencies are
  // loaded. This is necessary because the Iframe component waits until
  // the block editor store's `__internalIsInitialized` is true before
  // rendering the iframe. Without this, the iframe previews will not render
  // in mobile viewport sizes, where the editor canvas is hidden.
  return (0,external_React_.createElement)(external_wp_blockEditor_namespaceObject.BlockEditorProvider, {
    settings: storedSettings,
    onChange: sidebar_navigation_screen_global_styles_noop,
    onInput: sidebar_navigation_screen_global_styles_noop
  }, (0,external_React_.createElement)(StyleVariationsContainer, null));
}
function SidebarNavigationScreenGlobalStyles() {
  const {
    revisions,
    isLoading: isLoadingRevisions
  } = useGlobalStylesRevisions();
  const {
    openGeneralSidebar
  } = (0,external_wp_data_namespaceObject.useDispatch)(store_store);
  const {
    setIsListViewOpened
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_editor_namespaceObject.store);
  const isMobileViewport = (0,external_wp_compose_namespaceObject.useViewportMatch)('medium', '<');
  const {
    setCanvasMode,
    setEditorCanvasContainerView
  } = unlock((0,external_wp_data_namespaceObject.useDispatch)(store_store));
  const {
    isViewMode,
    isStyleBookOpened,
    revisionsCount
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    var _globalStyles$_links$;
    const {
      getCanvasMode,
      getEditorCanvasContainerView
    } = unlock(select(store_store));
    const {
      getEntityRecord,
      __experimentalGetCurrentGlobalStylesId
    } = select(external_wp_coreData_namespaceObject.store);
    const globalStylesId = __experimentalGetCurrentGlobalStylesId();
    const globalStyles = globalStylesId ? getEntityRecord('root', 'globalStyles', globalStylesId) : undefined;
    return {
      isViewMode: 'view' === getCanvasMode(),
      isStyleBookOpened: 'style-book' === getEditorCanvasContainerView(),
      revisionsCount: (_globalStyles$_links$ = globalStyles?._links?.['version-history']?.[0]?.count) !== null && _globalStyles$_links$ !== void 0 ? _globalStyles$_links$ : 0
    };
  }, []);
  const openGlobalStyles = (0,external_wp_element_namespaceObject.useCallback)(async () => {
    return Promise.all([setCanvasMode('edit'), openGeneralSidebar('edit-site/global-styles')]);
  }, [setCanvasMode, openGeneralSidebar]);
  const openStyleBook = (0,external_wp_element_namespaceObject.useCallback)(async () => {
    await openGlobalStyles();
    // Open the Style Book once the canvas mode is set to edit,
    // and the global styles sidebar is open. This ensures that
    // the Style Book is not prematurely closed.
    setEditorCanvasContainerView('style-book');
    setIsListViewOpened(false);
  }, [openGlobalStyles, setEditorCanvasContainerView, setIsListViewOpened]);
  const openRevisions = (0,external_wp_element_namespaceObject.useCallback)(async () => {
    await openGlobalStyles();
    // Open the global styles revisions once the canvas mode is set to edit,
    // and the global styles sidebar is open. The global styles UI is responsible
    // for redirecting to the revisions screen once the editor canvas container
    // has been set to 'global-styles-revisions'.
    setEditorCanvasContainerView('global-styles-revisions');
  }, [openGlobalStyles, setEditorCanvasContainerView]);

  // If there are no revisions, do not render a footer.
  const hasRevisions = revisionsCount > 0;
  const modifiedDateTime = revisions?.[0]?.modified;
  const shouldShowGlobalStylesFooter = hasRevisions && !isLoadingRevisions && modifiedDateTime;
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(SidebarNavigationScreen, {
    title: (0,external_wp_i18n_namespaceObject.__)('Styles'),
    description: (0,external_wp_i18n_namespaceObject.__)('Choose a different style combination for the theme styles.'),
    content: (0,external_React_.createElement)(SidebarNavigationScreenGlobalStylesContent, null),
    footer: shouldShowGlobalStylesFooter && (0,external_React_.createElement)(SidebarNavigationScreenDetailsFooter, {
      record: revisions?.[0],
      onClick: openRevisions
    }),
    actions: (0,external_React_.createElement)(external_React_.Fragment, null, !isMobileViewport && (0,external_React_.createElement)(SidebarButton, {
      icon: library_seen,
      label: (0,external_wp_i18n_namespaceObject.__)('Style Book'),
      onClick: () => setEditorCanvasContainerView(!isStyleBookOpened ? 'style-book' : undefined),
      isPressed: isStyleBookOpened
    }), (0,external_React_.createElement)(SidebarButton, {
      icon: edit,
      label: (0,external_wp_i18n_namespaceObject.__)('Edit styles'),
      onClick: async () => await openGlobalStyles()
    }))
  }), isStyleBookOpened && !isMobileViewport && isViewMode && (0,external_React_.createElement)(style_book, {
    enableResizing: false,
    isSelected: () => false,
    onClick: openStyleBook,
    onSelect: openStyleBook,
    showCloseButton: false,
    showTabs: false
  }));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-main/template-part-hint.js

/**
 * WordPress dependencies
 */




const PREFERENCE_NAME = 'isTemplatePartMoveHintVisible';
function TemplatePartHint() {
  const showTemplatePartHint = (0,external_wp_data_namespaceObject.useSelect)(select => {
    var _select$get;
    return (_select$get = select(external_wp_preferences_namespaceObject.store).get('core', PREFERENCE_NAME)) !== null && _select$get !== void 0 ? _select$get : true;
  }, []);
  const {
    set: setPreference
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_preferences_namespaceObject.store);
  if (!showTemplatePartHint) {
    return null;
  }
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Notice, {
    politeness: "polite",
    className: "edit-site-sidebar__notice",
    onRemove: () => {
      setPreference('core', PREFERENCE_NAME, false);
    }
  }, (0,external_wp_i18n_namespaceObject.__)('Looking for template parts? Find them in "Patterns".'));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-main/index.js

/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */






function SidebarNavigationScreenMain() {
  const {
    location
  } = (0,external_wp_components_namespaceObject.__experimentalUseNavigator)();
  const {
    setEditorCanvasContainerView
  } = unlock((0,external_wp_data_namespaceObject.useDispatch)(store_store));

  // Clear the editor canvas container view when accessing the main navigation screen.
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    if (location?.path === '/') {
      setEditorCanvasContainerView(undefined);
    }
  }, [setEditorCanvasContainerView, location?.path]);
  return (0,external_React_.createElement)(SidebarNavigationScreen, {
    isRoot: true,
    title: (0,external_wp_i18n_namespaceObject.__)('Design'),
    description: (0,external_wp_i18n_namespaceObject.__)('Customize the appearance of your website using the block editor.'),
    content: (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItemGroup, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalNavigatorButton, {
      as: SidebarNavigationItem,
      path: "/navigation",
      withChevron: true,
      icon: library_navigation
    }, (0,external_wp_i18n_namespaceObject.__)('Navigation')), (0,external_React_.createElement)(SidebarNavigationItemGlobalStyles, {
      withChevron: true,
      icon: library_styles
    }, (0,external_wp_i18n_namespaceObject.__)('Styles')), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalNavigatorButton, {
      as: SidebarNavigationItem,
      path: "/page",
      withChevron: true,
      icon: library_page
    }, (0,external_wp_i18n_namespaceObject.__)('Pages')), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalNavigatorButton, {
      as: SidebarNavigationItem,
      path: "/wp_template",
      withChevron: true,
      icon: library_layout
    }, (0,external_wp_i18n_namespaceObject.__)('Templates')), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalNavigatorButton, {
      as: SidebarNavigationItem,
      path: "/patterns",
      withChevron: true,
      icon: library_symbol
    }, (0,external_wp_i18n_namespaceObject.__)('Patterns'))), (0,external_React_.createElement)(TemplatePartHint, null))
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/home.js

/**
 * WordPress dependencies
 */

const home = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M12 4L4 7.9V20h16V7.9L12 4zm6.5 14.5H14V13h-4v5.5H5.5V8.8L12 5.7l6.5 3.1v9.7z"
}));
/* harmony default export */ const library_home = (home);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/verse.js

/**
 * WordPress dependencies
 */

const verse = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M17.8 2l-.9.3c-.1 0-3.6 1-5.2 2.1C10 5.5 9.3 6.5 8.9 7.1c-.6.9-1.7 4.7-1.7 6.3l-.9 2.3c-.2.4 0 .8.4 1 .1 0 .2.1.3.1.3 0 .6-.2.7-.5l.6-1.5c.3 0 .7-.1 1.2-.2.7-.1 1.4-.3 2.2-.5.8-.2 1.6-.5 2.4-.8.7-.3 1.4-.7 1.9-1.2s.8-1.2 1-1.9c.2-.7.3-1.6.4-2.4.1-.8.1-1.7.2-2.5 0-.8.1-1.5.2-2.1V2zm-1.9 5.6c-.1.8-.2 1.5-.3 2.1-.2.6-.4 1-.6 1.3-.3.3-.8.6-1.4.9-.7.3-1.4.5-2.2.8-.6.2-1.3.3-1.8.4L15 7.5c.3-.3.6-.7 1-1.1 0 .4 0 .8-.1 1.2zM6 20h8v-1.5H6V20z"
}));
/* harmony default export */ const library_verse = (verse);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/pin.js

/**
 * WordPress dependencies
 */

const pin = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "m21.5 9.1-6.6-6.6-4.2 5.6c-1.2-.1-2.4.1-3.6.7-.1 0-.1.1-.2.1-.5.3-.9.6-1.2.9l3.7 3.7-5.7 5.7v1.1h1.1l5.7-5.7 3.7 3.7c.4-.4.7-.8.9-1.2.1-.1.1-.2.2-.3.6-1.1.8-2.4.6-3.6l5.6-4.1zm-7.3 3.5.1.9c.1.9 0 1.8-.4 2.6l-6-6c.8-.4 1.7-.5 2.6-.4l.9.1L15 4.9 19.1 9l-4.9 3.6z"
}));
/* harmony default export */ const library_pin = (pin);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/archive.js

/**
 * WordPress dependencies
 */

const archive = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M11.934 7.406a1 1 0 0 0 .914.594H19a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5H5a.5.5 0 0 1-.5-.5V6a.5.5 0 0 1 .5-.5h5.764a.5.5 0 0 1 .447.276l.723 1.63Zm1.064-1.216a.5.5 0 0 0 .462.31H19a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h5.764a2 2 0 0 1 1.789 1.106l.445 1.084ZM8.5 10.5h7V12h-7v-1.5Zm7 3.5h-7v1.5h7V14Z"
}));
/* harmony default export */ const library_archive = (archive);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/search.js

/**
 * WordPress dependencies
 */

const search = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M13 5c-3.3 0-6 2.7-6 6 0 1.4.5 2.7 1.3 3.7l-3.8 3.8 1.1 1.1 3.8-3.8c1 .8 2.3 1.3 3.7 1.3 3.3 0 6-2.7 6-6S16.3 5 13 5zm0 10.5c-2.5 0-4.5-2-4.5-4.5s2-4.5 4.5-4.5 4.5 2 4.5 4.5-2 4.5-4.5 4.5z"
}));
/* harmony default export */ const library_search = (search);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/not-found.js

/**
 * WordPress dependencies
 */

const notFound = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M19 5H5c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm.5 12c0 .3-.2.5-.5.5H5c-.3 0-.5-.2-.5-.5V7c0-.3.2-.5.5-.5h14c.3 0 .5.2.5.5v10zm-11-7.6h-.7l-3.1 4.3h2.8V15h1v-1.3h.7v-.8h-.7V9.4zm-.9 3.5H6.3l1.2-1.7v1.7zm5.6-3.2c-.4-.2-.8-.4-1.2-.4-.5 0-.9.1-1.2.4-.4.2-.6.6-.8 1-.2.4-.3.9-.3 1.5s.1 1.1.3 1.6c.2.4.5.8.8 1 .4.2.8.4 1.2.4.5 0 .9-.1 1.2-.4.4-.2.6-.6.8-1 .2-.4.3-1 .3-1.6 0-.6-.1-1.1-.3-1.5-.1-.5-.4-.8-.8-1zm0 3.6c-.1.3-.3.5-.5.7-.2.1-.4.2-.7.2-.3 0-.5-.1-.7-.2-.2-.1-.4-.4-.5-.7-.1-.3-.2-.7-.2-1.2 0-.7.1-1.2.4-1.5.3-.3.6-.5 1-.5s.7.2 1 .5c.3.3.4.8.4 1.5-.1.5-.1.9-.2 1.2zm5-3.9h-.7l-3.1 4.3h2.8V15h1v-1.3h.7v-.8h-.7V9.4zm-1 3.5H16l1.2-1.7v1.7z"
}));
/* harmony default export */ const not_found = (notFound);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/list.js

/**
 * WordPress dependencies
 */

const list = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M4 4v1.5h16V4H4zm8 8.5h8V11h-8v1.5zM4 20h16v-1.5H4V20zm4-8c0-1.1-.9-2-2-2s-2 .9-2 2 .9 2 2 2 2-.9 2-2z"
}));
/* harmony default export */ const library_list = (list);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/category.js

/**
 * WordPress dependencies
 */

const category = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M6 5.5h3a.5.5 0 01.5.5v3a.5.5 0 01-.5.5H6a.5.5 0 01-.5-.5V6a.5.5 0 01.5-.5zM4 6a2 2 0 012-2h3a2 2 0 012 2v3a2 2 0 01-2 2H6a2 2 0 01-2-2V6zm11-.5h3a.5.5 0 01.5.5v3a.5.5 0 01-.5.5h-3a.5.5 0 01-.5-.5V6a.5.5 0 01.5-.5zM13 6a2 2 0 012-2h3a2 2 0 012 2v3a2 2 0 01-2 2h-3a2 2 0 01-2-2V6zm5 8.5h-3a.5.5 0 00-.5.5v3a.5.5 0 00.5.5h3a.5.5 0 00.5-.5v-3a.5.5 0 00-.5-.5zM15 13a2 2 0 00-2 2v3a2 2 0 002 2h3a2 2 0 002-2v-3a2 2 0 00-2-2h-3zm-9 1.5h3a.5.5 0 01.5.5v3a.5.5 0 01-.5.5H6a.5.5 0 01-.5-.5v-3a.5.5 0 01.5-.5zM4 15a2 2 0 012-2h3a2 2 0 012 2v3a2 2 0 01-2 2H6a2 2 0 01-2-2v-3z",
  fillRule: "evenodd",
  clipRule: "evenodd"
}));
/* harmony default export */ const library_category = (category);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/comment-author-avatar.js

/**
 * WordPress dependencies
 */

const commentAuthorAvatar = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  fillRule: "evenodd",
  d: "M7.25 16.437a6.5 6.5 0 1 1 9.5 0V16A2.75 2.75 0 0 0 14 13.25h-4A2.75 2.75 0 0 0 7.25 16v.437Zm1.5 1.193a6.47 6.47 0 0 0 3.25.87 6.47 6.47 0 0 0 3.25-.87V16c0-.69-.56-1.25-1.25-1.25h-4c-.69 0-1.25.56-1.25 1.25v1.63ZM4 12a8 8 0 1 1 16 0 8 8 0 0 1-16 0Zm10-2a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z",
  clipRule: "evenodd"
}));
/* harmony default export */ const comment_author_avatar = (commentAuthorAvatar);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/block-meta.js

/**
 * WordPress dependencies
 */

const blockMeta = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  fillRule: "evenodd",
  d: "M8.95 11.25H4v1.5h4.95v4.5H13V18c0 1.1.9 2 2 2h3c1.1 0 2-.9 2-2v-3c0-1.1-.9-2-2-2h-3c-1.1 0-2 .9-2 2v.75h-2.55v-7.5H13V9c0 1.1.9 2 2 2h3c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2h-3c-1.1 0-2 .9-2 2v.75H8.95v4.5ZM14.5 15v3c0 .3.2.5.5.5h3c.3 0 .5-.2.5-.5v-3c0-.3-.2-.5-.5-.5h-3c-.3 0-.5.2-.5.5Zm0-6V6c0-.3.2-.5.5-.5h3c.3 0 .5.2.5.5v3c0 .3-.2.5-.5.5h-3c-.3 0-.5-.2-.5-.5Z",
  clipRule: "evenodd"
}));
/* harmony default export */ const block_meta = (blockMeta);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/calendar.js

/**
 * WordPress dependencies
 */

const calendar = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm.5 16c0 .3-.2.5-.5.5H5c-.3 0-.5-.2-.5-.5V7h15v12zM9 10H7v2h2v-2zm0 4H7v2h2v-2zm4-4h-2v2h2v-2zm4 0h-2v2h2v-2zm-4 4h-2v2h2v-2zm4 0h-2v2h2v-2z"
}));
/* harmony default export */ const library_calendar = (calendar);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/tag.js

/**
 * WordPress dependencies
 */

const tag = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M4.75 4a.75.75 0 0 0-.75.75v7.826c0 .2.08.39.22.53l6.72 6.716a2.313 2.313 0 0 0 3.276-.001l5.61-5.611-.531-.53.532.528a2.315 2.315 0 0 0 0-3.264L13.104 4.22a.75.75 0 0 0-.53-.22H4.75ZM19 12.576a.815.815 0 0 1-.236.574l-5.61 5.611a.814.814 0 0 1-1.153 0L5.5 12.264V5.5h6.763l6.5 6.502a.816.816 0 0 1 .237.574ZM8.75 9.75a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z"
}));
/* harmony default export */ const library_tag = (tag);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/media.js

/**
 * WordPress dependencies
 */

const media = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "m7 6.5 4 2.5-4 2.5z"
}), (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "m5 3c-1.10457 0-2 .89543-2 2v14c0 1.1046.89543 2 2 2h14c1.1046 0 2-.8954 2-2v-14c0-1.10457-.8954-2-2-2zm14 1.5h-14c-.27614 0-.5.22386-.5.5v10.7072l3.62953-2.6465c.25108-.1831.58905-.1924.84981-.0234l2.92666 1.8969 3.5712-3.4719c.2911-.2831.7545-.2831 1.0456 0l2.9772 2.8945v-9.3568c0-.27614-.2239-.5-.5-.5zm-14.5 14.5v-1.4364l4.09643-2.987 2.99567 1.9417c.2936.1903.6798.1523.9307-.0917l3.4772-3.3806 3.4772 3.3806.0228-.0234v2.5968c0 .2761-.2239.5-.5.5h-14c-.27614 0-.5-.2239-.5-.5z"
}));
/* harmony default export */ const library_media = (media);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/plus.js

/**
 * WordPress dependencies
 */

const plus = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M11 12.5V17.5H12.5V12.5H17.5V11H12.5V6H11V11H6V12.5H11Z"
}));
/* harmony default export */ const library_plus = (plus);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/post.js

/**
 * WordPress dependencies
 */

const post = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "m7.3 9.7 1.4 1.4c.2-.2.3-.3.4-.5 0 0 0-.1.1-.1.3-.5.4-1.1.3-1.6L12 7 9 4 7.2 6.5c-.6-.1-1.1 0-1.6.3 0 0-.1 0-.1.1-.3.1-.4.2-.6.4l1.4 1.4L4 11v1h1l2.3-2.3zM4 20h9v-1.5H4V20zm0-5.5V16h16v-1.5H4z"
}));
/* harmony default export */ const library_post = (post);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/add-new-template/utils.js
/**
 * WordPress dependencies
 */








/**
 * Internal dependencies
 */


/**
 * @typedef IHasNameAndId
 * @property {string|number} id   The entity's id.
 * @property {string}        name The entity's name.
 */

const utils_getValueFromObjectPath = (object, path) => {
  let value = object;
  path.split('.').forEach(fieldName => {
    value = value?.[fieldName];
  });
  return value;
};

/**
 * Helper util to map records to add a `name` prop from a
 * provided path, in order to handle all entities in the same
 * fashion(implementing`IHasNameAndId` interface).
 *
 * @param {Object[]} entities The array of entities.
 * @param {string}   path     The path to map a `name` property from the entity.
 * @return {IHasNameAndId[]} An array of enitities that now implement the `IHasNameAndId` interface.
 */
const mapToIHasNameAndId = (entities, path) => {
  return (entities || []).map(entity => ({
    ...entity,
    name: (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(utils_getValueFromObjectPath(entity, path))
  }));
};

/**
 * @typedef {Object} EntitiesInfo
 * @property {boolean}  hasEntities         If an entity has available records(posts, terms, etc..).
 * @property {number[]} existingEntitiesIds An array of the existing entities ids.
 */

const useExistingTemplates = () => {
  return (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_coreData_namespaceObject.store).getEntityRecords('postType', constants_TEMPLATE_POST_TYPE, {
    per_page: -1
  }), []);
};
const useDefaultTemplateTypes = () => {
  return (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_editor_namespaceObject.store).__experimentalGetDefaultTemplateTypes(), []);
};
const usePublicPostTypes = () => {
  const postTypes = (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_coreData_namespaceObject.store).getPostTypes({
    per_page: -1
  }), []);
  return (0,external_wp_element_namespaceObject.useMemo)(() => {
    const excludedPostTypes = ['attachment'];
    return postTypes?.filter(({
      viewable,
      slug
    }) => viewable && !excludedPostTypes.includes(slug));
  }, [postTypes]);
};
const usePublicTaxonomies = () => {
  const taxonomies = (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_coreData_namespaceObject.store).getTaxonomies({
    per_page: -1
  }), []);
  return (0,external_wp_element_namespaceObject.useMemo)(() => {
    return taxonomies?.filter(({
      visibility
    }) => visibility?.publicly_queryable);
  }, [taxonomies]);
};
function usePostTypeNeedsUniqueIdentifier(publicPostTypes) {
  const postTypeLabels = (0,external_wp_element_namespaceObject.useMemo)(() => publicPostTypes?.reduce((accumulator, {
    labels
  }) => {
    const singularName = labels.singular_name.toLowerCase();
    accumulator[singularName] = (accumulator[singularName] || 0) + 1;
    return accumulator;
  }, {}));
  return (0,external_wp_element_namespaceObject.useCallback)(({
    labels,
    slug
  }) => {
    const singularName = labels.singular_name.toLowerCase();
    return postTypeLabels[singularName] > 1 && singularName !== slug;
  }, [postTypeLabels]);
}
function usePostTypeArchiveMenuItems() {
  const publicPostTypes = usePublicPostTypes();
  const postTypesWithArchives = (0,external_wp_element_namespaceObject.useMemo)(() => publicPostTypes?.filter(postType => postType.has_archive), [publicPostTypes]);
  const existingTemplates = useExistingTemplates();
  const needsUniqueIdentifier = usePostTypeNeedsUniqueIdentifier(postTypesWithArchives);
  return (0,external_wp_element_namespaceObject.useMemo)(() => postTypesWithArchives?.filter(postType => !(existingTemplates || []).some(existingTemplate => existingTemplate.slug === 'archive-' + postType.slug)).map(postType => {
    let title;
    if (needsUniqueIdentifier(postType)) {
      title = (0,external_wp_i18n_namespaceObject.sprintf)(
      // translators: %1s: Name of the post type e.g: "Post"; %2s: Slug of the post type e.g: "book".
      (0,external_wp_i18n_namespaceObject.__)('Archive: %1$s (%2$s)'), postType.labels.singular_name, postType.slug);
    } else {
      title = (0,external_wp_i18n_namespaceObject.sprintf)(
      // translators: %s: Name of the post type e.g: "Post".
      (0,external_wp_i18n_namespaceObject.__)('Archive: %s'), postType.labels.singular_name);
    }
    return {
      slug: 'archive-' + postType.slug,
      description: (0,external_wp_i18n_namespaceObject.sprintf)(
      // translators: %s: Name of the post type e.g: "Post".
      (0,external_wp_i18n_namespaceObject.__)('Displays an archive with the latest posts of type: %s.'), postType.labels.singular_name),
      title,
      // `icon` is the `menu_icon` property of a post type. We
      // only handle `dashicons` for now, even if the `menu_icon`
      // also supports urls and svg as values.
      icon: postType.icon?.startsWith('dashicons-') ? postType.icon.slice(10) : library_archive,
      templatePrefix: 'archive'
    };
  }) || [], [postTypesWithArchives, existingTemplates, needsUniqueIdentifier]);
}
const usePostTypeMenuItems = onClickMenuItem => {
  const publicPostTypes = usePublicPostTypes();
  const existingTemplates = useExistingTemplates();
  const defaultTemplateTypes = useDefaultTemplateTypes();
  const needsUniqueIdentifier = usePostTypeNeedsUniqueIdentifier(publicPostTypes);
  // `page`is a special case in template hierarchy.
  const templatePrefixes = (0,external_wp_element_namespaceObject.useMemo)(() => publicPostTypes?.reduce((accumulator, {
    slug
  }) => {
    let suffix = slug;
    if (slug !== 'page') {
      suffix = `single-${suffix}`;
    }
    accumulator[slug] = suffix;
    return accumulator;
  }, {}), [publicPostTypes]);
  const postTypesInfo = useEntitiesInfo('postType', templatePrefixes);
  const existingTemplateSlugs = (existingTemplates || []).map(({
    slug
  }) => slug);
  const menuItems = (publicPostTypes || []).reduce((accumulator, postType) => {
    const {
      slug,
      labels,
      icon
    } = postType;
    // We need to check if the general template is part of the
    // defaultTemplateTypes. If it is, just use that info and
    // augment it with the specific template functionality.
    const generalTemplateSlug = templatePrefixes[slug];
    const defaultTemplateType = defaultTemplateTypes?.find(({
      slug: _slug
    }) => _slug === generalTemplateSlug);
    const hasGeneralTemplate = existingTemplateSlugs?.includes(generalTemplateSlug);
    const _needsUniqueIdentifier = needsUniqueIdentifier(postType);
    let menuItemTitle = (0,external_wp_i18n_namespaceObject.sprintf)(
    // translators: %s: Name of the post type e.g: "Post".
    (0,external_wp_i18n_namespaceObject.__)('Single item: %s'), labels.singular_name);
    if (_needsUniqueIdentifier) {
      menuItemTitle = (0,external_wp_i18n_namespaceObject.sprintf)(
      // translators: %1s: Name of the post type e.g: "Post"; %2s: Slug of the post type e.g: "book".
      (0,external_wp_i18n_namespaceObject.__)('Single item: %1$s (%2$s)'), labels.singular_name, slug);
    }
    const menuItem = defaultTemplateType ? {
      ...defaultTemplateType,
      templatePrefix: templatePrefixes[slug]
    } : {
      slug: generalTemplateSlug,
      title: menuItemTitle,
      description: (0,external_wp_i18n_namespaceObject.sprintf)(
      // translators: %s: Name of the post type e.g: "Post".
      (0,external_wp_i18n_namespaceObject.__)('Displays a single item: %s.'), labels.singular_name),
      // `icon` is the `menu_icon` property of a post type. We
      // only handle `dashicons` for now, even if the `menu_icon`
      // also supports urls and svg as values.
      icon: icon?.startsWith('dashicons-') ? icon.slice(10) : library_post,
      templatePrefix: templatePrefixes[slug]
    };
    const hasEntities = postTypesInfo?.[slug]?.hasEntities;
    // We have a different template creation flow only if they have entities.
    if (hasEntities) {
      menuItem.onClick = template => {
        onClickMenuItem({
          type: 'postType',
          slug,
          config: {
            recordNamePath: 'title.rendered',
            queryArgs: ({
              search
            }) => {
              return {
                _fields: 'id,title,slug,link',
                orderBy: search ? 'relevance' : 'modified',
                exclude: postTypesInfo[slug].existingEntitiesIds
              };
            },
            getSpecificTemplate: suggestion => {
              const templateSlug = `${templatePrefixes[slug]}-${suggestion.slug}`;
              return {
                title: templateSlug,
                slug: templateSlug,
                templatePrefix: templatePrefixes[slug]
              };
            }
          },
          labels,
          hasGeneralTemplate,
          template
        });
      };
    }
    // We don't need to add the menu item if there are no
    // entities and the general template exists.
    if (!hasGeneralTemplate || hasEntities) {
      accumulator.push(menuItem);
    }
    return accumulator;
  }, []);
  // Split menu items into two groups: one for the default post types
  // and one for the rest.
  const postTypesMenuItems = (0,external_wp_element_namespaceObject.useMemo)(() => menuItems.reduce((accumulator, postType) => {
    const {
      slug
    } = postType;
    let key = 'postTypesMenuItems';
    if (slug === 'page') {
      key = 'defaultPostTypesMenuItems';
    }
    accumulator[key].push(postType);
    return accumulator;
  }, {
    defaultPostTypesMenuItems: [],
    postTypesMenuItems: []
  }), [menuItems]);
  return postTypesMenuItems;
};
const useTaxonomiesMenuItems = onClickMenuItem => {
  const publicTaxonomies = usePublicTaxonomies();
  const existingTemplates = useExistingTemplates();
  const defaultTemplateTypes = useDefaultTemplateTypes();
  // `category` and `post_tag` are special cases in template hierarchy.
  const templatePrefixes = (0,external_wp_element_namespaceObject.useMemo)(() => publicTaxonomies?.reduce((accumulator, {
    slug
  }) => {
    let suffix = slug;
    if (!['category', 'post_tag'].includes(slug)) {
      suffix = `taxonomy-${suffix}`;
    }
    if (slug === 'post_tag') {
      suffix = `tag`;
    }
    accumulator[slug] = suffix;
    return accumulator;
  }, {}), [publicTaxonomies]);
  // We need to keep track of naming conflicts. If a conflict
  // occurs, we need to add slug.
  const taxonomyLabels = publicTaxonomies?.reduce((accumulator, {
    labels
  }) => {
    const singularName = labels.singular_name.toLowerCase();
    accumulator[singularName] = (accumulator[singularName] || 0) + 1;
    return accumulator;
  }, {});
  const needsUniqueIdentifier = (labels, slug) => {
    if (['category', 'post_tag'].includes(slug)) {
      return false;
    }
    const singularName = labels.singular_name.toLowerCase();
    return taxonomyLabels[singularName] > 1 && singularName !== slug;
  };
  const taxonomiesInfo = useEntitiesInfo('taxonomy', templatePrefixes);
  const existingTemplateSlugs = (existingTemplates || []).map(({
    slug
  }) => slug);
  const menuItems = (publicTaxonomies || []).reduce((accumulator, taxonomy) => {
    const {
      slug,
      labels
    } = taxonomy;
    // We need to check if the general template is part of the
    // defaultTemplateTypes. If it is, just use that info and
    // augment it with the specific template functionality.
    const generalTemplateSlug = templatePrefixes[slug];
    const defaultTemplateType = defaultTemplateTypes?.find(({
      slug: _slug
    }) => _slug === generalTemplateSlug);
    const hasGeneralTemplate = existingTemplateSlugs?.includes(generalTemplateSlug);
    const _needsUniqueIdentifier = needsUniqueIdentifier(labels, slug);
    let menuItemTitle = labels.singular_name;
    if (_needsUniqueIdentifier) {
      menuItemTitle = (0,external_wp_i18n_namespaceObject.sprintf)(
      // translators: %1s: Name of the taxonomy e.g: "Category"; %2s: Slug of the taxonomy e.g: "product_cat".
      (0,external_wp_i18n_namespaceObject.__)('%1$s (%2$s)'), labels.singular_name, slug);
    }
    const menuItem = defaultTemplateType ? {
      ...defaultTemplateType,
      templatePrefix: templatePrefixes[slug]
    } : {
      slug: generalTemplateSlug,
      title: menuItemTitle,
      description: (0,external_wp_i18n_namespaceObject.sprintf)(
      // translators: %s: Name of the taxonomy e.g: "Product Categories".
      (0,external_wp_i18n_namespaceObject.__)('Displays taxonomy: %s.'), labels.singular_name),
      icon: block_meta,
      templatePrefix: templatePrefixes[slug]
    };
    const hasEntities = taxonomiesInfo?.[slug]?.hasEntities;
    // We have a different template creation flow only if they have entities.
    if (hasEntities) {
      menuItem.onClick = template => {
        onClickMenuItem({
          type: 'taxonomy',
          slug,
          config: {
            queryArgs: ({
              search
            }) => {
              return {
                _fields: 'id,name,slug,link',
                orderBy: search ? 'name' : 'count',
                exclude: taxonomiesInfo[slug].existingEntitiesIds
              };
            },
            getSpecificTemplate: suggestion => {
              const templateSlug = `${templatePrefixes[slug]}-${suggestion.slug}`;
              return {
                title: templateSlug,
                slug: templateSlug,
                templatePrefix: templatePrefixes[slug]
              };
            }
          },
          labels,
          hasGeneralTemplate,
          template
        });
      };
    }
    // We don't need to add the menu item if there are no
    // entities and the general template exists.
    if (!hasGeneralTemplate || hasEntities) {
      accumulator.push(menuItem);
    }
    return accumulator;
  }, []);
  // Split menu items into two groups: one for the default taxonomies
  // and one for the rest.
  const taxonomiesMenuItems = (0,external_wp_element_namespaceObject.useMemo)(() => menuItems.reduce((accumulator, taxonomy) => {
    const {
      slug
    } = taxonomy;
    let key = 'taxonomiesMenuItems';
    if (['category', 'tag'].includes(slug)) {
      key = 'defaultTaxonomiesMenuItems';
    }
    accumulator[key].push(taxonomy);
    return accumulator;
  }, {
    defaultTaxonomiesMenuItems: [],
    taxonomiesMenuItems: []
  }), [menuItems]);
  return taxonomiesMenuItems;
};
const USE_AUTHOR_MENU_ITEM_TEMPLATE_PREFIX = {
  user: 'author'
};
const USE_AUTHOR_MENU_ITEM_QUERY_PARAMETERS = {
  user: {
    who: 'authors'
  }
};
function useAuthorMenuItem(onClickMenuItem) {
  const existingTemplates = useExistingTemplates();
  const defaultTemplateTypes = useDefaultTemplateTypes();
  const authorInfo = useEntitiesInfo('root', USE_AUTHOR_MENU_ITEM_TEMPLATE_PREFIX, USE_AUTHOR_MENU_ITEM_QUERY_PARAMETERS);
  let authorMenuItem = defaultTemplateTypes?.find(({
    slug
  }) => slug === 'author');
  if (!authorMenuItem) {
    authorMenuItem = {
      description: (0,external_wp_i18n_namespaceObject.__)('Displays latest posts written by a single author.'),
      slug: 'author',
      title: 'Author'
    };
  }
  const hasGeneralTemplate = !!existingTemplates?.find(({
    slug
  }) => slug === 'author');
  if (authorInfo.user?.hasEntities) {
    authorMenuItem = {
      ...authorMenuItem,
      templatePrefix: 'author'
    };
    authorMenuItem.onClick = template => {
      onClickMenuItem({
        type: 'root',
        slug: 'user',
        config: {
          queryArgs: ({
            search
          }) => {
            return {
              _fields: 'id,name,slug,link',
              orderBy: search ? 'name' : 'registered_date',
              exclude: authorInfo.user.existingEntitiesIds,
              who: 'authors'
            };
          },
          getSpecificTemplate: suggestion => {
            const templateSlug = `author-${suggestion.slug}`;
            return {
              title: templateSlug,
              slug: templateSlug,
              templatePrefix: 'author'
            };
          }
        },
        labels: {
          singular_name: (0,external_wp_i18n_namespaceObject.__)('Author'),
          search_items: (0,external_wp_i18n_namespaceObject.__)('Search Authors'),
          not_found: (0,external_wp_i18n_namespaceObject.__)('No authors found.'),
          all_items: (0,external_wp_i18n_namespaceObject.__)('All Authors')
        },
        hasGeneralTemplate,
        template
      });
    };
  }
  if (!hasGeneralTemplate || authorInfo.user?.hasEntities) {
    return authorMenuItem;
  }
}

/**
 * Helper hook that filters all the existing templates by the given
 * object with the entity's slug as key and the template prefix as value.
 *
 * Example:
 * `existingTemplates` is: [ { slug: 'tag-apple' }, { slug: 'page-about' }, { slug: 'tag' } ]
 * `templatePrefixes` is: { post_tag: 'tag' }
 * It will return: { post_tag: ['apple'] }
 *
 * Note: We append the `-` to the given template prefix in this function for our checks.
 *
 * @param {Record<string,string>} templatePrefixes An object with the entity's slug as key and the template prefix as value.
 * @return {Record<string,string[]>} An object with the entity's slug as key and an array with the existing template slugs as value.
 */
const useExistingTemplateSlugs = templatePrefixes => {
  const existingTemplates = useExistingTemplates();
  const existingSlugs = (0,external_wp_element_namespaceObject.useMemo)(() => {
    return Object.entries(templatePrefixes || {}).reduce((accumulator, [slug, prefix]) => {
      const slugsWithTemplates = (existingTemplates || []).reduce((_accumulator, existingTemplate) => {
        const _prefix = `${prefix}-`;
        if (existingTemplate.slug.startsWith(_prefix)) {
          _accumulator.push(existingTemplate.slug.substring(_prefix.length));
        }
        return _accumulator;
      }, []);
      if (slugsWithTemplates.length) {
        accumulator[slug] = slugsWithTemplates;
      }
      return accumulator;
    }, {});
  }, [templatePrefixes, existingTemplates]);
  return existingSlugs;
};

/**
 * Helper hook that finds the existing records with an associated template,
 * as they need to be excluded from the template suggestions.
 *
 * @param {string}                entityName                The entity's name.
 * @param {Record<string,string>} templatePrefixes          An object with the entity's slug as key and the template prefix as value.
 * @param {Record<string,Object>} additionalQueryParameters An object with the entity's slug as key and additional query parameters as value.
 * @return {Record<string,EntitiesInfo>} An object with the entity's slug as key and the existing records as value.
 */
const useTemplatesToExclude = (entityName, templatePrefixes, additionalQueryParameters = {}) => {
  const slugsToExcludePerEntity = useExistingTemplateSlugs(templatePrefixes);
  const recordsToExcludePerEntity = (0,external_wp_data_namespaceObject.useSelect)(select => {
    return Object.entries(slugsToExcludePerEntity || {}).reduce((accumulator, [slug, slugsWithTemplates]) => {
      const entitiesWithTemplates = select(external_wp_coreData_namespaceObject.store).getEntityRecords(entityName, slug, {
        _fields: 'id',
        context: 'view',
        slug: slugsWithTemplates,
        ...additionalQueryParameters[slug]
      });
      if (entitiesWithTemplates?.length) {
        accumulator[slug] = entitiesWithTemplates;
      }
      return accumulator;
    }, {});
  }, [slugsToExcludePerEntity]);
  return recordsToExcludePerEntity;
};

/**
 * Helper hook that returns information about an entity having
 * records that we can create a specific template for.
 *
 * For example we can search for `terms` in `taxonomy` entity or
 * `posts` in `postType` entity.
 *
 * First we need to find the existing records with an associated template,
 * to query afterwards for any remaining record, by excluding them.
 *
 * @param {string}                entityName                The entity's name.
 * @param {Record<string,string>} templatePrefixes          An object with the entity's slug as key and the template prefix as value.
 * @param {Record<string,Object>} additionalQueryParameters An object with the entity's slug as key and additional query parameters as value.
 * @return {Record<string,EntitiesInfo>} An object with the entity's slug as key and the EntitiesInfo as value.
 */
const useEntitiesInfo = (entityName, templatePrefixes, additionalQueryParameters = {}) => {
  const recordsToExcludePerEntity = useTemplatesToExclude(entityName, templatePrefixes, additionalQueryParameters);
  const entitiesInfo = (0,external_wp_data_namespaceObject.useSelect)(select => {
    return Object.keys(templatePrefixes || {}).reduce((accumulator, slug) => {
      const existingEntitiesIds = recordsToExcludePerEntity?.[slug]?.map(({
        id
      }) => id) || [];
      accumulator[slug] = {
        hasEntities: !!select(external_wp_coreData_namespaceObject.store).getEntityRecords(entityName, slug, {
          per_page: 1,
          _fields: 'id',
          context: 'view',
          exclude: existingEntitiesIds,
          ...additionalQueryParameters[slug]
        })?.length,
        existingEntitiesIds
      };
      return accumulator;
    }, {});
  }, [templatePrefixes, recordsToExcludePerEntity]);
  return entitiesInfo;
};

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/add-new-template/add-custom-template-modal-content.js

/**
 * WordPress dependencies
 */







/**
 * Internal dependencies
 */


const {
  CompositeV2: add_custom_template_modal_content_Composite,
  CompositeItemV2: add_custom_template_modal_content_CompositeItem,
  useCompositeStoreV2: add_custom_template_modal_content_useCompositeStore
} = unlock(external_wp_components_namespaceObject.privateApis);
const add_custom_template_modal_content_EMPTY_ARRAY = [];
function SuggestionListItem({
  suggestion,
  search,
  onSelect,
  entityForSuggestions
}) {
  const baseCssClass = 'edit-site-custom-template-modal__suggestions_list__list-item';
  return (0,external_React_.createElement)(add_custom_template_modal_content_CompositeItem, {
    render: (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
      role: "option",
      className: baseCssClass,
      onClick: () => onSelect(entityForSuggestions.config.getSpecificTemplate(suggestion))
    })
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    size: "body",
    lineHeight: 1.53846153846 // 20px
    ,
    weight: 500,
    className: `${baseCssClass}__title`
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.TextHighlight, {
    text: (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(suggestion.name),
    highlight: search
  })), suggestion.link && (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    size: "body",
    lineHeight: 1.53846153846 // 20px
    ,
    className: `${baseCssClass}__info`
  }, suggestion.link));
}
function useSearchSuggestions(entityForSuggestions, search) {
  const {
    config
  } = entityForSuggestions;
  const query = (0,external_wp_element_namespaceObject.useMemo)(() => ({
    order: 'asc',
    context: 'view',
    search,
    per_page: search ? 20 : 10,
    ...config.queryArgs(search)
  }), [search, config]);
  const {
    records: searchResults,
    hasResolved: searchHasResolved
  } = (0,external_wp_coreData_namespaceObject.useEntityRecords)(entityForSuggestions.type, entityForSuggestions.slug, query);
  const [suggestions, setSuggestions] = (0,external_wp_element_namespaceObject.useState)(add_custom_template_modal_content_EMPTY_ARRAY);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    if (!searchHasResolved) return;
    let newSuggestions = add_custom_template_modal_content_EMPTY_ARRAY;
    if (searchResults?.length) {
      newSuggestions = searchResults;
      if (config.recordNamePath) {
        newSuggestions = mapToIHasNameAndId(newSuggestions, config.recordNamePath);
      }
    }
    // Update suggestions only when the query has resolved, so as to keep
    // the previous results in the UI.
    setSuggestions(newSuggestions);
  }, [searchResults, searchHasResolved]);
  return suggestions;
}
function SuggestionList({
  entityForSuggestions,
  onSelect
}) {
  const composite = add_custom_template_modal_content_useCompositeStore({
    orientation: 'vertical'
  });
  const [search, setSearch, debouncedSearch] = (0,external_wp_compose_namespaceObject.useDebouncedInput)();
  const suggestions = useSearchSuggestions(entityForSuggestions, debouncedSearch);
  const {
    labels
  } = entityForSuggestions;
  const [showSearchControl, setShowSearchControl] = (0,external_wp_element_namespaceObject.useState)(false);
  if (!showSearchControl && suggestions?.length > 9) {
    setShowSearchControl(true);
  }
  return (0,external_React_.createElement)(external_React_.Fragment, null, showSearchControl && (0,external_React_.createElement)(external_wp_components_namespaceObject.SearchControl, {
    __nextHasNoMarginBottom: true,
    onChange: setSearch,
    value: search,
    label: labels.search_items,
    placeholder: labels.search_items
  }), !!suggestions?.length && (0,external_React_.createElement)(add_custom_template_modal_content_Composite, {
    store: composite,
    role: "listbox",
    className: "edit-site-custom-template-modal__suggestions_list",
    "aria-label": (0,external_wp_i18n_namespaceObject.__)('Suggestions list')
  }, suggestions.map(suggestion => (0,external_React_.createElement)(SuggestionListItem, {
    key: suggestion.slug,
    suggestion: suggestion,
    search: debouncedSearch,
    onSelect: onSelect,
    entityForSuggestions: entityForSuggestions
  }))), debouncedSearch && !suggestions?.length && (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    as: "p",
    className: "edit-site-custom-template-modal__no-results"
  }, labels.not_found));
}
function AddCustomTemplateModalContent({
  onSelect,
  entityForSuggestions
}) {
  const [showSearchEntities, setShowSearchEntities] = (0,external_wp_element_namespaceObject.useState)(entityForSuggestions.hasGeneralTemplate);
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    spacing: 4,
    className: "edit-site-custom-template-modal__contents-wrapper",
    alignment: "left"
  }, !showSearchEntities && (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    as: "p"
  }, (0,external_wp_i18n_namespaceObject.__)('Select whether to create a single template for all items or a specific one.')), (0,external_React_.createElement)(external_wp_components_namespaceObject.Flex, {
    className: "edit-site-custom-template-modal__contents",
    gap: "4",
    align: "initial"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.FlexItem, {
    isBlock: true,
    as: external_wp_components_namespaceObject.Button,
    onClick: () => {
      const {
        slug,
        title,
        description,
        templatePrefix
      } = entityForSuggestions.template;
      onSelect({
        slug,
        title,
        description,
        templatePrefix
      });
    }
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    as: "span",
    weight: 500,
    lineHeight: 1.53846153846 // 20px
  }, entityForSuggestions.labels.all_items), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    as: "span",
    lineHeight: 1.53846153846 // 20px
  },
  // translators: The user is given the choice to set up a template for all items of a post type or taxonomy, or just a specific one.
  (0,external_wp_i18n_namespaceObject.__)('For all items'))), (0,external_React_.createElement)(external_wp_components_namespaceObject.FlexItem, {
    isBlock: true,
    as: external_wp_components_namespaceObject.Button,
    onClick: () => {
      setShowSearchEntities(true);
    }
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    as: "span",
    weight: 500,
    lineHeight: 1.53846153846 // 20px
  }, entityForSuggestions.labels.singular_name), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    as: "span",
    lineHeight: 1.53846153846 // 20px
  },
  // translators: The user is given the choice to set up a template for all items of a post type or taxonomy, or just a specific one.
  (0,external_wp_i18n_namespaceObject.__)('For a specific item'))))), showSearchEntities && (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    as: "p"
  }, (0,external_wp_i18n_namespaceObject.__)('This template will be used only for the specific item chosen.')), (0,external_React_.createElement)(SuggestionList, {
    entityForSuggestions: entityForSuggestions,
    onSelect: onSelect
  })));
}
/* harmony default export */ const add_custom_template_modal_content = (AddCustomTemplateModalContent);

;// CONCATENATED MODULE: ./node_modules/tslib/tslib.es6.mjs
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */

var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() { this.constructor = d; }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
  __assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
  }
  return __assign.apply(this, arguments);
}

function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
      }
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) { decorator(target, key, paramIndex); }
}

function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
      var context = {};
      for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
      for (var p in contextIn.access) context.access[p] = contextIn.access[p];
      context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
      var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
      if (kind === "accessor") {
          if (result === void 0) continue;
          if (result === null || typeof result !== "object") throw new TypeError("Object expected");
          if (_ = accept(result.get)) descriptor.get = _;
          if (_ = accept(result.set)) descriptor.set = _;
          if (_ = accept(result.init)) initializers.unshift(_);
      }
      else if (_ = accept(result)) {
          if (kind === "field") initializers.unshift(_);
          else descriptor[key] = _;
      }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
};

function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
};

function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
};

function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};

function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
  return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
      function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
  function verb(n) { return function (v) { return step([n, v]); }; }
  function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
              case 0: case 1: t = op; break;
              case 4: _.label++; return { value: op[1], done: false };
              case 5: _.label++; y = op[1]; op = [0]; continue;
              case 7: op = _.ops.pop(); _.trys.pop(); continue;
              default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                  if (t[2]) _.ops.pop();
                  _.trys.pop(); continue;
          }
          op = body.call(thisArg, _);
      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
  }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
  }
  Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
      next: function () {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
      }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  }
  catch (error) { e = { error: error }; }
  finally {
      try {
          if (r && !r.done && (m = i["return"])) m.call(i);
      }
      finally { if (e) throw e.error; }
  }
  return ar;
}

/** @deprecated */
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
      ar = ar.concat(__read(arguments[i]));
  return ar;
}

/** @deprecated */
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
  return r;
}

function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
      }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
  function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
  function fulfill(value) { resume("next", value); }
  function reject(value) { resume("throw", value); }
  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
  return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
  o["default"] = v;
};

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
}

function __importDefault(mod) {
  return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}

function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
    var dispose;
    if (async) {
        if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
        dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
        if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
        dispose = value[Symbol.dispose];
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    env.stack.push({ value: value, dispose: dispose, async: async });
  }
  else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}

var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  function next() {
    while (env.stack.length) {
      var rec = env.stack.pop();
      try {
        var result = rec.dispose && rec.dispose.call(rec.value);
        if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
      }
      catch (e) {
          fail(e);
      }
    }
    if (env.hasError) throw env.error;
  }
  return next();
}

/* harmony default export */ const tslib_es6 = ({
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __metadata,
  __awaiter,
  __generator,
  __createBinding,
  __exportStar,
  __values,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn,
  __addDisposableResource,
  __disposeResources,
});

;// CONCATENATED MODULE: ./node_modules/lower-case/dist.es2015/index.js
/**
 * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt
 */
var SUPPORTED_LOCALE = {
    tr: {
        regexp: /\u0130|\u0049|\u0049\u0307/g,
        map: {
            İ: "\u0069",
            I: "\u0131",
            İ: "\u0069",
        },
    },
    az: {
        regexp: /\u0130/g,
        map: {
            İ: "\u0069",
            I: "\u0131",
            İ: "\u0069",
        },
    },
    lt: {
        regexp: /\u0049|\u004A|\u012E|\u00CC|\u00CD|\u0128/g,
        map: {
            I: "\u0069\u0307",
            J: "\u006A\u0307",
            Į: "\u012F\u0307",
            Ì: "\u0069\u0307\u0300",
            Í: "\u0069\u0307\u0301",
            Ĩ: "\u0069\u0307\u0303",
        },
    },
};
/**
 * Localized lower case.
 */
function localeLowerCase(str, locale) {
    var lang = SUPPORTED_LOCALE[locale.toLowerCase()];
    if (lang)
        return lowerCase(str.replace(lang.regexp, function (m) { return lang.map[m]; }));
    return lowerCase(str);
}
/**
 * Lower case as a function.
 */
function lowerCase(str) {
    return str.toLowerCase();
}

;// CONCATENATED MODULE: ./node_modules/no-case/dist.es2015/index.js

// Support camel case ("camelCase" -> "camel Case" and "CAMELCase" -> "CAMEL Case").
var DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];
// Remove all non-word characters.
var DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;
/**
 * Normalize the string into something other libraries can manipulate easier.
 */
function noCase(input, options) {
    if (options === void 0) { options = {}; }
    var _a = options.splitRegexp, splitRegexp = _a === void 0 ? DEFAULT_SPLIT_REGEXP : _a, _b = options.stripRegexp, stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b, _c = options.transform, transform = _c === void 0 ? lowerCase : _c, _d = options.delimiter, delimiter = _d === void 0 ? " " : _d;
    var result = replace(replace(input, splitRegexp, "$1\0$2"), stripRegexp, "\0");
    var start = 0;
    var end = result.length;
    // Trim the delimiter from around the output string.
    while (result.charAt(start) === "\0")
        start++;
    while (result.charAt(end - 1) === "\0")
        end--;
    // Transform each token independently.
    return result.slice(start, end).split("\0").map(transform).join(delimiter);
}
/**
 * Replace `re` in the input string with the replacement value.
 */
function replace(input, re, value) {
    if (re instanceof RegExp)
        return input.replace(re, value);
    return re.reduce(function (input, re) { return input.replace(re, value); }, input);
}

;// CONCATENATED MODULE: ./node_modules/dot-case/dist.es2015/index.js


function dotCase(input, options) {
    if (options === void 0) { options = {}; }
    return noCase(input, __assign({ delimiter: "." }, options));
}

;// CONCATENATED MODULE: ./node_modules/param-case/dist.es2015/index.js


function paramCase(input, options) {
    if (options === void 0) { options = {}; }
    return dotCase(input, __assign({ delimiter: "-" }, options));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/add-new-template/add-custom-generic-template-modal-content.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */



function AddCustomGenericTemplateModalContent({
  onClose,
  createTemplate
}) {
  const [title, setTitle] = (0,external_wp_element_namespaceObject.useState)('');
  const defaultTitle = (0,external_wp_i18n_namespaceObject.__)('Custom Template');
  const [isBusy, setIsBusy] = (0,external_wp_element_namespaceObject.useState)(false);
  async function onCreateTemplate(event) {
    event.preventDefault();
    if (isBusy) {
      return;
    }
    setIsBusy(true);
    try {
      await createTemplate({
        slug: 'wp-custom-template-' + paramCase(title || defaultTitle),
        title: title || defaultTitle
      }, false);
    } finally {
      setIsBusy(false);
    }
  }
  return (0,external_React_.createElement)("form", {
    onSubmit: onCreateTemplate
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    spacing: 6
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.TextControl, {
    __nextHasNoMarginBottom: true,
    label: (0,external_wp_i18n_namespaceObject.__)('Name'),
    value: title,
    onChange: setTitle,
    placeholder: defaultTitle,
    disabled: isBusy,
    help: (0,external_wp_i18n_namespaceObject.__)('Describe the template, e.g. "Post with sidebar". A custom template can be manually applied to any post or page.')
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    className: "edit-site-custom-generic-template__modal-actions",
    justify: "right"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    variant: "tertiary",
    onClick: () => {
      onClose();
    }
  }, (0,external_wp_i18n_namespaceObject.__)('Cancel')), (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    variant: "primary",
    type: "submit",
    isBusy: isBusy,
    "aria-disabled": isBusy
  }, (0,external_wp_i18n_namespaceObject.__)('Create')))));
}
/* harmony default export */ const add_custom_generic_template_modal_content = (AddCustomGenericTemplateModalContent);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/add-new-template/template-actions-loading-screen.js

/**
 * WordPress dependencies
 */

function TemplateActionsLoadingScreen() {
  const baseCssClass = 'edit-site-template-actions-loading-screen-modal';
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Modal, {
    isFullScreen: true,
    isDismissible: false,
    shouldCloseOnClickOutside: false,
    shouldCloseOnEsc: false,
    onRequestClose: () => {},
    __experimentalHideHeader: true,
    className: baseCssClass
  }, (0,external_React_.createElement)("div", {
    className: `${baseCssClass}__content`
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Spinner, null)));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/add-new-template/new-template.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */










/**
 * Internal dependencies
 */


/**
 * Internal dependencies
 */





const {
  useHistory: new_template_useHistory
} = unlock(external_wp_router_namespaceObject.privateApis);
const DEFAULT_TEMPLATE_SLUGS = ['front-page', 'home', 'single', 'page', 'index', 'archive', 'author', 'category', 'date', 'tag', 'search', '404'];
const TEMPLATE_ICONS = {
  'front-page': library_home,
  home: library_verse,
  single: library_pin,
  page: library_page,
  archive: library_archive,
  search: library_search,
  404: not_found,
  index: library_list,
  category: library_category,
  author: comment_author_avatar,
  taxonomy: block_meta,
  date: library_calendar,
  tag: library_tag,
  attachment: library_media
};
function TemplateListItem({
  title,
  direction,
  className,
  description,
  icon,
  onClick,
  children
}) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    className: className,
    onClick: onClick,
    label: description,
    showTooltip: !!description
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Flex, {
    as: "span",
    spacing: 2,
    align: "center",
    justify: "center",
    style: {
      width: '100%'
    },
    direction: direction
  }, (0,external_React_.createElement)("div", {
    className: "edit-site-add-new-template__template-icon"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Icon, {
    icon: icon
  })), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    className: "edit-site-add-new-template__template-name",
    alignment: "center",
    spacing: 0
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    weight: 500,
    lineHeight: 1.53846153846 // 20px
  }, title), children)));
}
const modalContentMap = {
  templatesList: 1,
  customTemplate: 2,
  customGenericTemplate: 3
};
function NewTemplate({
  postType,
  toggleProps,
  showIcon = true
}) {
  const [showModal, setShowModal] = (0,external_wp_element_namespaceObject.useState)(false);
  const [modalContent, setModalContent] = (0,external_wp_element_namespaceObject.useState)(modalContentMap.templatesList);
  const [entityForSuggestions, setEntityForSuggestions] = (0,external_wp_element_namespaceObject.useState)({});
  const [isCreatingTemplate, setIsCreatingTemplate] = (0,external_wp_element_namespaceObject.useState)(false);
  const history = new_template_useHistory();
  const {
    saveEntityRecord
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_coreData_namespaceObject.store);
  const {
    createErrorNotice,
    createSuccessNotice
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_notices_namespaceObject.store);
  const {
    homeUrl
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getUnstableBase // Site index.
    } = select(external_wp_coreData_namespaceObject.store);
    return {
      homeUrl: getUnstableBase()?.home
    };
  }, []);
  const TEMPLATE_SHORT_DESCRIPTIONS = {
    'front-page': homeUrl,
    date: (0,external_wp_i18n_namespaceObject.sprintf)(
    // translators: %s: The homepage url.
    (0,external_wp_i18n_namespaceObject.__)('E.g. %s'), homeUrl + '/' + new Date().getFullYear())
  };
  async function createTemplate(template, isWPSuggestion = true) {
    if (isCreatingTemplate) {
      return;
    }
    setIsCreatingTemplate(true);
    try {
      const {
        title,
        description,
        slug
      } = template;
      const newTemplate = await saveEntityRecord('postType', constants_TEMPLATE_POST_TYPE, {
        description,
        // Slugs need to be strings, so this is for template `404`
        slug: slug.toString(),
        status: 'publish',
        title,
        // This adds a post meta field in template that is part of `is_custom` value calculation.
        is_wp_suggestion: isWPSuggestion
      }, {
        throwOnError: true
      });

      // Navigate to the created template editor.
      history.push({
        postId: newTemplate.id,
        postType: newTemplate.type,
        canvas: 'edit'
      });
      createSuccessNotice((0,external_wp_i18n_namespaceObject.sprintf)(
      // translators: %s: Title of the created template e.g: "Category".
      (0,external_wp_i18n_namespaceObject.__)('"%s" successfully created.'), (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(newTemplate.title?.rendered || title)), {
        type: 'snackbar'
      });
    } catch (error) {
      const errorMessage = error.message && error.code !== 'unknown_error' ? error.message : (0,external_wp_i18n_namespaceObject.__)('An error occurred while creating the template.');
      createErrorNotice(errorMessage, {
        type: 'snackbar'
      });
    } finally {
      setIsCreatingTemplate(false);
    }
  }
  const onModalClose = () => {
    setShowModal(false);
    setModalContent(modalContentMap.templatesList);
  };
  const missingTemplates = useMissingTemplates(setEntityForSuggestions, () => setModalContent(modalContentMap.customTemplate));
  if (!missingTemplates.length) {
    return null;
  }
  const {
    as: Toggle = external_wp_components_namespaceObject.Button,
    ...restToggleProps
  } = toggleProps !== null && toggleProps !== void 0 ? toggleProps : {};
  let modalTitle = (0,external_wp_i18n_namespaceObject.__)('Add template');
  if (modalContent === modalContentMap.customTemplate) {
    modalTitle = (0,external_wp_i18n_namespaceObject.sprintf)(
    // translators: %s: Name of the post type e.g: "Post".
    (0,external_wp_i18n_namespaceObject.__)('Add template: %s'), entityForSuggestions.labels.singular_name);
  } else if (modalContent === modalContentMap.customGenericTemplate) {
    modalTitle = (0,external_wp_i18n_namespaceObject.__)('Create custom template');
  }
  return (0,external_React_.createElement)(external_React_.Fragment, null, isCreatingTemplate && (0,external_React_.createElement)(TemplateActionsLoadingScreen, null), (0,external_React_.createElement)(Toggle, {
    ...restToggleProps,
    onClick: () => setShowModal(true),
    icon: showIcon ? library_plus : null,
    label: postType.labels.add_new_item
  }, showIcon ? null : postType.labels.add_new_item), showModal && (0,external_React_.createElement)(external_wp_components_namespaceObject.Modal, {
    title: modalTitle,
    className: classnames_default()('edit-site-add-new-template__modal', {
      'edit-site-add-new-template__modal_template_list': modalContent === modalContentMap.templatesList,
      'edit-site-custom-template-modal': modalContent === modalContentMap.customTemplate
    }),
    onRequestClose: onModalClose,
    overlayClassName: modalContent === modalContentMap.customGenericTemplate ? 'edit-site-custom-generic-template__modal' : undefined
  }, modalContent === modalContentMap.templatesList && (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalGrid, {
    columns: 3,
    gap: 4,
    align: "flex-start",
    justify: "center",
    className: "edit-site-add-new-template__template-list__contents"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Flex, {
    className: "edit-site-add-new-template__template-list__prompt"
  }, (0,external_wp_i18n_namespaceObject.__)('Select what the new template should apply to:')), missingTemplates.map(template => {
    const {
      title,
      slug,
      onClick
    } = template;
    return (0,external_React_.createElement)(TemplateListItem, {
      key: slug,
      title: title,
      direction: "column",
      className: "edit-site-add-new-template__template-button",
      description: TEMPLATE_SHORT_DESCRIPTIONS[slug],
      icon: TEMPLATE_ICONS[slug] || library_layout,
      onClick: () => onClick ? onClick(template) : createTemplate(template)
    });
  }), (0,external_React_.createElement)(TemplateListItem, {
    title: (0,external_wp_i18n_namespaceObject.__)('Custom template'),
    direction: "row",
    className: "edit-site-add-new-template__custom-template-button",
    icon: edit,
    onClick: () => setModalContent(modalContentMap.customGenericTemplate)
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    lineHeight: 1.53846153846 // 20px
  }, (0,external_wp_i18n_namespaceObject.__)('A custom template can be manually applied to any post or page.')))), modalContent === modalContentMap.customTemplate && (0,external_React_.createElement)(add_custom_template_modal_content, {
    onSelect: createTemplate,
    entityForSuggestions: entityForSuggestions
  }), modalContent === modalContentMap.customGenericTemplate && (0,external_React_.createElement)(add_custom_generic_template_modal_content, {
    onClose: onModalClose,
    createTemplate: createTemplate
  })));
}
function useMissingTemplates(setEntityForSuggestions, onClick) {
  const existingTemplates = useExistingTemplates();
  const defaultTemplateTypes = useDefaultTemplateTypes();
  const existingTemplateSlugs = (existingTemplates || []).map(({
    slug
  }) => slug);
  const missingDefaultTemplates = (defaultTemplateTypes || []).filter(template => DEFAULT_TEMPLATE_SLUGS.includes(template.slug) && !existingTemplateSlugs.includes(template.slug));
  const onClickMenuItem = _entityForSuggestions => {
    onClick?.();
    setEntityForSuggestions(_entityForSuggestions);
  };
  // We need to replace existing default template types with
  // the create specific template functionality. The original
  // info (title, description, etc.) is preserved in the
  // used hooks.
  const enhancedMissingDefaultTemplateTypes = [...missingDefaultTemplates];
  const {
    defaultTaxonomiesMenuItems,
    taxonomiesMenuItems
  } = useTaxonomiesMenuItems(onClickMenuItem);
  const {
    defaultPostTypesMenuItems,
    postTypesMenuItems
  } = usePostTypeMenuItems(onClickMenuItem);
  const authorMenuItem = useAuthorMenuItem(onClickMenuItem);
  [...defaultTaxonomiesMenuItems, ...defaultPostTypesMenuItems, authorMenuItem].forEach(menuItem => {
    if (!menuItem) {
      return;
    }
    const matchIndex = enhancedMissingDefaultTemplateTypes.findIndex(template => template.slug === menuItem.slug);
    // Some default template types might have been filtered above from
    // `missingDefaultTemplates` because they only check for the general
    // template. So here we either replace or append the item, augmented
    // with the check if it has available specific item to create a
    // template for.
    if (matchIndex > -1) {
      enhancedMissingDefaultTemplateTypes[matchIndex] = menuItem;
    } else {
      enhancedMissingDefaultTemplateTypes.push(menuItem);
    }
  });
  // Update the sort order to match the DEFAULT_TEMPLATE_SLUGS order.
  enhancedMissingDefaultTemplateTypes?.sort((template1, template2) => {
    return DEFAULT_TEMPLATE_SLUGS.indexOf(template1.slug) - DEFAULT_TEMPLATE_SLUGS.indexOf(template2.slug);
  });
  const missingTemplates = [...enhancedMissingDefaultTemplateTypes, ...usePostTypeArchiveMenuItems(), ...postTypesMenuItems, ...taxonomiesMenuItems];
  return missingTemplates;
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/add-new-template/index.js

/**
 * WordPress dependencies
 */



/**
 * Internal dependencies
 */


function AddNewTemplate({
  templateType = constants_TEMPLATE_POST_TYPE,
  ...props
}) {
  const postType = (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_coreData_namespaceObject.store).getPostType(templateType), [templateType]);
  if (!postType) {
    return null;
  }
  if (templateType === constants_TEMPLATE_POST_TYPE) {
    return (0,external_React_.createElement)(NewTemplate, {
      ...props,
      postType: postType
    });
  }
  return null;
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-templates/index.js

/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */






const TemplateItem = ({
  postType,
  postId,
  ...props
}) => {
  const linkInfo = useLink({
    postType,
    postId
  });
  return (0,external_React_.createElement)(SidebarNavigationItem, {
    ...linkInfo,
    ...props
  });
};
function SidebarNavigationScreenTemplates() {
  const isMobileViewport = (0,external_wp_compose_namespaceObject.useViewportMatch)('medium', '<');
  const {
    records: templates,
    isResolving: isLoading
  } = (0,external_wp_coreData_namespaceObject.useEntityRecords)('postType', constants_TEMPLATE_POST_TYPE, {
    per_page: -1
  });
  const browseAllLink = useLink({
    path: '/wp_template/all'
  });
  const canCreate = !isMobileViewport;
  return (0,external_React_.createElement)(SidebarNavigationScreen, {
    title: (0,external_wp_i18n_namespaceObject.__)('Templates'),
    description: (0,external_wp_i18n_namespaceObject.__)('Express the layout of your site with templates.'),
    actions: canCreate && (0,external_React_.createElement)(AddNewTemplate, {
      templateType: constants_TEMPLATE_POST_TYPE,
      toggleProps: {
        as: SidebarButton
      }
    }),
    content: (0,external_React_.createElement)(external_React_.Fragment, null, isLoading && (0,external_wp_i18n_namespaceObject.__)('Loading templates…'), !isLoading && (0,external_React_.createElement)(SidebarTemplatesList, {
      templates: templates
    })),
    footer: !isMobileViewport && (0,external_React_.createElement)(SidebarNavigationItem, {
      withChevron: true,
      ...browseAllLink
    }, (0,external_wp_i18n_namespaceObject.__)('Manage all templates'))
  });
}
function TemplatesGroup({
  title,
  templates
}) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItemGroup, null, !!title && (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItem, {
    className: "edit-site-sidebar-navigation-screen-templates__templates-group-title"
  }, title), templates.map(template => (0,external_React_.createElement)(TemplateItem, {
    postType: constants_TEMPLATE_POST_TYPE,
    postId: template.id,
    key: template.id,
    withChevron: true
  }, (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(template.title?.rendered || template.slug))));
}
function SidebarTemplatesList({
  templates
}) {
  if (!templates?.length) {
    return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItemGroup, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItem, null, (0,external_wp_i18n_namespaceObject.__)('No templates found')));
  }
  const sortedTemplates = templates ? [...templates] : [];
  sortedTemplates.sort((a, b) => a.title.rendered.localeCompare(b.title.rendered));
  const {
    hierarchyTemplates,
    customTemplates,
    ...plugins
  } = sortedTemplates.reduce((accumulator, template) => {
    const {
      original_source: originalSource,
      author_text: authorText
    } = template;
    if (originalSource === 'plugin') {
      if (!accumulator[authorText]) {
        accumulator[authorText] = [];
      }
      accumulator[authorText].push(template);
    } else if (template.is_custom) {
      accumulator.customTemplates.push(template);
    } else {
      accumulator.hierarchyTemplates.push(template);
    }
    return accumulator;
  }, {
    hierarchyTemplates: [],
    customTemplates: []
  });
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    spacing: 3
  }, !!hierarchyTemplates.length && (0,external_React_.createElement)(TemplatesGroup, {
    templates: hierarchyTemplates
  }), !!customTemplates.length && (0,external_React_.createElement)(TemplatesGroup, {
    title: (0,external_wp_i18n_namespaceObject.__)('Custom'),
    templates: customTemplates
  }), Object.entries(plugins).map(([plugin, pluginTemplates]) => {
    return (0,external_React_.createElement)(TemplatesGroup, {
      key: plugin,
      title: plugin,
      templates: pluginTemplates
    });
  }));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-template/template-areas.js

/**
 * WordPress dependencies
 */







/**
 * Internal dependencies
 */






function TemplateAreaButton({
  postId,
  area,
  title
}) {
  const templatePartArea = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const defaultAreas = select(external_wp_editor_namespaceObject.store).__experimentalGetDefaultTemplatePartAreas();
    return defaultAreas.find(defaultArea => defaultArea.area === area);
  }, [area]);
  const linkInfo = useLink({
    postType: TEMPLATE_PART_POST_TYPE,
    postId
  });
  return (0,external_React_.createElement)(SidebarNavigationItem, {
    className: "edit-site-sidebar-navigation-screen-template__template-area-button",
    ...linkInfo,
    icon: templatePartArea?.icon,
    withChevron: true
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalTruncate, {
    limit: 20,
    ellipsizeMode: "tail",
    numberOfLines: 1,
    className: "edit-site-sidebar-navigation-screen-template__template-area-label-text"
  }, (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(title)));
}
function TemplateAreas() {
  const {
    templatePartAreas,
    currentTemplateParts
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getSettings,
      getCurrentTemplateTemplateParts
    } = unlock(select(store_store));
    return {
      templatePartAreas: getSettings()?.defaultTemplatePartAreas,
      currentTemplateParts: getCurrentTemplateTemplateParts()
    };
  }, []);

  /*
   * Merge data in currentTemplateParts with templatePartAreas,
   * which contains the template icon and fallback labels
   */
  const templateAreas = (0,external_wp_element_namespaceObject.useMemo)(() => {
    // Keep track of template part IDs that have already been added to the array.
    const templatePartIds = new Set();
    const filterOutDuplicateTemplateParts = currentTemplatePart => {
      // If the template part has already been added to the array, skip it.
      if (templatePartIds.has(currentTemplatePart.templatePart.id)) {
        return;
      }
      // Add to the array of template part IDs.
      templatePartIds.add(currentTemplatePart.templatePart.id);
      return currentTemplatePart;
    };
    return currentTemplateParts.length && templatePartAreas ? currentTemplateParts.filter(filterOutDuplicateTemplateParts).map(({
      templatePart,
      block
    }) => ({
      ...templatePartAreas?.find(({
        area
      }) => area === templatePart?.area),
      ...templatePart,
      clientId: block.clientId
    })) : [];
  }, [currentTemplateParts, templatePartAreas]);
  if (!templateAreas.length) {
    return null;
  }
  return (0,external_React_.createElement)(SidebarNavigationScreenDetailsPanel, {
    title: (0,external_wp_i18n_namespaceObject.__)('Areas'),
    spacing: 3
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItemGroup, null, templateAreas.map(({
    clientId,
    label,
    area,
    theme,
    slug,
    title
  }) => (0,external_React_.createElement)(SidebarNavigationScreenDetailsPanelRow, {
    key: clientId
  }, (0,external_React_.createElement)(TemplateAreaButton, {
    postId: `${theme}//${slug}`,
    title: title?.rendered || label,
    area: area
  })))));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/use-edited-entity-record/index.js
/**
 * WordPress dependencies
 */





/**
 * Internal dependencies
 */

function useEditedEntityRecord(postType, postId) {
  const {
    record,
    title,
    description,
    isLoaded,
    icon
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getEditedPostType,
      getEditedPostId
    } = select(store_store);
    const {
      getEditedEntityRecord,
      hasFinishedResolution
    } = select(external_wp_coreData_namespaceObject.store);
    const {
      __experimentalGetTemplateInfo: getTemplateInfo
    } = select(external_wp_editor_namespaceObject.store);
    const usedPostType = postType !== null && postType !== void 0 ? postType : getEditedPostType();
    const usedPostId = postId !== null && postId !== void 0 ? postId : getEditedPostId();
    const _record = getEditedEntityRecord('postType', usedPostType, usedPostId);
    const _isLoaded = usedPostId && hasFinishedResolution('getEditedEntityRecord', ['postType', usedPostType, usedPostId]);
    const templateInfo = getTemplateInfo(_record);
    return {
      record: _record,
      title: templateInfo.title,
      description: templateInfo.description,
      isLoaded: _isLoaded,
      icon: templateInfo.icon
    };
  }, [postType, postId]);
  return {
    isLoaded,
    icon,
    record,
    getTitle: () => title ? (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(title) : null,
    getDescription: () => description ? (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(description) : null
  };
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/plugins.js

/**
 * WordPress dependencies
 */

const plugins = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M10.5 4v4h3V4H15v4h1.5a1 1 0 011 1v4l-3 4v2a1 1 0 01-1 1h-3a1 1 0 01-1-1v-2l-3-4V9a1 1 0 011-1H9V4h1.5zm.5 12.5v2h2v-2l3-4v-3H8v3l3 4z"
}));
/* harmony default export */ const library_plugins = (plugins);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/globe.js

/**
 * WordPress dependencies
 */

const globe = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M12 3.3c-4.8 0-8.8 3.9-8.8 8.8 0 4.8 3.9 8.8 8.8 8.8 4.8 0 8.8-3.9 8.8-8.8s-4-8.8-8.8-8.8zm6.5 5.5h-2.6C15.4 7.3 14.8 6 14 5c2 .6 3.6 2 4.5 3.8zm.7 3.2c0 .6-.1 1.2-.2 1.8h-2.9c.1-.6.1-1.2.1-1.8s-.1-1.2-.1-1.8H19c.2.6.2 1.2.2 1.8zM12 18.7c-1-.7-1.8-1.9-2.3-3.5h4.6c-.5 1.6-1.3 2.9-2.3 3.5zm-2.6-4.9c-.1-.6-.1-1.1-.1-1.8 0-.6.1-1.2.1-1.8h5.2c.1.6.1 1.1.1 1.8s-.1 1.2-.1 1.8H9.4zM4.8 12c0-.6.1-1.2.2-1.8h2.9c-.1.6-.1 1.2-.1 1.8 0 .6.1 1.2.1 1.8H5c-.2-.6-.2-1.2-.2-1.8zM12 5.3c1 .7 1.8 1.9 2.3 3.5H9.7c.5-1.6 1.3-2.9 2.3-3.5zM10 5c-.8 1-1.4 2.3-1.8 3.8H5.5C6.4 7 8 5.6 10 5zM5.5 15.3h2.6c.4 1.5 1 2.8 1.8 3.7-1.8-.6-3.5-2-4.4-3.7zM14 19c.8-1 1.4-2.2 1.8-3.7h2.6C17.6 17 16 18.4 14 19z"
}));
/* harmony default export */ const library_globe = (globe);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/list/added-by.js

// @ts-check
/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */







/**
 * Internal dependencies
 */


/** @typedef {'wp_template'|'wp_template_part'} TemplateType */

/**
 * @typedef {'theme'|'plugin'|'site'|'user'} AddedByType
 *
 * @typedef AddedByData
 * @type {Object}
 * @property {AddedByType}  type         The type of the data.
 * @property {JSX.Element}  icon         The icon to display.
 * @property {string}       [imageUrl]   The optional image URL to display.
 * @property {string}       [text]       The text to display.
 * @property {boolean}      isCustomized Whether the template has been customized.
 *
 * @param    {TemplateType} postType     The template post type.
 * @param    {number}       postId       The template post id.
 * @return {AddedByData} The added by object or null.
 */
function useAddedBy(postType, postId) {
  return (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getEntityRecord,
      getMedia,
      getUser,
      getEditedEntityRecord
    } = select(external_wp_coreData_namespaceObject.store);
    const template = getEditedEntityRecord('postType', postType, postId);
    const originalSource = template?.original_source;
    const authorText = template?.author_text;
    switch (originalSource) {
      case 'theme':
        {
          return {
            type: originalSource,
            icon: library_layout,
            text: authorText,
            isCustomized: template.source === TEMPLATE_ORIGINS.custom
          };
        }
      case 'plugin':
        {
          return {
            type: originalSource,
            icon: library_plugins,
            text: authorText,
            isCustomized: template.source === TEMPLATE_ORIGINS.custom
          };
        }
      case 'site':
        {
          const siteData = getEntityRecord('root', '__unstableBase');
          return {
            type: originalSource,
            icon: library_globe,
            imageUrl: siteData?.site_logo ? getMedia(siteData.site_logo)?.source_url : undefined,
            text: authorText,
            isCustomized: false
          };
        }
      default:
        {
          const user = getUser(template.author);
          return {
            type: 'user',
            icon: comment_author_avatar,
            imageUrl: user?.avatar_urls?.[48],
            text: authorText,
            isCustomized: false
          };
        }
    }
  }, [postType, postId]);
}

/**
 * @param {Object} props
 * @param {string} props.imageUrl
 */
function AvatarImage({
  imageUrl
}) {
  const [isImageLoaded, setIsImageLoaded] = (0,external_wp_element_namespaceObject.useState)(false);
  return (0,external_React_.createElement)("div", {
    className: classnames_default()('edit-site-list-added-by__avatar', {
      'is-loaded': isImageLoaded
    })
  }, (0,external_React_.createElement)("img", {
    onLoad: () => setIsImageLoaded(true),
    alt: "",
    src: imageUrl
  }));
}

/**
 * @param {Object}       props
 * @param {TemplateType} props.postType The template post type.
 * @param {number}       props.postId   The template post id.
 */
function AddedBy({
  postType,
  postId
}) {
  const {
    text,
    icon,
    imageUrl,
    isCustomized
  } = useAddedBy(postType, postId);
  return createElement(HStack, {
    alignment: "left"
  }, imageUrl ? createElement(AvatarImage, {
    imageUrl: imageUrl
  }) : createElement("div", {
    className: "edit-site-list-added-by__icon"
  }, createElement(Icon, {
    icon: icon
  })), createElement("span", null, text, isCustomized && createElement("span", {
    className: "edit-site-list-added-by__customized-info"
  }, postType === TEMPLATE_POST_TYPE ? _x('Customized', 'template') : _x('Customized', 'template part'))));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/utils/is-template-removable.js
/**
 * Internal dependencies
 */


/**
 * Check if a template is removable.
 *
 * @param {Object} template The template entity to check.
 * @return {boolean} Whether the template is revertable.
 */
function isTemplateRemovable(template) {
  if (!template) {
    return false;
  }
  return template.source === TEMPLATE_ORIGINS.custom && !template.has_theme_file;
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/template-actions/rename-menu-item.js

/**
 * WordPress dependencies
 */








/**
 * Internal dependencies
 */

function RenameMenuItem({
  template,
  onClose
}) {
  const title = (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(template.title.rendered);
  const [editedTitle, setEditedTitle] = (0,external_wp_element_namespaceObject.useState)(title);
  const [isModalOpen, setIsModalOpen] = (0,external_wp_element_namespaceObject.useState)(false);
  const {
    editEntityRecord,
    __experimentalSaveSpecifiedEntityEdits: saveSpecifiedEntityEdits
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_coreData_namespaceObject.store);
  const {
    createSuccessNotice,
    createErrorNotice
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_notices_namespaceObject.store);
  if (template.type === constants_TEMPLATE_POST_TYPE && !template.is_custom) {
    return null;
  }
  async function onTemplateRename(event) {
    event.preventDefault();
    try {
      await editEntityRecord('postType', template.type, template.id, {
        title: editedTitle
      });

      // Update state before saving rerenders the list.
      setEditedTitle('');
      setIsModalOpen(false);
      onClose();

      // Persist edited entity.
      await saveSpecifiedEntityEdits('postType', template.type, template.id, ['title'],
      // Only save title to avoid persisting other edits.
      {
        throwOnError: true
      });
      createSuccessNotice(template.type === constants_TEMPLATE_POST_TYPE ? (0,external_wp_i18n_namespaceObject.__)('Template renamed.') : (0,external_wp_i18n_namespaceObject.__)('Template part renamed.'), {
        type: 'snackbar'
      });
    } catch (error) {
      const fallbackErrorMessage = template.type === constants_TEMPLATE_POST_TYPE ? (0,external_wp_i18n_namespaceObject.__)('An error occurred while renaming the template.') : (0,external_wp_i18n_namespaceObject.__)('An error occurred while renaming the template part.');
      const errorMessage = error.message && error.code !== 'unknown_error' ? error.message : fallbackErrorMessage;
      createErrorNotice(errorMessage, {
        type: 'snackbar'
      });
    }
  }
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
    onClick: () => {
      setIsModalOpen(true);
      setEditedTitle(title);
    }
  }, (0,external_wp_i18n_namespaceObject.__)('Rename')), isModalOpen && (0,external_React_.createElement)(external_wp_components_namespaceObject.Modal, {
    title: (0,external_wp_i18n_namespaceObject.__)('Rename'),
    onRequestClose: () => {
      setIsModalOpen(false);
    },
    overlayClassName: "edit-site-list__rename-modal"
  }, (0,external_React_.createElement)("form", {
    onSubmit: onTemplateRename
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    spacing: "5"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.TextControl, {
    __nextHasNoMarginBottom: true,
    __next40pxDefaultSize: true,
    label: (0,external_wp_i18n_namespaceObject.__)('Name'),
    value: editedTitle,
    onChange: setEditedTitle,
    required: true
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    justify: "right"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    __next40pxDefaultSize: true,
    variant: "tertiary",
    onClick: () => {
      setIsModalOpen(false);
    }
  }, (0,external_wp_i18n_namespaceObject.__)('Cancel')), (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    __next40pxDefaultSize: true,
    variant: "primary",
    type: "submit"
  }, (0,external_wp_i18n_namespaceObject.__)('Save')))))));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/template-actions/index.js

/**
 * WordPress dependencies
 */









/**
 * Internal dependencies
 */





function TemplateActions({
  postType,
  postId,
  className,
  toggleProps,
  onRemove
}) {
  const template = (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_coreData_namespaceObject.store).getEntityRecord('postType', postType, postId), [postType, postId]);
  const {
    removeTemplate,
    revertTemplate
  } = (0,external_wp_data_namespaceObject.useDispatch)(store_store);
  const {
    saveEditedEntityRecord
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_coreData_namespaceObject.store);
  const {
    createSuccessNotice,
    createErrorNotice
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_notices_namespaceObject.store);
  const isRemovable = isTemplateRemovable(template);
  const isRevertable = isTemplateRevertable(template);
  if (!isRemovable && !isRevertable) {
    return null;
  }
  async function revertAndSaveTemplate() {
    try {
      await revertTemplate(template, {
        allowUndo: false
      });
      await saveEditedEntityRecord('postType', template.type, template.id);
      createSuccessNotice((0,external_wp_i18n_namespaceObject.sprintf)( /* translators: The template/part's name. */
      (0,external_wp_i18n_namespaceObject.__)('"%s" reverted.'), (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(template.title.rendered)), {
        type: 'snackbar',
        id: 'edit-site-template-reverted'
      });
    } catch (error) {
      const fallbackErrorMessage = template.type === constants_TEMPLATE_POST_TYPE ? (0,external_wp_i18n_namespaceObject.__)('An error occurred while reverting the template.') : (0,external_wp_i18n_namespaceObject.__)('An error occurred while reverting the template part.');
      const errorMessage = error.message && error.code !== 'unknown_error' ? error.message : fallbackErrorMessage;
      createErrorNotice(errorMessage, {
        type: 'snackbar'
      });
    }
  }
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.DropdownMenu, {
    icon: more_vertical,
    label: (0,external_wp_i18n_namespaceObject.__)('Actions'),
    className: className,
    toggleProps: toggleProps
  }, ({
    onClose
  }) => (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuGroup, null, isRemovable && (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(RenameMenuItem, {
    template: template,
    onClose: onClose
  }), (0,external_React_.createElement)(DeleteMenuItem, {
    onRemove: () => {
      removeTemplate(template);
      onRemove?.();
      onClose();
    },
    title: template.title.rendered
  })), isRevertable && (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
    info: (0,external_wp_i18n_namespaceObject.__)('Use the template as supplied by the theme.'),
    onClick: () => {
      revertAndSaveTemplate();
      onClose();
    }
  }, (0,external_wp_i18n_namespaceObject.__)('Clear customizations'))));
}
function DeleteMenuItem({
  onRemove,
  title
}) {
  const [isModalOpen, setIsModalOpen] = (0,external_wp_element_namespaceObject.useState)(false);
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
    isDestructive: true,
    onClick: () => setIsModalOpen(true)
  }, (0,external_wp_i18n_namespaceObject.__)('Delete')), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalConfirmDialog, {
    isOpen: isModalOpen,
    onConfirm: onRemove,
    onCancel: () => setIsModalOpen(false),
    confirmButtonText: (0,external_wp_i18n_namespaceObject.__)('Delete')
  }, (0,external_wp_i18n_namespaceObject.sprintf)(
  // translators: %s: The template or template part's title.
  (0,external_wp_i18n_namespaceObject.__)('Are you sure you want to delete "%s"?'), (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(title))));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-template/home-template-details.js

/**
 * WordPress dependencies
 */







/**
 * Internal dependencies
 */

const EMPTY_OBJECT = {};
function HomeTemplateDetails() {
  const {
    editEntityRecord
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_coreData_namespaceObject.store);
  const {
    allowCommentsOnNewPosts,
    postsPerPage,
    postsPageTitle,
    postsPageId
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getEntityRecord
    } = select(external_wp_coreData_namespaceObject.store);
    const siteSettings = getEntityRecord('root', 'site');
    const _postsPageRecord = siteSettings?.page_for_posts ? getEntityRecord('postType', 'page', siteSettings?.page_for_posts) : EMPTY_OBJECT;
    return {
      allowCommentsOnNewPosts: siteSettings?.default_comment_status === 'open',
      postsPageTitle: _postsPageRecord?.title?.rendered,
      postsPageId: _postsPageRecord?.id,
      postsPerPage: siteSettings?.posts_per_page
    };
  }, []);
  const [commentsOnNewPostsValue, setCommentsOnNewPostsValue] = (0,external_wp_element_namespaceObject.useState)('');
  const [postsCountValue, setPostsCountValue] = (0,external_wp_element_namespaceObject.useState)(1);
  const [postsPageTitleValue, setPostsPageTitleValue] = (0,external_wp_element_namespaceObject.useState)('');

  /*
   * This hook serves to set the server-retrieved values,
   * postsPageTitle, allowCommentsOnNewPosts, postsPerPage,
   * to local state.
   */
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    setCommentsOnNewPostsValue(allowCommentsOnNewPosts);
    setPostsPageTitleValue(postsPageTitle);
    setPostsCountValue(postsPerPage);
  }, [postsPageTitle, allowCommentsOnNewPosts, postsPerPage]);
  const setAllowCommentsOnNewPosts = newValue => {
    setCommentsOnNewPostsValue(newValue);
    editEntityRecord('root', 'site', undefined, {
      default_comment_status: newValue ? 'open' : null
    });
  };
  const setPostsPageTitle = newValue => {
    setPostsPageTitleValue(newValue);
    editEntityRecord('postType', 'page', postsPageId, {
      title: newValue
    });
  };
  const setPostsPerPage = newValue => {
    setPostsCountValue(newValue);
    editEntityRecord('root', 'site', undefined, {
      posts_per_page: newValue
    });
  };
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(SidebarNavigationScreenDetailsPanel, {
    spacing: 6
  }, postsPageId && (0,external_React_.createElement)(SidebarNavigationScreenDetailsPanelRow, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalInputControl, {
    className: "edit-site-sidebar-navigation-screen__input-control",
    placeholder: (0,external_wp_i18n_namespaceObject.__)('No Title'),
    size: '__unstable-large',
    value: postsPageTitleValue,
    onChange: (0,external_wp_compose_namespaceObject.debounce)(setPostsPageTitle, 300),
    label: (0,external_wp_i18n_namespaceObject.__)('Blog title'),
    help: (0,external_wp_i18n_namespaceObject.__)('Set the Posts Page title. Appears in search results, and when the page is shared on social media.')
  })), (0,external_React_.createElement)(SidebarNavigationScreenDetailsPanelRow, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalNumberControl, {
    className: "edit-site-sidebar-navigation-screen__input-control",
    placeholder: 0,
    value: postsCountValue,
    size: '__unstable-large',
    spinControls: "custom",
    step: "1",
    min: "1",
    onChange: setPostsPerPage,
    label: (0,external_wp_i18n_namespaceObject.__)('Posts per page'),
    help: (0,external_wp_i18n_namespaceObject.__)('Set the default number of posts to display on blog pages, including categories and tags. Some templates may override this setting.')
  }))), (0,external_React_.createElement)(SidebarNavigationScreenDetailsPanel, {
    title: (0,external_wp_i18n_namespaceObject.__)('Discussion'),
    spacing: 3
  }, (0,external_React_.createElement)(SidebarNavigationScreenDetailsPanelRow, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.CheckboxControl, {
    className: "edit-site-sidebar-navigation-screen__input-control",
    label: (0,external_wp_i18n_namespaceObject.__)('Allow comments on new posts'),
    help: (0,external_wp_i18n_namespaceObject.__)('Changes will apply to new posts only. Individual posts may override these settings.'),
    checked: commentsOnNewPostsValue,
    onChange: setAllowCommentsOnNewPosts
  }))));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-template/index.js

/**
 * WordPress dependencies
 */





/**
 * Internal dependencies
 */










function useTemplateDetails(postType, postId) {
  const {
    getDescription,
    getTitle,
    record
  } = useEditedEntityRecord(postType, postId);
  const currentTheme = (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_coreData_namespaceObject.store).getCurrentTheme(), []);
  const addedBy = useAddedBy(postType, postId);
  const isAddedByActiveTheme = addedBy.type === 'theme' && record.theme === currentTheme?.stylesheet;
  const title = getTitle();
  let descriptionText = getDescription();
  if (!descriptionText && addedBy.text) {
    descriptionText = (0,external_wp_i18n_namespaceObject.__)('This is a custom template that can be applied manually to any Post or Page.');
  }
  const content = record?.slug === 'home' || record?.slug === 'index' ? (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(HomeTemplateDetails, null), (0,external_React_.createElement)(TemplateAreas, null)) : (0,external_React_.createElement)(TemplateAreas, null);
  const footer = record?.modified ? (0,external_React_.createElement)(SidebarNavigationScreenDetailsFooter, {
    record: record
  }) : null;
  const description = (0,external_React_.createElement)(external_React_.Fragment, null, descriptionText, addedBy.text && !isAddedByActiveTheme && (0,external_React_.createElement)("span", {
    className: "edit-site-sidebar-navigation-screen-template__added-by-description"
  }, (0,external_React_.createElement)("span", {
    className: "edit-site-sidebar-navigation-screen-template__added-by-description-author"
  }, (0,external_React_.createElement)("span", {
    className: "edit-site-sidebar-navigation-screen-template__added-by-description-author-icon"
  }, addedBy.imageUrl ? (0,external_React_.createElement)("img", {
    src: addedBy.imageUrl,
    alt: "",
    width: "24",
    height: "24"
  }) : (0,external_React_.createElement)(external_wp_components_namespaceObject.Icon, {
    icon: addedBy.icon
  })), addedBy.text), addedBy.isCustomized && (0,external_React_.createElement)("span", {
    className: "edit-site-sidebar-navigation-screen-template__added-by-description-customized"
  }, (0,external_wp_i18n_namespaceObject._x)('(Customized)', 'template'))));
  return {
    title,
    description,
    content,
    footer
  };
}
function SidebarNavigationScreenTemplate() {
  const navigator = (0,external_wp_components_namespaceObject.__experimentalUseNavigator)();
  const {
    params: {
      postType,
      postId
    }
  } = navigator;
  const {
    setCanvasMode
  } = unlock((0,external_wp_data_namespaceObject.useDispatch)(store_store));
  const {
    title,
    content,
    description,
    footer
  } = useTemplateDetails(postType, postId);
  return (0,external_React_.createElement)(SidebarNavigationScreen, {
    title: title,
    actions: (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(TemplateActions, {
      postType: postType,
      postId: postId,
      toggleProps: {
        as: SidebarButton
      },
      onRemove: () => {
        navigator.goTo(`/${postType}/all`);
      }
    }), (0,external_React_.createElement)(SidebarButton, {
      onClick: () => setCanvasMode('edit'),
      label: (0,external_wp_i18n_namespaceObject.__)('Edit'),
      icon: library_pencil
    })),
    description: description,
    content: content,
    footer: footer
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/file.js

/**
 * WordPress dependencies
 */

const file = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M12.848 8a1 1 0 0 1-.914-.594l-.723-1.63a.5.5 0 0 0-.447-.276H5a.5.5 0 0 0-.5.5v11.5a.5.5 0 0 0 .5.5h14a.5.5 0 0 0 .5-.5v-9A.5.5 0 0 0 19 8h-6.152Zm.612-1.5a.5.5 0 0 1-.462-.31l-.445-1.084A2 2 0 0 0 10.763 4H5a2 2 0 0 0-2 2v11.5a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-9a2 2 0 0 0-2-2h-5.54Z"
}));
/* harmony default export */ const library_file = (file);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/symbol-filled.js

/**
 * WordPress dependencies
 */

const symbolFilled = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M21.3 10.8l-5.6-5.6c-.7-.7-1.8-.7-2.5 0l-5.6 5.6c-.7.7-.7 1.8 0 2.5l5.6 5.6c.3.3.8.5 1.2.5s.9-.2 1.2-.5l5.6-5.6c.8-.7.8-1.9.1-2.5zm-17.6 1L10 5.5l-1-1-6.3 6.3c-.7.7-.7 1.8 0 2.5L9 19.5l1.1-1.1-6.3-6.3c-.2 0-.2-.2-.1-.3z"
}));
/* harmony default export */ const symbol_filled = (symbolFilled);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/upload.js

/**
 * WordPress dependencies
 */

const upload = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M18.5 15v3.5H13V6.7l4.5 4.1 1-1.1-6.2-5.8-5.8 5.8 1 1.1 4-4v11.7h-6V15H4v5h16v-5z"
}));
/* harmony default export */ const library_upload = (upload);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/utils/template-part-create.js
/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */



/**
 * Internal dependencies
 */

const useExistingTemplateParts = () => {
  return (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_coreData_namespaceObject.store).getEntityRecords('postType', TEMPLATE_PART_POST_TYPE, {
    per_page: -1
  }), []);
};

/**
 * Return a unique template part title based on
 * the given title and existing template parts.
 *
 * @param {string} title         The original template part title.
 * @param {Object} templateParts The array of template part entities.
 * @return {string} A unique template part title.
 */
const getUniqueTemplatePartTitle = (title, templateParts) => {
  const lowercaseTitle = title.toLowerCase();
  const existingTitles = templateParts.map(templatePart => templatePart.title.rendered.toLowerCase());
  if (!existingTitles.includes(lowercaseTitle)) {
    return title;
  }
  let suffix = 2;
  while (existingTitles.includes(`${lowercaseTitle} ${suffix}`)) {
    suffix++;
  }
  return `${title} ${suffix}`;
};

/**
 * Get a valid slug for a template part.
 * Currently template parts only allow latin chars.
 * The fallback slug will receive suffix by default.
 *
 * @param {string} title The template part title.
 * @return {string} A valid template part slug.
 */
const getCleanTemplatePartSlug = title => {
  return paramCase(title).replace(/[^\w-]+/g, '') || 'wp-custom-part';
};

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/create-template-part-modal/index.js

/**
 * WordPress dependencies
 */











/**
 * Internal dependencies
 */


function CreateTemplatePartModal({
  modalTitle = (0,external_wp_i18n_namespaceObject.__)('Create template part'),
  ...restProps
}) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Modal, {
    title: modalTitle,
    onRequestClose: restProps.closeModal,
    overlayClassName: "edit-site-create-template-part-modal"
  }, (0,external_React_.createElement)(CreateTemplatePartModalContents, {
    ...restProps
  }));
}
function CreateTemplatePartModalContents({
  defaultArea = TEMPLATE_PART_AREA_DEFAULT_CATEGORY,
  blocks = [],
  confirmLabel = (0,external_wp_i18n_namespaceObject.__)('Create'),
  closeModal,
  onCreate,
  onError,
  defaultTitle = ''
}) {
  const {
    createErrorNotice
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_notices_namespaceObject.store);
  const {
    saveEntityRecord
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_coreData_namespaceObject.store);
  const existingTemplateParts = useExistingTemplateParts();
  const [title, setTitle] = (0,external_wp_element_namespaceObject.useState)(defaultTitle);
  const [area, setArea] = (0,external_wp_element_namespaceObject.useState)(defaultArea);
  const [isSubmitting, setIsSubmitting] = (0,external_wp_element_namespaceObject.useState)(false);
  const instanceId = (0,external_wp_compose_namespaceObject.useInstanceId)(CreateTemplatePartModal);
  const templatePartAreas = (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_editor_namespaceObject.store).__experimentalGetDefaultTemplatePartAreas(), []);
  async function createTemplatePart() {
    if (!title || isSubmitting) {
      return;
    }
    try {
      setIsSubmitting(true);
      const uniqueTitle = getUniqueTemplatePartTitle(title, existingTemplateParts);
      const cleanSlug = getCleanTemplatePartSlug(uniqueTitle);
      const templatePart = await saveEntityRecord('postType', TEMPLATE_PART_POST_TYPE, {
        slug: cleanSlug,
        title: uniqueTitle,
        content: (0,external_wp_blocks_namespaceObject.serialize)(blocks),
        area
      }, {
        throwOnError: true
      });
      await onCreate(templatePart);

      // TODO: Add a success notice?
    } catch (error) {
      const errorMessage = error.message && error.code !== 'unknown_error' ? error.message : (0,external_wp_i18n_namespaceObject.__)('An error occurred while creating the template part.');
      createErrorNotice(errorMessage, {
        type: 'snackbar'
      });
      onError?.();
    } finally {
      setIsSubmitting(false);
    }
  }
  return (0,external_React_.createElement)("form", {
    onSubmit: async event => {
      event.preventDefault();
      await createTemplatePart();
    }
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    spacing: "4"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.TextControl, {
    __nextHasNoMarginBottom: true,
    label: (0,external_wp_i18n_namespaceObject.__)('Name'),
    value: title,
    onChange: setTitle,
    required: true
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.BaseControl, {
    label: (0,external_wp_i18n_namespaceObject.__)('Area'),
    id: `edit-site-create-template-part-modal__area-selection-${instanceId}`,
    className: "edit-site-create-template-part-modal__area-base-control"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalRadioGroup, {
    label: (0,external_wp_i18n_namespaceObject.__)('Area'),
    className: "edit-site-create-template-part-modal__area-radio-group",
    id: `edit-site-create-template-part-modal__area-selection-${instanceId}`,
    onChange: setArea,
    checked: area
  }, templatePartAreas.map(({
    icon,
    label,
    area: value,
    description
  }) => (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalRadio, {
    key: label,
    value: value,
    className: "edit-site-create-template-part-modal__area-radio"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Flex, {
    align: "start",
    justify: "start"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.FlexItem, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.Icon, {
    icon: icon
  })), (0,external_React_.createElement)(external_wp_components_namespaceObject.FlexBlock, {
    className: "edit-site-create-template-part-modal__option-label"
  }, label, (0,external_React_.createElement)("div", null, description)), (0,external_React_.createElement)(external_wp_components_namespaceObject.FlexItem, {
    className: "edit-site-create-template-part-modal__checkbox"
  }, area === value && (0,external_React_.createElement)(external_wp_components_namespaceObject.Icon, {
    icon: library_check
  }))))))), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    justify: "right"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    variant: "tertiary",
    onClick: () => {
      closeModal();
    }
  }, (0,external_wp_i18n_namespaceObject.__)('Cancel')), (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    variant: "primary",
    type: "submit",
    "aria-disabled": !title || isSubmitting,
    isBusy: isSubmitting
  }, confirmLabel))));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/add-new-pattern/index.js

/**
 * WordPress dependencies
 */










/**
 * Internal dependencies
 */




const {
  useHistory: add_new_pattern_useHistory,
  useLocation: add_new_pattern_useLocation
} = unlock(external_wp_router_namespaceObject.privateApis);
const {
  CreatePatternModal,
  useAddPatternCategory
} = unlock(external_wp_patterns_namespaceObject.privateApis);
function AddNewPattern() {
  const history = add_new_pattern_useHistory();
  const {
    params
  } = add_new_pattern_useLocation();
  const [showPatternModal, setShowPatternModal] = (0,external_wp_element_namespaceObject.useState)(false);
  const [showTemplatePartModal, setShowTemplatePartModal] = (0,external_wp_element_namespaceObject.useState)(false);
  const isBlockBasedTheme = (0,external_wp_data_namespaceObject.useSelect)(select => {
    return select(external_wp_coreData_namespaceObject.store).getCurrentTheme()?.is_block_theme;
  }, []);
  const {
    createPatternFromFile
  } = unlock((0,external_wp_data_namespaceObject.useDispatch)(external_wp_patterns_namespaceObject.store));
  const {
    createSuccessNotice,
    createErrorNotice
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_notices_namespaceObject.store);
  const patternUploadInputRef = (0,external_wp_element_namespaceObject.useRef)();
  function handleCreatePattern({
    pattern,
    categoryId
  }) {
    setShowPatternModal(false);
    history.push({
      postId: pattern.id,
      postType: PATTERN_TYPES.user,
      categoryType: PATTERN_TYPES.theme,
      categoryId,
      canvas: 'edit'
    });
  }
  function handleCreateTemplatePart(templatePart) {
    setShowTemplatePartModal(false);

    // Navigate to the created template part editor.
    history.push({
      postId: templatePart.id,
      postType: TEMPLATE_PART_POST_TYPE,
      canvas: 'edit'
    });
  }
  function handleError() {
    setShowPatternModal(false);
    setShowTemplatePartModal(false);
  }
  const controls = [{
    icon: library_symbol,
    onClick: () => setShowPatternModal(true),
    title: (0,external_wp_i18n_namespaceObject.__)('Create pattern')
  }];
  if (isBlockBasedTheme) {
    controls.push({
      icon: symbol_filled,
      onClick: () => setShowTemplatePartModal(true),
      title: (0,external_wp_i18n_namespaceObject.__)('Create template part')
    });
  }
  controls.push({
    icon: library_upload,
    onClick: () => {
      patternUploadInputRef.current.click();
    },
    title: (0,external_wp_i18n_namespaceObject.__)('Import pattern from JSON')
  });
  const {
    categoryMap,
    findOrCreateTerm
  } = useAddPatternCategory();
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.DropdownMenu, {
    controls: controls,
    toggleProps: {
      as: SidebarButton
    },
    icon: library_plus,
    label: (0,external_wp_i18n_namespaceObject.__)('Create pattern')
  }), showPatternModal && (0,external_React_.createElement)(CreatePatternModal, {
    onClose: () => setShowPatternModal(false),
    onSuccess: handleCreatePattern,
    onError: handleError
  }), showTemplatePartModal && (0,external_React_.createElement)(CreateTemplatePartModal, {
    closeModal: () => setShowTemplatePartModal(false),
    blocks: [],
    onCreate: handleCreateTemplatePart,
    onError: handleError
  }), (0,external_React_.createElement)("input", {
    type: "file",
    accept: ".json",
    hidden: true,
    ref: patternUploadInputRef,
    onChange: async event => {
      const file = event.target.files?.[0];
      if (!file) return;
      try {
        let currentCategoryId;
        // When we're not handling template parts, we should
        // add or create the proper pattern category.
        if (params.categoryType !== TEMPLATE_PART_POST_TYPE) {
          const currentCategory = categoryMap.values().find(term => term.name === params.categoryId);
          if (!!currentCategory) {
            currentCategoryId = currentCategory.id || (await findOrCreateTerm(currentCategory.label));
          }
        }
        const pattern = await createPatternFromFile(file, currentCategoryId ? [currentCategoryId] : undefined);

        // Navigate to the All patterns category for the newly created pattern
        // if we're not on that page already and if we're not in the `my-patterns`
        // category.
        if (!currentCategoryId && params.categoryId !== 'my-patterns') {
          history.push({
            path: `/patterns`,
            categoryType: PATTERN_TYPES.theme,
            categoryId: PATTERN_DEFAULT_CATEGORY
          });
        }
        createSuccessNotice((0,external_wp_i18n_namespaceObject.sprintf)(
        // translators: %s: The imported pattern's title.
        (0,external_wp_i18n_namespaceObject.__)('Imported "%s" from JSON.'), pattern.title.raw), {
          type: 'snackbar',
          id: 'import-pattern-success'
        });
      } catch (err) {
        createErrorNotice(err.message, {
          type: 'snackbar',
          id: 'import-pattern-error'
        });
      } finally {
        event.target.value = '';
      }
    }
  }));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-patterns/category-item.js

/**
 * Internal dependencies
 */


function CategoryItem({
  count,
  icon,
  id,
  isActive,
  label,
  type
}) {
  const linkInfo = useLink({
    path: '/patterns',
    categoryType: type,
    categoryId: id
  });
  if (!count) {
    return;
  }
  return (0,external_React_.createElement)(SidebarNavigationItem, {
    ...linkInfo,
    icon: icon,
    suffix: (0,external_React_.createElement)("span", null, count),
    "aria-current": isActive ? 'true' : undefined
  }, label);
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-patterns/use-default-pattern-categories.js
/**
 * WordPress dependencies
 */



/**
 * Internal dependencies
 */


function useDefaultPatternCategories() {
  const blockPatternCategories = (0,external_wp_data_namespaceObject.useSelect)(select => {
    var _settings$__experimen;
    const {
      getSettings
    } = unlock(select(store_store));
    const settings = getSettings();
    return (_settings$__experimen = settings.__experimentalAdditionalBlockPatternCategories) !== null && _settings$__experimen !== void 0 ? _settings$__experimen : settings.__experimentalBlockPatternCategories;
  });
  const restBlockPatternCategories = (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_coreData_namespaceObject.store).getBlockPatternCategories());
  return [...(blockPatternCategories || []), ...(restBlockPatternCategories || [])];
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/page-patterns/utils.js
const filterOutDuplicatesByName = (currentItem, index, items) => index === items.findIndex(item => currentItem.name === item.name);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-patterns/use-theme-patterns.js
/**
 * WordPress dependencies
 */




/**
 * Internal dependencies
 */




function useThemePatterns() {
  const blockPatterns = (0,external_wp_data_namespaceObject.useSelect)(select => {
    var _getSettings$__experi;
    const {
      getSettings
    } = unlock(select(store_store));
    return (_getSettings$__experi = getSettings().__experimentalAdditionalBlockPatterns) !== null && _getSettings$__experi !== void 0 ? _getSettings$__experi : getSettings().__experimentalBlockPatterns;
  });
  const restBlockPatterns = (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_coreData_namespaceObject.store).getBlockPatterns());
  const patterns = (0,external_wp_element_namespaceObject.useMemo)(() => [...(blockPatterns || []), ...(restBlockPatterns || [])].filter(pattern => !EXCLUDED_PATTERN_SOURCES.includes(pattern.source)).filter(filterOutDuplicatesByName).filter(pattern => pattern.inserter !== false), [blockPatterns, restBlockPatterns]);
  return patterns;
}

;// CONCATENATED MODULE: ./node_modules/rememo/rememo.js


/** @typedef {(...args: any[]) => *[]} GetDependants */

/** @typedef {() => void} Clear */

/**
 * @typedef {{
 *   getDependants: GetDependants,
 *   clear: Clear
 * }} EnhancedSelector
 */

/**
 * Internal cache entry.
 *
 * @typedef CacheNode
 *
 * @property {?CacheNode|undefined} [prev] Previous node.
 * @property {?CacheNode|undefined} [next] Next node.
 * @property {*[]} args Function arguments for cache entry.
 * @property {*} val Function result.
 */

/**
 * @typedef Cache
 *
 * @property {Clear} clear Function to clear cache.
 * @property {boolean} [isUniqueByDependants] Whether dependants are valid in
 * considering cache uniqueness. A cache is unique if dependents are all arrays
 * or objects.
 * @property {CacheNode?} [head] Cache head.
 * @property {*[]} [lastDependants] Dependants from previous invocation.
 */

/**
 * Arbitrary value used as key for referencing cache object in WeakMap tree.
 *
 * @type {{}}
 */
var LEAF_KEY = {};

/**
 * Returns the first argument as the sole entry in an array.
 *
 * @template T
 *
 * @param {T} value Value to return.
 *
 * @return {[T]} Value returned as entry in array.
 */
function arrayOf(value) {
	return [value];
}

/**
 * Returns true if the value passed is object-like, or false otherwise. A value
 * is object-like if it can support property assignment, e.g. object or array.
 *
 * @param {*} value Value to test.
 *
 * @return {boolean} Whether value is object-like.
 */
function isObjectLike(value) {
	return !!value && 'object' === typeof value;
}

/**
 * Creates and returns a new cache object.
 *
 * @return {Cache} Cache object.
 */
function createCache() {
	/** @type {Cache} */
	var cache = {
		clear: function () {
			cache.head = null;
		},
	};

	return cache;
}

/**
 * Returns true if entries within the two arrays are strictly equal by
 * reference from a starting index.
 *
 * @param {*[]} a First array.
 * @param {*[]} b Second array.
 * @param {number} fromIndex Index from which to start comparison.
 *
 * @return {boolean} Whether arrays are shallowly equal.
 */
function isShallowEqual(a, b, fromIndex) {
	var i;

	if (a.length !== b.length) {
		return false;
	}

	for (i = fromIndex; i < a.length; i++) {
		if (a[i] !== b[i]) {
			return false;
		}
	}

	return true;
}

/**
 * Returns a memoized selector function. The getDependants function argument is
 * called before the memoized selector and is expected to return an immutable
 * reference or array of references on which the selector depends for computing
 * its own return value. The memoize cache is preserved only as long as those
 * dependant references remain the same. If getDependants returns a different
 * reference(s), the cache is cleared and the selector value regenerated.
 *
 * @template {(...args: *[]) => *} S
 *
 * @param {S} selector Selector function.
 * @param {GetDependants=} getDependants Dependant getter returning an array of
 * references used in cache bust consideration.
 */
/* harmony default export */ function rememo(selector, getDependants) {
	/** @type {WeakMap<*,*>} */
	var rootCache;

	/** @type {GetDependants} */
	var normalizedGetDependants = getDependants ? getDependants : arrayOf;

	/**
	 * Returns the cache for a given dependants array. When possible, a WeakMap
	 * will be used to create a unique cache for each set of dependants. This
	 * is feasible due to the nature of WeakMap in allowing garbage collection
	 * to occur on entries where the key object is no longer referenced. Since
	 * WeakMap requires the key to be an object, this is only possible when the
	 * dependant is object-like. The root cache is created as a hierarchy where
	 * each top-level key is the first entry in a dependants set, the value a
	 * WeakMap where each key is the next dependant, and so on. This continues
	 * so long as the dependants are object-like. If no dependants are object-
	 * like, then the cache is shared across all invocations.
	 *
	 * @see isObjectLike
	 *
	 * @param {*[]} dependants Selector dependants.
	 *
	 * @return {Cache} Cache object.
	 */
	function getCache(dependants) {
		var caches = rootCache,
			isUniqueByDependants = true,
			i,
			dependant,
			map,
			cache;

		for (i = 0; i < dependants.length; i++) {
			dependant = dependants[i];

			// Can only compose WeakMap from object-like key.
			if (!isObjectLike(dependant)) {
				isUniqueByDependants = false;
				break;
			}

			// Does current segment of cache already have a WeakMap?
			if (caches.has(dependant)) {
				// Traverse into nested WeakMap.
				caches = caches.get(dependant);
			} else {
				// Create, set, and traverse into a new one.
				map = new WeakMap();
				caches.set(dependant, map);
				caches = map;
			}
		}

		// We use an arbitrary (but consistent) object as key for the last item
		// in the WeakMap to serve as our running cache.
		if (!caches.has(LEAF_KEY)) {
			cache = createCache();
			cache.isUniqueByDependants = isUniqueByDependants;
			caches.set(LEAF_KEY, cache);
		}

		return caches.get(LEAF_KEY);
	}

	/**
	 * Resets root memoization cache.
	 */
	function clear() {
		rootCache = new WeakMap();
	}

	/* eslint-disable jsdoc/check-param-names */
	/**
	 * The augmented selector call, considering first whether dependants have
	 * changed before passing it to underlying memoize function.
	 *
	 * @param {*}    source    Source object for derivation.
	 * @param {...*} extraArgs Additional arguments to pass to selector.
	 *
	 * @return {*} Selector result.
	 */
	/* eslint-enable jsdoc/check-param-names */
	function callSelector(/* source, ...extraArgs */) {
		var len = arguments.length,
			cache,
			node,
			i,
			args,
			dependants;

		// Create copy of arguments (avoid leaking deoptimization).
		args = new Array(len);
		for (i = 0; i < len; i++) {
			args[i] = arguments[i];
		}

		dependants = normalizedGetDependants.apply(null, args);
		cache = getCache(dependants);

		// If not guaranteed uniqueness by dependants (primitive type), shallow
		// compare against last dependants and, if references have changed,
		// destroy cache to recalculate result.
		if (!cache.isUniqueByDependants) {
			if (
				cache.lastDependants &&
				!isShallowEqual(dependants, cache.lastDependants, 0)
			) {
				cache.clear();
			}

			cache.lastDependants = dependants;
		}

		node = cache.head;
		while (node) {
			// Check whether node arguments match arguments
			if (!isShallowEqual(node.args, args, 1)) {
				node = node.next;
				continue;
			}

			// At this point we can assume we've found a match

			// Surface matched node to head if not already
			if (node !== cache.head) {
				// Adjust siblings to point to each other.
				/** @type {CacheNode} */ (node.prev).next = node.next;
				if (node.next) {
					node.next.prev = node.prev;
				}

				node.next = cache.head;
				node.prev = null;
				/** @type {CacheNode} */ (cache.head).prev = node;
				cache.head = node;
			}

			// Return immediately
			return node.val;
		}

		// No cached value found. Continue to insertion phase:

		node = /** @type {CacheNode} */ ({
			// Generate the result from original function
			val: selector.apply(null, args),
		});

		// Avoid including the source object in the cache.
		args[0] = null;
		node.args = args;

		// Don't need to check whether node is already head, since it would
		// have been returned above already if it was

		// Shift existing head down list
		if (cache.head) {
			cache.head.prev = node;
			node.next = cache.head;
		}

		cache.head = node;

		return node.val;
	}

	callSelector.getDependants = normalizedGetDependants;
	callSelector.clear = clear;
	clear();

	return /** @type {S & EnhancedSelector} */ (callSelector);
}

// EXTERNAL MODULE: ./node_modules/remove-accents/index.js
var remove_accents = __webpack_require__(9681);
var remove_accents_default = /*#__PURE__*/__webpack_require__.n(remove_accents);
;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/page-patterns/search-items.js
/**
 * External dependencies
 */



/**
 * Internal dependencies
 */


// Default search helpers.
const defaultGetName = item => item.name || '';
const defaultGetTitle = item => item.title;
const defaultGetDescription = item => item.description || '';
const defaultGetKeywords = item => item.keywords || [];
const defaultHasCategory = () => false;

/**
 * Extracts words from an input string.
 *
 * @param {string} input The input string.
 *
 * @return {Array} Words, extracted from the input string.
 */
function extractWords(input = '') {
  return noCase(input, {
    splitRegexp: [/([\p{Ll}\p{Lo}\p{N}])([\p{Lu}\p{Lt}])/gu,
    // One lowercase or digit, followed by one uppercase.
    /([\p{Lu}\p{Lt}])([\p{Lu}\p{Lt}][\p{Ll}\p{Lo}])/gu // One uppercase followed by one uppercase and one lowercase.
    ],
    stripRegexp: /(\p{C}|\p{P}|\p{S})+/giu // Anything that's not a punctuation, symbol or control/format character.
  }).split(' ').filter(Boolean);
}

/**
 * Sanitizes the search input string.
 *
 * @param {string} input The search input to normalize.
 *
 * @return {string} The normalized search input.
 */
function normalizeSearchInput(input = '') {
  // Disregard diacritics.
  //  Input: "média"
  input = remove_accents_default()(input);

  // Accommodate leading slash, matching autocomplete expectations.
  //  Input: "/media"
  input = input.replace(/^\//, '');

  // Lowercase.
  //  Input: "MEDIA"
  input = input.toLowerCase();
  return input;
}

/**
 * Converts the search term into a list of normalized terms.
 *
 * @param {string} input The search term to normalize.
 *
 * @return {string[]} The normalized list of search terms.
 */
const getNormalizedSearchTerms = (input = '') => {
  return extractWords(normalizeSearchInput(input));
};
const removeMatchingTerms = (unmatchedTerms, unprocessedTerms) => {
  return unmatchedTerms.filter(term => !getNormalizedSearchTerms(unprocessedTerms).some(unprocessedTerm => unprocessedTerm.includes(term)));
};

/**
 * Filters an item list given a search term.
 *
 * @param {Array}  items       Item list
 * @param {string} searchInput Search input.
 * @param {Object} config      Search Config.
 *
 * @return {Array} Filtered item list.
 */
const searchItems = (items = [], searchInput = '', config = {}) => {
  const normalizedSearchTerms = getNormalizedSearchTerms(searchInput);
  // Filter patterns by category: the default category indicates that all patterns will be shown.
  const onlyFilterByCategory = config.categoryId !== PATTERN_DEFAULT_CATEGORY && !normalizedSearchTerms.length;
  const searchRankConfig = {
    ...config,
    onlyFilterByCategory
  };

  // If we aren't filtering on search terms, matching on category is satisfactory.
  // If we are, then we need more than a category match.
  const threshold = onlyFilterByCategory ? 0 : 1;
  const rankedItems = items.map(item => {
    return [item, getItemSearchRank(item, searchInput, searchRankConfig)];
  }).filter(([, rank]) => rank > threshold);

  // If we didn't have terms to search on, there's no point sorting.
  if (normalizedSearchTerms.length === 0) {
    return rankedItems.map(([item]) => item);
  }
  rankedItems.sort(([, rank1], [, rank2]) => rank2 - rank1);
  return rankedItems.map(([item]) => item);
};

/**
 * Get the search rank for a given item and a specific search term.
 * The better the match, the higher the rank.
 * If the rank equals 0, it should be excluded from the results.
 *
 * @param {Object} item       Item to filter.
 * @param {string} searchTerm Search term.
 * @param {Object} config     Search Config.
 *
 * @return {number} Search Rank.
 */
function getItemSearchRank(item, searchTerm, config) {
  const {
    categoryId,
    getName = defaultGetName,
    getTitle = defaultGetTitle,
    getDescription = defaultGetDescription,
    getKeywords = defaultGetKeywords,
    hasCategory = defaultHasCategory,
    onlyFilterByCategory
  } = config;
  let rank = categoryId === PATTERN_DEFAULT_CATEGORY || categoryId === PATTERN_USER_CATEGORY && item.type === PATTERN_TYPES.user || hasCategory(item, categoryId) ? 1 : 0;

  // If an item doesn't belong to the current category or we don't have
  // search terms to filter by, return the initial rank value.
  if (!rank || onlyFilterByCategory) {
    return rank;
  }
  const name = getName(item);
  const title = getTitle(item);
  const description = getDescription(item);
  const keywords = getKeywords(item);
  const normalizedSearchInput = normalizeSearchInput(searchTerm);
  const normalizedTitle = normalizeSearchInput(title);

  // Prefers exact matches
  // Then prefers if the beginning of the title matches the search term
  // name, keywords, description matches come later.
  if (normalizedSearchInput === normalizedTitle) {
    rank += 30;
  } else if (normalizedTitle.startsWith(normalizedSearchInput)) {
    rank += 20;
  } else {
    const terms = [name, title, description, ...keywords].join(' ');
    const normalizedSearchTerms = extractWords(normalizedSearchInput);
    const unmatchedTerms = removeMatchingTerms(normalizedSearchTerms, terms);
    if (unmatchedTerms.length === 0) {
      rank += 10;
    }
  }
  return rank;
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/page-patterns/use-patterns.js
/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */





const EMPTY_PATTERN_LIST = [];
const createTemplatePartId = (theme, slug) => theme && slug ? theme + '//' + slug : null;
const templatePartToPattern = templatePart => ({
  blocks: (0,external_wp_blocks_namespaceObject.parse)(templatePart.content.raw, {
    __unstableSkipMigrationLogs: true
  }),
  categories: [templatePart.area],
  description: templatePart.description || '',
  isCustom: templatePart.source === TEMPLATE_ORIGINS.custom,
  keywords: templatePart.keywords || [],
  id: createTemplatePartId(templatePart.theme, templatePart.slug),
  name: createTemplatePartId(templatePart.theme, templatePart.slug),
  title: (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(templatePart.title.rendered),
  type: templatePart.type,
  templatePart
});
const selectTemplatePartsAsPatterns = rememo((select, categoryId, search = '') => {
  var _getEntityRecords;
  const {
    getEntityRecords,
    getIsResolving
  } = select(external_wp_coreData_namespaceObject.store);
  const {
    __experimentalGetDefaultTemplatePartAreas
  } = select(external_wp_editor_namespaceObject.store);
  const query = {
    per_page: -1
  };
  const rawTemplateParts = (_getEntityRecords = getEntityRecords('postType', TEMPLATE_PART_POST_TYPE, query)) !== null && _getEntityRecords !== void 0 ? _getEntityRecords : EMPTY_PATTERN_LIST;
  const templateParts = rawTemplateParts.map(templatePart => templatePartToPattern(templatePart));

  // In the case where a custom template part area has been removed we need
  // the current list of areas to cross check against so orphaned template
  // parts can be treated as uncategorized.
  const knownAreas = __experimentalGetDefaultTemplatePartAreas() || [];
  const templatePartAreas = knownAreas.map(area => area.area);
  const templatePartHasCategory = (item, category) => {
    if (category !== TEMPLATE_PART_AREA_DEFAULT_CATEGORY) {
      return item.templatePart.area === category;
    }
    return item.templatePart.area === category || !templatePartAreas.includes(item.templatePart.area);
  };
  const isResolving = getIsResolving('getEntityRecords', ['postType', TEMPLATE_PART_POST_TYPE, query]);
  const patterns = searchItems(templateParts, search, {
    categoryId,
    hasCategory: templatePartHasCategory
  });
  return {
    patterns,
    isResolving
  };
}, select => [select(external_wp_coreData_namespaceObject.store).getEntityRecords('postType', TEMPLATE_PART_POST_TYPE, {
  per_page: -1
}), select(external_wp_coreData_namespaceObject.store).getIsResolving('getEntityRecords', ['postType', TEMPLATE_PART_POST_TYPE, {
  per_page: -1
}]), select(external_wp_editor_namespaceObject.store).__experimentalGetDefaultTemplatePartAreas()]);
const selectThemePatterns = rememo(select => {
  var _settings$__experimen;
  const {
    getSettings
  } = unlock(select(store_store));
  const {
    getIsResolving
  } = select(external_wp_coreData_namespaceObject.store);
  const settings = getSettings();
  const blockPatterns = (_settings$__experimen = settings.__experimentalAdditionalBlockPatterns) !== null && _settings$__experimen !== void 0 ? _settings$__experimen : settings.__experimentalBlockPatterns;
  const restBlockPatterns = select(external_wp_coreData_namespaceObject.store).getBlockPatterns();
  const patterns = [...(blockPatterns || []), ...(restBlockPatterns || [])].filter(pattern => !EXCLUDED_PATTERN_SOURCES.includes(pattern.source)).filter(filterOutDuplicatesByName).filter(pattern => pattern.inserter !== false).map(pattern => ({
    ...pattern,
    keywords: pattern.keywords || [],
    type: PATTERN_TYPES.theme,
    blocks: (0,external_wp_blocks_namespaceObject.parse)(pattern.content, {
      __unstableSkipMigrationLogs: true
    })
  }));
  return {
    patterns,
    isResolving: getIsResolving('getBlockPatterns')
  };
}, select => [select(external_wp_coreData_namespaceObject.store).getBlockPatterns(), select(external_wp_coreData_namespaceObject.store).getIsResolving('getBlockPatterns'), unlock(select(store_store)).getSettings()]);
const selectPatterns = rememo((select, categoryId, syncStatus, search = '') => {
  const {
    patterns: themePatterns,
    isResolving: isResolvingThemePatterns
  } = selectThemePatterns(select);
  const {
    patterns: userPatterns,
    isResolving: isResolvingUserPatterns
  } = selectUserPatterns(select);
  let patterns = [...(themePatterns || []), ...(userPatterns || [])];
  if (syncStatus) {
    // User patterns can have their sync statuses checked directly
    // Non-user patterns are all unsynced for the time being.
    patterns = patterns.filter(pattern => {
      return pattern.type === PATTERN_TYPES.user ? pattern.syncStatus === syncStatus : syncStatus === PATTERN_SYNC_TYPES.unsynced;
    });
  }
  if (categoryId) {
    patterns = searchItems(patterns, search, {
      categoryId,
      hasCategory: (item, currentCategory) => item.categories?.includes(currentCategory)
    });
  } else {
    patterns = searchItems(patterns, search, {
      hasCategory: item => !item.hasOwnProperty('categories')
    });
  }
  return {
    patterns,
    isResolving: isResolvingThemePatterns || isResolvingUserPatterns
  };
}, select => [selectThemePatterns(select), selectUserPatterns(select)]);

/**
 * Converts a post of type `wp_block` to a 'pattern item' that more closely
 * matches the structure of theme provided patterns.
 *
 * @param {Object} patternPost The `wp_block` record being normalized.
 * @param {Map}    categories  A Map of user created categories.
 *
 * @return {Object} The normalized item.
 */
const convertPatternPostToItem = (patternPost, categories) => ({
  blocks: (0,external_wp_blocks_namespaceObject.parse)(patternPost.content.raw, {
    __unstableSkipMigrationLogs: true
  }),
  ...(patternPost.wp_pattern_category.length > 0 && {
    categories: patternPost.wp_pattern_category.map(patternCategoryId => categories && categories.get(patternCategoryId) ? categories.get(patternCategoryId).slug : patternCategoryId)
  }),
  termLabels: patternPost.wp_pattern_category.map(patternCategoryId => categories?.get(patternCategoryId) ? categories.get(patternCategoryId).label : patternCategoryId),
  id: patternPost.id,
  name: patternPost.slug,
  syncStatus: patternPost.wp_pattern_sync_status || PATTERN_SYNC_TYPES.full,
  title: patternPost.title.raw,
  type: patternPost.type,
  patternPost
});
const selectUserPatterns = rememo((select, syncStatus, search = '') => {
  const {
    getEntityRecords,
    getIsResolving,
    getUserPatternCategories
  } = select(external_wp_coreData_namespaceObject.store);
  const query = {
    per_page: -1
  };
  const patternPosts = getEntityRecords('postType', PATTERN_TYPES.user, query);
  const userPatternCategories = getUserPatternCategories();
  const categories = new Map();
  userPatternCategories.forEach(userCategory => categories.set(userCategory.id, userCategory));
  let patterns = patternPosts ? patternPosts.map(record => convertPatternPostToItem(record, categories)) : EMPTY_PATTERN_LIST;
  const isResolving = getIsResolving('getEntityRecords', ['postType', PATTERN_TYPES.user, query]);
  if (syncStatus) {
    patterns = patterns.filter(pattern => pattern.syncStatus === syncStatus);
  }
  patterns = searchItems(patterns, search, {
    // We exit user pattern retrieval early if we aren't in the
    // catch-all category for user created patterns, so it has
    // to be in the category.
    hasCategory: () => true
  });
  return {
    patterns,
    isResolving,
    categories: userPatternCategories
  };
}, select => [select(external_wp_coreData_namespaceObject.store).getEntityRecords('postType', PATTERN_TYPES.user, {
  per_page: -1
}), select(external_wp_coreData_namespaceObject.store).getIsResolving('getEntityRecords', ['postType', PATTERN_TYPES.user, {
  per_page: -1
}]), select(external_wp_coreData_namespaceObject.store).getUserPatternCategories()]);
const usePatterns = (categoryType, categoryId, {
  search = '',
  syncStatus
} = {}) => {
  return (0,external_wp_data_namespaceObject.useSelect)(select => {
    if (categoryType === TEMPLATE_PART_POST_TYPE) {
      return selectTemplatePartsAsPatterns(select, categoryId, search);
    } else if (categoryType === PATTERN_TYPES.theme) {
      return selectPatterns(select, categoryId, syncStatus, search);
    } else if (categoryType === PATTERN_TYPES.user) {
      return selectUserPatterns(select, syncStatus, search);
    }
    return {
      patterns: EMPTY_PATTERN_LIST,
      isResolving: false
    };
  }, [categoryId, categoryType, search, syncStatus]);
};
/* harmony default export */ const use_patterns = (usePatterns);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-patterns/use-pattern-categories.js
/**
 * WordPress dependencies
 */



/**
 * Internal dependencies
 */




function usePatternCategories() {
  const defaultCategories = useDefaultPatternCategories();
  defaultCategories.push({
    name: TEMPLATE_PART_AREA_DEFAULT_CATEGORY,
    label: (0,external_wp_i18n_namespaceObject.__)('Uncategorized')
  });
  const themePatterns = useThemePatterns();
  const {
    patterns: userPatterns,
    categories: userPatternCategories
  } = use_patterns(PATTERN_TYPES.user);
  const patternCategories = (0,external_wp_element_namespaceObject.useMemo)(() => {
    const categoryMap = {};
    const categoriesWithCounts = [];

    // Create a map for easier counting of patterns in categories.
    defaultCategories.forEach(category => {
      if (!categoryMap[category.name]) {
        categoryMap[category.name] = {
          ...category,
          count: 0
        };
      }
    });
    userPatternCategories.forEach(category => {
      if (!categoryMap[category.name]) {
        categoryMap[category.name] = {
          ...category,
          count: 0
        };
      }
    });

    // Update the category counts to reflect theme registered patterns.
    themePatterns.forEach(pattern => {
      pattern.categories?.forEach(category => {
        if (categoryMap[category]) {
          categoryMap[category].count += 1;
        }
      });
      // If the pattern has no categories, add it to uncategorized.
      if (!pattern.categories?.length) {
        categoryMap.uncategorized.count += 1;
      }
    });

    // Update the category counts to reflect user registered patterns.
    userPatterns.forEach(pattern => {
      pattern.categories?.forEach(category => {
        if (categoryMap[category]) {
          categoryMap[category].count += 1;
        }
      });
      // If the pattern has no categories, add it to uncategorized.
      if (!pattern.categories?.length) {
        categoryMap.uncategorized.count += 1;
      }
    });

    // Filter categories so we only have those containing patterns.
    [...defaultCategories, ...userPatternCategories].forEach(category => {
      if (categoryMap[category.name].count && !categoriesWithCounts.find(cat => cat.name === category.name)) {
        categoriesWithCounts.push(categoryMap[category.name]);
      }
    });
    const sortedCategories = categoriesWithCounts.sort((a, b) => a.label.localeCompare(b.label));
    sortedCategories.unshift({
      name: PATTERN_USER_CATEGORY,
      label: (0,external_wp_i18n_namespaceObject.__)('My patterns'),
      count: userPatterns.length
    });
    sortedCategories.unshift({
      name: PATTERN_DEFAULT_CATEGORY,
      label: (0,external_wp_i18n_namespaceObject.__)('All patterns'),
      description: (0,external_wp_i18n_namespaceObject.__)('A list of all patterns from all sources.'),
      count: themePatterns.length + userPatterns.length
    });
    return sortedCategories;
  }, [defaultCategories, themePatterns, userPatternCategories, userPatterns]);
  return {
    patternCategories,
    hasPatterns: !!patternCategories.length
  };
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-patterns/use-template-part-areas.js
/**
 * WordPress dependencies
 */




/**
 * Internal dependencies
 */

const useTemplatePartsGroupedByArea = items => {
  const allItems = items || [];
  const templatePartAreas = (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_editor_namespaceObject.store).__experimentalGetDefaultTemplatePartAreas(), []);

  // Create map of template areas ensuring that default areas are displayed before
  // any custom registered template part areas.
  const knownAreas = {
    header: {},
    footer: {},
    sidebar: {},
    uncategorized: {}
  };
  templatePartAreas.forEach(templatePartArea => knownAreas[templatePartArea.area] = {
    ...templatePartArea,
    templateParts: []
  });
  const groupedByArea = allItems.reduce((accumulator, item) => {
    const key = accumulator[item.area] ? item.area : TEMPLATE_PART_AREA_DEFAULT_CATEGORY;
    accumulator[key].templateParts.push(item);
    return accumulator;
  }, knownAreas);
  return groupedByArea;
};
function useTemplatePartAreas() {
  const {
    records: templateParts,
    isResolving: isLoading
  } = (0,external_wp_coreData_namespaceObject.useEntityRecords)('postType', TEMPLATE_PART_POST_TYPE, {
    per_page: -1
  });
  return {
    hasTemplateParts: templateParts ? !!templateParts.length : false,
    isLoading,
    templatePartAreas: useTemplatePartsGroupedByArea(templateParts)
  };
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-patterns/index.js

/**
 * WordPress dependencies
 */









/**
 * Internal dependencies
 */









function TemplatePartGroup({
  areas,
  currentArea,
  currentType
}) {
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)("div", {
    className: "edit-site-sidebar-navigation-screen-patterns__group-header"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHeading, {
    level: 2
  }, (0,external_wp_i18n_namespaceObject.__)('Template parts'))), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItemGroup, {
    className: "edit-site-sidebar-navigation-screen-patterns__group"
  }, Object.entries(areas).map(([area, {
    label,
    templateParts
  }]) => (0,external_React_.createElement)(CategoryItem, {
    key: area,
    count: templateParts?.length,
    icon: (0,external_wp_editor_namespaceObject.getTemplatePartIcon)(area),
    label: label,
    id: area,
    type: TEMPLATE_PART_POST_TYPE,
    isActive: currentArea === area && currentType === TEMPLATE_PART_POST_TYPE
  }))));
}
function PatternCategoriesGroup({
  categories,
  currentCategory,
  currentType
}) {
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItemGroup, {
    className: "edit-site-sidebar-navigation-screen-patterns__group"
  }, categories.map(category => (0,external_React_.createElement)(CategoryItem, {
    key: category.name,
    count: category.count,
    label: category.label,
    icon: library_file,
    id: category.name,
    type: "pattern",
    isActive: currentCategory === `${category.name}` && (currentType === PATTERN_TYPES.theme || currentType === PATTERN_TYPES.user)
  }))));
}
function SidebarNavigationScreenPatterns() {
  const isMobileViewport = (0,external_wp_compose_namespaceObject.useViewportMatch)('medium', '<');
  const {
    categoryType,
    categoryId
  } = (0,external_wp_url_namespaceObject.getQueryArgs)(window.location.href);
  const currentCategory = categoryId || PATTERN_DEFAULT_CATEGORY;
  const currentType = categoryType || PATTERN_TYPES.theme;
  const {
    templatePartAreas,
    hasTemplateParts,
    isLoading
  } = useTemplatePartAreas();
  const {
    patternCategories,
    hasPatterns
  } = usePatternCategories();
  const isBlockBasedTheme = (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_coreData_namespaceObject.store).getCurrentTheme()?.is_block_theme, []);
  const isTemplatePartsMode = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const settings = select(store_store).getSettings();
    return !!settings.supportsTemplatePartsMode;
  }, []);
  const templatePartsLink = useLink({
    path: '/wp_template_part/all',
    // If a classic theme that supports template parts accessed
    // the Patterns page directly, preserve that state in the URL.
    didAccessPatternsPage: !isBlockBasedTheme && isTemplatePartsMode ? 1 : undefined
  });
  const footer = !isMobileViewport ? (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItemGroup, null, (0,external_React_.createElement)(SidebarNavigationItem, {
    as: "a",
    href: "edit.php?post_type=wp_block",
    withChevron: true
  }, (0,external_wp_i18n_namespaceObject.__)('Manage all of my patterns')), (isBlockBasedTheme || isTemplatePartsMode) && (0,external_React_.createElement)(SidebarNavigationItem, {
    withChevron: true,
    ...templatePartsLink
  }, (0,external_wp_i18n_namespaceObject.__)('Manage all template parts'))) : undefined;
  return (0,external_React_.createElement)(SidebarNavigationScreen, {
    isRoot: !isBlockBasedTheme,
    title: (0,external_wp_i18n_namespaceObject.__)('Patterns'),
    description: (0,external_wp_i18n_namespaceObject.__)('Manage what patterns are available when editing the site.'),
    actions: (0,external_React_.createElement)(AddNewPattern, null),
    footer: footer,
    content: (0,external_React_.createElement)(external_React_.Fragment, null, isLoading && (0,external_wp_i18n_namespaceObject.__)('Loading patterns…'), !isLoading && (0,external_React_.createElement)(external_React_.Fragment, null, !hasTemplateParts && !hasPatterns && (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItemGroup, {
      className: "edit-site-sidebar-navigation-screen-patterns__group"
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItem, null, (0,external_wp_i18n_namespaceObject.__)('No template parts or patterns found'))), hasPatterns && (0,external_React_.createElement)(PatternCategoriesGroup, {
      categories: patternCategories,
      currentCategory: currentCategory,
      currentType: currentType
    }), hasTemplateParts && (0,external_React_.createElement)(TemplatePartGroup, {
      areas: templatePartAreas,
      currentArea: currentCategory,
      currentType: currentType
    })))
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sync-state-with-url/use-init-edited-entity-from-url.js
/**
 * WordPress dependencies
 */





/**
 * Internal dependencies
 */



const {
  useLocation: use_init_edited_entity_from_url_useLocation
} = unlock(external_wp_router_namespaceObject.privateApis);
const postTypesWithoutParentTemplate = [constants_TEMPLATE_POST_TYPE, TEMPLATE_PART_POST_TYPE, NAVIGATION_POST_TYPE, PATTERN_TYPES.user];
function useResolveEditedEntityAndContext({
  path,
  postId,
  postType
}) {
  const {
    hasLoadedAllDependencies,
    homepageId,
    postsPageId,
    url,
    frontPageTemplateId
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getSite,
      getUnstableBase,
      getEntityRecords
    } = select(external_wp_coreData_namespaceObject.store);
    const siteData = getSite();
    const base = getUnstableBase();
    const templates = getEntityRecords('postType', constants_TEMPLATE_POST_TYPE, {
      per_page: -1
    });
    const _homepageId = siteData?.show_on_front === 'page' && ['number', 'string'].includes(typeof siteData.page_on_front) && !!+siteData.page_on_front // We also need to check if it's not zero(`0`).
    ? siteData.page_on_front.toString() : null;
    const _postsPageId = siteData?.show_on_front === 'page' && ['number', 'string'].includes(typeof siteData.page_for_posts) ? siteData.page_for_posts.toString() : null;
    let _frontPageTemplateId;
    if (templates) {
      const frontPageTemplate = templates.find(t => t.slug === 'front-page');
      _frontPageTemplateId = frontPageTemplate ? frontPageTemplate.id : false;
    }
    return {
      hasLoadedAllDependencies: !!base && !!siteData,
      homepageId: _homepageId,
      postsPageId: _postsPageId,
      url: base?.home,
      frontPageTemplateId: _frontPageTemplateId
    };
  }, []);

  /**
   * This is a hook that recreates the logic to resolve a template for a given WordPress postID postTypeId
   * in order to match the frontend as closely as possible in the site editor.
   *
   * It is not possible to rely on the server logic because there maybe unsaved changes that impact the template resolution.
   */
  const resolvedTemplateId = (0,external_wp_data_namespaceObject.useSelect)(select => {
    // If we're rendering a post type that doesn't have a template
    // no need to resolve its template.
    if (postTypesWithoutParentTemplate.includes(postType)) {
      return undefined;
    }
    const {
      getEditedEntityRecord,
      getEntityRecords,
      getDefaultTemplateId,
      __experimentalGetTemplateForLink
    } = select(external_wp_coreData_namespaceObject.store);
    function resolveTemplateForPostTypeAndId(postTypeToResolve, postIdToResolve) {
      // For the front page, we always use the front page template if existing.
      if (postTypeToResolve === 'page' && homepageId === postIdToResolve) {
        // We're still checking whether the front page template exists.
        // Don't resolve the template yet.
        if (frontPageTemplateId === undefined) {
          return undefined;
        }
        if (!!frontPageTemplateId) {
          return frontPageTemplateId;
        }
      }
      const editedEntity = getEditedEntityRecord('postType', postTypeToResolve, postIdToResolve);
      if (!editedEntity) {
        return undefined;
      }
      // Check if the current page is the posts page.
      if (postTypeToResolve === 'page' && postsPageId === postIdToResolve) {
        return __experimentalGetTemplateForLink(editedEntity.link)?.id;
      }
      // First see if the post/page has an assigned template and fetch it.
      const currentTemplateSlug = editedEntity.template;
      if (currentTemplateSlug) {
        const currentTemplate = getEntityRecords('postType', constants_TEMPLATE_POST_TYPE, {
          per_page: -1
        })?.find(({
          slug
        }) => slug === currentTemplateSlug);
        if (currentTemplate) {
          return currentTemplate.id;
        }
      }
      // If no template is assigned, use the default template.
      let slugToCheck;
      // In `draft` status we might not have a slug available, so we use the `single`
      // post type templates slug(ex page, single-post, single-product etc..).
      // Pages do not need the `single` prefix in the slug to be prioritized
      // through template hierarchy.
      if (editedEntity.slug) {
        slugToCheck = postTypeToResolve === 'page' ? `${postTypeToResolve}-${editedEntity.slug}` : `single-${postTypeToResolve}-${editedEntity.slug}`;
      } else {
        slugToCheck = postTypeToResolve === 'page' ? 'page' : `single-${postTypeToResolve}`;
      }
      return getDefaultTemplateId({
        slug: slugToCheck
      });
    }
    if (!hasLoadedAllDependencies) {
      return undefined;
    }

    // If we're rendering a specific page, post... we need to resolve its template.
    if (postType && postId) {
      return resolveTemplateForPostTypeAndId(postType, postId);
    }

    // Some URLs in list views are different
    if (path === '/pages' && postId) {
      return resolveTemplateForPostTypeAndId('page', postId);
    }

    // If we're rendering the home page, and we have a static home page, resolve its template.
    if (homepageId) {
      return resolveTemplateForPostTypeAndId('page', homepageId);
    }

    // If we're not rendering a specific page, use the front page template.
    if (url) {
      const template = __experimentalGetTemplateForLink(url);
      return template?.id;
    }
  }, [homepageId, postsPageId, hasLoadedAllDependencies, url, postId, postType, path, frontPageTemplateId]);
  const context = (0,external_wp_element_namespaceObject.useMemo)(() => {
    if (postTypesWithoutParentTemplate.includes(postType)) {
      return {};
    }
    if (postType && postId) {
      return {
        postType,
        postId
      };
    }

    // Some URLs in list views are different
    if (path === '/pages' && postId) {
      return {
        postType: 'page',
        postId
      };
    }
    if (homepageId) {
      return {
        postType: 'page',
        postId: homepageId
      };
    }
    return {};
  }, [homepageId, postType, postId, path]);
  if (path === '/wp_template/all' && postId) {
    return {
      isReady: true,
      postType: 'wp_template',
      postId,
      context
    };
  }
  if (path === '/wp_template_part/all' && postId) {
    return {
      isReady: true,
      postType: 'wp_template_part',
      postId,
      context
    };
  }
  if (postTypesWithoutParentTemplate.includes(postType)) {
    return {
      isReady: true,
      postType,
      postId,
      context
    };
  }
  if (hasLoadedAllDependencies) {
    return {
      isReady: resolvedTemplateId !== undefined,
      postType: constants_TEMPLATE_POST_TYPE,
      postId: resolvedTemplateId,
      context
    };
  }
  return {
    isReady: false
  };
}
function useInitEditedEntityFromURL() {
  const {
    params = {}
  } = use_init_edited_entity_from_url_useLocation();
  const {
    postType,
    postId,
    context,
    isReady
  } = useResolveEditedEntityAndContext(params);
  const {
    setEditedEntity
  } = (0,external_wp_data_namespaceObject.useDispatch)(store_store);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    if (isReady) {
      setEditedEntity(postType, postId, context);
    }
  }, [isReady, postType, postId, context, setEditedEntity]);
}

;// CONCATENATED MODULE: ./node_modules/upper-case-first/dist.es2015/index.js
/**
 * Upper case the first character of an input string.
 */
function upperCaseFirst(input) {
    return input.charAt(0).toUpperCase() + input.substr(1);
}

;// CONCATENATED MODULE: ./node_modules/sentence-case/dist.es2015/index.js



function sentenceCaseTransform(input, index) {
    var result = input.toLowerCase();
    if (index === 0)
        return upperCaseFirst(result);
    return result;
}
function sentenceCase(input, options) {
    if (options === void 0) { options = {}; }
    return noCase(input, __assign({ delimiter: " ", transform: sentenceCaseTransform }, options));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/chevron-up.js

/**
 * WordPress dependencies
 */

const chevronUp = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M6.5 12.4L12 8l5.5 4.4-.9 1.2L12 10l-4.5 3.6-1-1.2z"
}));
/* harmony default export */ const chevron_up = (chevronUp);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/chevron-down.js

/**
 * WordPress dependencies
 */

const chevronDown = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M17.5 11.6L12 16l-5.5-4.4.9-1.2L12 14l4.5-3.6 1 1.2z"
}));
/* harmony default export */ const chevron_down = (chevronDown);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sync-state-with-url/use-sync-path-with-url.js
/**
 * WordPress dependencies
 */




/**
 * Internal dependencies
 */


const {
  useLocation: use_sync_path_with_url_useLocation,
  useHistory: use_sync_path_with_url_useHistory
} = unlock(external_wp_router_namespaceObject.privateApis);
function getPathFromURL(urlParams) {
  var _urlParams$path;
  let path = (_urlParams$path = urlParams?.path) !== null && _urlParams$path !== void 0 ? _urlParams$path : '/';

  // Compute the navigator path based on the URL params.
  if (urlParams?.postType && urlParams?.postId) {
    switch (urlParams.postType) {
      case PATTERN_TYPES.user:
      case constants_TEMPLATE_POST_TYPE:
      case TEMPLATE_PART_POST_TYPE:
      case 'page':
        path = `/${encodeURIComponent(urlParams.postType)}/${encodeURIComponent(urlParams.postId)}`;
        break;
      default:
        path = `/navigation/${encodeURIComponent(urlParams.postType)}/${encodeURIComponent(urlParams.postId)}`;
    }
  }
  return path;
}
function isSubset(subset, superset) {
  return Object.entries(subset).every(([key, value]) => {
    return superset[key] === value;
  });
}
function useSyncPathWithURL() {
  const history = use_sync_path_with_url_useHistory();
  const {
    params: urlParams
  } = use_sync_path_with_url_useLocation();
  const {
    location: navigatorLocation,
    params: navigatorParams,
    goTo
  } = (0,external_wp_components_namespaceObject.__experimentalUseNavigator)();
  const isMounting = (0,external_wp_element_namespaceObject.useRef)(true);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    // The navigatorParams are only initially filled properly when the
    // navigator screens mount. so we ignore the first synchronisation.
    if (isMounting.current) {
      isMounting.current = false;
      return;
    }
    function updateUrlParams(newUrlParams) {
      if (isSubset(newUrlParams, urlParams)) {
        return;
      }
      const updatedParams = {
        ...urlParams,
        ...newUrlParams
      };
      history.push(updatedParams);
    }
    if (navigatorParams?.postType && navigatorParams?.postId) {
      updateUrlParams({
        postType: navigatorParams?.postType,
        postId: navigatorParams?.postId,
        path: undefined,
        layout: undefined
      });
    } else if (navigatorLocation.path.startsWith('/page/') && navigatorParams?.postId) {
      updateUrlParams({
        postType: 'page',
        postId: navigatorParams?.postId,
        path: undefined,
        layout: undefined
      });
    } else if (navigatorLocation.path === '/patterns') {
      updateUrlParams({
        postType: undefined,
        postId: undefined,
        canvas: undefined,
        path: navigatorLocation.path
      });
    } else if (navigatorLocation.path === '/wp_template/all' && !window?.__experimentalAdminViews) {
      // When the experiment is disabled, we only support table layout.
      // Clear it out from the URL, so layouts other than table cannot be accessed.
      updateUrlParams({
        postType: undefined,
        categoryType: undefined,
        categoryId: undefined,
        path: navigatorLocation.path,
        layout: undefined
      });
    } else if (
    // These sidebar paths are special in the sense that the url in these pages may or may not have a postId and we need to retain it if it has.
    // The "type" property should be kept as well.
    navigatorLocation.path === '/pages' && window?.__experimentalAdminViews || navigatorLocation.path === '/wp_template/all' && window?.__experimentalAdminViews || navigatorLocation.path === '/wp_template_part/all' && window?.__experimentalAdminViews) {
      updateUrlParams({
        postType: undefined,
        categoryType: undefined,
        categoryId: undefined,
        path: navigatorLocation.path
      });
    } else {
      updateUrlParams({
        postType: undefined,
        postId: undefined,
        categoryType: undefined,
        categoryId: undefined,
        layout: undefined,
        path: navigatorLocation.path === '/' ? undefined : navigatorLocation.path
      });
    }
  },
  // Trigger only when navigator changes to prevent infinite loops.
  // eslint-disable-next-line react-hooks/exhaustive-deps
  [navigatorLocation?.path, navigatorParams]);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    const path = getPathFromURL(urlParams);
    if (navigatorLocation.path !== path) {
      goTo(path);
    }
  },
  // Trigger only when URL changes to prevent infinite loops.
  // eslint-disable-next-line react-hooks/exhaustive-deps
  [urlParams]);
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-navigation-menus/leaf-more-menu.js

/**
 * WordPress dependencies
 */








const POPOVER_PROPS = {
  className: 'block-editor-block-settings-menu__popover',
  placement: 'bottom-start'
};

/**
 * Internal dependencies
 */



const {
  useLocation: leaf_more_menu_useLocation,
  useHistory: leaf_more_menu_useHistory
} = unlock(external_wp_router_namespaceObject.privateApis);
function LeafMoreMenu(props) {
  const location = leaf_more_menu_useLocation();
  const history = leaf_more_menu_useHistory();
  const {
    block
  } = props;
  const {
    clientId
  } = block;
  const {
    moveBlocksDown,
    moveBlocksUp,
    removeBlocks
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_blockEditor_namespaceObject.store);
  const removeLabel = (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: block name */
  (0,external_wp_i18n_namespaceObject.__)('Remove %s'), (0,external_wp_blockEditor_namespaceObject.BlockTitle)({
    clientId,
    maximumLength: 25
  }));
  const goToLabel = (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: block name */
  (0,external_wp_i18n_namespaceObject.__)('Go to %s'), (0,external_wp_blockEditor_namespaceObject.BlockTitle)({
    clientId,
    maximumLength: 25
  }));
  const rootClientId = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getBlockRootClientId
    } = select(external_wp_blockEditor_namespaceObject.store);
    return getBlockRootClientId(clientId);
  }, [clientId]);
  const onGoToPage = (0,external_wp_element_namespaceObject.useCallback)(selectedBlock => {
    const {
      attributes,
      name
    } = selectedBlock;
    if (attributes.kind === 'post-type' && attributes.id && attributes.type && history) {
      history.push({
        postType: attributes.type,
        postId: attributes.id,
        ...(isPreviewingTheme() && {
          wp_theme_preview: currentlyPreviewingTheme()
        })
      }, {
        backPath: getPathFromURL(location.params)
      });
    }
    if (name === 'core/page-list-item' && attributes.id && history) {
      history.push({
        postType: 'page',
        postId: attributes.id,
        ...(isPreviewingTheme() && {
          wp_theme_preview: currentlyPreviewingTheme()
        })
      }, {
        backPath: getPathFromURL(location.params)
      });
    }
  }, [history]);
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.DropdownMenu, {
    icon: more_vertical,
    label: (0,external_wp_i18n_namespaceObject.__)('Options'),
    className: "block-editor-block-settings-menu",
    popoverProps: POPOVER_PROPS,
    noIcons: true,
    ...props
  }, ({
    onClose
  }) => (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuGroup, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
    icon: chevron_up,
    onClick: () => {
      moveBlocksUp([clientId], rootClientId);
      onClose();
    }
  }, (0,external_wp_i18n_namespaceObject.__)('Move up')), (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
    icon: chevron_down,
    onClick: () => {
      moveBlocksDown([clientId], rootClientId);
      onClose();
    }
  }, (0,external_wp_i18n_namespaceObject.__)('Move down')), block.attributes?.type === 'page' && block.attributes?.id && (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
    onClick: () => {
      onGoToPage(block);
      onClose();
    }
  }, goToLabel)), (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuGroup, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
    onClick: () => {
      removeBlocks([clientId], false);
      onClose();
    }
  }, removeLabel))));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-navigation-menus/navigation-menu-content.js

/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */


const {
  PrivateListView
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);

// Needs to be kept in sync with the query used at packages/block-library/src/page-list/edit.js.
const MAX_PAGE_COUNT = 100;
const PAGES_QUERY = ['postType', 'page', {
  per_page: MAX_PAGE_COUNT,
  _fields: ['id', 'link', 'menu_order', 'parent', 'title', 'type'],
  // TODO: When https://core.trac.wordpress.org/ticket/39037 REST API support for multiple orderby
  // values is resolved, update 'orderby' to [ 'menu_order', 'post_title' ] to provide a consistent
  // sort.
  orderby: 'menu_order',
  order: 'asc'
}];
function NavigationMenuContent({
  rootClientId
}) {
  const {
    listViewRootClientId,
    isLoading
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      areInnerBlocksControlled,
      getBlockName,
      getBlockCount,
      getBlockOrder
    } = select(external_wp_blockEditor_namespaceObject.store);
    const {
      isResolving
    } = select(external_wp_coreData_namespaceObject.store);
    const blockClientIds = getBlockOrder(rootClientId);
    const hasOnlyPageListBlock = blockClientIds.length === 1 && getBlockName(blockClientIds[0]) === 'core/page-list';
    const pageListHasBlocks = hasOnlyPageListBlock && getBlockCount(blockClientIds[0]) > 0;
    const isLoadingPages = isResolving('getEntityRecords', PAGES_QUERY);
    return {
      listViewRootClientId: pageListHasBlocks ? blockClientIds[0] : rootClientId,
      // This is a small hack to wait for the navigation block
      // to actually load its inner blocks.
      isLoading: !areInnerBlocksControlled(rootClientId) || isLoadingPages
    };
  }, [rootClientId]);
  const {
    replaceBlock,
    __unstableMarkNextChangeAsNotPersistent
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_blockEditor_namespaceObject.store);
  const offCanvasOnselect = (0,external_wp_element_namespaceObject.useCallback)(block => {
    if (block.name === 'core/navigation-link' && !block.attributes.url) {
      __unstableMarkNextChangeAsNotPersistent();
      replaceBlock(block.clientId, (0,external_wp_blocks_namespaceObject.createBlock)('core/navigation-link', block.attributes));
    }
  }, [__unstableMarkNextChangeAsNotPersistent, replaceBlock]);

  // The hidden block is needed because it makes block edit side effects trigger.
  // For example a navigation page list load its items has an effect on edit to load its items.
  return (0,external_React_.createElement)(external_React_.Fragment, null, !isLoading && (0,external_React_.createElement)(PrivateListView, {
    rootClientId: listViewRootClientId,
    onSelect: offCanvasOnselect,
    blockSettingsMenu: LeafMoreMenu,
    showAppender: false
  }), (0,external_React_.createElement)("div", {
    className: "edit-site-sidebar-navigation-screen-navigation-menus__helper-block-editor"
  }, (0,external_React_.createElement)(external_wp_blockEditor_namespaceObject.BlockList, null)));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-navigation-menu/navigation-menu-editor.js

/**
 * WordPress dependencies
 */





/**
 * Internal dependencies
 */



const navigation_menu_editor_noop = () => {};
function NavigationMenuEditor({
  navigationMenuId
}) {
  const {
    storedSettings
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getSettings
    } = unlock(select(store_store));
    return {
      storedSettings: getSettings()
    };
  }, []);
  const blocks = (0,external_wp_element_namespaceObject.useMemo)(() => {
    if (!navigationMenuId) {
      return [];
    }
    return [(0,external_wp_blocks_namespaceObject.createBlock)('core/navigation', {
      ref: navigationMenuId
    })];
  }, [navigationMenuId]);
  if (!navigationMenuId || !blocks?.length) {
    return null;
  }
  return (0,external_React_.createElement)(external_wp_blockEditor_namespaceObject.BlockEditorProvider, {
    settings: storedSettings,
    value: blocks,
    onChange: navigation_menu_editor_noop,
    onInput: navigation_menu_editor_noop
  }, (0,external_React_.createElement)("div", {
    className: "edit-site-sidebar-navigation-screen-navigation-menus__content"
  }, (0,external_React_.createElement)(NavigationMenuContent, {
    rootClientId: blocks[0].clientId
  })));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-pattern/use-navigation-menu-title.js
/**
 * WordPress dependencies
 */



/**
 * Internal dependencies
 */

function useNavigationMenuTitle(id) {
  return (0,external_wp_data_namespaceObject.useSelect)(select => {
    if (!id) {
      return undefined;
    }
    const editedRecord = select(external_wp_coreData_namespaceObject.store).getEditedEntityRecord('postType', NAVIGATION_POST_TYPE, id);

    // Do not display a 'trashed' navigation menu.
    return editedRecord.status === 'trash' ? undefined : editedRecord.title;
  }, [id]);
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-pattern/template-part-navigation-menu.js

/**
 * WordPress dependencies
 */



/**
 * Internal dependencies
 */


function TemplatePartNavigationMenu({
  id
}) {
  const title = useNavigationMenuTitle(id);
  if (!id || title === undefined) {
    return null;
  }
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHeading, {
    className: "edit-site-sidebar-navigation-screen-template-part-navigation-menu__title",
    size: "11",
    upperCase: true,
    weight: 500
  }, title || (0,external_wp_i18n_namespaceObject.__)('Navigation')), (0,external_React_.createElement)(NavigationMenuEditor, {
    navigationMenuId: id
  }));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-pattern/template-part-navigation-menu-list-item.js

/**
 * WordPress dependencies
 */


/**
 * Internal dependencies
 */




function TemplatePartNavigationMenuListItem({
  id
}) {
  const title = useNavigationMenuTitle(id);
  const linkInfo = useLink({
    postId: id,
    postType: NAVIGATION_POST_TYPE
  });
  if (!id || title === undefined) {
    return null;
  }
  return (0,external_React_.createElement)(SidebarNavigationItem, {
    withChevron: true,
    ...linkInfo
  }, title || (0,external_wp_i18n_namespaceObject.__)('(no title)'));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-pattern/template-part-navigation-menu-list.js

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function TemplatePartNavigationMenuList({
  menus
}) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItemGroup, {
    className: "edit-site-sidebar-navigation-screen-template-part-navigation-menu-list"
  }, menus.map(menuId => (0,external_React_.createElement)(TemplatePartNavigationMenuListItem, {
    key: menuId,
    id: menuId
  })));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-pattern/template-part-navigation-menus.js

/**
 * WordPress dependencies
 */


/**
 * Internal dependencies
 */


function TemplatePartNavigationMenus({
  menus
}) {
  if (!menus.length) return null;

  // if there is a single menu then render TemplatePartNavigationMenu
  if (menus.length === 1) {
    return (0,external_React_.createElement)(TemplatePartNavigationMenu, {
      id: menus[0]
    });
  }

  // if there are multiple menus then render TemplatePartNavigationMenuList
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHeading, {
    className: "edit-site-sidebar-navigation-screen-template-part-navigation-menu__title",
    size: "11",
    upperCase: true,
    weight: 500
  }, (0,external_wp_i18n_namespaceObject.__)('Navigation')), (0,external_React_.createElement)(TemplatePartNavigationMenuList, {
    menus: menus
  }));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-pattern/use-navigation-menu-content.js

/**
 * WordPress dependencies
 */


/**
 * Internal dependencies
 */



function getBlocksFromRecord(record) {
  if (record?.blocks) {
    return record?.blocks;
  }
  return record?.content && typeof record.content !== 'function' ? (0,external_wp_blocks_namespaceObject.parse)(record.content) : [];
}

/**
 * Retrieves a list of specific blocks from a given tree of blocks.
 *
 * @param {string} targetBlockType The name of the block type to find.
 * @param {Array}  blocks          A list of blocks from a template part entity.
 *
 * @return {Array} A list of any navigation blocks found in the blocks.
 */
function getBlocksOfTypeFromBlocks(targetBlockType, blocks) {
  if (!targetBlockType || !blocks?.length) {
    return [];
  }
  const findInBlocks = _blocks => {
    if (!_blocks) {
      return [];
    }
    const navigationBlocks = [];
    for (const block of _blocks) {
      if (block.name === targetBlockType) {
        navigationBlocks.push(block);
      }
      if (block?.innerBlocks) {
        const innerNavigationBlocks = findInBlocks(block.innerBlocks);
        if (innerNavigationBlocks.length) {
          navigationBlocks.push(...innerNavigationBlocks);
        }
      }
    }
    return navigationBlocks;
  };
  return findInBlocks(blocks);
}
function useNavigationMenuContent(postType, postId) {
  const {
    record
  } = useEditedEntityRecord(postType, postId);

  // Only managing navigation menus in template parts is supported
  // to match previous behaviour. This could potentially be expanded
  // to patterns as well.
  if (postType !== TEMPLATE_PART_POST_TYPE) {
    return;
  }
  const blocks = getBlocksFromRecord(record);
  const navigationBlocks = getBlocksOfTypeFromBlocks('core/navigation', blocks);
  if (!navigationBlocks.length) {
    return;
  }
  const navigationMenuIds = navigationBlocks?.map(block => block.attributes.ref);

  // Dedupe the Navigation blocks, as you can have multiple navigation blocks in the template.
  // Also, filter out undefined values, as blocks don't have an id when initially added.
  const uniqueNavigationMenuIds = [...new Set(navigationMenuIds)].filter(menuId => menuId);
  if (!uniqueNavigationMenuIds?.length) {
    return;
  }
  return (0,external_React_.createElement)(TemplatePartNavigationMenus, {
    menus: uniqueNavigationMenuIds
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-pattern/use-pattern-details.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */





/**
 * Internal dependencies
 */






function usePatternDetails(postType, postId) {
  const {
    getDescription,
    getTitle,
    record
  } = useEditedEntityRecord(postType, postId);
  const templatePartAreas = (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_editor_namespaceObject.store).__experimentalGetDefaultTemplatePartAreas(), []);
  const {
    currentTheme,
    userPatternCategories
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getCurrentTheme,
      getUserPatternCategories
    } = select(external_wp_coreData_namespaceObject.store);
    return {
      currentTheme: getCurrentTheme(),
      userPatternCategories: getUserPatternCategories()
    };
  }, []);
  const addedBy = useAddedBy(postType, postId);
  const isAddedByActiveTheme = addedBy.type === 'theme' && record.theme === currentTheme?.stylesheet;
  const title = getTitle();
  let description = getDescription();
  if (!description && addedBy.text) {
    description = postType === PATTERN_TYPES.user ? (0,external_wp_i18n_namespaceObject.sprintf)(
    // translators: %s: pattern title e.g: "Header".
    (0,external_wp_i18n_namespaceObject.__)('This is the %s pattern.'), getTitle()) : (0,external_wp_i18n_namespaceObject.sprintf)(
    // translators: %s: template part title e.g: "Header".
    (0,external_wp_i18n_namespaceObject.__)('This is the %s template part.'), getTitle());
  }
  if (!description && postType === PATTERN_TYPES.user && record?.title) {
    description = (0,external_wp_i18n_namespaceObject.sprintf)(
    // translators: %s: user created pattern title e.g. "Footer".
    (0,external_wp_i18n_namespaceObject.__)('This is the %s pattern.'), record.title);
  }
  const footer = record?.modified ? (0,external_React_.createElement)(SidebarNavigationScreenDetailsFooter, {
    record: record
  }) : null;
  const details = [];
  if (postType === PATTERN_TYPES.user || postType === TEMPLATE_PART_POST_TYPE) {
    details.push({
      label: (0,external_wp_i18n_namespaceObject.__)('Syncing'),
      value: record.wp_pattern_sync_status === PATTERN_SYNC_TYPES.unsynced ? (0,external_wp_i18n_namespaceObject._x)('Not synced', 'Text that indicates that the pattern is not synchronized') : (0,external_wp_i18n_namespaceObject._x)('Synced', 'Text that indicates that the pattern is synchronized')
    });
    if (record.wp_pattern_category?.length === 0) {
      details.push({
        label: (0,external_wp_i18n_namespaceObject.__)('Categories'),
        value: (0,external_wp_i18n_namespaceObject.__)('Uncategorized')
      });
    }
    if (record.wp_pattern_category?.length > 0) {
      const patternCategories = new Map();
      userPatternCategories.forEach(userCategory => patternCategories.set(userCategory.id, userCategory));
      const categories = record.wp_pattern_category.filter(category => patternCategories.get(category)).map(category => patternCategories.get(category).label);
      details.push({
        label: (0,external_wp_i18n_namespaceObject.__)('Categories'),
        value: categories.length > 0 ? categories.join(', ') : ''
      });
    }
  }
  if (postType === TEMPLATE_PART_POST_TYPE) {
    const templatePartArea = templatePartAreas.find(area => area.area === record.area);
    let areaDetailValue = templatePartArea?.label;
    if (!areaDetailValue) {
      areaDetailValue = record.area ? (0,external_wp_i18n_namespaceObject.sprintf)(
      // translators: %s: Sentenced cased template part area e.g: "My custom area".
      (0,external_wp_i18n_namespaceObject.__)('%s (removed)'), sentenceCase(record.area)) : (0,external_wp_i18n_namespaceObject.__)('None');
    }
    details.push({
      label: (0,external_wp_i18n_namespaceObject.__)('Area'),
      value: areaDetailValue
    });
  }
  if (postType === TEMPLATE_PART_POST_TYPE && addedBy.text && !isAddedByActiveTheme) {
    details.push({
      label: (0,external_wp_i18n_namespaceObject.__)('Added by'),
      value: (0,external_React_.createElement)("span", {
        className: "edit-site-sidebar-navigation-screen-pattern__added-by-description-author"
      }, addedBy.text)
    });
  }
  if (postType === TEMPLATE_PART_POST_TYPE && addedBy.text && (record.origin === TEMPLATE_ORIGINS.plugin || record.has_theme_file === true)) {
    details.push({
      label: (0,external_wp_i18n_namespaceObject.__)('Customized'),
      value: (0,external_React_.createElement)("span", {
        className: "edit-site-sidebar-navigation-screen-pattern__added-by-description-customized"
      }, addedBy.isCustomized ? (0,external_wp_i18n_namespaceObject.__)('Yes') : (0,external_wp_i18n_namespaceObject.__)('No'))
    });
  }
  const content = (0,external_React_.createElement)(external_React_.Fragment, null, useNavigationMenuContent(postType, postId), !!details.length && (0,external_React_.createElement)(SidebarNavigationScreenDetailsPanel, {
    spacing: 5,
    title: (0,external_wp_i18n_namespaceObject.__)('Details')
  }, details.map(({
    label,
    value
  }) => (0,external_React_.createElement)(SidebarNavigationScreenDetailsPanelRow, {
    key: label
  }, (0,external_React_.createElement)(SidebarNavigationScreenDetailsPanelLabel, null, label), (0,external_React_.createElement)(SidebarNavigationScreenDetailsPanelValue, null, value)))));
  return {
    title,
    description,
    content,
    footer
  };
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-pattern/index.js

/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */








function SidebarNavigationScreenPattern() {
  const navigator = (0,external_wp_components_namespaceObject.__experimentalUseNavigator)();
  const {
    params: {
      postType,
      postId
    }
  } = navigator;
  const {
    categoryType
  } = (0,external_wp_url_namespaceObject.getQueryArgs)(window.location.href);
  const {
    setCanvasMode
  } = unlock((0,external_wp_data_namespaceObject.useDispatch)(store_store));
  useInitEditedEntityFromURL();
  const patternDetails = usePatternDetails(postType, postId);

  // The absence of a category type in the query params for template parts
  // indicates the user has arrived at the template part via the "manage all"
  // page and the back button should return them to that list page.
  const backPath = !categoryType && postType === TEMPLATE_PART_POST_TYPE ? '/wp_template_part/all' : '/patterns';
  return (0,external_React_.createElement)(SidebarNavigationScreen, {
    actions: (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(TemplateActions, {
      postType: postType,
      postId: postId,
      toggleProps: {
        as: SidebarButton
      },
      onRemove: () => {
        navigator.goTo(backPath);
      }
    }), (0,external_React_.createElement)(SidebarButton, {
      onClick: () => setCanvasMode('edit'),
      label: (0,external_wp_i18n_namespaceObject.__)('Edit'),
      icon: library_pencil
    })),
    backPath: backPath,
    ...patternDetails
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-navigation-menus/constants.js
// This requested is preloaded in `gutenberg_preload_navigation_posts`.
// As unbounded queries are limited to 100 by `fetchAllMiddleware`
// on apiFetch this query is limited to 100.
// These parameters must be kept aligned with those in
// lib/compat/wordpress-6.3/navigation-block-preloading.php
// and
// block-library/src/navigation/constants.js
const PRELOADED_NAVIGATION_MENUS_QUERY = {
  per_page: 100,
  status: ['publish', 'draft'],
  order: 'desc',
  orderby: 'date'
};

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-navigation-menu/rename-modal.js

/**
 * WordPress dependencies
 */



const notEmptyString = testString => testString?.trim()?.length > 0;
function RenameModal({
  menuTitle,
  onClose,
  onSave
}) {
  const [editedMenuTitle, setEditedMenuTitle] = (0,external_wp_element_namespaceObject.useState)(menuTitle);
  const titleHasChanged = editedMenuTitle !== menuTitle;
  const isEditedMenuTitleValid = titleHasChanged && notEmptyString(editedMenuTitle);
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Modal, {
    title: (0,external_wp_i18n_namespaceObject.__)('Rename'),
    onRequestClose: onClose
  }, (0,external_React_.createElement)("form", {
    className: "sidebar-navigation__rename-modal-form"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    spacing: "3"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.TextControl, {
    __nextHasNoMarginBottom: true,
    __next40pxDefaultSize: true,
    value: editedMenuTitle,
    placeholder: (0,external_wp_i18n_namespaceObject.__)('Navigation title'),
    onChange: setEditedMenuTitle
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    justify: "right"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    __next40pxDefaultSize: true,
    variant: "tertiary",
    onClick: onClose
  }, (0,external_wp_i18n_namespaceObject.__)('Cancel')), (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    __next40pxDefaultSize: true,
    disabled: !isEditedMenuTitleValid,
    variant: "primary",
    type: "submit",
    onClick: e => {
      e.preventDefault();
      if (!isEditedMenuTitleValid) {
        return;
      }
      onSave({
        title: editedMenuTitle
      });

      // Immediate close avoids ability to hit save multiple times.
      onClose();
    }
  }, (0,external_wp_i18n_namespaceObject.__)('Save'))))));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-navigation-menu/delete-modal.js

/**
 * WordPress dependencies
 */


function delete_modal_RenameModal({
  onClose,
  onConfirm
}) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalConfirmDialog, {
    isOpen: true,
    onConfirm: e => {
      e.preventDefault();
      onConfirm();

      // Immediate close avoids ability to hit delete multiple times.
      onClose();
    },
    onCancel: onClose,
    confirmButtonText: (0,external_wp_i18n_namespaceObject.__)('Delete')
  }, (0,external_wp_i18n_namespaceObject.__)('Are you sure you want to delete this Navigation menu?'));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-navigation-menu/more-menu.js

/**
 * WordPress dependencies
 */





/**
 * Internal dependencies
 */


const more_menu_POPOVER_PROPS = {
  position: 'bottom right'
};
function ScreenNavigationMoreMenu(props) {
  const {
    onDelete,
    onSave,
    onDuplicate,
    menuTitle
  } = props;
  const [renameModalOpen, setRenameModalOpen] = (0,external_wp_element_namespaceObject.useState)(false);
  const [deleteModalOpen, setDeleteModalOpen] = (0,external_wp_element_namespaceObject.useState)(false);
  const closeModals = () => {
    setRenameModalOpen(false);
    setDeleteModalOpen(false);
  };
  const openRenameModal = () => setRenameModalOpen(true);
  const openDeleteModal = () => setDeleteModalOpen(true);
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.DropdownMenu, {
    className: "sidebar-navigation__more-menu",
    label: (0,external_wp_i18n_namespaceObject.__)('Actions'),
    icon: more_vertical,
    popoverProps: more_menu_POPOVER_PROPS
  }, ({
    onClose
  }) => (0,external_React_.createElement)("div", null, (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuGroup, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
    onClick: () => {
      openRenameModal();
      // Close the dropdown after opening the modal.
      onClose();
    }
  }, (0,external_wp_i18n_namespaceObject.__)('Rename')), (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
    onClick: () => {
      onDuplicate();
      onClose();
    }
  }, (0,external_wp_i18n_namespaceObject.__)('Duplicate')), (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
    isDestructive: true,
    onClick: () => {
      openDeleteModal();

      // Close the dropdown after opening the modal.
      onClose();
    }
  }, (0,external_wp_i18n_namespaceObject.__)('Delete'))))), deleteModalOpen && (0,external_React_.createElement)(delete_modal_RenameModal, {
    onClose: closeModals,
    onConfirm: onDelete
  }), renameModalOpen && (0,external_React_.createElement)(RenameModal, {
    onClose: closeModals,
    menuTitle: menuTitle,
    onSave: onSave
  }));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-navigation-menus/build-navigation-label.js
/**
 * WordPress dependencies
 */



// Copied from packages/block-library/src/navigation/edit/navigation-menu-selector.js.
function buildNavigationLabel(title, id, status) {
  if (!title?.rendered) {
    /* translators: %s is the index of the menu in the list of menus. */
    return (0,external_wp_i18n_namespaceObject.sprintf)((0,external_wp_i18n_namespaceObject.__)('(no title %s)'), id);
  }
  if (status === 'publish') {
    return (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(title?.rendered);
  }
  return (0,external_wp_i18n_namespaceObject.sprintf)(
  // translators: %1s: title of the menu; %2s: status of the menu (draft, pending, etc.).
  (0,external_wp_i18n_namespaceObject.__)('%1$s (%2$s)'), (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(title?.rendered), status);
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-navigation-menu/edit-button.js

/**
 * WordPress dependencies
 */


/**
 * Internal dependencies
 */



function EditButton({
  postId
}) {
  const linkInfo = useLink({
    postId,
    postType: NAVIGATION_POST_TYPE,
    canvas: 'edit'
  });
  return (0,external_React_.createElement)(SidebarButton, {
    ...linkInfo,
    label: (0,external_wp_i18n_namespaceObject.__)('Edit'),
    icon: library_pencil
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-navigation-menu/single-navigation-menu.js

/**
 * WordPress dependencies
 */


/**
 * Internal dependencies
 */





function SingleNavigationMenu({
  navigationMenu,
  handleDelete,
  handleDuplicate,
  handleSave
}) {
  const menuTitle = navigationMenu?.title?.rendered;
  return (0,external_React_.createElement)(SidebarNavigationScreenWrapper, {
    actions: (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(ScreenNavigationMoreMenu, {
      menuTitle: (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(menuTitle),
      onDelete: handleDelete,
      onSave: handleSave,
      onDuplicate: handleDuplicate
    }), (0,external_React_.createElement)(EditButton, {
      postId: navigationMenu?.id
    })),
    title: buildNavigationLabel(navigationMenu?.title, navigationMenu?.id, navigationMenu?.status),
    description: (0,external_wp_i18n_namespaceObject.__)('Navigation menus are a curated collection of blocks that allow visitors to get around your site.')
  }, (0,external_React_.createElement)(NavigationMenuEditor, {
    navigationMenuId: navigationMenu?.id
  }));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-navigation-menu/index.js

/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */





const postType = `wp_navigation`;
function SidebarNavigationScreenNavigationMenu() {
  const {
    params: {
      postId
    }
  } = (0,external_wp_components_namespaceObject.__experimentalUseNavigator)();
  const {
    record: navigationMenu,
    isResolving
  } = (0,external_wp_coreData_namespaceObject.useEntityRecord)('postType', postType, postId);
  const {
    isSaving,
    isDeleting
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      isSavingEntityRecord,
      isDeletingEntityRecord
    } = select(external_wp_coreData_namespaceObject.store);
    return {
      isSaving: isSavingEntityRecord('postType', postType, postId),
      isDeleting: isDeletingEntityRecord('postType', postType, postId)
    };
  }, [postId]);
  const isLoading = isResolving || isSaving || isDeleting;
  const menuTitle = navigationMenu?.title?.rendered || navigationMenu?.slug;
  const {
    handleSave,
    handleDelete,
    handleDuplicate
  } = useNavigationMenuHandlers();
  const _handleDelete = () => handleDelete(navigationMenu);
  const _handleSave = edits => handleSave(navigationMenu, edits);
  const _handleDuplicate = () => handleDuplicate(navigationMenu);
  if (isLoading) {
    return (0,external_React_.createElement)(SidebarNavigationScreenWrapper, {
      description: (0,external_wp_i18n_namespaceObject.__)('Navigation menus are a curated collection of blocks that allow visitors to get around your site.')
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Spinner, {
      className: "edit-site-sidebar-navigation-screen-navigation-menus__loading"
    }));
  }
  if (!isLoading && !navigationMenu) {
    return (0,external_React_.createElement)(SidebarNavigationScreenWrapper, {
      description: (0,external_wp_i18n_namespaceObject.__)('Navigation Menu missing.')
    });
  }
  if (!navigationMenu?.content?.raw) {
    return (0,external_React_.createElement)(SidebarNavigationScreenWrapper, {
      actions: (0,external_React_.createElement)(ScreenNavigationMoreMenu, {
        menuTitle: (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(menuTitle),
        onDelete: _handleDelete,
        onSave: _handleSave,
        onDuplicate: _handleDuplicate
      }),
      title: buildNavigationLabel(navigationMenu?.title, navigationMenu?.id, navigationMenu?.status),
      description: (0,external_wp_i18n_namespaceObject.__)('This Navigation Menu is empty.')
    });
  }
  return (0,external_React_.createElement)(SingleNavigationMenu, {
    navigationMenu: navigationMenu,
    handleDelete: _handleDelete,
    handleSave: _handleSave,
    handleDuplicate: _handleDuplicate
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-navigation-menu/use-navigation-menu-handlers.js
/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */


function useDeleteNavigationMenu() {
  const {
    goTo
  } = (0,external_wp_components_namespaceObject.__experimentalUseNavigator)();
  const {
    deleteEntityRecord
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_coreData_namespaceObject.store);
  const {
    createSuccessNotice,
    createErrorNotice
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_notices_namespaceObject.store);
  const handleDelete = async navigationMenu => {
    const postId = navigationMenu?.id;
    try {
      await deleteEntityRecord('postType', postType, postId, {
        force: true
      }, {
        throwOnError: true
      });
      createSuccessNotice((0,external_wp_i18n_namespaceObject.__)('Deleted Navigation menu'), {
        type: 'snackbar'
      });
      goTo('/navigation');
    } catch (error) {
      createErrorNotice((0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: error message describing why the navigation menu could not be deleted. */
      (0,external_wp_i18n_namespaceObject.__)(`Unable to delete Navigation menu (%s).`), error?.message), {
        type: 'snackbar'
      });
    }
  };
  return handleDelete;
}
function useSaveNavigationMenu() {
  const {
    getEditedEntityRecord
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getEditedEntityRecord: getEditedEntityRecordSelector
    } = select(external_wp_coreData_namespaceObject.store);
    return {
      getEditedEntityRecord: getEditedEntityRecordSelector
    };
  }, []);
  const {
    editEntityRecord,
    __experimentalSaveSpecifiedEntityEdits: saveSpecifiedEntityEdits
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_coreData_namespaceObject.store);
  const {
    createSuccessNotice,
    createErrorNotice
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_notices_namespaceObject.store);
  const handleSave = async (navigationMenu, edits) => {
    if (!edits) {
      return;
    }
    const postId = navigationMenu?.id;
    // Prepare for revert in case of error.
    const originalRecord = getEditedEntityRecord('postType', NAVIGATION_POST_TYPE, postId);

    // Apply the edits.
    editEntityRecord('postType', postType, postId, edits);
    const recordPropertiesToSave = Object.keys(edits);

    // Attempt to persist.
    try {
      await saveSpecifiedEntityEdits('postType', postType, postId, recordPropertiesToSave, {
        throwOnError: true
      });
      createSuccessNotice((0,external_wp_i18n_namespaceObject.__)('Renamed Navigation menu'), {
        type: 'snackbar'
      });
    } catch (error) {
      // Revert to original in case of error.
      editEntityRecord('postType', postType, postId, originalRecord);
      createErrorNotice((0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: error message describing why the navigation menu could not be renamed. */
      (0,external_wp_i18n_namespaceObject.__)(`Unable to rename Navigation menu (%s).`), error?.message), {
        type: 'snackbar'
      });
    }
  };
  return handleSave;
}
function useDuplicateNavigationMenu() {
  const {
    goTo
  } = (0,external_wp_components_namespaceObject.__experimentalUseNavigator)();
  const {
    saveEntityRecord
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_coreData_namespaceObject.store);
  const {
    createSuccessNotice,
    createErrorNotice
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_notices_namespaceObject.store);
  const handleDuplicate = async navigationMenu => {
    const menuTitle = navigationMenu?.title?.rendered || navigationMenu?.slug;
    try {
      const savedRecord = await saveEntityRecord('postType', postType, {
        title: (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: Navigation menu title */
        (0,external_wp_i18n_namespaceObject.__)('%s (Copy)'), menuTitle),
        content: navigationMenu?.content?.raw,
        status: 'publish'
      }, {
        throwOnError: true
      });
      if (savedRecord) {
        createSuccessNotice((0,external_wp_i18n_namespaceObject.__)('Duplicated Navigation menu'), {
          type: 'snackbar'
        });
        goTo(`/navigation/${postType}/${savedRecord.id}`);
      }
    } catch (error) {
      createErrorNotice((0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: error message describing why the navigation menu could not be deleted. */
      (0,external_wp_i18n_namespaceObject.__)(`Unable to duplicate Navigation menu (%s).`), error?.message), {
        type: 'snackbar'
      });
    }
  };
  return handleDuplicate;
}
function useNavigationMenuHandlers() {
  return {
    handleDelete: useDeleteNavigationMenu(),
    handleSave: useSaveNavigationMenu(),
    handleDuplicate: useDuplicateNavigationMenu()
  };
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-navigation-menus/index.js

/**
 * WordPress dependencies
 */







/**
 * Internal dependencies
 */









// Copied from packages/block-library/src/navigation/edit/navigation-menu-selector.js.
function buildMenuLabel(title, id, status) {
  if (!title) {
    /* translators: %s is the index of the menu in the list of menus. */
    return (0,external_wp_i18n_namespaceObject.sprintf)((0,external_wp_i18n_namespaceObject.__)('(no title %s)'), id);
  }
  if (status === 'publish') {
    return (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(title);
  }
  return (0,external_wp_i18n_namespaceObject.sprintf)(
  // translators: %1s: title of the menu; %2s: status of the menu (draft, pending, etc.).
  (0,external_wp_i18n_namespaceObject.__)('%1$s (%2$s)'), (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(title), status);
}

// Save a boolean to prevent us creating a fallback more than once per session.
let hasCreatedFallback = false;
function SidebarNavigationScreenNavigationMenus() {
  const {
    records: navigationMenus,
    isResolving: isResolvingNavigationMenus,
    hasResolved: hasResolvedNavigationMenus
  } = (0,external_wp_coreData_namespaceObject.useEntityRecords)('postType', NAVIGATION_POST_TYPE, PRELOADED_NAVIGATION_MENUS_QUERY);
  const isLoading = isResolvingNavigationMenus && !hasResolvedNavigationMenus;
  const {
    getNavigationFallbackId
  } = unlock((0,external_wp_data_namespaceObject.useSelect)(external_wp_coreData_namespaceObject.store));
  const firstNavigationMenu = navigationMenus?.[0];

  // Save a boolean to prevent us creating a fallback more than once per session.
  if (firstNavigationMenu) {
    hasCreatedFallback = true;
  }

  // If there is no navigation menu found
  // then trigger fallback algorithm to create one.
  if (!firstNavigationMenu && !isResolvingNavigationMenus && hasResolvedNavigationMenus && !hasCreatedFallback) {
    getNavigationFallbackId();
  }
  const {
    handleSave,
    handleDelete,
    handleDuplicate
  } = useNavigationMenuHandlers();
  const hasNavigationMenus = !!navigationMenus?.length;
  if (isLoading) {
    return (0,external_React_.createElement)(SidebarNavigationScreenWrapper, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.Spinner, {
      className: "edit-site-sidebar-navigation-screen-navigation-menus__loading"
    }));
  }
  if (!isLoading && !hasNavigationMenus) {
    return (0,external_React_.createElement)(SidebarNavigationScreenWrapper, {
      description: (0,external_wp_i18n_namespaceObject.__)('No Navigation Menus found.')
    });
  }

  // if single menu then render it
  if (navigationMenus?.length === 1) {
    return (0,external_React_.createElement)(SingleNavigationMenu, {
      navigationMenu: firstNavigationMenu,
      handleDelete: () => handleDelete(firstNavigationMenu),
      handleDuplicate: () => handleDuplicate(firstNavigationMenu),
      handleSave: edits => handleSave(firstNavigationMenu, edits)
    });
  }
  return (0,external_React_.createElement)(SidebarNavigationScreenWrapper, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItemGroup, null, navigationMenus?.map(({
    id,
    title,
    status
  }, index) => (0,external_React_.createElement)(NavMenuItem, {
    postId: id,
    key: id,
    withChevron: true,
    icon: library_navigation
  }, buildMenuLabel(title?.rendered, index + 1, status)))));
}
function SidebarNavigationScreenWrapper({
  children,
  actions,
  title,
  description
}) {
  return (0,external_React_.createElement)(SidebarNavigationScreen, {
    title: title || (0,external_wp_i18n_namespaceObject.__)('Navigation'),
    actions: actions,
    description: description || (0,external_wp_i18n_namespaceObject.__)('Manage your Navigation menus.'),
    content: children
  });
}
const NavMenuItem = ({
  postId,
  ...props
}) => {
  const linkInfo = useLink({
    postId,
    postType: NAVIGATION_POST_TYPE
  });
  return (0,external_React_.createElement)(SidebarNavigationItem, {
    ...linkInfo,
    ...props
  });
};

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/block-table.js

/**
 * WordPress dependencies
 */

const blockTable = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM5 4.5h14c.3 0 .5.2.5.5v3.5h-15V5c0-.3.2-.5.5-.5zm8 5.5h6.5v3.5H13V10zm-1.5 3.5h-7V10h7v3.5zm-7 5.5v-4h7v4.5H5c-.3 0-.5-.2-.5-.5zm14.5.5h-6V15h6.5v4c0 .3-.2.5-.5.5z"
}));
/* harmony default export */ const block_table = (blockTable);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/format-list-bullets-rtl.js

/**
 * WordPress dependencies
 */

const formatListBulletsRTL = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M4 8.8h8.9V7.2H4v1.6zm0 7h8.9v-1.5H4v1.5zM18 13c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-3c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z"
}));
/* harmony default export */ const format_list_bullets_rtl = (formatListBulletsRTL);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/format-list-bullets.js

/**
 * WordPress dependencies
 */

const formatListBullets = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M11.1 15.8H20v-1.5h-8.9v1.5zm0-8.6v1.5H20V7.2h-8.9zM6 13c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-7c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
}));
/* harmony default export */ const format_list_bullets = (formatListBullets);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/funnel.js

/**
 * WordPress dependencies
 */

const funnel = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M10 17.5H14V16H10V17.5ZM6 6V7.5H18V6H6ZM8 12.5H16V11H8V12.5Z"
}));
/* harmony default export */ const library_funnel = (funnel);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/unseen.js

/**
 * WordPress dependencies
 */

const unseen = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M4.67 10.664s-2.09 1.11-2.917 1.582l.494.87 1.608-.914.002.002c.343.502.86 1.17 1.563 1.84.348.33.742.663 1.185.976L5.57 16.744l.858.515 1.02-1.701a9.1 9.1 0 0 0 4.051 1.18V19h1v-2.263a9.1 9.1 0 0 0 4.05-1.18l1.021 1.7.858-.514-1.034-1.723c.442-.313.837-.646 1.184-.977.703-.669 1.22-1.337 1.563-1.839l.002-.003 1.61.914.493-.87c-1.75-.994-2.918-1.58-2.918-1.58l-.003.005a8.29 8.29 0 0 1-.422.689 10.097 10.097 0 0 1-1.36 1.598c-1.218 1.16-3.042 2.293-5.544 2.293-2.503 0-4.327-1.132-5.546-2.293a10.099 10.099 0 0 1-1.359-1.599 8.267 8.267 0 0 1-.422-.689l-.003-.005Z"
}));
/* harmony default export */ const library_unseen = (unseen);

;// CONCATENATED MODULE: ./node_modules/@wordpress/dataviews/build-module/single-selection-checkbox.js

/**
 * WordPress dependencies
 */


function SingleSelectionCheckbox({
  selection,
  onSelectionChange,
  item,
  data,
  getItemId,
  primaryField,
  disabled
}) {
  const id = getItemId(item);
  const isSelected = selection.includes(id);
  let selectionLabel;
  if (primaryField?.getValue && item) {
    // eslint-disable-next-line @wordpress/valid-sprintf
    selectionLabel = (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: item title. */
    isSelected ? (0,external_wp_i18n_namespaceObject.__)('Deselect item: %s') : (0,external_wp_i18n_namespaceObject.__)('Select item: %s'), primaryField.getValue({
      item
    }));
  } else {
    selectionLabel = isSelected ? (0,external_wp_i18n_namespaceObject.__)('Select a new item') : (0,external_wp_i18n_namespaceObject.__)('Deselect item');
  }
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.CheckboxControl, {
    className: "dataviews-view-table-selection-checkbox",
    __nextHasNoMarginBottom: true,
    label: selectionLabel,
    "aria-disabled": disabled,
    checked: isSelected,
    onChange: () => {
      if (disabled) {
        return;
      }
      if (!isSelected) {
        onSelectionChange(data.filter(_item => {
          const itemId = getItemId?.(_item);
          return itemId === id || selection.includes(itemId);
        }));
      } else {
        onSelectionChange(data.filter(_item => {
          const itemId = getItemId?.(_item);
          return itemId !== id && selection.includes(itemId);
        }));
      }
    }
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/dataviews/build-module/lock-unlock.js
/**
 * WordPress dependencies
 */

const {
  lock: lock_unlock_lock,
  unlock: lock_unlock_unlock
} = (0,external_wp_privateApis_namespaceObject.__dangerousOptInToUnstableAPIsOnlyForCoreModules)('I know using unstable features means my theme or plugin will inevitably break in the next version of WordPress.', '@wordpress/dataviews');

;// CONCATENATED MODULE: ./node_modules/@wordpress/dataviews/build-module/item-actions.js

/**
 * WordPress dependencies
 */





/**
 * Internal dependencies
 */

const {
  DropdownMenuV2: DropdownMenu,
  DropdownMenuGroupV2: DropdownMenuGroup,
  DropdownMenuItemV2: DropdownMenuItem,
  DropdownMenuItemLabelV2: DropdownMenuItemLabel,
  kebabCase
} = lock_unlock_unlock(external_wp_components_namespaceObject.privateApis);
function ButtonTrigger({
  action,
  onClick
}) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    label: action.label,
    icon: action.icon,
    isDestructive: action.isDestructive,
    size: "compact",
    onClick: onClick
  });
}
function DropdownMenuItemTrigger({
  action,
  onClick
}) {
  return (0,external_React_.createElement)(DropdownMenuItem, {
    onClick: onClick,
    hideOnClick: !action.RenderModal
  }, (0,external_React_.createElement)(DropdownMenuItemLabel, null, action.label));
}
function ActionWithModal({
  action,
  item,
  ActionTrigger
}) {
  const [isModalOpen, setIsModalOpen] = (0,external_wp_element_namespaceObject.useState)(false);
  const actionTriggerProps = {
    action,
    onClick: () => setIsModalOpen(true)
  };
  const {
    RenderModal,
    hideModalHeader
  } = action;
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(ActionTrigger, {
    ...actionTriggerProps
  }), isModalOpen && (0,external_React_.createElement)(external_wp_components_namespaceObject.Modal, {
    title: action.modalHeader || action.label,
    __experimentalHideHeader: !!hideModalHeader,
    onRequestClose: () => {
      setIsModalOpen(false);
    },
    overlayClassName: `dataviews-action-modal dataviews-action-modal__${kebabCase(action.id)}`
  }, (0,external_React_.createElement)(RenderModal, {
    items: [item],
    closeModal: () => setIsModalOpen(false)
  })));
}
function ActionsDropdownMenuGroup({
  actions,
  item
}) {
  return (0,external_React_.createElement)(DropdownMenuGroup, null, actions.map(action => {
    if (!!action.RenderModal) {
      return (0,external_React_.createElement)(ActionWithModal, {
        key: action.id,
        action: action,
        item: item,
        ActionTrigger: DropdownMenuItemTrigger
      });
    }
    return (0,external_React_.createElement)(DropdownMenuItemTrigger, {
      key: action.id,
      action: action,
      onClick: () => action.callback([item])
    });
  }));
}
function ItemActions({
  item,
  actions,
  isCompact
}) {
  const {
    primaryActions,
    secondaryActions
  } = (0,external_wp_element_namespaceObject.useMemo)(() => {
    return actions.reduce((accumulator, action) => {
      // If an action is eligible for all items, doesn't need
      // to provide the `isEligible` function.
      if (action.isEligible && !action.isEligible(item)) {
        return accumulator;
      }
      if (action.isPrimary && !!action.icon) {
        accumulator.primaryActions.push(action);
      } else {
        accumulator.secondaryActions.push(action);
      }
      return accumulator;
    }, {
      primaryActions: [],
      secondaryActions: []
    });
  }, [actions, item]);
  if (isCompact) {
    return (0,external_React_.createElement)(CompactItemActions, {
      item: item,
      primaryActions: primaryActions,
      secondaryActions: secondaryActions
    });
  }
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    spacing: 1,
    justify: "flex-end",
    style: {
      flexShrink: '0',
      width: 'auto'
    }
  }, !!primaryActions.length && primaryActions.map(action => {
    if (!!action.RenderModal) {
      return (0,external_React_.createElement)(ActionWithModal, {
        key: action.id,
        action: action,
        item: item,
        ActionTrigger: ButtonTrigger
      });
    }
    return (0,external_React_.createElement)(ButtonTrigger, {
      key: action.id,
      action: action,
      onClick: () => action.callback([item])
    });
  }), (0,external_React_.createElement)(DropdownMenu, {
    trigger: (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
      size: "compact",
      icon: more_vertical,
      label: (0,external_wp_i18n_namespaceObject.__)('Actions'),
      disabled: !secondaryActions.length
    }),
    placement: "bottom-end"
  }, (0,external_React_.createElement)(ActionsDropdownMenuGroup, {
    actions: secondaryActions,
    item: item
  })));
}
function CompactItemActions({
  item,
  primaryActions,
  secondaryActions
}) {
  return (0,external_React_.createElement)(DropdownMenu, {
    trigger: (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
      size: "compact",
      icon: more_vertical,
      label: (0,external_wp_i18n_namespaceObject.__)('Actions'),
      disabled: !primaryActions.length && !secondaryActions.length
    }),
    placement: "bottom-end"
  }, !!primaryActions.length && (0,external_React_.createElement)(ActionsDropdownMenuGroup, {
    actions: primaryActions,
    item: item
  }), !!secondaryActions.length && (0,external_React_.createElement)(ActionsDropdownMenuGroup, {
    actions: secondaryActions,
    item: item
  }));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/dataviews/build-module/utils.js
/**
 * Internal dependencies
 */


/**
 * Helper util to sort data by text fields, when sorting is done client side.
 *
 * @param {Object}   params            Function params.
 * @param {Object[]} params.data       Data to sort.
 * @param {Object}   params.view       Current view object.
 * @param {Object[]} params.fields     Array of available fields.
 * @param {string[]} params.textFields Array of the field ids to sort.
 *
 * @return {Object[]} Sorted data.
 */
const sortByTextFields = ({
  data,
  view,
  fields,
  textFields
}) => {
  const sortedData = [...data];
  const fieldId = view.sort.field;
  if (textFields.includes(fieldId)) {
    const fieldToSort = fields.find(field => {
      return field.id === fieldId;
    });
    sortedData.sort((a, b) => {
      var _fieldToSort$getValue, _fieldToSort$getValue2;
      const valueA = (_fieldToSort$getValue = fieldToSort.getValue({
        item: a
      })) !== null && _fieldToSort$getValue !== void 0 ? _fieldToSort$getValue : '';
      const valueB = (_fieldToSort$getValue2 = fieldToSort.getValue({
        item: b
      })) !== null && _fieldToSort$getValue2 !== void 0 ? _fieldToSort$getValue2 : '';
      return view.sort.direction === 'asc' ? valueA.localeCompare(valueB) : valueB.localeCompare(valueA);
    });
  }
  return sortedData;
};

/**
 * Helper util to get the paginated data and the paginateInfo needed,
 * when pagination is done client side.
 *
 * @param {Object}   params      Function params.
 * @param {Object[]} params.data Available data.
 * @param {Object}   params.view Current view object.
 *
 * @return {Object} Paginated data and paginationInfo.
 */
function getPaginationResults({
  data,
  view
}) {
  const start = (view.page - 1) * view.perPage;
  const totalItems = data?.length || 0;
  data = data?.slice(start, start + view.perPage);
  return {
    data,
    paginationInfo: {
      totalItems,
      totalPages: Math.ceil(totalItems / view.perPage)
    }
  };
}
const sanitizeOperators = field => {
  let operators = field.filterBy?.operators;
  if (!operators || !Array.isArray(operators)) {
    operators = Object.keys(OPERATORS);
  }
  return operators.filter(operator => Object.keys(OPERATORS).includes(operator));
};

;// CONCATENATED MODULE: ./node_modules/@wordpress/dataviews/build-module/bulk-actions.js

/**
 * WordPress dependencies
 */




/**
 * Internal dependencies
 */

const {
  DropdownMenuV2: bulk_actions_DropdownMenu,
  DropdownMenuGroupV2: bulk_actions_DropdownMenuGroup,
  DropdownMenuItemV2: bulk_actions_DropdownMenuItem,
  DropdownMenuSeparatorV2: DropdownMenuSeparator
} = lock_unlock_unlock(external_wp_components_namespaceObject.privateApis);
function useHasAPossibleBulkAction(actions, item) {
  return (0,external_wp_element_namespaceObject.useMemo)(() => {
    return actions.some(action => {
      return action.supportsBulk && action.isEligible(item);
    });
  }, [actions, item]);
}
function useSomeItemHasAPossibleBulkAction(actions, data) {
  return (0,external_wp_element_namespaceObject.useMemo)(() => {
    return data.some(item => {
      return actions.some(action => {
        return action.supportsBulk && action.isEligible(item);
      });
    });
  }, [actions, data]);
}
function bulk_actions_ActionWithModal({
  action,
  selectedItems,
  setActionWithModal,
  onMenuOpenChange
}) {
  const eligibleItems = (0,external_wp_element_namespaceObject.useMemo)(() => {
    return selectedItems.filter(item => action.isEligible(item));
  }, [action, selectedItems]);
  const {
    RenderModal,
    hideModalHeader
  } = action;
  const onCloseModal = (0,external_wp_element_namespaceObject.useCallback)(() => {
    setActionWithModal(undefined);
  }, [setActionWithModal]);
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Modal, {
    title: !hideModalHeader && action.label,
    __experimentalHideHeader: !!hideModalHeader,
    onRequestClose: onCloseModal,
    overlayClassName: "dataviews-action-modal"
  }, (0,external_React_.createElement)(RenderModal, {
    items: eligibleItems,
    closeModal: onCloseModal,
    onPerform: () => onMenuOpenChange(false)
  }));
}
function BulkActionItem({
  action,
  selectedItems,
  setActionWithModal
}) {
  const eligibleItems = (0,external_wp_element_namespaceObject.useMemo)(() => {
    return selectedItems.filter(item => action.isEligible(item));
  }, [action, selectedItems]);
  const shouldShowModal = !!action.RenderModal;
  return (0,external_React_.createElement)(bulk_actions_DropdownMenuItem, {
    key: action.id,
    disabled: eligibleItems.length === 0,
    hideOnClick: !shouldShowModal,
    onClick: async () => {
      if (shouldShowModal) {
        setActionWithModal(action);
      } else {
        await action.callback(eligibleItems);
      }
    },
    suffix: eligibleItems.length > 0 ? eligibleItems.length : undefined
  }, action.label);
}
function ActionsMenuGroup({
  actions,
  selectedItems,
  setActionWithModal
}) {
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(bulk_actions_DropdownMenuGroup, null, actions.map(action => (0,external_React_.createElement)(BulkActionItem, {
    key: action.id,
    action: action,
    selectedItems: selectedItems,
    setActionWithModal: setActionWithModal
  }))), (0,external_React_.createElement)(DropdownMenuSeparator, null));
}
function BulkActions({
  data,
  actions,
  selection,
  onSelectionChange,
  getItemId
}) {
  const bulkActions = (0,external_wp_element_namespaceObject.useMemo)(() => actions.filter(action => action.supportsBulk), [actions]);
  const [isMenuOpen, onMenuOpenChange] = (0,external_wp_element_namespaceObject.useState)(false);
  const [actionWithModal, setActionWithModal] = (0,external_wp_element_namespaceObject.useState)();
  const selectableItems = (0,external_wp_element_namespaceObject.useMemo)(() => {
    return data.filter(item => {
      return bulkActions.some(action => action.isEligible(item));
    });
  }, [data, bulkActions]);
  const numberSelectableItems = selectableItems.length;
  const areAllSelected = selection && selection.length === numberSelectableItems;
  const selectedItems = (0,external_wp_element_namespaceObject.useMemo)(() => {
    return data.filter(item => selection.includes(getItemId(item)));
  }, [selection, data, getItemId]);
  const hasNonSelectableItemSelected = (0,external_wp_element_namespaceObject.useMemo)(() => {
    return selectedItems.some(item => {
      return !selectableItems.includes(item);
    });
  }, [selectedItems, selectableItems]);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    if (hasNonSelectableItemSelected) {
      onSelectionChange(selectedItems.filter(selectedItem => {
        return selectableItems.some(item => {
          return getItemId(selectedItem) === getItemId(item);
        });
      }));
    }
  }, [hasNonSelectableItemSelected, selectedItems, selectableItems, getItemId, onSelectionChange]);
  if (bulkActions.length === 0) {
    return null;
  }
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(bulk_actions_DropdownMenu, {
    open: isMenuOpen,
    onOpenChange: onMenuOpenChange,
    label: (0,external_wp_i18n_namespaceObject.__)('Bulk actions'),
    style: {
      minWidth: '240px'
    },
    trigger: (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
      className: "dataviews-bulk-edit-button",
      __next40pxDefaultSize: true,
      variant: "tertiary",
      size: "compact"
    }, selection.length ? (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %d: Number of items. */
    (0,external_wp_i18n_namespaceObject._n)('Edit %d item', 'Edit %d items', selection.length), selection.length) : (0,external_wp_i18n_namespaceObject.__)('Bulk edit'))
  }, (0,external_React_.createElement)(ActionsMenuGroup, {
    actions: bulkActions,
    setActionWithModal: setActionWithModal,
    selectedItems: selectedItems
  }), (0,external_React_.createElement)(bulk_actions_DropdownMenuGroup, null, (0,external_React_.createElement)(bulk_actions_DropdownMenuItem, {
    disabled: areAllSelected,
    hideOnClick: false,
    onClick: () => {
      onSelectionChange(selectableItems);
    },
    suffix: numberSelectableItems
  }, (0,external_wp_i18n_namespaceObject.__)('Select all')), (0,external_React_.createElement)(bulk_actions_DropdownMenuItem, {
    disabled: selection.length === 0,
    hideOnClick: false,
    onClick: () => {
      onSelectionChange([]);
    }
  }, (0,external_wp_i18n_namespaceObject.__)('Deselect')))), actionWithModal && (0,external_React_.createElement)(bulk_actions_ActionWithModal, {
    action: actionWithModal,
    selectedItems: selectedItems,
    setActionWithModal: setActionWithModal,
    onMenuOpenChange: onMenuOpenChange
  }));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/dataviews/build-module/view-table.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */






const {
  DropdownMenuV2: view_table_DropdownMenu,
  DropdownMenuGroupV2: view_table_DropdownMenuGroup,
  DropdownMenuItemV2: view_table_DropdownMenuItem,
  DropdownMenuRadioItemV2: DropdownMenuRadioItem,
  DropdownMenuItemLabelV2: view_table_DropdownMenuItemLabel,
  DropdownMenuSeparatorV2: view_table_DropdownMenuSeparator
} = lock_unlock_unlock(external_wp_components_namespaceObject.privateApis);
function WithSeparators({
  children
}) {
  return external_wp_element_namespaceObject.Children.toArray(children).filter(Boolean).map((child, i) => (0,external_React_.createElement)(external_wp_element_namespaceObject.Fragment, {
    key: i
  }, i > 0 && (0,external_React_.createElement)(view_table_DropdownMenuSeparator, null), child));
}
const sortArrows = {
  asc: '↑',
  desc: '↓'
};
const HeaderMenu = (0,external_wp_element_namespaceObject.forwardRef)(function HeaderMenu({
  field,
  view,
  onChangeView,
  onHide,
  setOpenedFilter
}, ref) {
  const isHidable = field.enableHiding !== false;
  const isSortable = field.enableSorting !== false;
  const isSorted = view.sort?.field === field.id;
  const operators = sanitizeOperators(field);
  // Filter can be added:
  // 1. If the field is not already part of a view's filters.
  // 2. If the field meets the type and operator requirements.
  // 3. If it's not primary. If it is, it should be already visible.
  const canAddFilter = !view.filters?.some(_filter => field.id === _filter.field) && field.type === constants_ENUMERATION_TYPE && !!operators.length && !field.filterBy?.isPrimary;
  if (!isSortable && !isHidable && !canAddFilter) {
    return field.header;
  }
  return (0,external_React_.createElement)(view_table_DropdownMenu, {
    align: "start",
    trigger: (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
      size: "compact",
      className: "dataviews-view-table-header-button",
      ref: ref,
      variant: "tertiary"
    }, field.header, isSorted && (0,external_React_.createElement)("span", {
      "aria-hidden": "true"
    }, isSorted && sortArrows[view.sort.direction])),
    style: {
      minWidth: '240px'
    }
  }, (0,external_React_.createElement)(WithSeparators, null, isSortable && (0,external_React_.createElement)(view_table_DropdownMenuGroup, null, Object.entries(SORTING_DIRECTIONS).map(([direction, info]) => {
    const isChecked = isSorted && view.sort.direction === direction;
    const value = `${field.id}-${direction}`;
    return (0,external_React_.createElement)(DropdownMenuRadioItem, {
      key: value
      // All sorting radio items share the same name, so that
      // selecting a sorting option automatically deselects the
      // previously selected one, even if it is displayed in
      // another submenu. The field and direction are passed via
      // the `value` prop.
      ,
      name: "view-table-sorting",
      value: value,
      checked: isChecked,
      onChange: () => {
        onChangeView({
          ...view,
          sort: {
            field: field.id,
            direction
          }
        });
      }
    }, (0,external_React_.createElement)(view_table_DropdownMenuItemLabel, null, info.label));
  })), canAddFilter && (0,external_React_.createElement)(view_table_DropdownMenuGroup, null, (0,external_React_.createElement)(view_table_DropdownMenuItem, {
    prefix: (0,external_React_.createElement)(external_wp_components_namespaceObject.Icon, {
      icon: library_funnel
    }),
    onClick: () => {
      setOpenedFilter(field.id);
      onChangeView({
        ...view,
        page: 1,
        filters: [...(view.filters || []), {
          field: field.id,
          value: undefined,
          operator: operators[0]
        }]
      });
    }
  }, (0,external_React_.createElement)(view_table_DropdownMenuItemLabel, null, (0,external_wp_i18n_namespaceObject.__)('Add filter')))), isHidable && (0,external_React_.createElement)(view_table_DropdownMenuItem, {
    prefix: (0,external_React_.createElement)(external_wp_components_namespaceObject.Icon, {
      icon: library_unseen
    }),
    onClick: () => {
      onHide(field);
      onChangeView({
        ...view,
        hiddenFields: view.hiddenFields.concat(field.id)
      });
    }
  }, (0,external_React_.createElement)(view_table_DropdownMenuItemLabel, null, (0,external_wp_i18n_namespaceObject.__)('Hide')))));
});
function BulkSelectionCheckbox({
  selection,
  onSelectionChange,
  data,
  actions
}) {
  const selectableItems = (0,external_wp_element_namespaceObject.useMemo)(() => {
    return data.filter(item => {
      return actions.some(action => action.supportsBulk && action.isEligible(item));
    });
  }, [data, actions]);
  const areAllSelected = selection.length === selectableItems.length;
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.CheckboxControl, {
    className: "dataviews-view-table-selection-checkbox",
    __nextHasNoMarginBottom: true,
    checked: areAllSelected,
    indeterminate: !areAllSelected && selection.length,
    onChange: () => {
      if (areAllSelected) {
        onSelectionChange([]);
      } else {
        onSelectionChange(selectableItems);
      }
    },
    label: areAllSelected ? (0,external_wp_i18n_namespaceObject.__)('Deselect all') : (0,external_wp_i18n_namespaceObject.__)('Select all')
  });
}
function TableRow({
  hasBulkActions,
  item,
  actions,
  id,
  visibleFields,
  primaryField,
  selection,
  getItemId,
  onSelectionChange,
  data
}) {
  const hasPossibleBulkAction = useHasAPossibleBulkAction(actions, item);
  return (0,external_React_.createElement)("tr", {
    className: classnames_default()('dataviews-view-table__row', {
      'is-selected': hasPossibleBulkAction && selection.includes(id)
    })
  }, hasBulkActions && (0,external_React_.createElement)("td", {
    className: "dataviews-view-table__checkbox-column",
    style: {
      width: 20,
      minWidth: 20
    }
  }, (0,external_React_.createElement)("div", {
    className: "dataviews-view-table__cell-content-wrapper"
  }, (0,external_React_.createElement)(SingleSelectionCheckbox, {
    id: id,
    item: item,
    selection: selection,
    onSelectionChange: onSelectionChange,
    getItemId: getItemId,
    data: data,
    primaryField: primaryField,
    disabled: !hasPossibleBulkAction
  }))), visibleFields.map(field => (0,external_React_.createElement)("td", {
    key: field.id,
    style: {
      width: field.width || undefined,
      minWidth: field.minWidth || undefined,
      maxWidth: field.maxWidth || undefined
    }
  }, (0,external_React_.createElement)("div", {
    className: classnames_default()('dataviews-view-table__cell-content-wrapper', {
      'dataviews-view-table__primary-field': primaryField?.id === field.id
    })
  }, field.render({
    item
  })))), !!actions?.length && (0,external_React_.createElement)("td", {
    className: "dataviews-view-table__actions-column"
  }, (0,external_React_.createElement)(ItemActions, {
    item: item,
    actions: actions
  })));
}
function ViewTable({
  view,
  onChangeView,
  fields,
  actions,
  data,
  getItemId,
  isLoading = false,
  deferredRendering,
  selection,
  onSelectionChange,
  setOpenedFilter
}) {
  const headerMenuRefs = (0,external_wp_element_namespaceObject.useRef)(new Map());
  const headerMenuToFocusRef = (0,external_wp_element_namespaceObject.useRef)();
  const [nextHeaderMenuToFocus, setNextHeaderMenuToFocus] = (0,external_wp_element_namespaceObject.useState)();
  const hasBulkActions = useSomeItemHasAPossibleBulkAction(actions, data);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    if (headerMenuToFocusRef.current) {
      headerMenuToFocusRef.current.focus();
      headerMenuToFocusRef.current = undefined;
    }
  });
  const asyncData = (0,external_wp_compose_namespaceObject.useAsyncList)(data);
  const tableNoticeId = (0,external_wp_element_namespaceObject.useId)();
  if (nextHeaderMenuToFocus) {
    // If we need to force focus, we short-circuit rendering here
    // to prevent any additional work while we handle that.
    // Clearing out the focus directive is necessary to make sure
    // future renders don't cause unexpected focus jumps.
    headerMenuToFocusRef.current = nextHeaderMenuToFocus;
    setNextHeaderMenuToFocus();
    return;
  }
  const onHide = field => {
    const hidden = headerMenuRefs.current.get(field.id);
    const fallback = headerMenuRefs.current.get(hidden.fallback);
    setNextHeaderMenuToFocus(fallback?.node);
  };
  const visibleFields = fields.filter(field => !view.hiddenFields.includes(field.id) && ![view.layout.mediaField].includes(field.id));
  const usedData = deferredRendering ? asyncData : data;
  const hasData = !!usedData?.length;
  const sortValues = {
    asc: 'ascending',
    desc: 'descending'
  };
  const primaryField = fields.find(field => field.id === view.layout.primaryField);
  return (0,external_React_.createElement)(external_wp_element_namespaceObject.Fragment, null, (0,external_React_.createElement)("table", {
    className: "dataviews-view-table",
    "aria-busy": isLoading,
    "aria-describedby": tableNoticeId
  }, (0,external_React_.createElement)("thead", null, (0,external_React_.createElement)("tr", {
    className: "dataviews-view-table__row"
  }, hasBulkActions && (0,external_React_.createElement)("th", {
    className: "dataviews-view-table__checkbox-column",
    style: {
      width: 20,
      minWidth: 20
    },
    "data-field-id": "selection",
    scope: "col"
  }, (0,external_React_.createElement)(BulkSelectionCheckbox, {
    selection: selection,
    onSelectionChange: onSelectionChange,
    data: data,
    actions: actions
  })), visibleFields.map((field, index) => (0,external_React_.createElement)("th", {
    key: field.id,
    style: {
      width: field.width || undefined,
      minWidth: field.minWidth || undefined,
      maxWidth: field.maxWidth || undefined
    },
    "data-field-id": field.id,
    "aria-sort": view.sort?.field === field.id && sortValues[view.sort.direction],
    scope: "col"
  }, (0,external_React_.createElement)(HeaderMenu, {
    ref: node => {
      if (node) {
        headerMenuRefs.current.set(field.id, {
          node,
          fallback: visibleFields[index > 0 ? index - 1 : 1]?.id
        });
      } else {
        headerMenuRefs.current.delete(field.id);
      }
    },
    field: field,
    view: view,
    onChangeView: onChangeView,
    onHide: onHide,
    setOpenedFilter: setOpenedFilter
  }))), !!actions?.length && (0,external_React_.createElement)("th", {
    "data-field-id": "actions",
    className: "dataviews-view-table__actions-column"
  }, (0,external_React_.createElement)("span", {
    className: "dataviews-view-table-header"
  }, (0,external_wp_i18n_namespaceObject.__)('Actions'))))), (0,external_React_.createElement)("tbody", null, hasData && usedData.map((item, index) => (0,external_React_.createElement)(TableRow, {
    key: getItemId(item),
    item: item,
    hasBulkActions: hasBulkActions,
    actions: actions,
    id: getItemId(item) || index,
    visibleFields: visibleFields,
    primaryField: primaryField,
    selection: selection,
    getItemId: getItemId,
    onSelectionChange: onSelectionChange,
    data: data
  })))), (0,external_React_.createElement)("div", {
    className: classnames_default()({
      'dataviews-loading': isLoading,
      'dataviews-no-results': !hasData && !isLoading
    }),
    id: tableNoticeId
  }, !hasData && (0,external_React_.createElement)("p", null, isLoading ? (0,external_wp_i18n_namespaceObject.__)('Loading…') : (0,external_wp_i18n_namespaceObject.__)('No results'))));
}
/* harmony default export */ const view_table = (ViewTable);

;// CONCATENATED MODULE: ./node_modules/@wordpress/dataviews/build-module/view-grid.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */





/**
 * Internal dependencies
 */



function GridItem({
  selection,
  data,
  onSelectionChange,
  getItemId,
  item,
  actions,
  mediaField,
  primaryField,
  visibleFields
}) {
  const [hasNoPointerEvents, setHasNoPointerEvents] = (0,external_wp_element_namespaceObject.useState)(false);
  const hasBulkAction = useHasAPossibleBulkAction(actions, item);
  const id = getItemId(item);
  const isSelected = selection.includes(id);
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    spacing: 0,
    key: id,
    className: classnames_default()('dataviews-view-grid__card', {
      'is-selected': hasBulkAction && isSelected,
      'has-no-pointer-events': hasNoPointerEvents
    }),
    onMouseDown: event => {
      if (hasBulkAction && (event.ctrlKey || event.metaKey)) {
        setHasNoPointerEvents(true);
        if (!isSelected) {
          onSelectionChange(data.filter(_item => {
            const itemId = getItemId?.(_item);
            return itemId === id || selection.includes(itemId);
          }));
        } else {
          onSelectionChange(data.filter(_item => {
            const itemId = getItemId?.(_item);
            return itemId !== id && selection.includes(itemId);
          }));
        }
      }
    },
    onClick: () => {
      if (hasNoPointerEvents) {
        setHasNoPointerEvents(false);
      }
    }
  }, (0,external_React_.createElement)("div", {
    className: "dataviews-view-grid__media"
  }, mediaField?.render({
    item
  })), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    justify: "space-between",
    className: "dataviews-view-grid__title-actions"
  }, (0,external_React_.createElement)(SingleSelectionCheckbox, {
    id: id,
    item: item,
    selection: selection,
    onSelectionChange: onSelectionChange,
    getItemId: getItemId,
    data: data,
    primaryField: primaryField,
    disabled: !hasBulkAction
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    className: "dataviews-view-grid__primary-field"
  }, primaryField?.render({
    item
  })), (0,external_React_.createElement)(ItemActions, {
    item: item,
    actions: actions,
    isCompact: true
  })), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    className: "dataviews-view-grid__fields",
    spacing: 3
  }, visibleFields.map(field => {
    const renderedValue = field.render({
      item
    });
    if (!renderedValue) {
      return null;
    }
    return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
      className: "dataviews-view-grid__field",
      key: field.id,
      spacing: 1
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Tooltip, {
      text: field.header,
      placement: "left"
    }, (0,external_React_.createElement)("div", {
      className: "dataviews-view-grid__field-value"
    }, renderedValue)));
  })));
}
function ViewGrid({
  data,
  fields,
  view,
  actions,
  isLoading,
  getItemId,
  deferredRendering,
  selection,
  onSelectionChange
}) {
  const mediaField = fields.find(field => field.id === view.layout.mediaField);
  const primaryField = fields.find(field => field.id === view.layout.primaryField);
  const visibleFields = fields.filter(field => !view.hiddenFields.includes(field.id) && ![view.layout.mediaField, view.layout.primaryField].includes(field.id));
  const shownData = (0,external_wp_compose_namespaceObject.useAsyncList)(data, {
    step: 3
  });
  const usedData = deferredRendering ? shownData : data;
  const hasData = !!usedData?.length;
  return (0,external_React_.createElement)(external_React_.Fragment, null, hasData && (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalGrid, {
    gap: 6,
    columns: 2,
    alignment: "top",
    className: "dataviews-view-grid",
    "aria-busy": isLoading
  }, usedData.map(item => {
    return (0,external_React_.createElement)(GridItem, {
      key: getItemId(item),
      selection: selection,
      data: data,
      onSelectionChange: onSelectionChange,
      getItemId: getItemId,
      item: item,
      actions: actions,
      mediaField: mediaField,
      primaryField: primaryField,
      visibleFields: visibleFields
    });
  })), !hasData && (0,external_React_.createElement)("div", {
    className: classnames_default()({
      'dataviews-loading': isLoading,
      'dataviews-no-results': !isLoading
    })
  }, (0,external_React_.createElement)("p", null, isLoading ? (0,external_wp_i18n_namespaceObject.__)('Loading…') : (0,external_wp_i18n_namespaceObject.__)('No results'))));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/info.js

/**
 * WordPress dependencies
 */

const info = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M12 3.2c-4.8 0-8.8 3.9-8.8 8.8 0 4.8 3.9 8.8 8.8 8.8 4.8 0 8.8-3.9 8.8-8.8 0-4.8-4-8.8-8.8-8.8zm0 16c-4 0-7.2-3.3-7.2-7.2C4.8 8 8 4.8 12 4.8s7.2 3.3 7.2 7.2c0 4-3.2 7.2-7.2 7.2zM11 17h2v-6h-2v6zm0-8h2V7h-2v2z"
}));
/* harmony default export */ const library_info = (info);

;// CONCATENATED MODULE: ./node_modules/@wordpress/dataviews/build-module/view-list.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */





function ViewList({
  view,
  fields,
  data,
  isLoading,
  getItemId,
  onSelectionChange,
  onDetailsChange,
  selection,
  deferredRendering
}) {
  const shownData = (0,external_wp_compose_namespaceObject.useAsyncList)(data, {
    step: 3
  });
  const usedData = deferredRendering ? shownData : data;
  const mediaField = fields.find(field => field.id === view.layout.mediaField);
  const primaryField = fields.find(field => field.id === view.layout.primaryField);
  const visibleFields = fields.filter(field => !view.hiddenFields.includes(field.id) && ![view.layout.primaryField, view.layout.mediaField].includes(field.id));
  const onEnter = item => event => {
    const {
      keyCode
    } = event;
    if ([external_wp_keycodes_namespaceObject.ENTER, external_wp_keycodes_namespaceObject.SPACE].includes(keyCode)) {
      onSelectionChange([item]);
    }
  };
  const hasData = usedData?.length;
  if (!hasData) {
    return (0,external_React_.createElement)("div", {
      className: classnames_default()({
        'dataviews-loading': isLoading,
        'dataviews-no-results': !hasData && !isLoading
      })
    }, !hasData && (0,external_React_.createElement)("p", null, isLoading ? (0,external_wp_i18n_namespaceObject.__)('Loading…') : (0,external_wp_i18n_namespaceObject.__)('No results')));
  }
  return (0,external_React_.createElement)("ul", {
    className: "dataviews-view-list"
  }, usedData.map(item => {
    return (0,external_React_.createElement)("li", {
      key: getItemId(item),
      className: classnames_default()({
        'is-selected': selection.includes(item.id)
      })
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
      className: "dataviews-view-list__item-wrapper"
    }, (0,external_React_.createElement)("div", {
      role: "button",
      tabIndex: 0,
      "aria-pressed": selection.includes(item.id),
      onKeyDown: onEnter(item),
      className: "dataviews-view-list__item",
      onClick: () => onSelectionChange([item])
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
      spacing: 3,
      justify: "start",
      alignment: "flex-start"
    }, (0,external_React_.createElement)("div", {
      className: "dataviews-view-list__media-wrapper"
    }, mediaField?.render({
      item
    }) || (0,external_React_.createElement)("div", {
      className: "dataviews-view-list__media-placeholder"
    })), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
      spacing: 1
    }, (0,external_React_.createElement)("span", {
      className: "dataviews-view-list__primary-field"
    }, primaryField?.render({
      item
    })), (0,external_React_.createElement)("div", {
      className: "dataviews-view-list__fields"
    }, visibleFields.map(field => {
      return (0,external_React_.createElement)("span", {
        key: field.id,
        className: "dataviews-view-list__field"
      }, field.render({
        item
      }));
    }))))), onDetailsChange && (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
      className: "dataviews-view-list__details-button",
      onClick: () => onDetailsChange([item]),
      icon: library_info,
      label: (0,external_wp_i18n_namespaceObject.__)('View details'),
      size: "compact"
    })));
  }));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/dataviews/build-module/constants.js
/**
 * WordPress dependencies
 */



/**
 * Internal dependencies
 */




// Field types.
const constants_ENUMERATION_TYPE = 'enumeration';

// Filter operators.
const constants_OPERATOR_IN = 'in';
const constants_OPERATOR_NOT_IN = 'notIn';
const OPERATORS = {
  [constants_OPERATOR_IN]: {
    key: 'in-filter',
    label: (0,external_wp_i18n_namespaceObject.__)('Is')
  },
  [constants_OPERATOR_NOT_IN]: {
    key: 'not-in-filter',
    label: (0,external_wp_i18n_namespaceObject.__)('Is not')
  }
};

// Sorting
const SORTING_DIRECTIONS = {
  asc: {
    label: (0,external_wp_i18n_namespaceObject.__)('Sort ascending')
  },
  desc: {
    label: (0,external_wp_i18n_namespaceObject.__)('Sort descending')
  }
};

// View layouts.
const constants_LAYOUT_TABLE = 'table';
const constants_LAYOUT_GRID = 'grid';
const constants_LAYOUT_LIST = 'list';
const VIEW_LAYOUTS = [{
  type: constants_LAYOUT_TABLE,
  label: (0,external_wp_i18n_namespaceObject.__)('Table'),
  component: view_table,
  icon: block_table
}, {
  type: constants_LAYOUT_GRID,
  label: (0,external_wp_i18n_namespaceObject.__)('Grid'),
  component: ViewGrid,
  icon: library_category
}, {
  type: constants_LAYOUT_LIST,
  label: (0,external_wp_i18n_namespaceObject.__)('List'),
  component: ViewList,
  icon: (0,external_wp_i18n_namespaceObject.isRTL)() ? format_list_bullets_rtl : format_list_bullets
}];

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-dataviews/dataview-item.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */




/**
 * Internal dependencies
 */



const {
  useLocation: dataview_item_useLocation
} = unlock(external_wp_router_namespaceObject.privateApis);
function DataViewItem({
  title,
  slug,
  customViewId,
  type,
  icon,
  isActive,
  isCustom,
  suffix
}) {
  const {
    params: {
      path,
      layout
    }
  } = dataview_item_useLocation();
  const iconToUse = icon || VIEW_LAYOUTS.find(v => v.type === type).icon;
  const linkInfo = useLink({
    path,
    layout,
    activeView: isCustom === 'true' ? customViewId : slug,
    isCustom
  });
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    justify: "flex-start",
    className: classnames_default()('edit-site-sidebar-dataviews-dataview-item', {
      'is-selected': isActive
    })
  }, (0,external_React_.createElement)(SidebarNavigationItem, {
    icon: iconToUse,
    ...linkInfo,
    "aria-current": isActive ? 'true' : undefined
  }, title), suffix);
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-templates-browse/content.js

/**
 * WordPress dependencies
 */




/**
 * Internal dependencies
 */



const content_EMPTY_ARRAY = [];
function TemplateDataviewItem({
  template,
  isActive
}) {
  const {
    text,
    icon
  } = useAddedBy(template.type, template.id);
  return (0,external_React_.createElement)(DataViewItem, {
    key: text,
    slug: text,
    title: text,
    icon: icon,
    isActive: isActive,
    isCustom: "false"
  });
}
function DataviewsTemplatesSidebarContent({
  activeView,
  postType,
  title
}) {
  const {
    records
  } = (0,external_wp_coreData_namespaceObject.useEntityRecords)('postType', postType, {
    per_page: -1
  });
  const firstItemPerAuthorText = (0,external_wp_element_namespaceObject.useMemo)(() => {
    var _ref;
    const firstItemPerAuthor = records?.reduce((acc, template) => {
      const author = template.author_text;
      if (author && !acc[author]) {
        acc[author] = template;
      }
      return acc;
    }, {});
    return (_ref = firstItemPerAuthor && Object.values(firstItemPerAuthor)) !== null && _ref !== void 0 ? _ref : content_EMPTY_ARRAY;
  }, [records]);
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItemGroup, null, (0,external_React_.createElement)(DataViewItem, {
    slug: 'all',
    title: title,
    icon: library_layout,
    isActive: activeView === 'all',
    isCustom: "false"
  }), firstItemPerAuthorText.map(template => {
    return (0,external_React_.createElement)(TemplateDataviewItem, {
      key: template.author_text,
      template: template,
      isActive: activeView === template.author_text
    });
  }));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-templates-browse/index.js

/**
 * WordPress dependencies
 */





/**
 * Internal dependencies
 */





const config = {
  [constants_TEMPLATE_POST_TYPE]: {
    title: (0,external_wp_i18n_namespaceObject.__)('Manage templates'),
    description: (0,external_wp_i18n_namespaceObject.__)('Create new templates, or reset any customizations made to the templates supplied by your theme.'),
    contentTitle: (0,external_wp_i18n_namespaceObject.__)('All templates')
  },
  [TEMPLATE_PART_POST_TYPE]: {
    title: (0,external_wp_i18n_namespaceObject.__)('Manage template parts'),
    description: (0,external_wp_i18n_namespaceObject.__)('Create new template parts, or reset any customizations made to the template parts supplied by your theme.'),
    backPath: '/patterns',
    contentTitle: (0,external_wp_i18n_namespaceObject.__)('All template parts')
  }
};
const {
  useLocation: sidebar_navigation_screen_templates_browse_useLocation
} = unlock(external_wp_router_namespaceObject.privateApis);
function SidebarNavigationScreenTemplatesBrowse() {
  const {
    params: {
      postType
    }
  } = (0,external_wp_components_namespaceObject.__experimentalUseNavigator)();
  const {
    params: {
      didAccessPatternsPage,
      activeView = 'all'
    }
  } = sidebar_navigation_screen_templates_browse_useLocation();
  const isTemplatePartsMode = (0,external_wp_data_namespaceObject.useSelect)(select => {
    return !!select(store_store).getSettings().supportsTemplatePartsMode;
  }, []);
  return (0,external_React_.createElement)(SidebarNavigationScreen
  // If a classic theme that supports template parts has never
  // accessed the Patterns page, return to the dashboard.
  , {
    isRoot: isTemplatePartsMode && !didAccessPatternsPage,
    title: config[postType].title,
    description: config[postType].description,
    backPath: config[postType].backPath,
    content: (0,external_React_.createElement)(DataviewsTemplatesSidebarContent, {
      activeView: activeView,
      postType: postType,
      title: config[postType].contentTitle
    })
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/save-button/index.js

/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */


function SaveButton({
  className = 'edit-site-save-button__button',
  variant = 'primary',
  showTooltip = true,
  defaultLabel,
  icon,
  __next40pxDefaultSize = false
}) {
  const {
    isDirty,
    isSaving,
    isSaveViewOpen,
    previewingThemeName
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      __experimentalGetDirtyEntityRecords,
      isSavingEntityRecord,
      isResolving
    } = select(external_wp_coreData_namespaceObject.store);
    const dirtyEntityRecords = __experimentalGetDirtyEntityRecords();
    const {
      isSaveViewOpened
    } = select(store_store);
    const isActivatingTheme = isResolving('activateTheme');
    const currentlyPreviewingThemeId = currentlyPreviewingTheme();
    return {
      isDirty: dirtyEntityRecords.length > 0,
      isSaving: dirtyEntityRecords.some(record => isSavingEntityRecord(record.kind, record.name, record.key)) || isActivatingTheme,
      isSaveViewOpen: isSaveViewOpened(),
      // Do not call `getTheme` with null, it will cause a request to
      // the server.
      previewingThemeName: currentlyPreviewingThemeId ? select(external_wp_coreData_namespaceObject.store).getTheme(currentlyPreviewingThemeId)?.name?.rendered : undefined
    };
  }, []);
  const {
    setIsSaveViewOpened
  } = (0,external_wp_data_namespaceObject.useDispatch)(store_store);
  const activateSaveEnabled = isPreviewingTheme() || isDirty;
  const disabled = isSaving || !activateSaveEnabled;
  const getLabel = () => {
    if (isPreviewingTheme()) {
      if (isSaving) {
        return (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: The name of theme to be activated. */
        (0,external_wp_i18n_namespaceObject.__)('Activating %s'), previewingThemeName);
      } else if (disabled) {
        return (0,external_wp_i18n_namespaceObject.__)('Saved');
      } else if (isDirty) {
        return (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: The name of theme to be activated. */
        (0,external_wp_i18n_namespaceObject.__)('Activate %s & Save'), previewingThemeName);
      }
      return (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: The name of theme to be activated. */
      (0,external_wp_i18n_namespaceObject.__)('Activate %s'), previewingThemeName);
    }
    if (isSaving) {
      return (0,external_wp_i18n_namespaceObject.__)('Saving');
    } else if (disabled) {
      return (0,external_wp_i18n_namespaceObject.__)('Saved');
    } else if (defaultLabel) {
      return defaultLabel;
    }
    return (0,external_wp_i18n_namespaceObject.__)('Save');
  };
  const label = getLabel();
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    variant: variant,
    className: className,
    "aria-disabled": disabled,
    "aria-expanded": isSaveViewOpen,
    isBusy: isSaving,
    onClick: disabled ? undefined : () => setIsSaveViewOpened(true),
    label: label
    /*
     * We want the tooltip to show the keyboard shortcut only when the
     * button does something, i.e. when it's not disabled.
     */,
    shortcut: disabled ? undefined : external_wp_keycodes_namespaceObject.displayShortcut.primary('s')
    /*
     * Displaying the keyboard shortcut conditionally makes the tooltip
     * itself show conditionally. This would trigger a full-rerendering
     * of the button that we want to avoid. By setting `showTooltip`,
     * the tooltip is always rendered even when there's no keyboard shortcut.
     */,
    showTooltip: showTooltip,
    icon: icon,
    __next40pxDefaultSize: __next40pxDefaultSize,
    size: "compact"
  }, label);
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/save-hub/index.js

/**
 * WordPress dependencies
 */









/**
 * Internal dependencies
 */




const {
  useLocation: save_hub_useLocation
} = unlock(external_wp_router_namespaceObject.privateApis);
const PUBLISH_ON_SAVE_ENTITIES = [{
  kind: 'postType',
  name: NAVIGATION_POST_TYPE
}];
function SaveHub() {
  const saveNoticeId = 'site-edit-save-notice';
  const {
    params
  } = save_hub_useLocation();
  const {
    __unstableMarkLastChangeAsPersistent
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_blockEditor_namespaceObject.store);
  const {
    createSuccessNotice,
    createErrorNotice,
    removeNotice
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_notices_namespaceObject.store);
  const {
    dirtyCurrentEntity,
    countUnsavedChanges,
    isDirty,
    isSaving
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      __experimentalGetDirtyEntityRecords,
      isSavingEntityRecord
    } = select(external_wp_coreData_namespaceObject.store);
    const dirtyEntityRecords = __experimentalGetDirtyEntityRecords();
    let calcDirtyCurrentEntity = null;
    if (dirtyEntityRecords.length === 1) {
      // if we are on global styles
      if (params.path?.includes('wp_global_styles')) {
        calcDirtyCurrentEntity = dirtyEntityRecords.find(record => record.name === 'globalStyles');
      }
      // if we are on pages
      else if (params.postId) {
        calcDirtyCurrentEntity = dirtyEntityRecords.find(record => record.name === params.postType && String(record.key) === params.postId);
      }
    }
    return {
      dirtyCurrentEntity: calcDirtyCurrentEntity,
      isDirty: dirtyEntityRecords.length > 0,
      isSaving: dirtyEntityRecords.some(record => isSavingEntityRecord(record.kind, record.name, record.key)),
      countUnsavedChanges: dirtyEntityRecords.length
    };
  }, [params.path, params.postType, params.postId]);
  const {
    editEntityRecord,
    saveEditedEntityRecord,
    __experimentalSaveSpecifiedEntityEdits: saveSpecifiedEntityEdits
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_coreData_namespaceObject.store);
  const disabled = isSaving || !isDirty && !isPreviewingTheme();

  // if we have only one unsaved change and it matches current context, we can show a more specific label
  let label = dirtyCurrentEntity ? (0,external_wp_i18n_namespaceObject.__)('Save') : (0,external_wp_i18n_namespaceObject.sprintf)(
  // translators: %d: number of unsaved changes (number).
  (0,external_wp_i18n_namespaceObject._n)('Review %d change…', 'Review %d changes…', countUnsavedChanges), countUnsavedChanges);
  if (isSaving) {
    label = (0,external_wp_i18n_namespaceObject.__)('Saving');
  }
  const {
    homeUrl
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getUnstableBase // Site index.
    } = select(external_wp_coreData_namespaceObject.store);
    return {
      homeUrl: getUnstableBase()?.home
    };
  }, []);
  const saveCurrentEntity = async () => {
    if (!dirtyCurrentEntity) return;
    removeNotice(saveNoticeId);
    const {
      kind,
      name,
      key,
      property
    } = dirtyCurrentEntity;
    try {
      if ('root' === dirtyCurrentEntity.kind && 'site' === name) {
        await saveSpecifiedEntityEdits('root', 'site', undefined, [property]);
      } else {
        if (PUBLISH_ON_SAVE_ENTITIES.some(typeToPublish => typeToPublish.kind === kind && typeToPublish.name === name)) {
          editEntityRecord(kind, name, key, {
            status: 'publish'
          });
        }
        await saveEditedEntityRecord(kind, name, key);
      }
      __unstableMarkLastChangeAsPersistent();
      createSuccessNotice((0,external_wp_i18n_namespaceObject.__)('Site updated.'), {
        type: 'snackbar',
        actions: [{
          label: (0,external_wp_i18n_namespaceObject.__)('View site'),
          url: homeUrl
        }],
        id: saveNoticeId
      });
    } catch (error) {
      createErrorNotice(`${(0,external_wp_i18n_namespaceObject.__)('Saving failed.')} ${error}`);
    }
  };
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    className: "edit-site-save-hub",
    alignment: "right",
    spacing: 4
  }, dirtyCurrentEntity ? (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    variant: "primary",
    onClick: saveCurrentEntity,
    isBusy: isSaving,
    disabled: isSaving,
    "aria-disabled": isSaving,
    className: "edit-site-save-hub__button",
    __next40pxDefaultSize: true
  }, label) : (0,external_React_.createElement)(SaveButton, {
    className: "edit-site-save-hub__button",
    variant: disabled ? null : 'primary',
    showTooltip: false,
    icon: disabled && !isSaving ? library_check : null,
    defaultLabel: label,
    __next40pxDefaultSize: true
  }));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/add-new-page/index.js

/**
 * WordPress dependencies
 */






function AddNewPageModal({
  onSave,
  onClose
}) {
  const [isCreatingPage, setIsCreatingPage] = (0,external_wp_element_namespaceObject.useState)(false);
  const [title, setTitle] = (0,external_wp_element_namespaceObject.useState)('');
  const {
    saveEntityRecord
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_coreData_namespaceObject.store);
  const {
    createErrorNotice,
    createSuccessNotice
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_notices_namespaceObject.store);
  async function createPage(event) {
    event.preventDefault();
    if (isCreatingPage) {
      return;
    }
    setIsCreatingPage(true);
    try {
      const newPage = await saveEntityRecord('postType', 'page', {
        status: 'draft',
        title,
        slug: title || (0,external_wp_i18n_namespaceObject.__)('No title')
      }, {
        throwOnError: true
      });
      onSave(newPage);
      createSuccessNotice((0,external_wp_i18n_namespaceObject.sprintf)(
      // translators: %s: Title of the created template e.g: "Category".
      (0,external_wp_i18n_namespaceObject.__)('"%s" successfully created.'), newPage.title?.rendered || title), {
        type: 'snackbar'
      });
    } catch (error) {
      const errorMessage = error.message && error.code !== 'unknown_error' ? error.message : (0,external_wp_i18n_namespaceObject.__)('An error occurred while creating the page.');
      createErrorNotice(errorMessage, {
        type: 'snackbar'
      });
    } finally {
      setIsCreatingPage(false);
    }
  }
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Modal, {
    title: (0,external_wp_i18n_namespaceObject.__)('Draft a new page'),
    onRequestClose: onClose
  }, (0,external_React_.createElement)("form", {
    onSubmit: createPage
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    spacing: 3
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.TextControl, {
    label: (0,external_wp_i18n_namespaceObject.__)('Page title'),
    onChange: setTitle,
    placeholder: (0,external_wp_i18n_namespaceObject.__)('No title'),
    value: title
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    spacing: 2,
    justify: "end"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    variant: "tertiary",
    onClick: onClose
  }, (0,external_wp_i18n_namespaceObject.__)('Cancel')), (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    variant: "primary",
    type: "submit",
    isBusy: isCreatingPage,
    "aria-disabled": isCreatingPage
  }, (0,external_wp_i18n_namespaceObject.__)('Create draft'))))));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-pages/index.js

/**
 * WordPress dependencies
 */










/**
 * Internal dependencies
 */







const {
  useHistory: sidebar_navigation_screen_pages_useHistory
} = unlock(external_wp_router_namespaceObject.privateApis);
const PageItem = ({
  postType = 'page',
  postId,
  ...props
}) => {
  const linkInfo = useLink({
    postType,
    postId
  }, {
    backPath: '/page'
  });
  return (0,external_React_.createElement)(SidebarNavigationItem, {
    ...linkInfo,
    ...props
  });
};
function SidebarNavigationScreenPages() {
  const isMobileViewport = (0,external_wp_compose_namespaceObject.useViewportMatch)('medium', '<');
  const {
    records: pages,
    isResolving: isLoadingPages
  } = (0,external_wp_coreData_namespaceObject.useEntityRecords)('postType', 'page', {
    status: 'any',
    per_page: -1
  });
  const {
    records: templates,
    isResolving: isLoadingTemplates
  } = (0,external_wp_coreData_namespaceObject.useEntityRecords)('postType', constants_TEMPLATE_POST_TYPE, {
    per_page: -1
  });
  const dynamicPageTemplates = templates?.filter(({
    slug
  }) => ['404', 'search'].includes(slug));
  const homeTemplate = templates?.find(template => template.slug === 'front-page') || templates?.find(template => template.slug === 'home') || templates?.find(template => template.slug === 'index');
  const getPostsPageTemplate = () => templates?.find(template => template.slug === 'home') || templates?.find(template => template.slug === 'index');
  const pagesAndTemplates = pages?.concat(dynamicPageTemplates, [homeTemplate]);
  const {
    frontPage,
    postsPage
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getEntityRecord
    } = select(external_wp_coreData_namespaceObject.store);
    const siteSettings = getEntityRecord('root', 'site');
    return {
      frontPage: siteSettings?.page_on_front,
      postsPage: siteSettings?.page_for_posts
    };
  }, []);
  const isHomePageBlog = frontPage === postsPage;
  const reorderedPages = pages && [...pages];
  if (!isHomePageBlog && reorderedPages?.length) {
    const homePageIndex = reorderedPages.findIndex(item => item.id === frontPage);
    const homePage = reorderedPages.splice(homePageIndex, 1);
    reorderedPages?.splice(0, 0, ...homePage);
    const postsPageIndex = reorderedPages.findIndex(item => item.id === postsPage);
    const blogPage = reorderedPages.splice(postsPageIndex, 1);
    reorderedPages.splice(1, 0, ...blogPage);
  }
  const [showAddPage, setShowAddPage] = (0,external_wp_element_namespaceObject.useState)(false);
  const history = sidebar_navigation_screen_pages_useHistory();
  const handleNewPage = ({
    type,
    id
  }) => {
    // Navigate to the created template editor.
    history.push({
      postId: id,
      postType: type,
      canvas: 'edit'
    });
    setShowAddPage(false);
  };
  const getPageProps = id => {
    let itemIcon = library_page;
    const postsPageTemplateId = postsPage && postsPage === id ? getPostsPageTemplate()?.id : null;
    switch (id) {
      case frontPage:
        itemIcon = library_home;
        break;
      case postsPage:
        itemIcon = library_verse;
        break;
    }
    return {
      icon: itemIcon,
      postType: postsPageTemplateId ? constants_TEMPLATE_POST_TYPE : 'page',
      postId: postsPageTemplateId || id
    };
  };
  const pagesLink = useLink({
    path: '/pages'
  });
  return (0,external_React_.createElement)(external_React_.Fragment, null, showAddPage && (0,external_React_.createElement)(AddNewPageModal, {
    onSave: handleNewPage,
    onClose: () => setShowAddPage(false)
  }), (0,external_React_.createElement)(SidebarNavigationScreen, {
    title: (0,external_wp_i18n_namespaceObject.__)('Pages'),
    description: (0,external_wp_i18n_namespaceObject.__)('Browse and manage pages.'),
    actions: (0,external_React_.createElement)(SidebarButton, {
      icon: library_plus,
      label: (0,external_wp_i18n_namespaceObject.__)('Draft a new page'),
      onClick: () => setShowAddPage(true)
    }),
    content: (0,external_React_.createElement)(external_React_.Fragment, null, (isLoadingPages || isLoadingTemplates) && (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItemGroup, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItem, null, (0,external_wp_i18n_namespaceObject.__)('Loading pages…'))), !(isLoadingPages || isLoadingTemplates) && (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItemGroup, null, !pagesAndTemplates?.length && (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItem, null, (0,external_wp_i18n_namespaceObject.__)('No page found')), isHomePageBlog && homeTemplate && (0,external_React_.createElement)(PageItem, {
      postType: constants_TEMPLATE_POST_TYPE,
      postId: homeTemplate.id,
      key: homeTemplate.id,
      icon: library_home,
      withChevron: true
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalTruncate, {
      numberOfLines: 1
    }, (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(homeTemplate.title?.rendered || (0,external_wp_i18n_namespaceObject.__)('(no title)')))), reorderedPages?.map(({
      id,
      title
    }) => (0,external_React_.createElement)(PageItem, {
      ...getPageProps(id),
      key: id,
      withChevron: true
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalTruncate, {
      numberOfLines: 1
    }, (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(title?.rendered || (0,external_wp_i18n_namespaceObject.__)('(no title)'))))))),
    footer: (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
      spacing: 0
    }, dynamicPageTemplates?.map(item => (0,external_React_.createElement)(PageItem, {
      postType: constants_TEMPLATE_POST_TYPE,
      postId: item.id,
      key: item.id,
      icon: library_layout,
      withChevron: true
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalTruncate, {
      numberOfLines: 1
    }, (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(item.title?.rendered || (0,external_wp_i18n_namespaceObject.__)('(no title)'))))), !isMobileViewport && (0,external_React_.createElement)(SidebarNavigationItem, {
      className: "edit-site-sidebar-navigation-screen-pages__see-all",
      ...pagesLink
    }, (0,external_wp_i18n_namespaceObject.__)('Manage all pages')))
  }));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/pages.js

/**
 * WordPress dependencies
 */

const pages = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M14.5 5.5h-7V7h7V5.5ZM7.5 9h7v1.5h-7V9Zm7 3.5h-7V14h7v-1.5Z"
}), (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M16 2H6a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2ZM6 3.5h10a.5.5 0 0 1 .5.5v12a.5.5 0 0 1-.5.5H6a.5.5 0 0 1-.5-.5V4a.5.5 0 0 1 .5-.5Z"
}), (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M20 8v11c0 .69-.31 1-.999 1H6v1.5h13.001c1.52 0 2.499-.982 2.499-2.5V8H20Z"
}));
/* harmony default export */ const library_pages = (pages);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/drafts.js

/**
 * WordPress dependencies
 */

const drafts = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M8 2H6a2 2 0 0 0-2 2v2.4h1.5V4a.5.5 0 0 1 .5-.5h2V2ZM4 13.6V16a2 2 0 0 0 2 2h2v-1.5H6a.5.5 0 0 1-.5-.5v-2.4H4Zm0-1.2h1.5V7.6H4v4.8ZM9 2v1.5h4V2H9Zm5 0v1.5h2a.5.5 0 0 1 .5.5v2.4H18V4a2 2 0 0 0-2-2h-2Zm4 5.6h-1.5v4.8H18V7.6Zm0 6h-1.5V16a.5.5 0 0 1-.5.5h-2V18h2a2 2 0 0 0 2-2v-2.4ZM13 18v-1.5H9V18h4ZM7 7.25h8v-1.5H7v1.5Zm0 3.25h6V9H7v1.5ZM21.75 19V6h-1.5v13c0 .69-.56 1.25-1.25 1.25H8v1.5h11A2.75 2.75 0 0 0 21.75 19Z"
}));
/* harmony default export */ const library_drafts = (drafts);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/trash.js

/**
 * WordPress dependencies
 */

const trash = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M12 5.5A2.25 2.25 0 0 0 9.878 7h4.244A2.251 2.251 0 0 0 12 5.5ZM12 4a3.751 3.751 0 0 0-3.675 3H5v1.5h1.27l.818 8.997a2.75 2.75 0 0 0 2.739 2.501h4.347a2.75 2.75 0 0 0 2.738-2.5L17.73 8.5H19V7h-3.325A3.751 3.751 0 0 0 12 4Zm4.224 4.5H7.776l.806 8.861a1.25 1.25 0 0 0 1.245 1.137h4.347a1.25 1.25 0 0 0 1.245-1.137l.805-8.861Z"
}));
/* harmony default export */ const library_trash = (trash);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-dataviews/default-views.js
/**
 * WordPress dependencies
 */



/**
 * Internal dependencies
 */

const DEFAULT_CONFIG_PER_VIEW_TYPE = {
  [LAYOUT_TABLE]: {
    primaryField: 'title'
  },
  [LAYOUT_GRID]: {
    mediaField: 'featured-image',
    primaryField: 'title'
  },
  [LAYOUT_LIST]: {
    primaryField: 'title',
    mediaField: 'featured-image'
  }
};
const DEFAULT_PAGE_BASE = {
  type: LAYOUT_TABLE,
  search: '',
  filters: [],
  page: 1,
  perPage: 20,
  sort: {
    field: 'date',
    direction: 'desc'
  },
  // All fields are visible by default, so it's
  // better to keep track of the hidden ones.
  hiddenFields: ['date', 'featured-image'],
  layout: {
    ...DEFAULT_CONFIG_PER_VIEW_TYPE[LAYOUT_TABLE]
  }
};
const DEFAULT_VIEWS = {
  page: [{
    title: (0,external_wp_i18n_namespaceObject.__)('All pages'),
    slug: 'all',
    icon: library_pages,
    view: DEFAULT_PAGE_BASE
  }, {
    title: (0,external_wp_i18n_namespaceObject.__)('Drafts'),
    slug: 'drafts',
    icon: library_drafts,
    view: {
      ...DEFAULT_PAGE_BASE,
      filters: [{
        field: 'status',
        operator: OPERATOR_IN,
        value: 'draft'
      }]
    }
  }, {
    title: (0,external_wp_i18n_namespaceObject.__)('Trash'),
    slug: 'trash',
    icon: library_trash,
    view: {
      ...DEFAULT_PAGE_BASE,
      filters: [{
        field: 'status',
        operator: OPERATOR_IN,
        value: 'trash'
      }]
    }
  }]
};

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-dataviews/add-new-view.js

/**
 * WordPress dependencies
 */








/**
 * Internal dependencies
 */



const {
  useHistory: add_new_view_useHistory,
  useLocation: add_new_view_useLocation
} = unlock(external_wp_router_namespaceObject.privateApis);
function AddNewItemModalContent({
  type,
  setIsAdding
}) {
  const {
    params: {
      path
    }
  } = add_new_view_useLocation();
  const history = add_new_view_useHistory();
  const {
    saveEntityRecord
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_coreData_namespaceObject.store);
  const [title, setTitle] = (0,external_wp_element_namespaceObject.useState)('');
  const [isSaving, setIsSaving] = (0,external_wp_element_namespaceObject.useState)(false);
  return (0,external_React_.createElement)("form", {
    onSubmit: async event => {
      event.preventDefault();
      setIsSaving(true);
      const {
        getEntityRecords
      } = (0,external_wp_data_namespaceObject.resolveSelect)(external_wp_coreData_namespaceObject.store);
      let dataViewTaxonomyId;
      const dataViewTypeRecords = await getEntityRecords('taxonomy', 'wp_dataviews_type', {
        slug: type
      });
      if (dataViewTypeRecords && dataViewTypeRecords.length > 0) {
        dataViewTaxonomyId = dataViewTypeRecords[0].id;
      } else {
        const record = await saveEntityRecord('taxonomy', 'wp_dataviews_type', {
          name: type
        });
        if (record && record.id) {
          dataViewTaxonomyId = record.id;
        }
      }
      const savedRecord = await saveEntityRecord('postType', 'wp_dataviews', {
        title,
        status: 'publish',
        wp_dataviews_type: dataViewTaxonomyId,
        content: JSON.stringify(DEFAULT_VIEWS[type][0].view)
      });
      history.push({
        path,
        activeView: savedRecord.id,
        isCustom: 'true'
      });
      setIsSaving(false);
      setIsAdding(false);
    }
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    spacing: "5"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.TextControl, {
    __nextHasNoMarginBottom: true,
    label: (0,external_wp_i18n_namespaceObject.__)('Name'),
    value: title,
    onChange: setTitle,
    placeholder: (0,external_wp_i18n_namespaceObject.__)('My view'),
    className: "patterns-create-modal__name-input"
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    justify: "right"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    variant: "tertiary",
    onClick: () => {
      setIsAdding(false);
    }
  }, (0,external_wp_i18n_namespaceObject.__)('Cancel')), (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    variant: "primary",
    type: "submit",
    "aria-disabled": !title || isSaving,
    isBusy: isSaving
  }, (0,external_wp_i18n_namespaceObject.__)('Create')))));
}
function AddNewItem({
  type
}) {
  const [isAdding, setIsAdding] = (0,external_wp_element_namespaceObject.useState)(false);
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(SidebarNavigationItem, {
    icon: library_plus,
    onClick: () => {
      setIsAdding(true);
    },
    className: "dataviews__siderbar-content-add-new-item"
  }, (0,external_wp_i18n_namespaceObject.__)('New view')), isAdding && (0,external_React_.createElement)(external_wp_components_namespaceObject.Modal, {
    title: (0,external_wp_i18n_namespaceObject.__)('Add new view'),
    onRequestClose: () => {
      setIsAdding(false);
    }
  }, (0,external_React_.createElement)(AddNewItemModalContent, {
    type: type,
    setIsAdding: setIsAdding
  })));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-dataviews/custom-dataviews-list.js

/**
 * WordPress dependencies
 */








/**
 * Internal dependencies
 */



const {
  useHistory: custom_dataviews_list_useHistory,
  useLocation: custom_dataviews_list_useLocation
} = unlock(external_wp_router_namespaceObject.privateApis);
const custom_dataviews_list_EMPTY_ARRAY = [];
function RenameItemModalContent({
  dataviewId,
  currentTitle,
  setIsRenaming
}) {
  const {
    editEntityRecord
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_coreData_namespaceObject.store);
  const [title, setTitle] = (0,external_wp_element_namespaceObject.useState)(currentTitle);
  return (0,external_React_.createElement)("form", {
    onSubmit: async event => {
      event.preventDefault();
      await editEntityRecord('postType', 'wp_dataviews', dataviewId, {
        title
      });
      setIsRenaming(false);
    }
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    spacing: "5"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.TextControl, {
    __nextHasNoMarginBottom: true,
    label: (0,external_wp_i18n_namespaceObject.__)('Name'),
    value: title,
    onChange: setTitle,
    placeholder: (0,external_wp_i18n_namespaceObject.__)('My view'),
    className: "patterns-create-modal__name-input"
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    justify: "right"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    variant: "tertiary",
    onClick: () => {
      setIsRenaming(false);
    }
  }, (0,external_wp_i18n_namespaceObject.__)('Cancel')), (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    variant: "primary",
    type: "submit",
    "aria-disabled": !title
  }, (0,external_wp_i18n_namespaceObject.__)('Rename')))));
}
function CustomDataViewItem({
  dataviewId,
  isActive
}) {
  const {
    params: {
      path
    }
  } = custom_dataviews_list_useLocation();
  const history = custom_dataviews_list_useHistory();
  const {
    dataview
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getEditedEntityRecord
    } = select(external_wp_coreData_namespaceObject.store);
    return {
      dataview: getEditedEntityRecord('postType', 'wp_dataviews', dataviewId)
    };
  }, [dataviewId]);
  const {
    deleteEntityRecord
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_coreData_namespaceObject.store);
  const type = (0,external_wp_element_namespaceObject.useMemo)(() => {
    const viewContent = JSON.parse(dataview.content);
    return viewContent.type;
  }, [dataview.content]);
  const [isRenaming, setIsRenaming] = (0,external_wp_element_namespaceObject.useState)(false);
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(DataViewItem, {
    title: dataview.title,
    type: type,
    isActive: isActive,
    isCustom: "true",
    customViewId: dataviewId,
    suffix: (0,external_React_.createElement)(external_wp_components_namespaceObject.DropdownMenu, {
      icon: more_vertical,
      label: (0,external_wp_i18n_namespaceObject.__)('Actions'),
      className: "edit-site-sidebar-dataviews-dataview-item__dropdown-menu",
      toggleProps: {
        style: {
          color: 'inherit'
        },
        size: 'small'
      }
    }, ({
      onClose
    }) => (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuGroup, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
      onClick: () => {
        setIsRenaming(true);
        onClose();
      }
    }, (0,external_wp_i18n_namespaceObject.__)('Rename')), (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
      onClick: async () => {
        await deleteEntityRecord('postType', 'wp_dataviews', dataview.id, {
          force: true
        });
        if (isActive) {
          history.replace({
            path
          });
        }
        onClose();
      },
      isDestructive: true
    }, (0,external_wp_i18n_namespaceObject.__)('Delete'))))
  }), isRenaming && (0,external_React_.createElement)(external_wp_components_namespaceObject.Modal, {
    title: (0,external_wp_i18n_namespaceObject.__)('Rename view'),
    onRequestClose: () => {
      setIsRenaming(false);
    }
  }, (0,external_React_.createElement)(RenameItemModalContent, {
    dataviewId: dataviewId,
    setIsRenaming: setIsRenaming,
    currentTitle: dataview.title
  })));
}
function useCustomDataViews(type) {
  const customDataViews = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getEntityRecords
    } = select(external_wp_coreData_namespaceObject.store);
    const dataViewTypeRecords = getEntityRecords('taxonomy', 'wp_dataviews_type', {
      slug: type
    });
    if (!dataViewTypeRecords || dataViewTypeRecords.length === 0) {
      return custom_dataviews_list_EMPTY_ARRAY;
    }
    const dataViews = getEntityRecords('postType', 'wp_dataviews', {
      wp_dataviews_type: dataViewTypeRecords[0].id,
      orderby: 'date',
      order: 'asc'
    });
    if (!dataViews) {
      return custom_dataviews_list_EMPTY_ARRAY;
    }
    return dataViews;
  });
  return customDataViews;
}
function CustomDataViewsList({
  type,
  activeView,
  isCustom
}) {
  const customDataViews = useCustomDataViews(type);
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)("div", {
    className: "edit-site-sidebar-navigation-screen-dataviews__group-header"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHeading, {
    level: 2
  }, (0,external_wp_i18n_namespaceObject.__)('Custom Views'))), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItemGroup, null, customDataViews.map(customViewRecord => {
    return (0,external_React_.createElement)(CustomDataViewItem, {
      key: customViewRecord.id,
      dataviewId: customViewRecord.id,
      isActive: isCustom === 'true' && Number(activeView) === customViewRecord.id
    });
  }), (0,external_React_.createElement)(AddNewItem, {
    type: type
  })));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-dataviews/index.js

/**
 * WordPress dependencies
 */


/**
 * Internal dependencies
 */



const {
  useLocation: sidebar_dataviews_useLocation
} = unlock(external_wp_router_namespaceObject.privateApis);


const PATH_TO_TYPE = {
  '/pages': 'page'
};
function DataViewsSidebarContent() {
  const {
    params: {
      path,
      activeView = 'all',
      isCustom = 'false'
    }
  } = sidebar_dataviews_useLocation();
  if (!path || !PATH_TO_TYPE[path]) {
    return null;
  }
  const type = PATH_TO_TYPE[path];
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItemGroup, null, DEFAULT_VIEWS[type].map(dataview => {
    return (0,external_React_.createElement)(DataViewItem, {
      key: dataview.slug,
      slug: dataview.slug,
      title: dataview.title,
      icon: dataview.icon,
      type: dataview.view.type,
      isActive: isCustom === 'false' && dataview.slug === activeView,
      isCustom: "false"
    });
  })), window?.__experimentalAdminViews && (0,external_React_.createElement)(CustomDataViewsList, {
    activeView: activeView,
    type: type,
    isCustom: "true"
  }));
}

;// CONCATENATED MODULE: external ["wp","dom"]
const external_wp_dom_namespaceObject = window["wp"]["dom"];
;// CONCATENATED MODULE: external ["wp","escapeHtml"]
const external_wp_escapeHtml_namespaceObject = window["wp"]["escapeHtml"];
;// CONCATENATED MODULE: external ["wp","wordcount"]
const external_wp_wordcount_namespaceObject = window["wp"]["wordcount"];
;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-page/status-label.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */



function StatusLabel({
  status,
  date,
  short
}) {
  const relateToNow = (0,external_wp_date_namespaceObject.humanTimeDiff)(date);
  let statusLabel = status;
  switch (status) {
    case 'publish':
      statusLabel = date ? (0,external_wp_element_namespaceObject.createInterpolateElement)((0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: is the relative time when the post was published. */
      (0,external_wp_i18n_namespaceObject.__)('Published <time>%s</time>'), relateToNow), {
        time: (0,external_React_.createElement)("time", {
          dateTime: date
        })
      }) : (0,external_wp_i18n_namespaceObject.__)('Published');
      break;
    case 'future':
      const formattedDate = (0,external_wp_date_namespaceObject.dateI18n)(short ? 'M j' : 'F j', (0,external_wp_date_namespaceObject.getDate)(date));
      statusLabel = date ? (0,external_wp_element_namespaceObject.createInterpolateElement)((0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: is the formatted date and time on which the post is scheduled to be published. */
      (0,external_wp_i18n_namespaceObject.__)('Scheduled: <time>%s</time>'), formattedDate), {
        time: (0,external_React_.createElement)("time", {
          dateTime: date
        })
      }) : (0,external_wp_i18n_namespaceObject.__)('Scheduled');
      break;
    case 'draft':
      statusLabel = (0,external_wp_i18n_namespaceObject.__)('Draft');
      break;
    case 'pending':
      statusLabel = (0,external_wp_i18n_namespaceObject.__)('Pending');
      break;
    case 'private':
      statusLabel = (0,external_wp_i18n_namespaceObject.__)('Private');
      break;
    case 'protected':
      statusLabel = (0,external_wp_i18n_namespaceObject.__)('Password protected');
      break;
  }
  return (0,external_React_.createElement)("div", {
    className: classnames_default()('edit-site-sidebar-navigation-screen-page__status', {
      [`has-status has-${status}-status`]: !!status
    })
  }, statusLabel);
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-page/page-details.js

/**
 * WordPress dependencies
 */








/**
 * Internal dependencies
 */






// Taken from packages/editor/src/components/time-to-read/index.js.
const AVERAGE_READING_RATE = 189;
function getPageDetails(page) {
  if (!page) {
    return [];
  }
  const details = [{
    label: (0,external_wp_i18n_namespaceObject.__)('Status'),
    value: (0,external_React_.createElement)(StatusLabel, {
      status: page?.password ? 'protected' : page.status,
      date: page?.date,
      short: true
    })
  }, {
    label: (0,external_wp_i18n_namespaceObject.__)('Slug'),
    value: (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalTruncate, {
      numberOfLines: 1
    }, (0,external_wp_url_namespaceObject.safeDecodeURIComponent)(page.slug || page.generated_slug))
  }];
  if (page?.templateTitle) {
    details.push({
      label: (0,external_wp_i18n_namespaceObject.__)('Template'),
      value: (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(page.templateTitle)
    });
  }
  if (page?.parentTitle) {
    details.push({
      label: (0,external_wp_i18n_namespaceObject.__)('Parent'),
      value: (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(page.parentTitle || (0,external_wp_i18n_namespaceObject.__)('(no title)'))
    });
  }

  /*
   * translators: If your word count is based on single characters (e.g. East Asian characters),
   * enter 'characters_excluding_spaces' or 'characters_including_spaces'. Otherwise, enter 'words'.
   * Do not translate into your own language.
   */
  const wordCountType = (0,external_wp_i18n_namespaceObject._x)('words', 'Word count type. Do not translate!');
  const wordsCounted = page?.content?.rendered ? (0,external_wp_wordcount_namespaceObject.count)(page.content.rendered, wordCountType) : 0;
  const readingTime = Math.round(wordsCounted / AVERAGE_READING_RATE);
  if (wordsCounted && !page?.isPostsPage) {
    details.push({
      label: (0,external_wp_i18n_namespaceObject.__)('Words'),
      value: wordsCounted.toLocaleString() || (0,external_wp_i18n_namespaceObject.__)('Unknown')
    }, {
      label: (0,external_wp_i18n_namespaceObject.__)('Time to read'),
      value: readingTime > 1 ? (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: is the number of minutes. */
      (0,external_wp_i18n_namespaceObject.__)('%s mins'), readingTime.toLocaleString()) : (0,external_wp_i18n_namespaceObject.__)('< 1 min')
    });
  }
  return details;
}
function PageDetails({
  id
}) {
  const {
    record
  } = (0,external_wp_coreData_namespaceObject.useEntityRecord)('postType', 'page', id);
  const {
    parentTitle,
    templateTitle,
    isPostsPage
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getEditedPostId
    } = unlock(select(store_store));
    const template = select(external_wp_coreData_namespaceObject.store).getEntityRecord('postType', constants_TEMPLATE_POST_TYPE, getEditedPostId());
    const _templateTitle = template?.title?.rendered;

    // Parent page title.
    const _parentTitle = record?.parent ? select(external_wp_coreData_namespaceObject.store).getEntityRecord('postType', 'page', record.parent, {
      _fields: ['title']
    })?.title?.rendered : null;
    const {
      getEntityRecord
    } = select(external_wp_coreData_namespaceObject.store);
    const siteSettings = getEntityRecord('root', 'site');
    return {
      parentTitle: _parentTitle,
      templateTitle: _templateTitle,
      isPostsPage: record?.id === siteSettings?.page_for_posts
    };
  }, [record?.parent, record?.id]);
  return (0,external_React_.createElement)(SidebarNavigationScreenDetailsPanel, {
    spacing: 5,
    title: (0,external_wp_i18n_namespaceObject.__)('Details')
  }, getPageDetails({
    parentTitle,
    templateTitle,
    isPostsPage,
    ...record
  }).map(({
    label,
    value
  }) => (0,external_React_.createElement)(SidebarNavigationScreenDetailsPanelRow, {
    key: label
  }, (0,external_React_.createElement)(SidebarNavigationScreenDetailsPanelLabel, null, label), (0,external_React_.createElement)(SidebarNavigationScreenDetailsPanelValue, null, value))));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/page-actions/trash-page-menu-item.js

/**
 * WordPress dependencies
 */






function TrashPageMenuItem({
  postId,
  onRemove
}) {
  const {
    createSuccessNotice,
    createErrorNotice
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_notices_namespaceObject.store);
  const {
    deleteEntityRecord
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_coreData_namespaceObject.store);
  const page = (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_coreData_namespaceObject.store).getEntityRecord('postType', 'page', postId), [postId]);
  async function removePage() {
    try {
      await deleteEntityRecord('postType', 'page', postId, {}, {
        throwOnError: true
      });
      createSuccessNotice((0,external_wp_i18n_namespaceObject.sprintf)( /* translators: The page's title. */
      (0,external_wp_i18n_namespaceObject.__)('"%s" moved to the Trash.'), (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(page.title.rendered)), {
        type: 'snackbar',
        id: 'edit-site-page-trashed'
      });
      onRemove?.();
    } catch (error) {
      const errorMessage = error.message && error.code !== 'unknown_error' ? error.message : (0,external_wp_i18n_namespaceObject.__)('An error occurred while moving the page to the trash.');
      createErrorNotice(errorMessage, {
        type: 'snackbar'
      });
    }
  }
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
    onClick: () => removePage(),
    isDestructive: true,
    variant: "secondary"
  }, (0,external_wp_i18n_namespaceObject.__)('Move to Trash')));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/page-actions/index.js

/**
 * WordPress dependencies
 */




/**
 * Internal dependencies
 */

function PageActions({
  postId,
  toggleProps,
  onRemove
}) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.DropdownMenu, {
    icon: more_vertical,
    label: (0,external_wp_i18n_namespaceObject.__)('Actions'),
    toggleProps: toggleProps
  }, () => (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuGroup, null, (0,external_React_.createElement)(TrashPageMenuItem, {
    postId: postId,
    onRemove: onRemove
  })));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-navigation-screen-page/index.js

/**
 * WordPress dependencies
 */












/**
 * Internal dependencies
 */







const {
  useHistory: sidebar_navigation_screen_page_useHistory
} = unlock(external_wp_router_namespaceObject.privateApis);
function SidebarNavigationScreenPage({
  backPath
}) {
  const {
    setCanvasMode
  } = unlock((0,external_wp_data_namespaceObject.useDispatch)(store_store));
  const history = sidebar_navigation_screen_page_useHistory();
  const {
    params: {
      postId
    },
    goTo
  } = (0,external_wp_components_namespaceObject.__experimentalUseNavigator)();
  const {
    record,
    hasResolved
  } = (0,external_wp_coreData_namespaceObject.useEntityRecord)('postType', 'page', postId);
  const {
    featuredMediaAltText,
    featuredMediaSourceUrl
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getEntityRecord
    } = select(external_wp_coreData_namespaceObject.store);
    // Featured image.
    const attachedMedia = record?.featured_media ? getEntityRecord('postType', 'attachment', record?.featured_media) : null;
    return {
      featuredMediaSourceUrl: attachedMedia?.media_details.sizes?.medium?.source_url || attachedMedia?.source_url,
      featuredMediaAltText: (0,external_wp_escapeHtml_namespaceObject.escapeAttribute)(attachedMedia?.alt_text || attachedMedia?.description?.raw || '')
    };
  }, [record]);

  // Redirect to the main pages navigation screen if the page is not found or has been deleted.
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    if (hasResolved && !record) {
      history.push({
        path: '/page',
        postId: undefined,
        postType: undefined,
        canvas: 'view'
      });
    }
  }, [hasResolved, history]);
  const featureImageAltText = featuredMediaAltText ? (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(featuredMediaAltText) : (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(record?.title?.rendered || (0,external_wp_i18n_namespaceObject.__)('Featured image'));
  return record ? (0,external_React_.createElement)(SidebarNavigationScreen, {
    backPath: backPath,
    title: (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(record?.title?.rendered || (0,external_wp_i18n_namespaceObject.__)('(no title)')),
    actions: (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(PageActions, {
      postId: postId,
      toggleProps: {
        as: SidebarButton
      },
      onRemove: () => {
        goTo('/page');
      }
    }), (0,external_React_.createElement)(SidebarButton, {
      onClick: () => setCanvasMode('edit'),
      label: (0,external_wp_i18n_namespaceObject.__)('Edit'),
      icon: library_pencil
    })),
    meta: (0,external_React_.createElement)(external_wp_components_namespaceObject.ExternalLink, {
      className: "edit-site-sidebar-navigation-screen__page-link",
      href: record.link
    }, (0,external_wp_url_namespaceObject.filterURLForDisplay)((0,external_wp_url_namespaceObject.safeDecodeURIComponent)(record.link))),
    content: (0,external_React_.createElement)(external_React_.Fragment, null, !!featuredMediaSourceUrl && (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
      className: "edit-site-sidebar-navigation-screen-page__featured-image-wrapper",
      alignment: "left",
      spacing: 2
    }, (0,external_React_.createElement)("div", {
      className: "edit-site-sidebar-navigation-screen-page__featured-image has-image"
    }, (0,external_React_.createElement)("img", {
      alt: featureImageAltText,
      src: featuredMediaSourceUrl
    }))), !!record?.excerpt?.rendered && (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalTruncate, {
      className: "edit-site-sidebar-navigation-screen-page__excerpt",
      numberOfLines: 3
    }, (0,external_wp_dom_namespaceObject.__unstableStripHTML)(record.excerpt.rendered)), (0,external_React_.createElement)(PageDetails, {
      id: postId
    })),
    footer: record?.modified ? (0,external_React_.createElement)(SidebarNavigationScreenDetailsFooter, {
      record: record
    }) : null
  }) : null;
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar/index.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */
















const {
  useLocation: sidebar_useLocation
} = unlock(external_wp_router_namespaceObject.privateApis);
function SidebarScreenWrapper({
  className,
  ...props
}) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalNavigatorScreen, {
    className: classnames_default()('edit-site-sidebar__screen-wrapper', className),
    ...props
  });
}
function SidebarScreens() {
  useSyncPathWithURL();
  const isMobileViewport = (0,external_wp_compose_namespaceObject.useViewportMatch)('medium', '<');
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(SidebarScreenWrapper, {
    path: "/"
  }, (0,external_React_.createElement)(SidebarNavigationScreenMain, null)), (0,external_React_.createElement)(SidebarScreenWrapper, {
    path: "/navigation"
  }, (0,external_React_.createElement)(SidebarNavigationScreenNavigationMenus, null)), (0,external_React_.createElement)(SidebarScreenWrapper, {
    path: "/navigation/:postType/:postId"
  }, (0,external_React_.createElement)(SidebarNavigationScreenNavigationMenu, null)), (0,external_React_.createElement)(SidebarScreenWrapper, {
    path: "/wp_global_styles"
  }, (0,external_React_.createElement)(SidebarNavigationScreenGlobalStyles, null)), (0,external_React_.createElement)(SidebarScreenWrapper, {
    path: "/page"
  }, (0,external_React_.createElement)(SidebarNavigationScreenPages, null)), (0,external_React_.createElement)(SidebarScreenWrapper, {
    path: "/pages"
  }, (0,external_React_.createElement)(SidebarNavigationScreen, {
    title: (0,external_wp_i18n_namespaceObject.__)('Manage pages'),
    content: (0,external_React_.createElement)(DataViewsSidebarContent, null),
    backPath: "/page"
  })), (0,external_React_.createElement)(SidebarScreenWrapper, {
    path: "/page/:postId"
  }, (0,external_React_.createElement)(SidebarNavigationScreenPage, null)), (0,external_React_.createElement)(SidebarScreenWrapper, {
    path: "/:postType(wp_template)"
  }, (0,external_React_.createElement)(SidebarNavigationScreenTemplates, null)), !isMobileViewport && (0,external_React_.createElement)(SidebarScreenWrapper, {
    path: "/patterns"
  }, (0,external_React_.createElement)(SidebarNavigationScreenPatterns, null)), (0,external_React_.createElement)(SidebarScreenWrapper, {
    path: "/:postType(wp_template|wp_template_part)/all"
  }, (0,external_React_.createElement)(SidebarNavigationScreenTemplatesBrowse, null)), (0,external_React_.createElement)(SidebarScreenWrapper, {
    path: "/:postType(wp_template_part|wp_block)/:postId"
  }, (0,external_React_.createElement)(SidebarNavigationScreenPattern, null)), (0,external_React_.createElement)(SidebarScreenWrapper, {
    path: "/:postType(wp_template)/:postId"
  }, (0,external_React_.createElement)(SidebarNavigationScreenTemplate, null)));
}
function Sidebar() {
  const {
    params: urlParams
  } = sidebar_useLocation();
  const initialPath = (0,external_wp_element_namespaceObject.useRef)(getPathFromURL(urlParams));
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalNavigatorProvider, {
    className: "edit-site-sidebar__content",
    initialPath: initialPath.current
  }, (0,external_React_.createElement)(SidebarScreens, null)), (0,external_React_.createElement)(SaveHub, null));
}
/* harmony default export */ const sidebar = ((0,external_wp_element_namespaceObject.memo)(Sidebar));

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/error-boundary/warning.js

/**
 * WordPress dependencies
 */




function CopyButton({
  text,
  children
}) {
  const ref = (0,external_wp_compose_namespaceObject.useCopyToClipboard)(text);
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    variant: "secondary",
    ref: ref
  }, children);
}
function ErrorBoundaryWarning({
  message,
  error
}) {
  const actions = [(0,external_React_.createElement)(CopyButton, {
    key: "copy-error",
    text: error.stack
  }, (0,external_wp_i18n_namespaceObject.__)('Copy Error'))];
  return (0,external_React_.createElement)(external_wp_blockEditor_namespaceObject.Warning, {
    className: "editor-error-boundary",
    actions: actions
  }, message);
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/error-boundary/index.js

/**
 * WordPress dependencies
 */




/**
 * Internal dependencies
 */

class ErrorBoundary extends external_wp_element_namespaceObject.Component {
  constructor() {
    super(...arguments);
    this.state = {
      error: null
    };
  }
  componentDidCatch(error) {
    (0,external_wp_hooks_namespaceObject.doAction)('editor.ErrorBoundary.errorLogged', error);
  }
  static getDerivedStateFromError(error) {
    return {
      error
    };
  }
  render() {
    if (!this.state.error) {
      return this.props.children;
    }
    return (0,external_React_.createElement)(ErrorBoundaryWarning, {
      message: (0,external_wp_i18n_namespaceObject.__)('The editor has encountered an unexpected error.'),
      error: this.state.error
    });
  }
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/next.js

/**
 * WordPress dependencies
 */

const next = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M6.6 6L5.4 7l4.5 5-4.5 5 1.1 1 5.5-6-5.4-6zm6 0l-1.1 1 4.5 5-4.5 5 1.1 1 5.5-6-5.5-6z"
}));
/* harmony default export */ const library_next = (next);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/previous.js

/**
 * WordPress dependencies
 */

const previous = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M11.6 7l-1.1-1L5 12l5.5 6 1.1-1L7 12l4.6-5zm6 0l-1.1-1-5.5 6 5.5 6 1.1-1-4.6-5 4.6-5z"
}));
/* harmony default export */ const library_previous = (previous);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/external.js

/**
 * WordPress dependencies
 */

const external = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M19.5 4.5h-7V6h4.44l-5.97 5.97 1.06 1.06L18 7.06v4.44h1.5v-7Zm-13 1a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2v-3H17v3a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h3V5.5h-3Z"
}));
/* harmony default export */ const library_external = (external);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/keyboard-shortcut-help-modal/config.js
/**
 * WordPress dependencies
 */

const textFormattingShortcuts = [{
  keyCombination: {
    modifier: 'primary',
    character: 'b'
  },
  description: (0,external_wp_i18n_namespaceObject.__)('Make the selected text bold.')
}, {
  keyCombination: {
    modifier: 'primary',
    character: 'i'
  },
  description: (0,external_wp_i18n_namespaceObject.__)('Make the selected text italic.')
}, {
  keyCombination: {
    modifier: 'primary',
    character: 'k'
  },
  description: (0,external_wp_i18n_namespaceObject.__)('Convert the selected text into a link.')
}, {
  keyCombination: {
    modifier: 'primaryShift',
    character: 'k'
  },
  description: (0,external_wp_i18n_namespaceObject.__)('Remove a link.')
}, {
  keyCombination: {
    character: '[['
  },
  description: (0,external_wp_i18n_namespaceObject.__)('Insert a link to a post or page.')
}, {
  keyCombination: {
    modifier: 'primary',
    character: 'u'
  },
  description: (0,external_wp_i18n_namespaceObject.__)('Underline the selected text.')
}, {
  keyCombination: {
    modifier: 'access',
    character: 'd'
  },
  description: (0,external_wp_i18n_namespaceObject.__)('Strikethrough the selected text.')
}, {
  keyCombination: {
    modifier: 'access',
    character: 'x'
  },
  description: (0,external_wp_i18n_namespaceObject.__)('Make the selected text inline code.')
}, {
  keyCombination: {
    modifier: 'access',
    character: '0'
  },
  description: (0,external_wp_i18n_namespaceObject.__)('Convert the current heading to a paragraph.')
}, {
  keyCombination: {
    modifier: 'access',
    character: '1-6'
  },
  description: (0,external_wp_i18n_namespaceObject.__)('Convert the current paragraph or heading to a heading of level 1 to 6.')
}];

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/keyboard-shortcut-help-modal/shortcut.js

/**
 * WordPress dependencies
 */


function KeyCombination({
  keyCombination,
  forceAriaLabel
}) {
  const shortcut = keyCombination.modifier ? external_wp_keycodes_namespaceObject.displayShortcutList[keyCombination.modifier](keyCombination.character) : keyCombination.character;
  const ariaLabel = keyCombination.modifier ? external_wp_keycodes_namespaceObject.shortcutAriaLabel[keyCombination.modifier](keyCombination.character) : keyCombination.character;
  return (0,external_React_.createElement)("kbd", {
    className: "edit-site-keyboard-shortcut-help-modal__shortcut-key-combination",
    "aria-label": forceAriaLabel || ariaLabel
  }, (Array.isArray(shortcut) ? shortcut : [shortcut]).map((character, index) => {
    if (character === '+') {
      return (0,external_React_.createElement)(external_wp_element_namespaceObject.Fragment, {
        key: index
      }, character);
    }
    return (0,external_React_.createElement)("kbd", {
      key: index,
      className: "edit-site-keyboard-shortcut-help-modal__shortcut-key"
    }, character);
  }));
}
function Shortcut({
  description,
  keyCombination,
  aliases = [],
  ariaLabel
}) {
  return (0,external_React_.createElement)(external_wp_element_namespaceObject.Fragment, null, (0,external_React_.createElement)("div", {
    className: "edit-site-keyboard-shortcut-help-modal__shortcut-description"
  }, description), (0,external_React_.createElement)("div", {
    className: "edit-site-keyboard-shortcut-help-modal__shortcut-term"
  }, (0,external_React_.createElement)(KeyCombination, {
    keyCombination: keyCombination,
    forceAriaLabel: ariaLabel
  }), aliases.map((alias, index) => (0,external_React_.createElement)(KeyCombination, {
    keyCombination: alias,
    forceAriaLabel: ariaLabel,
    key: index
  }))));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/keyboard-shortcut-help-modal/dynamic-shortcut.js

/**
 * WordPress dependencies
 */



/**
 * Internal dependencies
 */

function DynamicShortcut({
  name
}) {
  const {
    keyCombination,
    description,
    aliases
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getShortcutKeyCombination,
      getShortcutDescription,
      getShortcutAliases
    } = select(external_wp_keyboardShortcuts_namespaceObject.store);
    return {
      keyCombination: getShortcutKeyCombination(name),
      aliases: getShortcutAliases(name),
      description: getShortcutDescription(name)
    };
  }, [name]);
  if (!keyCombination) {
    return null;
  }
  return (0,external_React_.createElement)(Shortcut, {
    keyCombination: keyCombination,
    description: description,
    aliases: aliases
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/keyboard-shortcut-help-modal/index.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */



const KEYBOARD_SHORTCUT_HELP_MODAL_NAME = 'edit-site/keyboard-shortcut-help';
const ShortcutList = ({
  shortcuts
}) =>
/*
 * Disable reason: The `list` ARIA role is redundant but
 * Safari+VoiceOver won't announce the list otherwise.
 */
/* eslint-disable jsx-a11y/no-redundant-roles */
(0,external_React_.createElement)("ul", {
  className: "edit-site-keyboard-shortcut-help-modal__shortcut-list",
  role: "list"
}, shortcuts.map((shortcut, index) => (0,external_React_.createElement)("li", {
  className: "edit-site-keyboard-shortcut-help-modal__shortcut",
  key: index
}, typeof shortcut === 'string' ? (0,external_React_.createElement)(DynamicShortcut, {
  name: shortcut
}) : (0,external_React_.createElement)(Shortcut, {
  ...shortcut
}))))
/* eslint-enable jsx-a11y/no-redundant-roles */;
const ShortcutSection = ({
  title,
  shortcuts,
  className
}) => (0,external_React_.createElement)("section", {
  className: classnames_default()('edit-site-keyboard-shortcut-help-modal__section', className)
}, !!title && (0,external_React_.createElement)("h2", {
  className: "edit-site-keyboard-shortcut-help-modal__section-title"
}, title), (0,external_React_.createElement)(ShortcutList, {
  shortcuts: shortcuts
}));
const ShortcutCategorySection = ({
  title,
  categoryName,
  additionalShortcuts = []
}) => {
  const categoryShortcuts = (0,external_wp_data_namespaceObject.useSelect)(select => {
    return select(external_wp_keyboardShortcuts_namespaceObject.store).getCategoryShortcuts(categoryName);
  }, [categoryName]);
  return (0,external_React_.createElement)(ShortcutSection, {
    title: title,
    shortcuts: categoryShortcuts.concat(additionalShortcuts)
  });
};
function KeyboardShortcutHelpModal() {
  const isModalActive = (0,external_wp_data_namespaceObject.useSelect)(select => select(store).isModalActive(KEYBOARD_SHORTCUT_HELP_MODAL_NAME));
  const {
    closeModal,
    openModal
  } = (0,external_wp_data_namespaceObject.useDispatch)(store);
  const toggleModal = () => isModalActive ? closeModal() : openModal(KEYBOARD_SHORTCUT_HELP_MODAL_NAME);
  (0,external_wp_keyboardShortcuts_namespaceObject.useShortcut)('core/edit-site/keyboard-shortcuts', toggleModal);
  if (!isModalActive) {
    return null;
  }
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Modal, {
    className: "edit-site-keyboard-shortcut-help-modal",
    title: (0,external_wp_i18n_namespaceObject.__)('Keyboard shortcuts'),
    onRequestClose: toggleModal
  }, (0,external_React_.createElement)(ShortcutSection, {
    className: "edit-site-keyboard-shortcut-help-modal__main-shortcuts",
    shortcuts: ['core/edit-site/keyboard-shortcuts']
  }), (0,external_React_.createElement)(ShortcutCategorySection, {
    title: (0,external_wp_i18n_namespaceObject.__)('Global shortcuts'),
    categoryName: "global"
  }), (0,external_React_.createElement)(ShortcutCategorySection, {
    title: (0,external_wp_i18n_namespaceObject.__)('Selection shortcuts'),
    categoryName: "selection"
  }), (0,external_React_.createElement)(ShortcutCategorySection, {
    title: (0,external_wp_i18n_namespaceObject.__)('Block shortcuts'),
    categoryName: "block",
    additionalShortcuts: [{
      keyCombination: {
        character: '/'
      },
      description: (0,external_wp_i18n_namespaceObject.__)('Change the block type after adding a new paragraph.'),
      /* translators: The forward-slash character. e.g. '/'. */
      ariaLabel: (0,external_wp_i18n_namespaceObject.__)('Forward-slash')
    }]
  }), (0,external_React_.createElement)(ShortcutSection, {
    title: (0,external_wp_i18n_namespaceObject.__)('Text formatting'),
    shortcuts: textFormattingShortcuts
  }));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/preferences-modal/index.js

/**
 * WordPress dependencies
 */




/**
 * Internal dependencies
 */

const {
  PreferencesModal
} = unlock(external_wp_editor_namespaceObject.privateApis);
const PREFERENCES_MODAL_NAME = 'edit-site/preferences';
function EditSitePreferencesModal() {
  const isModalActive = (0,external_wp_data_namespaceObject.useSelect)(select => select(store).isModalActive(PREFERENCES_MODAL_NAME));
  const {
    closeModal
  } = (0,external_wp_data_namespaceObject.useDispatch)(store);
  if (!isModalActive) {
    return null;
  }
  return (0,external_React_.createElement)(PreferencesModal, {
    isActive: isModalActive,
    onClose: closeModal
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/header-edit-mode/tools-more-menu-group/index.js

/**
 * WordPress dependencies
 */

const {
  Fill: ToolsMoreMenuGroup,
  Slot
} = (0,external_wp_components_namespaceObject.createSlotFill)('EditSiteToolsMoreMenuGroup');
ToolsMoreMenuGroup.Slot = ({
  fillProps
}) => (0,external_React_.createElement)(Slot, {
  fillProps: fillProps
}, fills => fills && fills.length > 0);
/* harmony default export */ const tools_more_menu_group = (ToolsMoreMenuGroup);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/download.js

/**
 * WordPress dependencies
 */

const download = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M18 11.3l-1-1.1-4 4V3h-1.5v11.3L7 10.2l-1 1.1 6.2 5.8 5.8-5.8zm.5 3.7v3.5h-13V15H4v5h16v-5h-1.5z"
}));
/* harmony default export */ const library_download = (download);

;// CONCATENATED MODULE: external ["wp","blob"]
const external_wp_blob_namespaceObject = window["wp"]["blob"];
;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/header-edit-mode/more-menu/site-export.js

/**
 * WordPress dependencies
 */







function SiteExport() {
  const {
    createErrorNotice
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_notices_namespaceObject.store);
  async function handleExport() {
    try {
      const response = await external_wp_apiFetch_default()({
        path: '/wp-block-editor/v1/export',
        parse: false,
        headers: {
          Accept: 'application/zip'
        }
      });
      const blob = await response.blob();
      const contentDisposition = response.headers.get('content-disposition');
      const contentDispositionMatches = contentDisposition.match(/=(.+)\.zip/);
      const fileName = contentDispositionMatches[1] ? contentDispositionMatches[1] : 'edit-site-export';
      (0,external_wp_blob_namespaceObject.downloadBlob)(fileName + '.zip', blob, 'application/zip');
    } catch (errorResponse) {
      let error = {};
      try {
        error = await errorResponse.json();
      } catch (e) {}
      const errorMessage = error.message && error.code !== 'unknown_error' ? error.message : (0,external_wp_i18n_namespaceObject.__)('An error occurred while creating the site export.');
      createErrorNotice(errorMessage, {
        type: 'snackbar'
      });
    }
  }
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
    role: "menuitem",
    icon: library_download,
    onClick: handleExport,
    info: (0,external_wp_i18n_namespaceObject.__)('Download your theme with updated templates and styles.')
  }, (0,external_wp_i18n_namespaceObject._x)('Export', 'site exporter menu item'));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/header-edit-mode/more-menu/welcome-guide-menu-item.js

/**
 * WordPress dependencies
 */




function WelcomeGuideMenuItem() {
  const {
    toggle
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_preferences_namespaceObject.store);
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
    onClick: () => toggle('core/edit-site', 'welcomeGuide')
  }, (0,external_wp_i18n_namespaceObject.__)('Welcome Guide'));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/header-edit-mode/more-menu/copy-content-menu-item.js

/**
 * WordPress dependencies
 */








/**
 * Internal dependencies
 */

function CopyContentMenuItem() {
  const {
    createNotice
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_notices_namespaceObject.store);
  const {
    getEditedPostId,
    getEditedPostType
  } = (0,external_wp_data_namespaceObject.useSelect)(store_store);
  const {
    getEditedEntityRecord
  } = (0,external_wp_data_namespaceObject.useSelect)(external_wp_coreData_namespaceObject.store);
  function getText() {
    const record = getEditedEntityRecord('postType', getEditedPostType(), getEditedPostId());
    if (!record) {
      return '';
    }
    if (typeof record.content === 'function') {
      return record.content(record);
    } else if (record.blocks) {
      return (0,external_wp_blocks_namespaceObject.__unstableSerializeAndClean)(record.blocks);
    } else if (record.content) {
      return record.content;
    }
  }
  function onSuccess() {
    createNotice('info', (0,external_wp_i18n_namespaceObject.__)('All content copied.'), {
      isDismissible: true,
      type: 'snackbar'
    });
  }
  const ref = (0,external_wp_compose_namespaceObject.useCopyToClipboard)(getText, onSuccess);
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
    ref: ref
  }, (0,external_wp_i18n_namespaceObject.__)('Copy all blocks'));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/header-edit-mode/mode-switcher/index.js

/**
 * WordPress dependencies
 */





/**
 * Internal dependencies
 */


/**
 * Set of available mode options.
 *
 * @type {Array}
 */
const MODES = [{
  value: 'visual',
  label: (0,external_wp_i18n_namespaceObject.__)('Visual editor')
}, {
  value: 'text',
  label: (0,external_wp_i18n_namespaceObject.__)('Code editor')
}];
function ModeSwitcher() {
  const {
    shortcut,
    mode
  } = (0,external_wp_data_namespaceObject.useSelect)(select => ({
    shortcut: select(external_wp_keyboardShortcuts_namespaceObject.store).getShortcutRepresentation('core/edit-site/toggle-mode'),
    mode: select(store_store).getEditorMode()
  }), []);
  const {
    switchEditorMode
  } = (0,external_wp_data_namespaceObject.useDispatch)(store_store);
  const choices = MODES.map(choice => {
    if (choice.value !== mode) {
      return {
        ...choice,
        shortcut
      };
    }
    return choice;
  });
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuGroup, {
    label: (0,external_wp_i18n_namespaceObject.__)('Editor')
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItemsChoice, {
    choices: choices,
    value: mode,
    onSelect: switchEditorMode
  }));
}
/* harmony default export */ const mode_switcher = (ModeSwitcher);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/header-edit-mode/more-menu/index.js

/**
 * WordPress dependencies
 */









/**
 * Internal dependencies
 */








function MoreMenu({
  showIconLabels
}) {
  const {
    openModal
  } = (0,external_wp_data_namespaceObject.useDispatch)(store);
  const {
    set: setPreference
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_preferences_namespaceObject.store);
  const isBlockBasedTheme = (0,external_wp_data_namespaceObject.useSelect)(select => {
    return select(external_wp_coreData_namespaceObject.store).getCurrentTheme().is_block_theme;
  }, []);
  const {
    toggleDistractionFree
  } = (0,external_wp_data_namespaceObject.useDispatch)(store_store);
  const turnOffDistractionFree = () => {
    setPreference('core', 'distractionFree', false);
  };
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(MoreMenuDropdown, {
    toggleProps: {
      showTooltip: !showIconLabels,
      ...(showIconLabels && {
        variant: 'tertiary'
      })
    }
  }, ({
    onClose
  }) => (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuGroup, {
    label: (0,external_wp_i18n_namespaceObject._x)('View', 'noun')
  }, (0,external_React_.createElement)(external_wp_preferences_namespaceObject.PreferenceToggleMenuItem, {
    scope: "core",
    name: "fixedToolbar",
    onToggle: turnOffDistractionFree,
    label: (0,external_wp_i18n_namespaceObject.__)('Top toolbar'),
    info: (0,external_wp_i18n_namespaceObject.__)('Access all block and document tools in a single place'),
    messageActivated: (0,external_wp_i18n_namespaceObject.__)('Top toolbar activated'),
    messageDeactivated: (0,external_wp_i18n_namespaceObject.__)('Top toolbar deactivated')
  }), (0,external_React_.createElement)(external_wp_preferences_namespaceObject.PreferenceToggleMenuItem, {
    scope: "core",
    name: "distractionFree",
    label: (0,external_wp_i18n_namespaceObject.__)('Distraction free'),
    info: (0,external_wp_i18n_namespaceObject.__)('Write with calmness'),
    handleToggling: false,
    onToggle: toggleDistractionFree,
    messageActivated: (0,external_wp_i18n_namespaceObject.__)('Distraction free mode activated'),
    messageDeactivated: (0,external_wp_i18n_namespaceObject.__)('Distraction free mode deactivated'),
    shortcut: external_wp_keycodes_namespaceObject.displayShortcut.primaryShift('\\')
  }), (0,external_React_.createElement)(external_wp_preferences_namespaceObject.PreferenceToggleMenuItem, {
    scope: "core",
    name: "focusMode",
    label: (0,external_wp_i18n_namespaceObject.__)('Spotlight mode'),
    info: (0,external_wp_i18n_namespaceObject.__)('Focus on one block at a time'),
    messageActivated: (0,external_wp_i18n_namespaceObject.__)('Spotlight mode activated'),
    messageDeactivated: (0,external_wp_i18n_namespaceObject.__)('Spotlight mode deactivated')
  })), (0,external_React_.createElement)(mode_switcher, null), (0,external_React_.createElement)(action_item.Slot, {
    name: "core/edit-site/plugin-more-menu",
    label: (0,external_wp_i18n_namespaceObject.__)('Plugins'),
    as: external_wp_components_namespaceObject.MenuGroup,
    fillProps: {
      onClick: onClose
    }
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuGroup, {
    label: (0,external_wp_i18n_namespaceObject.__)('Tools')
  }, isBlockBasedTheme && (0,external_React_.createElement)(SiteExport, null), (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
    onClick: () => openModal(KEYBOARD_SHORTCUT_HELP_MODAL_NAME),
    shortcut: external_wp_keycodes_namespaceObject.displayShortcut.access('h')
  }, (0,external_wp_i18n_namespaceObject.__)('Keyboard shortcuts')), (0,external_React_.createElement)(WelcomeGuideMenuItem, null), (0,external_React_.createElement)(CopyContentMenuItem, null), (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
    icon: library_external,
    role: "menuitem",
    href: (0,external_wp_i18n_namespaceObject.__)('https://wordpress.org/documentation/article/site-editor/'),
    target: "_blank",
    rel: "noopener noreferrer"
  }, (0,external_wp_i18n_namespaceObject.__)('Help'), (0,external_React_.createElement)(external_wp_components_namespaceObject.VisuallyHidden, {
    as: "span"
  }, /* translators: accessibility text */
  (0,external_wp_i18n_namespaceObject.__)('(opens in a new tab)'))), (0,external_React_.createElement)(tools_more_menu_group.Slot, {
    fillProps: {
      onClose
    }
  })), (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuGroup, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
    onClick: () => openModal(PREFERENCES_MODAL_NAME)
  }, (0,external_wp_i18n_namespaceObject.__)('Preferences'))))), (0,external_React_.createElement)(KeyboardShortcutHelpModal, null), (0,external_React_.createElement)(EditSitePreferencesModal, null));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/chevron-up-down.js

/**
 * WordPress dependencies
 */

const chevronUpDown = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "m12 20-4.5-3.6-.9 1.2L12 22l5.5-4.4-.9-1.2L12 20zm0-16 4.5 3.6.9-1.2L12 2 6.5 6.4l.9 1.2L12 4z"
}));
/* harmony default export */ const chevron_up_down = (chevronUpDown);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/header-edit-mode/document-tools/index.js

/**
 * WordPress dependencies
 */








/**
 * Internal dependencies
 */


const {
  DocumentTools: EditorDocumentTools
} = unlock(external_wp_editor_namespaceObject.privateApis);
function DocumentTools({
  blockEditorMode,
  hasFixedToolbar,
  isDistractionFree
}) {
  const {
    isVisualMode
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getEditorMode
    } = select(store_store);
    return {
      isVisualMode: getEditorMode() === 'visual'
    };
  }, []);
  const {
    __unstableSetEditorMode
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_blockEditor_namespaceObject.store);
  const {
    setDeviceType
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_editor_namespaceObject.store);
  const isLargeViewport = (0,external_wp_compose_namespaceObject.useViewportMatch)('medium');
  const isZoomedOutViewExperimentEnabled = window?.__experimentalEnableZoomedOutView && isVisualMode;
  const isZoomedOutView = blockEditorMode === 'zoom-out';
  return (0,external_React_.createElement)(EditorDocumentTools, {
    disableBlockTools: !isVisualMode,
    listViewLabel: (0,external_wp_i18n_namespaceObject.__)('List View')
  }, isZoomedOutViewExperimentEnabled && isLargeViewport && !isDistractionFree && !hasFixedToolbar && (0,external_React_.createElement)(external_wp_components_namespaceObject.ToolbarItem, {
    as: external_wp_components_namespaceObject.Button,
    className: "edit-site-header-edit-mode__zoom-out-view-toggle",
    icon: chevron_up_down,
    isPressed: isZoomedOutView
    /* translators: button label text should, if possible, be under 16 characters. */,
    label: (0,external_wp_i18n_namespaceObject.__)('Zoom-out View'),
    onClick: () => {
      setDeviceType('Desktop');
      __unstableSetEditorMode(isZoomedOutView ? 'edit' : 'zoom-out');
    },
    size: "compact"
  }));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/header-edit-mode/index.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */











/**
 * Internal dependencies
 */







const {
  PostViewLink,
  PreviewDropdown
} = unlock(external_wp_editor_namespaceObject.privateApis);
function HeaderEditMode() {
  const {
    templateType,
    isDistractionFree,
    blockEditorMode,
    blockSelectionStart,
    showIconLabels,
    editorCanvasView,
    hasFixedToolbar,
    isZoomOutMode
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getEditedPostType
    } = select(store_store);
    const {
      getBlockSelectionStart,
      __unstableGetEditorMode
    } = select(external_wp_blockEditor_namespaceObject.store);
    const {
      get: getPreference
    } = select(external_wp_preferences_namespaceObject.store);
    const {
      getDeviceType
    } = select(external_wp_editor_namespaceObject.store);
    return {
      deviceType: getDeviceType(),
      templateType: getEditedPostType(),
      blockEditorMode: __unstableGetEditorMode(),
      blockSelectionStart: getBlockSelectionStart(),
      showIconLabels: getPreference('core', 'showIconLabels'),
      editorCanvasView: unlock(select(store_store)).getEditorCanvasContainerView(),
      hasFixedToolbar: getPreference('core', 'fixedToolbar'),
      isDistractionFree: getPreference('core', 'distractionFree'),
      isZoomOutMode: __unstableGetEditorMode() === 'zoom-out'
    };
  }, []);
  const isLargeViewport = (0,external_wp_compose_namespaceObject.useViewportMatch)('medium');
  const isTopToolbar = !isZoomOutMode && hasFixedToolbar && isLargeViewport;
  const blockToolbarRef = (0,external_wp_element_namespaceObject.useRef)();
  const disableMotion = (0,external_wp_compose_namespaceObject.useReducedMotion)();
  const hasDefaultEditorCanvasView = !useHasEditorCanvasContainer();
  const isFocusMode = FOCUSABLE_ENTITIES.includes(templateType);
  const isZoomedOutView = blockEditorMode === 'zoom-out';
  const [isBlockToolsCollapsed, setIsBlockToolsCollapsed] = (0,external_wp_element_namespaceObject.useState)(true);
  const hasBlockSelected = !!blockSelectionStart;
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    // If we have a new block selection, show the block tools
    if (blockSelectionStart) {
      setIsBlockToolsCollapsed(false);
    }
  }, [blockSelectionStart]);
  const toolbarVariants = {
    isDistractionFree: {
      y: '-50px'
    },
    isDistractionFreeHovering: {
      y: 0
    },
    view: {
      y: 0
    },
    edit: {
      y: 0
    }
  };
  const toolbarTransition = {
    type: 'tween',
    duration: disableMotion ? 0 : 0.2,
    ease: 'easeOut'
  };
  return (0,external_React_.createElement)("div", {
    className: classnames_default()('edit-site-header-edit-mode', {
      'show-icon-labels': showIconLabels
    })
  }, hasDefaultEditorCanvasView && (0,external_React_.createElement)(external_wp_components_namespaceObject.__unstableMotion.div, {
    className: "edit-site-header-edit-mode__start",
    variants: toolbarVariants,
    transition: toolbarTransition
  }, (0,external_React_.createElement)(DocumentTools, {
    blockEditorMode: blockEditorMode,
    isDistractionFree: isDistractionFree
  }), isTopToolbar && (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)("div", {
    className: classnames_default()('selected-block-tools-wrapper', {
      'is-collapsed': isBlockToolsCollapsed || !hasBlockSelected
    })
  }, (0,external_React_.createElement)(external_wp_blockEditor_namespaceObject.BlockToolbar, {
    hideDragHandle: true
  })), (0,external_React_.createElement)(external_wp_components_namespaceObject.Popover.Slot, {
    ref: blockToolbarRef,
    name: "block-toolbar"
  }), hasBlockSelected && (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    className: "edit-site-header-edit-mode__block-tools-toggle",
    icon: isBlockToolsCollapsed ? library_next : library_previous,
    onClick: () => {
      setIsBlockToolsCollapsed(collapsed => !collapsed);
    },
    label: isBlockToolsCollapsed ? (0,external_wp_i18n_namespaceObject.__)('Show block tools') : (0,external_wp_i18n_namespaceObject.__)('Hide block tools')
  }))), !isDistractionFree && (0,external_React_.createElement)("div", {
    className: classnames_default()('edit-site-header-edit-mode__center', {
      'is-collapsed': !isBlockToolsCollapsed && isLargeViewport
    })
  }, !hasDefaultEditorCanvasView ? getEditorCanvasContainerTitle(editorCanvasView) : (0,external_React_.createElement)(external_wp_editor_namespaceObject.DocumentBar, null)), (0,external_React_.createElement)("div", {
    className: "edit-site-header-edit-mode__end"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__unstableMotion.div, {
    className: "edit-site-header-edit-mode__actions",
    variants: toolbarVariants,
    transition: toolbarTransition
  }, isLargeViewport && (0,external_React_.createElement)("div", {
    className: classnames_default()('edit-site-header-edit-mode__preview-options', {
      'is-zoomed-out': isZoomedOutView
    })
  }, (0,external_React_.createElement)(PreviewDropdown, {
    disabled: isFocusMode || !hasDefaultEditorCanvasView
  })), (0,external_React_.createElement)(PostViewLink, null), (0,external_React_.createElement)(SaveButton, null), !isDistractionFree && (0,external_React_.createElement)(pinned_items.Slot, {
    scope: "core/edit-site"
  }), (0,external_React_.createElement)(MoreMenu, {
    showIconLabels: showIconLabels
  }))));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/wordpress.js

/**
 * WordPress dependencies
 */

const wordpress = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "-2 -2 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M20 10c0-5.51-4.49-10-10-10C4.48 0 0 4.49 0 10c0 5.52 4.48 10 10 10 5.51 0 10-4.48 10-10zM7.78 15.37L4.37 6.22c.55-.02 1.17-.08 1.17-.08.5-.06.44-1.13-.06-1.11 0 0-1.45.11-2.37.11-.18 0-.37 0-.58-.01C4.12 2.69 6.87 1.11 10 1.11c2.33 0 4.45.87 6.05 2.34-.68-.11-1.65.39-1.65 1.58 0 .74.45 1.36.9 2.1.35.61.55 1.36.55 2.46 0 1.49-1.4 5-1.4 5l-3.03-8.37c.54-.02.82-.17.82-.17.5-.05.44-1.25-.06-1.22 0 0-1.44.12-2.38.12-.87 0-2.33-.12-2.33-.12-.5-.03-.56 1.2-.06 1.22l.92.08 1.26 3.41zM17.41 10c.24-.64.74-1.87.43-4.25.7 1.29 1.05 2.71 1.05 4.25 0 3.29-1.73 6.24-4.4 7.78.97-2.59 1.94-5.2 2.92-7.78zM6.1 18.09C3.12 16.65 1.11 13.53 1.11 10c0-1.3.23-2.48.72-3.59C3.25 10.3 4.67 14.2 6.1 18.09zm4.03-6.63l2.58 6.98c-.86.29-1.76.45-2.71.45-.79 0-1.57-.11-2.29-.33.81-2.38 1.62-4.74 2.42-7.1z"
}));
/* harmony default export */ const library_wordpress = (wordpress);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/site-icon/index.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */





function SiteIcon({
  className
}) {
  const {
    isRequestingSite,
    siteIconUrl
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getEntityRecord
    } = select(external_wp_coreData_namespaceObject.store);
    const siteData = getEntityRecord('root', '__unstableBase', undefined);
    return {
      isRequestingSite: !siteData,
      siteIconUrl: siteData?.site_icon_url
    };
  }, []);
  if (isRequestingSite && !siteIconUrl) {
    return (0,external_React_.createElement)("div", {
      className: "edit-site-site-icon__image"
    });
  }
  const icon = siteIconUrl ? (0,external_React_.createElement)("img", {
    className: "edit-site-site-icon__image",
    alt: (0,external_wp_i18n_namespaceObject.__)('Site Icon'),
    src: siteIconUrl
  }) : (0,external_React_.createElement)(external_wp_components_namespaceObject.Icon, {
    className: "edit-site-site-icon__icon",
    icon: library_wordpress,
    size: 48
  });
  return (0,external_React_.createElement)("div", {
    className: classnames_default()(className, 'edit-site-site-icon')
  }, icon);
}
/* harmony default export */ const site_icon = (SiteIcon);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/site-hub/index.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */













/**
 * Internal dependencies
 */



const HUB_ANIMATION_DURATION = 0.3;
const SiteHub = (0,external_wp_element_namespaceObject.memo)(({
  isTransparent,
  className
}) => {
  const {
    canvasMode,
    dashboardLink,
    homeUrl,
    siteTitle
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getCanvasMode,
      getSettings
    } = unlock(select(store_store));
    const {
      getSite,
      getUnstableBase // Site index.
    } = select(external_wp_coreData_namespaceObject.store);
    return {
      canvasMode: getCanvasMode(),
      dashboardLink: getSettings().__experimentalDashboardLink || 'index.php',
      homeUrl: getUnstableBase()?.home,
      siteTitle: getSite()?.title
    };
  }, []);
  const {
    open: openCommandCenter
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_commands_namespaceObject.store);
  const disableMotion = (0,external_wp_compose_namespaceObject.useReducedMotion)();
  const {
    setCanvasMode
  } = unlock((0,external_wp_data_namespaceObject.useDispatch)(store_store));
  const {
    clearSelectedBlock
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_blockEditor_namespaceObject.store);
  const {
    setDeviceType
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_editor_namespaceObject.store);
  const isBackToDashboardButton = canvasMode === 'view';
  const siteIconButtonProps = isBackToDashboardButton ? {
    href: dashboardLink,
    label: (0,external_wp_i18n_namespaceObject.__)('Go to the Dashboard')
  } : {
    href: dashboardLink,
    // We need to keep the `href` here so the component doesn't remount as a `<button>` and break the animation.
    role: 'button',
    label: (0,external_wp_i18n_namespaceObject.__)('Open Navigation'),
    onClick: event => {
      event.preventDefault();
      if (canvasMode === 'edit') {
        clearSelectedBlock();
        setDeviceType('Desktop');
        setCanvasMode('view');
      }
    }
  };
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__unstableMotion.div, {
    className: classnames_default()('edit-site-site-hub', className),
    variants: {
      isDistractionFree: {
        x: '-100%'
      },
      isDistractionFreeHovering: {
        x: 0
      },
      view: {
        x: 0
      },
      edit: {
        x: 0
      }
    },
    initial: false,
    transition: {
      type: 'tween',
      duration: disableMotion ? 0 : HUB_ANIMATION_DURATION,
      ease: 'easeOut'
    }
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    justify: "space-between",
    alignment: "center",
    className: "edit-site-site-hub__container"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    justify: "flex-start",
    className: "edit-site-site-hub__text-content",
    spacing: "0"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__unstableMotion.div, {
    className: classnames_default()('edit-site-site-hub__view-mode-toggle-container', {
      'has-transparent-background': isTransparent
    }),
    layout: true,
    transition: {
      type: 'tween',
      duration: disableMotion ? 0 : HUB_ANIMATION_DURATION,
      ease: 'easeOut'
    }
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    ...siteIconButtonProps,
    className: "edit-site-layout__view-mode-toggle"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__unstableMotion.div, {
    initial: false,
    animate: {
      scale: canvasMode === 'view' ? 0.5 : 1
    },
    whileHover: {
      scale: canvasMode === 'view' ? 0.5 : 0.96
    },
    transition: {
      type: 'tween',
      duration: disableMotion ? 0 : HUB_ANIMATION_DURATION,
      ease: 'easeOut'
    }
  }, (0,external_React_.createElement)(site_icon, {
    className: "edit-site-layout__view-mode-toggle-icon"
  })))), (0,external_React_.createElement)(external_wp_components_namespaceObject.__unstableAnimatePresence, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__unstableMotion.div, {
    layout: canvasMode === 'edit',
    animate: {
      opacity: canvasMode === 'view' ? 1 : 0
    },
    exit: {
      opacity: 0
    },
    className: classnames_default()('edit-site-site-hub__site-title', {
      'is-transparent': isTransparent
    }),
    transition: {
      type: 'tween',
      duration: disableMotion ? 0 : 0.2,
      ease: 'easeOut',
      delay: canvasMode === 'view' ? 0.1 : 0
    }
  }, (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(siteTitle))), canvasMode === 'view' && (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    href: homeUrl,
    target: "_blank",
    label: (0,external_wp_i18n_namespaceObject.__)('View site (opens in a new tab)'),
    "aria-label": (0,external_wp_i18n_namespaceObject.__)('View site (opens in a new tab)'),
    icon: library_external,
    className: classnames_default()('edit-site-site-hub__site-view-link', {
      'is-transparent': isTransparent
    })
  })), canvasMode === 'view' && (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    className: classnames_default()('edit-site-site-hub_toggle-command-center', {
      'is-transparent': isTransparent
    }),
    icon: library_search,
    onClick: () => openCommandCenter(),
    label: (0,external_wp_i18n_namespaceObject.__)('Open command palette'),
    shortcut: external_wp_keycodes_namespaceObject.displayShortcut.primary('k')
  })));
});
/* harmony default export */ const site_hub = (SiteHub);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/resizable-frame/index.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */



// Removes the inline styles in the drag handles.
const resizable_frame_HANDLE_STYLES_OVERRIDE = {
  position: undefined,
  userSelect: undefined,
  cursor: undefined,
  width: undefined,
  height: undefined,
  top: undefined,
  right: undefined,
  bottom: undefined,
  left: undefined
};

// The minimum width of the frame (in px) while resizing.
const FRAME_MIN_WIDTH = 320;
// The reference width of the frame (in px) used to calculate the aspect ratio.
const FRAME_REFERENCE_WIDTH = 1300;
// 9 : 19.5 is the target aspect ratio enforced (when possible) while resizing.
const FRAME_TARGET_ASPECT_RATIO = 9 / 19.5;
// The minimum distance (in px) between the frame resize handle and the
// viewport's edge. If the frame is resized to be closer to the viewport's edge
// than this distance, then "canvas mode" will be enabled.
const SNAP_TO_EDIT_CANVAS_MODE_THRESHOLD = 200;
// Default size for the `frameSize` state.
const INITIAL_FRAME_SIZE = {
  width: '100%',
  height: '100%'
};
function calculateNewHeight(width, initialAspectRatio) {
  const lerp = (a, b, amount) => {
    return a + (b - a) * amount;
  };

  // Calculate the intermediate aspect ratio based on the current width.
  const lerpFactor = 1 - Math.max(0, Math.min(1, (width - FRAME_MIN_WIDTH) / (FRAME_REFERENCE_WIDTH - FRAME_MIN_WIDTH)));

  // Calculate the height based on the intermediate aspect ratio
  // ensuring the frame arrives at the target aspect ratio.
  const intermediateAspectRatio = lerp(initialAspectRatio, FRAME_TARGET_ASPECT_RATIO, lerpFactor);
  return width / intermediateAspectRatio;
}
function ResizableFrame({
  isFullWidth,
  isOversized,
  setIsOversized,
  isReady,
  children,
  /** The default (unresized) width/height of the frame, based on the space availalbe in the viewport. */
  defaultSize,
  innerContentStyle
}) {
  const [frameSize, setFrameSize] = (0,external_wp_element_namespaceObject.useState)(INITIAL_FRAME_SIZE);
  // The width of the resizable frame when a new resize gesture starts.
  const [startingWidth, setStartingWidth] = (0,external_wp_element_namespaceObject.useState)();
  const [isResizing, setIsResizing] = (0,external_wp_element_namespaceObject.useState)(false);
  const [shouldShowHandle, setShouldShowHandle] = (0,external_wp_element_namespaceObject.useState)(false);
  const [resizeRatio, setResizeRatio] = (0,external_wp_element_namespaceObject.useState)(1);
  const canvasMode = (0,external_wp_data_namespaceObject.useSelect)(select => unlock(select(store_store)).getCanvasMode(), []);
  const {
    setCanvasMode
  } = unlock((0,external_wp_data_namespaceObject.useDispatch)(store_store));
  const FRAME_TRANSITION = {
    type: 'tween',
    duration: isResizing ? 0 : 0.5
  };
  const frameRef = (0,external_wp_element_namespaceObject.useRef)(null);
  const resizableHandleHelpId = (0,external_wp_compose_namespaceObject.useInstanceId)(ResizableFrame, 'edit-site-resizable-frame-handle-help');
  const defaultAspectRatio = defaultSize.width / defaultSize.height;
  const handleResizeStart = (_event, _direction, ref) => {
    // Remember the starting width so we don't have to get `ref.offsetWidth` on
    // every resize event thereafter, which will cause layout thrashing.
    setStartingWidth(ref.offsetWidth);
    setIsResizing(true);
  };

  // Calculate the frame size based on the window width as its resized.
  const handleResize = (_event, _direction, _ref, delta) => {
    const normalizedDelta = delta.width / resizeRatio;
    const deltaAbs = Math.abs(normalizedDelta);
    const maxDoubledDelta = delta.width < 0 // is shrinking
    ? deltaAbs : (defaultSize.width - startingWidth) / 2;
    const deltaToDouble = Math.min(deltaAbs, maxDoubledDelta);
    const doubleSegment = deltaAbs === 0 ? 0 : deltaToDouble / deltaAbs;
    const singleSegment = 1 - doubleSegment;
    setResizeRatio(singleSegment + doubleSegment * 2);
    const updatedWidth = startingWidth + delta.width;
    setIsOversized(updatedWidth > defaultSize.width);

    // Width will be controlled by the library (via `resizeRatio`),
    // so we only need to update the height.
    setFrameSize({
      height: isOversized ? '100%' : calculateNewHeight(updatedWidth, defaultAspectRatio)
    });
  };
  const handleResizeStop = (_event, _direction, ref) => {
    setIsResizing(false);
    if (!isOversized) {
      return;
    }
    setIsOversized(false);
    const remainingWidth = ref.ownerDocument.documentElement.offsetWidth - ref.offsetWidth;
    if (remainingWidth > SNAP_TO_EDIT_CANVAS_MODE_THRESHOLD) {
      // Reset the initial aspect ratio if the frame is resized slightly
      // above the sidebar but not far enough to trigger full screen.
      setFrameSize(INITIAL_FRAME_SIZE);
    } else {
      // Trigger full screen if the frame is resized far enough to the left.
      setCanvasMode('edit');
    }
  };

  // Handle resize by arrow keys
  const handleResizableHandleKeyDown = event => {
    if (!['ArrowLeft', 'ArrowRight'].includes(event.key)) {
      return;
    }
    event.preventDefault();
    const step = 20 * (event.shiftKey ? 5 : 1);
    const delta = step * (event.key === 'ArrowLeft' ? 1 : -1);
    const newWidth = Math.min(Math.max(FRAME_MIN_WIDTH, frameRef.current.resizable.offsetWidth + delta), defaultSize.width);
    setFrameSize({
      width: newWidth,
      height: calculateNewHeight(newWidth, defaultAspectRatio)
    });
  };
  const frameAnimationVariants = {
    default: {
      flexGrow: 0,
      height: frameSize.height
    },
    fullWidth: {
      flexGrow: 1,
      height: frameSize.height
    }
  };
  const resizeHandleVariants = {
    hidden: {
      opacity: 0,
      left: 0
    },
    visible: {
      opacity: 1,
      left: -16
    },
    active: {
      opacity: 1,
      left: -16,
      scaleY: 1.3
    }
  };
  const currentResizeHandleVariant = (() => {
    if (isResizing) {
      return 'active';
    }
    return shouldShowHandle ? 'visible' : 'hidden';
  })();
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.ResizableBox, {
    as: external_wp_components_namespaceObject.__unstableMotion.div,
    ref: frameRef,
    initial: false,
    variants: frameAnimationVariants,
    animate: isFullWidth ? 'fullWidth' : 'default',
    onAnimationComplete: definition => {
      if (definition === 'fullWidth') setFrameSize({
        width: '100%',
        height: '100%'
      });
    },
    transition: FRAME_TRANSITION,
    size: frameSize,
    enable: {
      top: false,
      right: false,
      bottom: false,
      // Resizing will be disabled until the editor content is loaded.
      left: isReady,
      topRight: false,
      bottomRight: false,
      bottomLeft: false,
      topLeft: false
    },
    resizeRatio: resizeRatio,
    handleClasses: undefined,
    handleStyles: {
      left: resizable_frame_HANDLE_STYLES_OVERRIDE,
      right: resizable_frame_HANDLE_STYLES_OVERRIDE
    },
    minWidth: FRAME_MIN_WIDTH,
    maxWidth: isFullWidth ? '100%' : '150%',
    maxHeight: '100%',
    onFocus: () => setShouldShowHandle(true),
    onBlur: () => setShouldShowHandle(false),
    onMouseOver: () => setShouldShowHandle(true),
    onMouseOut: () => setShouldShowHandle(false),
    handleComponent: {
      left: canvasMode === 'view' && (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.Tooltip, {
        text: (0,external_wp_i18n_namespaceObject.__)('Drag to resize')
      }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__unstableMotion.button, {
        key: "handle",
        role: "separator",
        "aria-orientation": "vertical",
        className: classnames_default()('edit-site-resizable-frame__handle', {
          'is-resizing': isResizing
        }),
        variants: resizeHandleVariants,
        animate: currentResizeHandleVariant,
        "aria-label": (0,external_wp_i18n_namespaceObject.__)('Drag to resize'),
        "aria-describedby": resizableHandleHelpId,
        "aria-valuenow": frameRef.current?.resizable?.offsetWidth || undefined,
        "aria-valuemin": FRAME_MIN_WIDTH,
        "aria-valuemax": defaultSize.width,
        onKeyDown: handleResizableHandleKeyDown,
        initial: "hidden",
        exit: "hidden",
        whileFocus: "active",
        whileHover: "active"
      })), (0,external_React_.createElement)("div", {
        hidden: true,
        id: resizableHandleHelpId
      }, (0,external_wp_i18n_namespaceObject.__)('Use left and right arrow keys to resize the canvas. Hold shift to resize in larger increments.')))
    },
    onResizeStart: handleResizeStart,
    onResize: handleResize,
    onResizeStop: handleResizeStop,
    className: classnames_default()('edit-site-resizable-frame__inner', {
      'is-resizing': isResizing
    }),
    showHandle: false // Do not show the default handle, as we're using a custom one.
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__unstableMotion.div, {
    className: "edit-site-resizable-frame__inner-content",
    animate: {
      borderRadius: isFullWidth ? 0 : 8
    },
    transition: FRAME_TRANSITION,
    style: innerContentStyle
  }, children));
}
/* harmony default export */ const resizable_frame = (ResizableFrame);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sync-state-with-url/use-sync-canvas-mode-with-url.js
/**
 * WordPress dependencies
 */




/**
 * Internal dependencies
 */


const {
  useLocation: use_sync_canvas_mode_with_url_useLocation,
  useHistory: use_sync_canvas_mode_with_url_useHistory
} = unlock(external_wp_router_namespaceObject.privateApis);
function useSyncCanvasModeWithURL() {
  const history = use_sync_canvas_mode_with_url_useHistory();
  const {
    params
  } = use_sync_canvas_mode_with_url_useLocation();
  const canvasMode = (0,external_wp_data_namespaceObject.useSelect)(select => unlock(select(store_store)).getCanvasMode(), []);
  const {
    setCanvasMode
  } = unlock((0,external_wp_data_namespaceObject.useDispatch)(store_store));
  const currentCanvasMode = (0,external_wp_element_namespaceObject.useRef)(canvasMode);
  const {
    canvas: canvasInUrl
  } = params;
  const currentCanvasInUrl = (0,external_wp_element_namespaceObject.useRef)(canvasInUrl);
  const currentUrlParams = (0,external_wp_element_namespaceObject.useRef)(params);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    currentUrlParams.current = params;
  }, [params]);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    currentCanvasMode.current = canvasMode;
    if (canvasMode === 'init') {
      return;
    }
    if (canvasMode === 'edit' && currentCanvasInUrl.current !== canvasMode) {
      history.push({
        ...currentUrlParams.current,
        canvas: 'edit'
      });
    }
    if (canvasMode === 'view' && currentCanvasInUrl.current !== undefined) {
      history.push({
        ...currentUrlParams.current,
        canvas: undefined
      });
    }
  }, [canvasMode, history]);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    currentCanvasInUrl.current = canvasInUrl;
    if (canvasInUrl !== 'edit' && currentCanvasMode.current !== 'view') {
      setCanvasMode('view');
    } else if (canvasInUrl === 'edit' && currentCanvasMode.current !== 'edit') {
      setCanvasMode('edit');
    }
  }, [canvasInUrl, setCanvasMode]);
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/utils/use-activate-theme.js
/**
 * WordPress dependencies
 */




/**
 * Internal dependencies
 */


const {
  useHistory: use_activate_theme_useHistory,
  useLocation: use_activate_theme_useLocation
} = unlock(external_wp_router_namespaceObject.privateApis);

/**
 * This should be refactored to use the REST API, once the REST API can activate themes.
 *
 * @return {Function} A function that activates the theme.
 */
function useActivateTheme() {
  const history = use_activate_theme_useHistory();
  const location = use_activate_theme_useLocation();
  const {
    startResolution,
    finishResolution
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_coreData_namespaceObject.store);
  return async () => {
    if (isPreviewingTheme()) {
      const activationURL = 'themes.php?action=activate&stylesheet=' + currentlyPreviewingTheme() + '&_wpnonce=' + window.WP_BLOCK_THEME_ACTIVATE_NONCE;
      startResolution('activateTheme');
      await window.fetch(activationURL);
      finishResolution('activateTheme');
      const {
        wp_theme_preview: themePreview,
        ...params
      } = location.params;
      history.replace(params);
    }
  };
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/utils/use-actual-current-theme.js
/**
 * WordPress dependencies
 */



const ACTIVE_THEMES_URL = '/wp/v2/themes?status=active';
function useActualCurrentTheme() {
  const [currentTheme, setCurrentTheme] = (0,external_wp_element_namespaceObject.useState)();
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    // Set the `wp_theme_preview` to empty string to bypass the createThemePreviewMiddleware.
    const path = (0,external_wp_url_namespaceObject.addQueryArgs)(ACTIVE_THEMES_URL, {
      context: 'edit',
      wp_theme_preview: ''
    });
    external_wp_apiFetch_default()({
      path
    }).then(activeThemes => setCurrentTheme(activeThemes[0]))
    // Do nothing
    .catch(() => {});
  }, []);
  return currentTheme;
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/save-panel/index.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */







/**
 * Internal dependencies
 */





const {
  EntitiesSavedStatesExtensible
} = unlock(external_wp_editor_namespaceObject.privateApis);
const EntitiesSavedStatesForPreview = ({
  onClose
}) => {
  var _currentTheme$name$re, _previewingTheme$name;
  const isDirtyProps = (0,external_wp_editor_namespaceObject.useEntitiesSavedStatesIsDirty)();
  let activateSaveLabel;
  if (isDirtyProps.isDirty) {
    activateSaveLabel = (0,external_wp_i18n_namespaceObject.__)('Activate & Save');
  } else {
    activateSaveLabel = (0,external_wp_i18n_namespaceObject.__)('Activate');
  }
  const currentTheme = useActualCurrentTheme();
  const previewingTheme = (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_coreData_namespaceObject.store).getCurrentTheme(), []);
  const additionalPrompt = (0,external_React_.createElement)("p", null, (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %1$s: The name of active theme, %2$s: The name of theme to be activated. */
  (0,external_wp_i18n_namespaceObject.__)('Saving your changes will change your active theme from %1$s to %2$s.'), (_currentTheme$name$re = currentTheme?.name?.rendered) !== null && _currentTheme$name$re !== void 0 ? _currentTheme$name$re : '...', (_previewingTheme$name = previewingTheme?.name?.rendered) !== null && _previewingTheme$name !== void 0 ? _previewingTheme$name : '...'));
  const activateTheme = useActivateTheme();
  const onSave = async values => {
    await activateTheme();
    return values;
  };
  return (0,external_React_.createElement)(EntitiesSavedStatesExtensible, {
    ...isDirtyProps,
    additionalPrompt,
    close: onClose,
    onSave,
    saveEnabled: true,
    saveLabel: activateSaveLabel
  });
};
const _EntitiesSavedStates = ({
  onClose
}) => {
  if (isPreviewingTheme()) {
    return (0,external_React_.createElement)(EntitiesSavedStatesForPreview, {
      onClose: onClose
    });
  }
  return (0,external_React_.createElement)(external_wp_editor_namespaceObject.EntitiesSavedStates, {
    close: onClose
  });
};
function SavePanel() {
  const {
    isSaveViewOpen,
    canvasMode
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      isSaveViewOpened,
      getCanvasMode
    } = unlock(select(store_store));

    // The currently selected entity to display.
    // Typically template or template part in the site editor.
    return {
      isSaveViewOpen: isSaveViewOpened(),
      canvasMode: getCanvasMode()
    };
  }, []);
  const {
    setIsSaveViewOpened
  } = (0,external_wp_data_namespaceObject.useDispatch)(store_store);
  const onClose = () => setIsSaveViewOpened(false);
  if (canvasMode === 'view') {
    return isSaveViewOpen ? (0,external_React_.createElement)(external_wp_components_namespaceObject.Modal, {
      className: "edit-site-save-panel__modal",
      onRequestClose: onClose,
      __experimentalHideHeader: true,
      contentLabel: (0,external_wp_i18n_namespaceObject.__)('Save site, content, and template changes')
    }, (0,external_React_.createElement)(_EntitiesSavedStates, {
      onClose: onClose
    })) : null;
  }
  return (0,external_React_.createElement)(NavigableRegion, {
    className: classnames_default()('edit-site-layout__actions', {
      'is-entity-save-view-open': isSaveViewOpen
    }),
    ariaLabel: (0,external_wp_i18n_namespaceObject.__)('Save panel')
  }, isSaveViewOpen ? (0,external_React_.createElement)(_EntitiesSavedStates, {
    onClose: onClose
  }) : (0,external_React_.createElement)("div", {
    className: "edit-site-editor__toggle-save-panel"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    variant: "secondary",
    className: "edit-site-editor__toggle-save-panel-button",
    onClick: () => setIsSaveViewOpened(true),
    "aria-expanded": false
  }, (0,external_wp_i18n_namespaceObject.__)('Open save panel'))));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/keyboard-shortcuts/register.js
/**
 * WordPress dependencies
 */




function KeyboardShortcutsRegister() {
  // Registering the shortcuts.
  const {
    registerShortcut
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_keyboardShortcuts_namespaceObject.store);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    registerShortcut({
      name: 'core/edit-site/save',
      category: 'global',
      description: (0,external_wp_i18n_namespaceObject.__)('Save your changes.'),
      keyCombination: {
        modifier: 'primary',
        character: 's'
      }
    });
    registerShortcut({
      name: 'core/edit-site/toggle-block-settings-sidebar',
      category: 'global',
      description: (0,external_wp_i18n_namespaceObject.__)('Show or hide the Settings sidebar.'),
      keyCombination: {
        modifier: 'primaryShift',
        character: ','
      }
    });
    registerShortcut({
      name: 'core/edit-site/keyboard-shortcuts',
      category: 'main',
      description: (0,external_wp_i18n_namespaceObject.__)('Display these keyboard shortcuts.'),
      keyCombination: {
        modifier: 'access',
        character: 'h'
      }
    });
    registerShortcut({
      name: 'core/edit-site/next-region',
      category: 'global',
      description: (0,external_wp_i18n_namespaceObject.__)('Navigate to the next part of the editor.'),
      keyCombination: {
        modifier: 'ctrl',
        character: '`'
      },
      aliases: [{
        modifier: 'access',
        character: 'n'
      }]
    });
    registerShortcut({
      name: 'core/edit-site/previous-region',
      category: 'global',
      description: (0,external_wp_i18n_namespaceObject.__)('Navigate to the previous part of the editor.'),
      keyCombination: {
        modifier: 'ctrlShift',
        character: '`'
      },
      aliases: [{
        modifier: 'access',
        character: 'p'
      }, {
        modifier: 'ctrlShift',
        character: '~'
      }]
    });
    registerShortcut({
      name: 'core/edit-site/toggle-mode',
      category: 'global',
      description: (0,external_wp_i18n_namespaceObject.__)('Switch between visual editor and code editor.'),
      keyCombination: {
        modifier: 'secondary',
        character: 'm'
      }
    });
    registerShortcut({
      name: 'core/edit-site/transform-heading-to-paragraph',
      category: 'block-library',
      description: (0,external_wp_i18n_namespaceObject.__)('Transform heading to paragraph.'),
      keyCombination: {
        modifier: 'access',
        character: `0`
      }
    });
    [1, 2, 3, 4, 5, 6].forEach(level => {
      registerShortcut({
        name: `core/edit-site/transform-paragraph-to-heading-${level}`,
        category: 'block-library',
        description: (0,external_wp_i18n_namespaceObject.__)('Transform paragraph to heading.'),
        keyCombination: {
          modifier: 'access',
          character: `${level}`
        }
      });
    });
    registerShortcut({
      name: 'core/edit-site/toggle-distraction-free',
      category: 'global',
      description: (0,external_wp_i18n_namespaceObject.__)('Toggle distraction free mode.'),
      keyCombination: {
        modifier: 'primaryShift',
        character: '\\'
      }
    });
  }, [registerShortcut]);
  return null;
}
/* harmony default export */ const register = (KeyboardShortcutsRegister);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/keyboard-shortcuts/global.js
/**
 * WordPress dependencies
 */





/**
 * Internal dependencies
 */


function KeyboardShortcutsGlobal() {
  const {
    __experimentalGetDirtyEntityRecords,
    isSavingEntityRecord
  } = (0,external_wp_data_namespaceObject.useSelect)(external_wp_coreData_namespaceObject.store);
  const {
    hasNonPostEntityChanges
  } = (0,external_wp_data_namespaceObject.useSelect)(external_wp_editor_namespaceObject.store);
  const {
    getCanvasMode
  } = unlock((0,external_wp_data_namespaceObject.useSelect)(store_store));
  const {
    setIsSaveViewOpened
  } = (0,external_wp_data_namespaceObject.useDispatch)(store_store);
  (0,external_wp_keyboardShortcuts_namespaceObject.useShortcut)('core/edit-site/save', event => {
    event.preventDefault();
    const dirtyEntityRecords = __experimentalGetDirtyEntityRecords();
    const hasDirtyEntities = !!dirtyEntityRecords.length;
    const isSaving = dirtyEntityRecords.some(record => isSavingEntityRecord(record.kind, record.name, record.key));
    const _hasNonPostEntityChanges = hasNonPostEntityChanges();
    const isViewMode = getCanvasMode() === 'view';
    if ((!hasDirtyEntities || !_hasNonPostEntityChanges || isSaving) && !isViewMode) {
      return;
    }
    // At this point, we know that there are dirty entities, other than
    // the edited post, and we're not in the process of saving, so open
    // save view.
    setIsSaveViewOpened(true);
  });
  return null;
}
/* harmony default export */ const global = (KeyboardShortcutsGlobal);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/help.js

/**
 * WordPress dependencies
 */

const help = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M12 4.75a7.25 7.25 0 100 14.5 7.25 7.25 0 000-14.5zM3.25 12a8.75 8.75 0 1117.5 0 8.75 8.75 0 01-17.5 0zM12 8.75a1.5 1.5 0 01.167 2.99c-.465.052-.917.44-.917 1.01V14h1.5v-.845A3 3 0 109 10.25h1.5a1.5 1.5 0 011.5-1.5zM11.25 15v1.5h1.5V15h-1.5z"
}));
/* harmony default export */ const library_help = (help);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/rotate-right.js

/**
 * WordPress dependencies
 */

const rotateRight = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M15.1 4.8l-3-2.5V4c-4.4 0-8 3.6-8 8 0 3.7 2.5 6.9 6 7.7.3.1.6.1 1 .2l.2-1.5c-.4 0-.7-.1-1.1-.2l-.1.2v-.2c-2.6-.8-4.5-3.3-4.5-6.2 0-3.6 2.9-6.5 6.5-6.5v1.8l3-2.5zM20 11c-.2-1.4-.7-2.7-1.6-3.8l-1.2.8c.7.9 1.1 2 1.3 3.1L20 11zm-1.5 1.8c-.1.5-.2 1.1-.4 1.6s-.5 1-.8 1.5l1.2.9c.4-.5.8-1.1 1-1.8s.5-1.3.5-2l-1.5-.2zm-5.6 5.6l.2 1.5c1.4-.2 2.7-.7 3.8-1.6l-.9-1.1c-.9.7-2 1.1-3.1 1.2z"
}));
/* harmony default export */ const rotate_right = (rotateRight);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/rotate-left.js

/**
 * WordPress dependencies
 */

const rotateLeft = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M12 4V2.2L9 4.8l3 2.5V5.5c3.6 0 6.5 2.9 6.5 6.5 0 2.9-1.9 5.3-4.5 6.2v.2l-.1-.2c-.4.1-.7.2-1.1.2l.2 1.5c.3 0 .6-.1 1-.2 3.5-.9 6-4 6-7.7 0-4.4-3.6-8-8-8zm-7.9 7l1.5.2c.1-1.2.5-2.3 1.2-3.2l-1.1-.9C4.8 8.2 4.3 9.6 4.1 11zm1.5 1.8l-1.5.2c.1.7.3 1.4.5 2 .3.7.6 1.3 1 1.8l1.2-.8c-.3-.5-.6-1-.8-1.5s-.4-1.1-.4-1.7zm1.5 5.5c1.1.9 2.4 1.4 3.8 1.6l.2-1.5c-1.1-.1-2.2-.5-3.1-1.2l-.9 1.1z"
}));
/* harmony default export */ const rotate_left = (rotateLeft);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/brush.js

/**
 * WordPress dependencies
 */

const brush = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M4 20h8v-1.5H4V20zM18.9 3.5c-.6-.6-1.5-.6-2.1 0l-7.2 7.2c-.4-.1-.7 0-1.1.1-.5.2-1.5.7-1.9 2.2-.4 1.7-.8 2.2-1.1 2.7-.1.1-.2.3-.3.4l-.6 1.1H6c2 0 3.4-.4 4.7-1.4.8-.6 1.2-1.4 1.3-2.3 0-.3 0-.5-.1-.7L19 5.7c.5-.6.5-1.6-.1-2.2zM9.7 14.7c-.7.5-1.5.8-2.4 1 .2-.5.5-1.2.8-2.3.2-.6.4-1 .8-1.1.5-.1 1 .1 1.3.3.2.2.3.5.2.8 0 .3-.1.9-.7 1.3z"
}));
/* harmony default export */ const library_brush = (brush);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/utils/get-is-list-page.js
/**
 * Returns if the params match the list page route.
 *
 * @param {Object}  params                The url params.
 * @param {string}  params.path           The current path.
 * @param {string}  [params.categoryType] The current category type.
 * @param {string}  [params.categoryId]   The current category id.
 * @param {boolean} isMobileViewport      Is mobile viewport.
 *
 * @return {boolean} Is list page or not.
 */
function getIsListPage({
  path,
  categoryType,
  categoryId
}, isMobileViewport) {
  return ['/wp_template/all', '/wp_template_part/all', '/pages'].includes(path) || path === '/patterns' && (
  // Don't treat "/patterns" without categoryType and categoryId as a
  // list page in mobile because the sidebar covers the whole page.
  !isMobileViewport || !!categoryType && !!categoryId);
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/hooks/commands/use-common-commands.js
/**
 * WordPress dependencies
 */











/**
 * Internal dependencies
 */



const {
  useGlobalStylesReset
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
const {
  useHistory: use_common_commands_useHistory,
  useLocation: use_common_commands_useLocation
} = unlock(external_wp_router_namespaceObject.privateApis);
function useGlobalStylesOpenStylesCommands() {
  const {
    openGeneralSidebar,
    setCanvasMode
  } = unlock((0,external_wp_data_namespaceObject.useDispatch)(store_store));
  const {
    params
  } = use_common_commands_useLocation();
  const isMobileViewport = (0,external_wp_compose_namespaceObject.useViewportMatch)('medium', '<');
  const isEditorPage = !getIsListPage(params, isMobileViewport);
  const {
    getCanvasMode
  } = unlock((0,external_wp_data_namespaceObject.useSelect)(store_store));
  const history = use_common_commands_useHistory();
  const isBlockBasedTheme = (0,external_wp_data_namespaceObject.useSelect)(select => {
    return select(external_wp_coreData_namespaceObject.store).getCurrentTheme().is_block_theme;
  }, []);
  const commands = (0,external_wp_element_namespaceObject.useMemo)(() => {
    if (!isBlockBasedTheme) {
      return [];
    }
    return [{
      name: 'core/edit-site/open-styles',
      label: (0,external_wp_i18n_namespaceObject.__)('Open styles'),
      callback: ({
        close
      }) => {
        close();
        if (!isEditorPage) {
          history.push({
            path: '/wp_global_styles',
            canvas: 'edit'
          });
        }
        if (isEditorPage && getCanvasMode() !== 'edit') {
          setCanvasMode('edit');
        }
        openGeneralSidebar('edit-site/global-styles');
      },
      icon: library_styles
    }];
  }, [history, openGeneralSidebar, setCanvasMode, isEditorPage, getCanvasMode, isBlockBasedTheme]);
  return {
    isLoading: false,
    commands
  };
}
function useGlobalStylesToggleWelcomeGuideCommands() {
  const {
    openGeneralSidebar,
    setCanvasMode
  } = unlock((0,external_wp_data_namespaceObject.useDispatch)(store_store));
  const {
    params
  } = use_common_commands_useLocation();
  const isMobileViewport = (0,external_wp_compose_namespaceObject.useViewportMatch)('medium', '<');
  const isEditorPage = !getIsListPage(params, isMobileViewport);
  const {
    getCanvasMode
  } = unlock((0,external_wp_data_namespaceObject.useSelect)(store_store));
  const {
    set
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_preferences_namespaceObject.store);
  const history = use_common_commands_useHistory();
  const isBlockBasedTheme = (0,external_wp_data_namespaceObject.useSelect)(select => {
    return select(external_wp_coreData_namespaceObject.store).getCurrentTheme().is_block_theme;
  }, []);
  const commands = (0,external_wp_element_namespaceObject.useMemo)(() => {
    if (!isBlockBasedTheme) {
      return [];
    }
    return [{
      name: 'core/edit-site/toggle-styles-welcome-guide',
      label: (0,external_wp_i18n_namespaceObject.__)('Learn about styles'),
      callback: ({
        close
      }) => {
        close();
        if (!isEditorPage) {
          history.push({
            path: '/wp_global_styles',
            canvas: 'edit'
          });
        }
        if (isEditorPage && getCanvasMode() !== 'edit') {
          setCanvasMode('edit');
        }
        openGeneralSidebar('edit-site/global-styles');
        set('core/edit-site', 'welcomeGuideStyles', true);
        // sometimes there's a focus loss that happens after some time
        // that closes the modal, we need to force reopening it.
        setTimeout(() => {
          set('core/edit-site', 'welcomeGuideStyles', true);
        }, 500);
      },
      icon: library_help
    }];
  }, [history, openGeneralSidebar, setCanvasMode, isEditorPage, getCanvasMode, isBlockBasedTheme, set]);
  return {
    isLoading: false,
    commands
  };
}
function useGlobalStylesResetCommands() {
  const [canReset, onReset] = useGlobalStylesReset();
  const commands = (0,external_wp_element_namespaceObject.useMemo)(() => {
    if (!canReset) {
      return [];
    }
    return [{
      name: 'core/edit-site/reset-global-styles',
      label: (0,external_wp_i18n_namespaceObject.__)('Reset styles'),
      icon: (0,external_wp_i18n_namespaceObject.isRTL)() ? rotate_right : rotate_left,
      callback: ({
        close
      }) => {
        close();
        onReset();
      }
    }];
  }, [canReset, onReset]);
  return {
    isLoading: false,
    commands
  };
}
function useGlobalStylesOpenCssCommands() {
  const {
    openGeneralSidebar,
    setEditorCanvasContainerView,
    setCanvasMode
  } = unlock((0,external_wp_data_namespaceObject.useDispatch)(store_store));
  const {
    params
  } = use_common_commands_useLocation();
  const isMobileViewport = (0,external_wp_compose_namespaceObject.useViewportMatch)('medium', '<');
  const isListPage = getIsListPage(params, isMobileViewport);
  const isEditorPage = !isListPage;
  const history = use_common_commands_useHistory();
  const {
    canEditCSS
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getEntityRecord,
      __experimentalGetCurrentGlobalStylesId
    } = select(external_wp_coreData_namespaceObject.store);
    const globalStylesId = __experimentalGetCurrentGlobalStylesId();
    const globalStyles = globalStylesId ? getEntityRecord('root', 'globalStyles', globalStylesId) : undefined;
    return {
      canEditCSS: !!globalStyles?._links?.['wp:action-edit-css']
    };
  }, []);
  const {
    getCanvasMode
  } = unlock((0,external_wp_data_namespaceObject.useSelect)(store_store));
  const commands = (0,external_wp_element_namespaceObject.useMemo)(() => {
    if (!canEditCSS) {
      return [];
    }
    return [{
      name: 'core/edit-site/open-styles-css',
      label: (0,external_wp_i18n_namespaceObject.__)('Customize CSS'),
      icon: library_brush,
      callback: ({
        close
      }) => {
        close();
        if (!isEditorPage) {
          history.push({
            path: '/wp_global_styles',
            canvas: 'edit'
          });
        }
        if (isEditorPage && getCanvasMode() !== 'edit') {
          setCanvasMode('edit');
        }
        openGeneralSidebar('edit-site/global-styles');
        setEditorCanvasContainerView('global-styles-css');
      }
    }];
  }, [history, openGeneralSidebar, setEditorCanvasContainerView, canEditCSS, isEditorPage, getCanvasMode, setCanvasMode]);
  return {
    isLoading: false,
    commands
  };
}
function useGlobalStylesOpenRevisionsCommands() {
  const {
    openGeneralSidebar,
    setEditorCanvasContainerView,
    setCanvasMode
  } = unlock((0,external_wp_data_namespaceObject.useDispatch)(store_store));
  const {
    getCanvasMode
  } = unlock((0,external_wp_data_namespaceObject.useSelect)(store_store));
  const {
    params
  } = use_common_commands_useLocation();
  const isMobileViewport = (0,external_wp_compose_namespaceObject.useViewportMatch)('medium', '<');
  const isEditorPage = !getIsListPage(params, isMobileViewport);
  const history = use_common_commands_useHistory();
  const hasRevisions = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getEntityRecord,
      __experimentalGetCurrentGlobalStylesId
    } = select(external_wp_coreData_namespaceObject.store);
    const globalStylesId = __experimentalGetCurrentGlobalStylesId();
    const globalStyles = globalStylesId ? getEntityRecord('root', 'globalStyles', globalStylesId) : undefined;
    return !!globalStyles?._links?.['version-history']?.[0]?.count;
  }, []);
  const commands = (0,external_wp_element_namespaceObject.useMemo)(() => {
    if (!hasRevisions) {
      return [];
    }
    return [{
      name: 'core/edit-site/open-global-styles-revisions',
      label: (0,external_wp_i18n_namespaceObject.__)('Style revisions'),
      icon: library_backup,
      callback: ({
        close
      }) => {
        close();
        if (!isEditorPage) {
          history.push({
            path: '/wp_global_styles',
            canvas: 'edit'
          });
        }
        if (isEditorPage && getCanvasMode() !== 'edit') {
          setCanvasMode('edit');
        }
        openGeneralSidebar('edit-site/global-styles');
        setEditorCanvasContainerView('global-styles-revisions');
      }
    }];
  }, [hasRevisions, history, openGeneralSidebar, setEditorCanvasContainerView, isEditorPage, getCanvasMode, setCanvasMode]);
  return {
    isLoading: false,
    commands
  };
}
function useCommonCommands() {
  const homeUrl = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getUnstableBase // Site index.
    } = select(external_wp_coreData_namespaceObject.store);
    return getUnstableBase()?.home;
  }, []);
  (0,external_wp_commands_namespaceObject.useCommand)({
    name: 'core/edit-site/view-site',
    label: (0,external_wp_i18n_namespaceObject.__)('View site'),
    callback: ({
      close
    }) => {
      close();
      window.open(homeUrl, '_blank');
    },
    icon: library_external
  });
  (0,external_wp_commands_namespaceObject.useCommandLoader)({
    name: 'core/edit-site/open-styles',
    hook: useGlobalStylesOpenStylesCommands
  });
  (0,external_wp_commands_namespaceObject.useCommandLoader)({
    name: 'core/edit-site/toggle-styles-welcome-guide',
    hook: useGlobalStylesToggleWelcomeGuideCommands
  });
  (0,external_wp_commands_namespaceObject.useCommandLoader)({
    name: 'core/edit-site/reset-global-styles',
    hook: useGlobalStylesResetCommands
  });
  (0,external_wp_commands_namespaceObject.useCommandLoader)({
    name: 'core/edit-site/open-styles-css',
    hook: useGlobalStylesOpenCssCommands
  });
  (0,external_wp_commands_namespaceObject.useCommandLoader)({
    name: 'core/edit-site/open-styles-revisions',
    hook: useGlobalStylesOpenRevisionsCommands
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/code.js

/**
 * WordPress dependencies
 */

const code = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M20.8 10.7l-4.3-4.3-1.1 1.1 4.3 4.3c.1.1.1.3 0 .4l-4.3 4.3 1.1 1.1 4.3-4.3c.7-.8.7-1.9 0-2.6zM4.2 11.8l4.3-4.3-1-1-4.3 4.3c-.7.7-.7 1.8 0 2.5l4.3 4.3 1.1-1.1-4.3-4.3c-.2-.1-.2-.3-.1-.4z"
}));
/* harmony default export */ const library_code = (code);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/drawer-left.js

/**
 * WordPress dependencies
 */

const drawerLeft = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  width: "24",
  height: "24",
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M18 4H6c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zM8.5 18.5H6c-.3 0-.5-.2-.5-.5V6c0-.3.2-.5.5-.5h2.5v13zm10-.5c0 .3-.2.5-.5.5h-8v-13h8c.3 0 .5.2.5.5v12z"
}));
/* harmony default export */ const drawer_left = (drawerLeft);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/drawer-right.js

/**
 * WordPress dependencies
 */

const drawerRight = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  width: "24",
  height: "24",
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M18 4H6c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-4 14.5H6c-.3 0-.5-.2-.5-.5V6c0-.3.2-.5.5-.5h8v13zm4.5-.5c0 .3-.2.5-.5.5h-2.5v-13H18c.3 0 .5.2.5.5v12z"
}));
/* harmony default export */ const drawer_right = (drawerRight);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/block-default.js

/**
 * WordPress dependencies
 */

const blockDefault = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M19 8h-1V6h-5v2h-2V6H6v2H5c-1.1 0-2 .9-2 2v8c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-8c0-1.1-.9-2-2-2zm.5 10c0 .3-.2.5-.5.5H5c-.3 0-.5-.2-.5-.5v-8c0-.3.2-.5.5-.5h14c.3 0 .5.2.5.5v8z"
}));
/* harmony default export */ const block_default = (blockDefault);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/keyboard.js

/**
 * WordPress dependencies
 */

const keyboard = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "m16 15.5h-8v-1.5h8zm-7.5-2.5h-2v-2h2zm3 0h-2v-2h2zm3 0h-2v-2h2zm3 0h-2v-2h2zm-9-3h-2v-2h2zm3 0h-2v-2h2zm3 0h-2v-2h2zm3 0h-2v-2h2z"
}), (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "m18.5 6.5h-13a.5.5 0 0 0 -.5.5v9.5a.5.5 0 0 0 .5.5h13a.5.5 0 0 0 .5-.5v-9.5a.5.5 0 0 0 -.5-.5zm-13-1.5h13a2 2 0 0 1 2 2v9.5a2 2 0 0 1 -2 2h-13a2 2 0 0 1 -2-2v-9.5a2 2 0 0 1 2-2z"
}));
/* harmony default export */ const library_keyboard = (keyboard);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/list-view.js

/**
 * WordPress dependencies
 */

const listView = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M3 6h11v1.5H3V6Zm3.5 5.5h11V13h-11v-1.5ZM21 17H10v1.5h11V17Z"
}));
/* harmony default export */ const list_view = (listView);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/pattern-modal/rename.js

/**
 * WordPress dependencies
 */




/**
 * Internal dependencies
 */



const {
  RenamePatternModal
} = unlock(external_wp_patterns_namespaceObject.privateApis);
function PatternRenameModal() {
  const {
    record: pattern
  } = useEditedEntityRecord();
  const {
    closeModal
  } = (0,external_wp_data_namespaceObject.useDispatch)(store);
  const isActive = (0,external_wp_data_namespaceObject.useSelect)(select => select(store).isModalActive(PATTERN_MODALS.rename));
  if (!isActive) {
    return null;
  }
  return (0,external_React_.createElement)(RenamePatternModal, {
    onClose: closeModal,
    pattern: pattern
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/pattern-modal/duplicate.js

/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */




const {
  DuplicatePatternModal
} = unlock(external_wp_patterns_namespaceObject.privateApis);
const {
  useHistory: duplicate_useHistory
} = unlock(external_wp_router_namespaceObject.privateApis);
function PatternDuplicateModal() {
  const {
    record
  } = useEditedEntityRecord();
  const {
    categoryType,
    categoryId
  } = (0,external_wp_url_namespaceObject.getQueryArgs)(window.location.href);
  const {
    closeModal
  } = (0,external_wp_data_namespaceObject.useDispatch)(store);
  const history = duplicate_useHistory();
  const isActive = (0,external_wp_data_namespaceObject.useSelect)(select => select(store).isModalActive(PATTERN_MODALS.duplicate));
  if (!isActive) {
    return null;
  }
  function onSuccess({
    pattern: newPattern
  }) {
    history.push({
      categoryType,
      categoryId,
      postType: PATTERN_TYPES.user,
      postId: newPattern.id
    });
    closeModal();
  }
  return (0,external_React_.createElement)(DuplicatePatternModal, {
    onClose: closeModal,
    onSuccess: onSuccess,
    pattern: record
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/pattern-modal/index.js

/**
 * Internal dependencies
 */


const PATTERN_MODALS = {
  rename: 'edit-site/pattern-rename',
  duplicate: 'edit-site/pattern-duplicate'
};
function PatternModal() {
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(PatternDuplicateModal, null), (0,external_React_.createElement)(PatternRenameModal, null));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/hooks/commands/use-edit-mode-commands.js
/**
 * WordPress dependencies
 */











/**
 * Internal dependencies
 */










const {
  useHistory: use_edit_mode_commands_useHistory
} = unlock(external_wp_router_namespaceObject.privateApis);
function usePageContentFocusCommands() {
  const {
    record: template
  } = useEditedEntityRecord();
  const {
    isPage,
    canvasMode,
    templateId,
    currentPostType
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      isPage: _isPage,
      getCanvasMode
    } = unlock(select(store_store));
    const {
      getCurrentPostType,
      getCurrentTemplateId
    } = select(external_wp_editor_namespaceObject.store);
    return {
      isPage: _isPage(),
      canvasMode: getCanvasMode(),
      templateId: getCurrentTemplateId(),
      currentPostType: getCurrentPostType()
    };
  }, []);
  const {
    onClick: editTemplate
  } = useLink({
    postType: 'wp_template',
    postId: templateId
  });
  const {
    setRenderingMode
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_editor_namespaceObject.store);
  if (!isPage || canvasMode !== 'edit') {
    return {
      isLoading: false,
      commands: []
    };
  }
  const commands = [];
  if (currentPostType !== 'wp_template') {
    commands.push({
      name: 'core/switch-to-template-focus',
      label: (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: template title */
      (0,external_wp_i18n_namespaceObject.__)('Edit template: %s'), (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(template.title)),
      icon: library_layout,
      callback: ({
        close
      }) => {
        editTemplate();
        close();
      }
    });
  } else {
    commands.push({
      name: 'core/switch-to-page-focus',
      label: (0,external_wp_i18n_namespaceObject.__)('Back to page'),
      icon: library_page,
      callback: ({
        close
      }) => {
        setRenderingMode('template-locked');
        close();
      }
    });
  }
  return {
    isLoading: false,
    commands
  };
}
function useEditorModeCommands() {
  const {
    switchEditorMode
  } = (0,external_wp_data_namespaceObject.useDispatch)(store_store);
  const {
    canvasMode,
    editorMode
  } = (0,external_wp_data_namespaceObject.useSelect)(select => ({
    canvasMode: unlock(select(store_store)).getCanvasMode(),
    editorMode: select(store_store).getEditorMode()
  }), []);
  if (canvasMode !== 'edit' || editorMode !== 'text') {
    return {
      isLoading: false,
      commands: []
    };
  }
  const commands = [];
  if (editorMode === 'text') {
    commands.push({
      name: 'core/exit-code-editor',
      label: (0,external_wp_i18n_namespaceObject.__)('Exit code editor'),
      icon: library_code,
      callback: ({
        close
      }) => {
        switchEditorMode('visual');
        close();
      }
    });
  }
  return {
    isLoading: false,
    commands
  };
}
function useManipulateDocumentCommands() {
  const {
    isLoaded,
    record: template
  } = useEditedEntityRecord();
  const {
    removeTemplate,
    revertTemplate
  } = (0,external_wp_data_namespaceObject.useDispatch)(store_store);
  const history = use_edit_mode_commands_useHistory();
  const isEditingPage = (0,external_wp_data_namespaceObject.useSelect)(select => select(store_store).isPage() && select(external_wp_editor_namespaceObject.store).getCurrentPostType() !== 'wp_template', []);
  if (!isLoaded) {
    return {
      isLoading: true,
      commands: []
    };
  }
  const commands = [];
  if (isTemplateRevertable(template) && !isEditingPage) {
    const label = template.type === constants_TEMPLATE_POST_TYPE ? (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: template title */
    (0,external_wp_i18n_namespaceObject.__)('Reset template: %s'), (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(template.title)) : (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: template part title */
    (0,external_wp_i18n_namespaceObject.__)('Reset template part: %s'), (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(template.title));
    commands.push({
      name: 'core/reset-template',
      label,
      icon: (0,external_wp_i18n_namespaceObject.isRTL)() ? rotate_right : rotate_left,
      callback: ({
        close
      }) => {
        revertTemplate(template);
        close();
      }
    });
  }
  if (isTemplateRemovable(template) && !isEditingPage) {
    const label = template.type === constants_TEMPLATE_POST_TYPE ? (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: template title */
    (0,external_wp_i18n_namespaceObject.__)('Delete template: %s'), (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(template.title)) : (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: template part title */
    (0,external_wp_i18n_namespaceObject.__)('Delete template part: %s'), (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(template.title));
    const path = template.type === constants_TEMPLATE_POST_TYPE ? '/wp_template' : '/wp_template_part/all';
    commands.push({
      name: 'core/remove-template',
      label,
      icon: library_trash,
      callback: ({
        close
      }) => {
        removeTemplate(template);
        // Navigate to the template list
        history.push({
          path
        });
        close();
      }
    });
  }
  return {
    isLoading: !isLoaded,
    commands
  };
}
function useEditUICommands() {
  const {
    openGeneralSidebar,
    closeGeneralSidebar,
    toggleDistractionFree,
    setIsListViewOpened,
    switchEditorMode
  } = (0,external_wp_data_namespaceObject.useDispatch)(store_store);
  const {
    canvasMode,
    editorMode,
    activeSidebar,
    showBlockBreadcrumbs,
    isListViewOpen,
    isDistractionFree,
    isTopToolbar,
    isFocusMode
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      get
    } = select(external_wp_preferences_namespaceObject.store);
    const {
      getEditorMode
    } = select(store_store);
    const {
      isListViewOpened
    } = select(external_wp_editor_namespaceObject.store);
    return {
      canvasMode: unlock(select(store_store)).getCanvasMode(),
      editorMode: getEditorMode(),
      activeSidebar: select(store).getActiveComplementaryArea(store_store.name),
      showBlockBreadcrumbs: get('core', 'showBlockBreadcrumbs'),
      isListViewOpen: isListViewOpened(),
      isDistractionFree: get('core', 'distractionFree'),
      isFocusMode: get('core', 'focusMode'),
      isTopToolbar: get('core', 'fixedToolbar')
    };
  }, []);
  const {
    openModal
  } = (0,external_wp_data_namespaceObject.useDispatch)(store);
  const {
    toggle
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_preferences_namespaceObject.store);
  const {
    createInfoNotice
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_notices_namespaceObject.store);
  if (canvasMode !== 'edit') {
    return {
      isLoading: false,
      commands: []
    };
  }
  const commands = [];
  commands.push({
    name: 'core/open-settings-sidebar',
    label: (0,external_wp_i18n_namespaceObject.__)('Toggle settings sidebar'),
    icon: (0,external_wp_i18n_namespaceObject.isRTL)() ? drawer_left : drawer_right,
    callback: ({
      close
    }) => {
      close();
      if (activeSidebar === 'edit-site/template') {
        closeGeneralSidebar();
      } else {
        openGeneralSidebar('edit-site/template');
      }
    }
  });
  commands.push({
    name: 'core/open-block-inspector',
    label: (0,external_wp_i18n_namespaceObject.__)('Toggle block inspector'),
    icon: block_default,
    callback: ({
      close
    }) => {
      close();
      if (activeSidebar === 'edit-site/block-inspector') {
        closeGeneralSidebar();
      } else {
        openGeneralSidebar('edit-site/block-inspector');
      }
    }
  });
  commands.push({
    name: 'core/toggle-spotlight-mode',
    label: (0,external_wp_i18n_namespaceObject.__)('Toggle spotlight'),
    callback: ({
      close
    }) => {
      toggle('core', 'focusMode');
      close();
      createInfoNotice(isFocusMode ? (0,external_wp_i18n_namespaceObject.__)('Spotlight off.') : (0,external_wp_i18n_namespaceObject.__)('Spotlight on.'), {
        id: 'core/edit-site/toggle-spotlight-mode/notice',
        type: 'snackbar',
        actions: [{
          label: (0,external_wp_i18n_namespaceObject.__)('Undo'),
          onClick: () => {
            toggle('core', 'focusMode');
          }
        }]
      });
    }
  });
  commands.push({
    name: 'core/toggle-distraction-free',
    label: isDistractionFree ? (0,external_wp_i18n_namespaceObject.__)('Exit Distraction Free') : (0,external_wp_i18n_namespaceObject.__)('Enter Distraction Free '),
    callback: ({
      close
    }) => {
      toggleDistractionFree();
      close();
    }
  });
  commands.push({
    name: 'core/toggle-top-toolbar',
    label: (0,external_wp_i18n_namespaceObject.__)('Toggle top toolbar'),
    callback: ({
      close
    }) => {
      toggle('core', 'fixedToolbar');
      if (isDistractionFree) {
        toggleDistractionFree();
      }
      close();
      createInfoNotice(isTopToolbar ? (0,external_wp_i18n_namespaceObject.__)('Top toolbar off.') : (0,external_wp_i18n_namespaceObject.__)('Top toolbar on.'), {
        id: 'core/edit-site/toggle-top-toolbar/notice',
        type: 'snackbar',
        actions: [{
          label: (0,external_wp_i18n_namespaceObject.__)('Undo'),
          onClick: () => {
            toggle('core', 'fixedToolbar');
          }
        }]
      });
    }
  });
  if (editorMode === 'visual') {
    commands.push({
      name: 'core/toggle-code-editor',
      label: (0,external_wp_i18n_namespaceObject.__)('Open code editor'),
      icon: library_code,
      callback: ({
        close
      }) => {
        switchEditorMode('text');
        close();
      }
    });
  }
  commands.push({
    name: 'core/open-preferences',
    label: (0,external_wp_i18n_namespaceObject.__)('Editor preferences'),
    callback: () => {
      openModal(PREFERENCES_MODAL_NAME);
    }
  });
  commands.push({
    name: 'core/open-shortcut-help',
    label: (0,external_wp_i18n_namespaceObject.__)('Keyboard shortcuts'),
    icon: library_keyboard,
    callback: () => {
      openModal(KEYBOARD_SHORTCUT_HELP_MODAL_NAME);
    }
  });
  commands.push({
    name: 'core/toggle-breadcrumbs',
    label: showBlockBreadcrumbs ? (0,external_wp_i18n_namespaceObject.__)('Hide block breadcrumbs') : (0,external_wp_i18n_namespaceObject.__)('Show block breadcrumbs'),
    callback: ({
      close
    }) => {
      toggle('core', 'showBlockBreadcrumbs');
      close();
      createInfoNotice(showBlockBreadcrumbs ? (0,external_wp_i18n_namespaceObject.__)('Breadcrumbs hidden.') : (0,external_wp_i18n_namespaceObject.__)('Breadcrumbs visible.'), {
        id: 'core/edit-site/toggle-breadcrumbs/notice',
        type: 'snackbar'
      });
    }
  });
  commands.push({
    name: 'core/toggle-list-view',
    label: isListViewOpen ? (0,external_wp_i18n_namespaceObject.__)('Close List View') : (0,external_wp_i18n_namespaceObject.__)('Open List View'),
    icon: list_view,
    callback: ({
      close
    }) => {
      setIsListViewOpened(!isListViewOpen);
      close();
      createInfoNotice(isListViewOpen ? (0,external_wp_i18n_namespaceObject.__)('List View off.') : (0,external_wp_i18n_namespaceObject.__)('List View on.'), {
        id: 'core/edit-site/toggle-list-view/notice',
        type: 'snackbar'
      });
    }
  });
  return {
    isLoading: false,
    commands
  };
}
function usePatternCommands() {
  const {
    isLoaded,
    record: pattern
  } = useEditedEntityRecord();
  const {
    openModal
  } = (0,external_wp_data_namespaceObject.useDispatch)(store);
  if (!isLoaded) {
    return {
      isLoading: true,
      commands: []
    };
  }
  const commands = [];
  if (pattern?.type === 'wp_block') {
    commands.push({
      name: 'core/rename-pattern',
      label: (0,external_wp_i18n_namespaceObject.__)('Rename pattern'),
      icon: edit,
      callback: ({
        close
      }) => {
        openModal(PATTERN_MODALS.rename);
        close();
      }
    });
    commands.push({
      name: 'core/duplicate-pattern',
      label: (0,external_wp_i18n_namespaceObject.__)('Duplicate pattern'),
      icon: library_symbol,
      callback: ({
        close
      }) => {
        openModal(PATTERN_MODALS.duplicate);
        close();
      }
    });
  }
  return {
    isLoading: false,
    commands
  };
}
function useEditModeCommands() {
  (0,external_wp_commands_namespaceObject.useCommandLoader)({
    name: 'core/exit-code-editor',
    hook: useEditorModeCommands,
    context: 'site-editor-edit'
  });
  (0,external_wp_commands_namespaceObject.useCommandLoader)({
    name: 'core/edit-site/page-content-focus',
    hook: usePageContentFocusCommands,
    context: 'site-editor-edit'
  });
  (0,external_wp_commands_namespaceObject.useCommandLoader)({
    name: 'core/edit-site/manipulate-document',
    hook: useManipulateDocumentCommands
  });
  (0,external_wp_commands_namespaceObject.useCommandLoader)({
    name: 'core/edit-site/patterns',
    hook: usePatternCommands,
    context: 'site-editor-edit'
  });
  (0,external_wp_commands_namespaceObject.useCommandLoader)({
    name: 'core/edit-site/edit-ui',
    hook: useEditUICommands
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/layout/hooks.js
/**
 * WordPress dependencies
 */




/**
 * Internal dependencies
 */

const MAX_LOADING_TIME = 10000; // 10 seconds

function useIsSiteEditorLoading() {
  const {
    isLoaded: hasLoadedPost
  } = useEditedEntityRecord();
  const [loaded, setLoaded] = (0,external_wp_element_namespaceObject.useState)(false);
  const inLoadingPause = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const hasResolvingSelectors = select(external_wp_coreData_namespaceObject.store).hasResolvingSelectors();
    return !loaded && !hasResolvingSelectors;
  }, [loaded]);

  /*
   * If the maximum expected loading time has passed, we're marking the
   * editor as loaded, in order to prevent any failed requests from blocking
   * the editor canvas from appearing.
   */
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    let timeout;
    if (!loaded) {
      timeout = setTimeout(() => {
        setLoaded(true);
      }, MAX_LOADING_TIME);
    }
    return () => {
      clearTimeout(timeout);
    };
  }, [loaded]);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    if (inLoadingPause) {
      /*
       * We're using an arbitrary 100ms timeout here to catch brief
       * moments without any resolving selectors that would result in
       * displaying brief flickers of loading state and loaded state.
       *
       * It's worth experimenting with different values, since this also
       * adds 100ms of artificial delay after loading has finished.
       */
      const ARTIFICIAL_DELAY = 100;
      const timeout = setTimeout(() => {
        setLoaded(true);
      }, ARTIFICIAL_DELAY);
      return () => {
        clearTimeout(timeout);
      };
    }
  }, [inLoadingPause]);
  return !loaded || !hasLoadedPost;
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-edit-mode/default-sidebar.js

/**
 * WordPress dependencies
 */

function DefaultSidebar({
  className,
  identifier,
  title,
  icon,
  children,
  closeLabel,
  header,
  headerClassName,
  panelClassName
}) {
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(complementary_area, {
    className: className,
    scope: "core/edit-site",
    identifier: identifier,
    title: title,
    smallScreenTitle: title,
    icon: icon,
    closeLabel: closeLabel,
    header: header,
    headerClassName: headerClassName,
    panelClassName: panelClassName
  }, children), (0,external_React_.createElement)(ComplementaryAreaMoreMenuItem, {
    scope: "core/edit-site",
    identifier: identifier,
    icon: icon
  }, title));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/icon-with-current-color.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */

function IconWithCurrentColor({
  className,
  ...props
}) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Icon, {
    className: classnames_default()(className, 'edit-site-global-styles-icon-with-current-color'),
    ...props
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/navigation-button.js

/**
 * WordPress dependencies
 */


/**
 * Internal dependencies
 */

function GenericNavigationButton({
  icon,
  children,
  ...props
}) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItem, {
    ...props
  }, icon && (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    justify: "flex-start"
  }, (0,external_React_.createElement)(IconWithCurrentColor, {
    icon: icon,
    size: 24
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.FlexItem, null, children)), !icon && children);
}
function NavigationButtonAsItem(props) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalNavigatorButton, {
    as: GenericNavigationButton,
    ...props
  });
}
function NavigationBackButtonAsItem(props) {
  return createElement(NavigatorToParentButton, {
    as: GenericNavigationButton,
    ...props
  });
}


;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/typography.js

/**
 * WordPress dependencies
 */

const typography = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M6.9 7L3 17.8h1.7l1-2.8h4.1l1 2.8h1.7L8.6 7H6.9zm-.7 6.6l1.5-4.3 1.5 4.3h-3zM21.6 17c-.1.1-.2.2-.3.2-.1.1-.2.1-.4.1s-.3-.1-.4-.2c-.1-.1-.1-.3-.1-.6V12c0-.5 0-1-.1-1.4-.1-.4-.3-.7-.5-1-.2-.2-.5-.4-.9-.5-.4 0-.8-.1-1.3-.1s-1 .1-1.4.2c-.4.1-.7.3-1 .4-.2.2-.4.3-.6.5-.1.2-.2.4-.2.7 0 .3.1.5.2.8.2.2.4.3.8.3.3 0 .6-.1.8-.3.2-.2.3-.4.3-.7 0-.3-.1-.5-.2-.7-.2-.2-.4-.3-.6-.4.2-.2.4-.3.7-.4.3-.1.6-.1.8-.1.3 0 .6 0 .8.1.2.1.4.3.5.5.1.2.2.5.2.9v1.1c0 .3-.1.5-.3.6-.2.2-.5.3-.9.4-.3.1-.7.3-1.1.4-.4.1-.8.3-1.1.5-.3.2-.6.4-.8.7-.2.3-.3.7-.3 1.2 0 .6.2 1.1.5 1.4.3.4.9.5 1.6.5.5 0 1-.1 1.4-.3.4-.2.8-.6 1.1-1.1 0 .4.1.7.3 1 .2.3.6.4 1.2.4.4 0 .7-.1.9-.2.2-.1.5-.3.7-.4h-.3zm-3-.9c-.2.4-.5.7-.8.8-.3.2-.6.2-.8.2-.4 0-.6-.1-.9-.3-.2-.2-.3-.6-.3-1.1 0-.5.1-.9.3-1.2s.5-.5.8-.7c.3-.2.7-.3 1-.5.3-.1.6-.3.7-.6v3.4z"
}));
/* harmony default export */ const library_typography = (typography);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/color.js

/**
 * WordPress dependencies
 */

const color = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M17.2 10.9c-.5-1-1.2-2.1-2.1-3.2-.6-.9-1.3-1.7-2.1-2.6L12 4l-1 1.1c-.6.9-1.3 1.7-2 2.6-.8 1.2-1.5 2.3-2 3.2-.6 1.2-1 2.2-1 3 0 3.4 2.7 6.1 6.1 6.1s6.1-2.7 6.1-6.1c0-.8-.3-1.8-1-3zm-5.1 7.6c-2.5 0-4.6-2.1-4.6-4.6 0-.3.1-1 .8-2.3.5-.9 1.1-1.9 2-3.1.7-.9 1.3-1.7 1.8-2.3.7.8 1.3 1.6 1.8 2.3.8 1.1 1.5 2.2 2 3.1.7 1.3.8 2 .8 2.3 0 2.5-2.1 4.6-4.6 4.6z"
}));
/* harmony default export */ const library_color = (color);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/root-menu.js

/**
 * WordPress dependencies
 */





/**
 * Internal dependencies
 */


const {
  useHasDimensionsPanel,
  useHasTypographyPanel,
  useHasColorPanel,
  useGlobalSetting: root_menu_useGlobalSetting,
  useSettingsForBlockElement
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
function RootMenu() {
  const [rawSettings] = root_menu_useGlobalSetting('');
  const settings = useSettingsForBlockElement(rawSettings);
  const hasTypographyPanel = useHasTypographyPanel(settings);
  const hasColorPanel = useHasColorPanel(settings);
  const hasDimensionsPanel = useHasDimensionsPanel(settings);
  const hasLayoutPanel = hasDimensionsPanel;
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItemGroup, null, hasTypographyPanel && (0,external_React_.createElement)(NavigationButtonAsItem, {
    icon: library_typography,
    path: "/typography",
    "aria-label": (0,external_wp_i18n_namespaceObject.__)('Typography styles')
  }, (0,external_wp_i18n_namespaceObject.__)('Typography')), hasColorPanel && (0,external_React_.createElement)(NavigationButtonAsItem, {
    icon: library_color,
    path: "/colors",
    "aria-label": (0,external_wp_i18n_namespaceObject.__)('Colors styles')
  }, (0,external_wp_i18n_namespaceObject.__)('Colors')), hasLayoutPanel && (0,external_React_.createElement)(NavigationButtonAsItem, {
    icon: library_layout,
    path: "/layout",
    "aria-label": (0,external_wp_i18n_namespaceObject.__)('Layout styles')
  }, (0,external_wp_i18n_namespaceObject.__)('Layout'))));
}
/* harmony default export */ const root_menu = (RootMenu);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/screen-root.js

/**
 * WordPress dependencies
 */







/**
 * Internal dependencies
 */





const {
  useGlobalStyle: screen_root_useGlobalStyle
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
function ScreenRoot() {
  const [customCSS] = screen_root_useGlobalStyle('css');
  const {
    hasVariations,
    canEditCSS
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getEntityRecord,
      __experimentalGetCurrentGlobalStylesId,
      __experimentalGetCurrentThemeGlobalStylesVariations
    } = select(external_wp_coreData_namespaceObject.store);
    const globalStylesId = __experimentalGetCurrentGlobalStylesId();
    const globalStyles = globalStylesId ? getEntityRecord('root', 'globalStyles', globalStylesId) : undefined;
    return {
      hasVariations: !!__experimentalGetCurrentThemeGlobalStylesVariations()?.length,
      canEditCSS: !!globalStyles?._links?.['wp:action-edit-css']
    };
  }, []);
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Card, {
    size: "small",
    className: "edit-site-global-styles-screen-root"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.CardBody, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    spacing: 4
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Card, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.CardMedia, null, (0,external_React_.createElement)(preview, null))), hasVariations && (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItemGroup, null, (0,external_React_.createElement)(NavigationButtonAsItem, {
    path: "/variations",
    "aria-label": (0,external_wp_i18n_namespaceObject.__)('Browse styles')
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    justify: "space-between"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.FlexItem, null, (0,external_wp_i18n_namespaceObject.__)('Browse styles')), (0,external_React_.createElement)(IconWithCurrentColor, {
    icon: (0,external_wp_i18n_namespaceObject.isRTL)() ? chevron_left : chevron_right
  })))), (0,external_React_.createElement)(root_menu, null))), (0,external_React_.createElement)(external_wp_components_namespaceObject.CardDivider, null), (0,external_React_.createElement)(external_wp_components_namespaceObject.CardBody, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    as: "p",
    paddingTop: 2
    /*
     * 13px matches the text inset of the NavigationButton (12px padding, plus the width of the button's border).
     * This is an ad hoc override for this instance and the Addtional CSS option below. Other options for matching the
     * the nav button inset should be looked at before reusing further.
     */,
    paddingX: "13px",
    marginBottom: 4
  }, (0,external_wp_i18n_namespaceObject.__)('Customize the appearance of specific blocks for the whole site.')), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItemGroup, null, (0,external_React_.createElement)(NavigationButtonAsItem, {
    path: "/blocks",
    "aria-label": (0,external_wp_i18n_namespaceObject.__)('Blocks styles')
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    justify: "space-between"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.FlexItem, null, (0,external_wp_i18n_namespaceObject.__)('Blocks')), (0,external_React_.createElement)(IconWithCurrentColor, {
    icon: (0,external_wp_i18n_namespaceObject.isRTL)() ? chevron_left : chevron_right
  }))))), canEditCSS && !!customCSS && (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.CardDivider, null), (0,external_React_.createElement)(external_wp_components_namespaceObject.CardBody, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    as: "p",
    paddingTop: 2,
    paddingX: "13px",
    marginBottom: 4
  }, (0,external_wp_i18n_namespaceObject.__)('Add your own CSS to customize the appearance and layout of your site.')), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItemGroup, null, (0,external_React_.createElement)(NavigationButtonAsItem, {
    path: "/css",
    "aria-label": (0,external_wp_i18n_namespaceObject.__)('Additional CSS')
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    justify: "space-between"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.FlexItem, null, (0,external_wp_i18n_namespaceObject.__)('Additional CSS')), (0,external_React_.createElement)(IconWithCurrentColor, {
    icon: (0,external_wp_i18n_namespaceObject.isRTL)() ? chevron_left : chevron_right
  })))))));
}
/* harmony default export */ const screen_root = (ScreenRoot);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/variations-panel.js

/**
 * WordPress dependencies
 */



/**
 * Internal dependencies
 */


function getCoreBlockStyles(blockStyles) {
  return blockStyles?.filter(style => style.source === 'block');
}
function useBlockVariations(name) {
  const blockStyles = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getBlockStyles
    } = select(external_wp_blocks_namespaceObject.store);
    return getBlockStyles(name);
  }, [name]);
  const coreBlockStyles = getCoreBlockStyles(blockStyles);
  return coreBlockStyles;
}
function VariationsPanel({
  name
}) {
  const coreBlockStyles = useBlockVariations(name);
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItemGroup, {
    isBordered: true,
    isSeparated: true
  }, coreBlockStyles.map((style, index) => {
    if (style?.isDefault) {
      return null;
    }
    return (0,external_React_.createElement)(NavigationButtonAsItem, {
      key: index,
      path: '/blocks/' + encodeURIComponent(name) + '/variations/' + encodeURIComponent(style.name),
      "aria-label": style.label
    }, style.label);
  }));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/header.js

/**
 * WordPress dependencies
 */



function ScreenHeader({
  title,
  description,
  onBack
}) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    spacing: 0
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalView, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    marginBottom: 0,
    paddingX: 4,
    paddingY: 3
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    spacing: 2
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalNavigatorToParentButton, {
    style:
    // TODO: This style override is also used in ToolsPanelHeader.
    // It should be supported out-of-the-box by Button.
    {
      minWidth: 24,
      padding: 0
    },
    icon: (0,external_wp_i18n_namespaceObject.isRTL)() ? chevron_right : chevron_left,
    isSmall: true,
    "aria-label": (0,external_wp_i18n_namespaceObject.__)('Navigate to the previous view'),
    onClick: onBack
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHeading, {
    className: "edit-site-global-styles-header",
    level: 2,
    size: 13
  }, title))))), description && (0,external_React_.createElement)("p", {
    className: "edit-site-global-styles-header__description"
  }, description));
}
/* harmony default export */ const header = (ScreenHeader);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/screen-block-list.js

/**
 * WordPress dependencies
 */









/**
 * Internal dependencies
 */




const {
  useHasDimensionsPanel: screen_block_list_useHasDimensionsPanel,
  useHasTypographyPanel: screen_block_list_useHasTypographyPanel,
  useHasBorderPanel,
  useGlobalSetting: screen_block_list_useGlobalSetting,
  useSettingsForBlockElement: screen_block_list_useSettingsForBlockElement,
  useHasColorPanel: screen_block_list_useHasColorPanel
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
function useSortedBlockTypes() {
  const blockItems = (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_blocks_namespaceObject.store).getBlockTypes(), []);
  // Ensure core blocks are prioritized in the returned results,
  // because third party blocks can be registered earlier than
  // the core blocks (usually by using the `init` action),
  // thus affecting the display order.
  // We don't sort reusable blocks as they are handled differently.
  const groupByType = (blocks, block) => {
    const {
      core,
      noncore
    } = blocks;
    const type = block.name.startsWith('core/') ? core : noncore;
    type.push(block);
    return blocks;
  };
  const {
    core: coreItems,
    noncore: nonCoreItems
  } = blockItems.reduce(groupByType, {
    core: [],
    noncore: []
  });
  return [...coreItems, ...nonCoreItems];
}
function useBlockHasGlobalStyles(blockName) {
  const [rawSettings] = screen_block_list_useGlobalSetting('', blockName);
  const settings = screen_block_list_useSettingsForBlockElement(rawSettings, blockName);
  const hasTypographyPanel = screen_block_list_useHasTypographyPanel(settings);
  const hasColorPanel = screen_block_list_useHasColorPanel(settings);
  const hasBorderPanel = useHasBorderPanel(settings);
  const hasDimensionsPanel = screen_block_list_useHasDimensionsPanel(settings);
  const hasLayoutPanel = hasBorderPanel || hasDimensionsPanel;
  const hasVariationsPanel = !!useBlockVariations(blockName)?.length;
  const hasGlobalStyles = hasTypographyPanel || hasColorPanel || hasLayoutPanel || hasVariationsPanel;
  return hasGlobalStyles;
}
function BlockMenuItem({
  block
}) {
  const hasBlockMenuItem = useBlockHasGlobalStyles(block.name);
  if (!hasBlockMenuItem) {
    return null;
  }
  const navigationButtonLabel = (0,external_wp_i18n_namespaceObject.sprintf)(
  // translators: %s: is the name of a block e.g., 'Image' or 'Table'.
  (0,external_wp_i18n_namespaceObject.__)('%s block styles'), block.title);
  return (0,external_React_.createElement)(NavigationButtonAsItem, {
    path: '/blocks/' + encodeURIComponent(block.name),
    "aria-label": navigationButtonLabel
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    justify: "flex-start"
  }, (0,external_React_.createElement)(external_wp_blockEditor_namespaceObject.BlockIcon, {
    icon: block.icon
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.FlexItem, null, block.title)));
}
function BlockList({
  filterValue
}) {
  const sortedBlockTypes = useSortedBlockTypes();
  const debouncedSpeak = (0,external_wp_compose_namespaceObject.useDebounce)(external_wp_a11y_namespaceObject.speak, 500);
  const {
    isMatchingSearchTerm
  } = (0,external_wp_data_namespaceObject.useSelect)(external_wp_blocks_namespaceObject.store);
  const filteredBlockTypes = !filterValue ? sortedBlockTypes : sortedBlockTypes.filter(blockType => isMatchingSearchTerm(blockType, filterValue));
  const blockTypesListRef = (0,external_wp_element_namespaceObject.useRef)();

  // Announce search results on change
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    if (!filterValue) {
      return;
    }
    // We extract the results from the wrapper div's `ref` because
    // filtered items can contain items that will eventually not
    // render and there is no reliable way to detect when a child
    // will return `null`.
    // TODO: We should find a better way of handling this as it's
    // fragile and depends on the number of rendered elements of `BlockMenuItem`,
    // which is now one.
    // @see https://github.com/WordPress/gutenberg/pull/39117#discussion_r816022116
    const count = blockTypesListRef.current.childElementCount;
    const resultsFoundMessage = (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %d: number of results. */
    (0,external_wp_i18n_namespaceObject._n)('%d result found.', '%d results found.', count), count);
    debouncedSpeak(resultsFoundMessage, count);
  }, [filterValue, debouncedSpeak]);
  return (0,external_React_.createElement)("div", {
    ref: blockTypesListRef,
    className: "edit-site-block-types-item-list"
  }, filteredBlockTypes.map(block => (0,external_React_.createElement)(BlockMenuItem, {
    block: block,
    key: 'menu-itemblock-' + block.name
  })));
}
const MemoizedBlockList = (0,external_wp_element_namespaceObject.memo)(BlockList);
function ScreenBlockList() {
  const [filterValue, setFilterValue] = (0,external_wp_element_namespaceObject.useState)('');
  const deferredFilterValue = (0,external_wp_element_namespaceObject.useDeferredValue)(filterValue);
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(header, {
    title: (0,external_wp_i18n_namespaceObject.__)('Blocks'),
    description: (0,external_wp_i18n_namespaceObject.__)('Customize the appearance of specific blocks and for the whole site.')
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.SearchControl, {
    __nextHasNoMarginBottom: true,
    className: "edit-site-block-types-search",
    onChange: setFilterValue,
    value: filterValue,
    label: (0,external_wp_i18n_namespaceObject.__)('Search for blocks'),
    placeholder: (0,external_wp_i18n_namespaceObject.__)('Search')
  }), (0,external_React_.createElement)(MemoizedBlockList, {
    filterValue: deferredFilterValue
  }));
}
/* harmony default export */ const screen_block_list = (ScreenBlockList);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/block-preview-panel.js

/**
 * WordPress dependencies
 */




const BlockPreviewPanel = ({
  name,
  variation = ''
}) => {
  var _blockExample$viewpor;
  const blockExample = (0,external_wp_blocks_namespaceObject.getBlockType)(name)?.example;
  const blocks = (0,external_wp_element_namespaceObject.useMemo)(() => {
    if (!blockExample) {
      return null;
    }
    let example = blockExample;
    if (variation) {
      example = {
        ...example,
        attributes: {
          ...example.attributes,
          className: 'is-style-' + variation
        }
      };
    }
    return (0,external_wp_blocks_namespaceObject.getBlockFromExample)(name, example);
  }, [name, blockExample, variation]);
  const viewportWidth = (_blockExample$viewpor = blockExample?.viewportWidth) !== null && _blockExample$viewpor !== void 0 ? _blockExample$viewpor : null;
  const previewHeight = 150;
  if (!blockExample) {
    return null;
  }
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    marginX: 4,
    marginBottom: 4
  }, (0,external_React_.createElement)("div", {
    className: "edit-site-global-styles__block-preview-panel",
    style: {
      maxHeight: previewHeight,
      boxSizing: 'initial'
    }
  }, (0,external_React_.createElement)(external_wp_blockEditor_namespaceObject.BlockPreview, {
    blocks: blocks,
    viewportWidth: viewportWidth,
    minHeight: previewHeight,
    additionalStyles: [{
      css: `
								body{
									min-height:${previewHeight}px;
									display:flex;align-items:center;justify-content:center;
								}
							`
    }]
  })));
};
/* harmony default export */ const block_preview_panel = (BlockPreviewPanel);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/subtitle.js

/**
 * WordPress dependencies
 */

function Subtitle({
  children,
  level
}) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHeading, {
    className: "edit-site-global-styles-subtitle",
    level: level !== null && level !== void 0 ? level : 2
  }, children);
}
/* harmony default export */ const subtitle = (Subtitle);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/screen-block.js

/**
 * WordPress dependencies
 */








/**
 * Internal dependencies
 */





function applyFallbackStyle(border) {
  if (!border) {
    return border;
  }
  const hasColorOrWidth = border.color || border.width;
  if (!border.style && hasColorOrWidth) {
    return {
      ...border,
      style: 'solid'
    };
  }
  if (border.style && !hasColorOrWidth) {
    return undefined;
  }
  return border;
}
function applyAllFallbackStyles(border) {
  if (!border) {
    return border;
  }
  if ((0,external_wp_components_namespaceObject.__experimentalHasSplitBorders)(border)) {
    return {
      top: applyFallbackStyle(border.top),
      right: applyFallbackStyle(border.right),
      bottom: applyFallbackStyle(border.bottom),
      left: applyFallbackStyle(border.left)
    };
  }
  return applyFallbackStyle(border);
}
const {
  useHasDimensionsPanel: screen_block_useHasDimensionsPanel,
  useHasTypographyPanel: screen_block_useHasTypographyPanel,
  useHasBorderPanel: screen_block_useHasBorderPanel,
  useGlobalSetting: screen_block_useGlobalSetting,
  useSettingsForBlockElement: screen_block_useSettingsForBlockElement,
  useHasColorPanel: screen_block_useHasColorPanel,
  useHasFiltersPanel,
  useHasImageSettingsPanel,
  useGlobalStyle: screen_block_useGlobalStyle,
  BorderPanel: StylesBorderPanel,
  ColorPanel: StylesColorPanel,
  TypographyPanel: StylesTypographyPanel,
  DimensionsPanel: StylesDimensionsPanel,
  FiltersPanel: StylesFiltersPanel,
  ImageSettingsPanel,
  AdvancedPanel: StylesAdvancedPanel
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
function ScreenBlock({
  name,
  variation
}) {
  let prefixParts = [];
  if (variation) {
    prefixParts = ['variations', variation].concat(prefixParts);
  }
  const prefix = prefixParts.join('.');
  const [style] = screen_block_useGlobalStyle(prefix, name, 'user', {
    shouldDecodeEncode: false
  });
  const [inheritedStyle, setStyle] = screen_block_useGlobalStyle(prefix, name, 'all', {
    shouldDecodeEncode: false
  });
  const [userSettings] = screen_block_useGlobalSetting('', name, 'user');
  const [rawSettings, setSettings] = screen_block_useGlobalSetting('', name);
  const settings = screen_block_useSettingsForBlockElement(rawSettings, name);
  const blockType = (0,external_wp_blocks_namespaceObject.getBlockType)(name);

  // Only allow `blockGap` support if serialization has not been skipped, to be sure global spacing can be applied.
  if (settings?.spacing?.blockGap && blockType?.supports?.spacing?.blockGap && (blockType?.supports?.spacing?.__experimentalSkipSerialization === true || blockType?.supports?.spacing?.__experimentalSkipSerialization?.some?.(spacingType => spacingType === 'blockGap'))) {
    settings.spacing.blockGap = false;
  }

  // Only allow `aspectRatio` support if the block is not the grouping block.
  // The grouping block allows the user to use Group, Row and Stack variations,
  // and it is highly likely that the user will not want to set an aspect ratio
  // for all three at once. Until there is the ability to set a different aspect
  // ratio for each variation, we disable the aspect ratio controls for the
  // grouping block in global styles.
  if (settings?.dimensions?.aspectRatio && name === 'core/group') {
    settings.dimensions.aspectRatio = false;
  }
  const blockVariations = useBlockVariations(name);
  const hasTypographyPanel = screen_block_useHasTypographyPanel(settings);
  const hasColorPanel = screen_block_useHasColorPanel(settings);
  const hasBorderPanel = screen_block_useHasBorderPanel(settings);
  const hasDimensionsPanel = screen_block_useHasDimensionsPanel(settings);
  const hasFiltersPanel = useHasFiltersPanel(settings);
  const hasImageSettingsPanel = useHasImageSettingsPanel(name, userSettings, settings);
  const hasVariationsPanel = !!blockVariations?.length && !variation;
  const {
    canEditCSS
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getEntityRecord,
      __experimentalGetCurrentGlobalStylesId
    } = select(external_wp_coreData_namespaceObject.store);
    const globalStylesId = __experimentalGetCurrentGlobalStylesId();
    const globalStyles = globalStylesId ? getEntityRecord('root', 'globalStyles', globalStylesId) : undefined;
    return {
      canEditCSS: !!globalStyles?._links?.['wp:action-edit-css']
    };
  }, []);
  const currentBlockStyle = variation ? blockVariations.find(s => s.name === variation) : null;

  // These intermediary objects are needed because the "layout" property is stored
  // in settings rather than styles.
  const inheritedStyleWithLayout = (0,external_wp_element_namespaceObject.useMemo)(() => {
    return {
      ...inheritedStyle,
      layout: settings.layout
    };
  }, [inheritedStyle, settings.layout]);
  const styleWithLayout = (0,external_wp_element_namespaceObject.useMemo)(() => {
    return {
      ...style,
      layout: userSettings.layout
    };
  }, [style, userSettings.layout]);
  const onChangeDimensions = newStyle => {
    const updatedStyle = {
      ...newStyle
    };
    delete updatedStyle.layout;
    setStyle(updatedStyle);
    if (newStyle.layout !== userSettings.layout) {
      setSettings({
        ...userSettings,
        layout: newStyle.layout
      });
    }
  };
  const onChangeLightbox = newSetting => {
    // If the newSetting is undefined, this means that the user has deselected
    // (reset) the lightbox setting.
    if (newSetting === undefined) {
      setSettings({
        ...rawSettings,
        lightbox: undefined
      });

      // Otherwise, we simply set the lightbox setting to the new value but
      // taking care of not overriding the other lightbox settings.
    } else {
      setSettings({
        ...rawSettings,
        lightbox: {
          ...rawSettings.lightbox,
          ...newSetting
        }
      });
    }
  };
  const onChangeBorders = newStyle => {
    if (!newStyle?.border) {
      setStyle(newStyle);
      return;
    }

    // As Global Styles can't conditionally generate styles based on if
    // other style properties have been set, we need to force split
    // border definitions for user set global border styles. Border
    // radius is derived from the same property i.e. `border.radius` if
    // it is a string that is used. The longhand border radii styles are
    // only generated if that property is an object.
    //
    // For borders (color, style, and width) those are all properties on
    // the `border` style property. This means if the theme.json defined
    // split borders and the user condenses them into a flat border or
    // vice-versa we'd get both sets of styles which would conflict.
    const {
      radius,
      ...newBorder
    } = newStyle.border;
    const border = applyAllFallbackStyles(newBorder);
    const updatedBorder = !(0,external_wp_components_namespaceObject.__experimentalHasSplitBorders)(border) ? {
      top: border,
      right: border,
      bottom: border,
      left: border
    } : {
      color: null,
      style: null,
      width: null,
      ...border
    };
    setStyle({
      ...newStyle,
      border: {
        ...updatedBorder,
        radius
      }
    });
  };
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(header, {
    title: variation ? currentBlockStyle.label : blockType.title
  }), (0,external_React_.createElement)(block_preview_panel, {
    name: name,
    variation: variation
  }), hasVariationsPanel && (0,external_React_.createElement)("div", {
    className: "edit-site-global-styles-screen-variations"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    spacing: 3
  }, (0,external_React_.createElement)(subtitle, null, (0,external_wp_i18n_namespaceObject.__)('Style Variations')), (0,external_React_.createElement)(VariationsPanel, {
    name: name
  }))), hasColorPanel && (0,external_React_.createElement)(StylesColorPanel, {
    inheritedValue: inheritedStyle,
    value: style,
    onChange: setStyle,
    settings: settings
  }), hasTypographyPanel && (0,external_React_.createElement)(StylesTypographyPanel, {
    inheritedValue: inheritedStyle,
    value: style,
    onChange: setStyle,
    settings: settings
  }), hasDimensionsPanel && (0,external_React_.createElement)(StylesDimensionsPanel, {
    inheritedValue: inheritedStyleWithLayout,
    value: styleWithLayout,
    onChange: onChangeDimensions,
    settings: settings,
    includeLayoutControls: true
  }), hasBorderPanel && (0,external_React_.createElement)(StylesBorderPanel, {
    inheritedValue: inheritedStyle,
    value: style,
    onChange: onChangeBorders,
    settings: settings
  }), hasFiltersPanel && (0,external_React_.createElement)(StylesFiltersPanel, {
    inheritedValue: inheritedStyleWithLayout,
    value: styleWithLayout,
    onChange: setStyle,
    settings: settings,
    includeLayoutControls: true
  }), hasImageSettingsPanel && (0,external_React_.createElement)(ImageSettingsPanel, {
    onChange: onChangeLightbox,
    value: userSettings,
    inheritedValue: settings
  }), canEditCSS && (0,external_React_.createElement)(external_wp_components_namespaceObject.PanelBody, {
    title: (0,external_wp_i18n_namespaceObject.__)('Advanced'),
    initialOpen: false
  }, (0,external_React_.createElement)("p", null, (0,external_wp_i18n_namespaceObject.sprintf)(
  // translators: %s: is the name of a block e.g., 'Image' or 'Table'.
  (0,external_wp_i18n_namespaceObject.__)('Add your own CSS to customize the appearance of the %s block. You do not need to include a CSS selector, just add the property and value.'), blockType?.title)), (0,external_React_.createElement)(StylesAdvancedPanel, {
    value: style,
    onChange: setStyle,
    inheritedValue: inheritedStyle
  })));
}
/* harmony default export */ const screen_block = (ScreenBlock);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/typogrphy-elements.js

/**
 * WordPress dependencies
 */




/**
 * Internal dependencies
 */



const {
  useGlobalStyle: typogrphy_elements_useGlobalStyle
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
function ElementItem({
  parentMenu,
  element,
  label
}) {
  const prefix = element === 'text' || !element ? '' : `elements.${element}.`;
  const extraStyles = element === 'link' ? {
    textDecoration: 'underline'
  } : {};
  const [fontFamily] = typogrphy_elements_useGlobalStyle(prefix + 'typography.fontFamily');
  const [fontStyle] = typogrphy_elements_useGlobalStyle(prefix + 'typography.fontStyle');
  const [fontWeight] = typogrphy_elements_useGlobalStyle(prefix + 'typography.fontWeight');
  const [letterSpacing] = typogrphy_elements_useGlobalStyle(prefix + 'typography.letterSpacing');
  const [backgroundColor] = typogrphy_elements_useGlobalStyle(prefix + 'color.background');
  const [gradientValue] = typogrphy_elements_useGlobalStyle(prefix + 'color.gradient');
  const [color] = typogrphy_elements_useGlobalStyle(prefix + 'color.text');
  const navigationButtonLabel = (0,external_wp_i18n_namespaceObject.sprintf)(
  // translators: %s: is a subset of Typography, e.g., 'text' or 'links'.
  (0,external_wp_i18n_namespaceObject.__)('Typography %s styles'), label);
  return (0,external_React_.createElement)(NavigationButtonAsItem, {
    path: parentMenu + '/typography/' + element,
    "aria-label": navigationButtonLabel
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    justify: "flex-start"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.FlexItem, {
    className: "edit-site-global-styles-screen-typography__indicator",
    style: {
      fontFamily: fontFamily !== null && fontFamily !== void 0 ? fontFamily : 'serif',
      background: gradientValue !== null && gradientValue !== void 0 ? gradientValue : backgroundColor,
      color,
      fontStyle,
      fontWeight,
      letterSpacing,
      ...extraStyles
    }
  }, (0,external_wp_i18n_namespaceObject.__)('Aa')), (0,external_React_.createElement)(external_wp_components_namespaceObject.FlexItem, null, label)));
}
function TypographyElements() {
  const parentMenu = '';
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    spacing: 3
  }, (0,external_React_.createElement)(subtitle, {
    level: 3
  }, (0,external_wp_i18n_namespaceObject.__)('Elements')), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItemGroup, {
    isBordered: true,
    isSeparated: true
  }, (0,external_React_.createElement)(ElementItem, {
    parentMenu: parentMenu,
    element: "text",
    label: (0,external_wp_i18n_namespaceObject.__)('Text')
  }), (0,external_React_.createElement)(ElementItem, {
    parentMenu: parentMenu,
    element: "link",
    label: (0,external_wp_i18n_namespaceObject.__)('Links')
  }), (0,external_React_.createElement)(ElementItem, {
    parentMenu: parentMenu,
    element: "heading",
    label: (0,external_wp_i18n_namespaceObject.__)('Headings')
  }), (0,external_React_.createElement)(ElementItem, {
    parentMenu: parentMenu,
    element: "caption",
    label: (0,external_wp_i18n_namespaceObject.__)('Captions')
  }), (0,external_React_.createElement)(ElementItem, {
    parentMenu: parentMenu,
    element: "button",
    label: (0,external_wp_i18n_namespaceObject.__)('Buttons')
  })));
}
/* harmony default export */ const typogrphy_elements = (TypographyElements);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/settings.js

/**
 * WordPress dependencies
 */

const settings_settings = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "m19 7.5h-7.628c-.3089-.87389-1.1423-1.5-2.122-1.5-.97966 0-1.81309.62611-2.12197 1.5h-2.12803v1.5h2.12803c.30888.87389 1.14231 1.5 2.12197 1.5.9797 0 1.8131-.62611 2.122-1.5h7.628z"
}), (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "m19 15h-2.128c-.3089-.8739-1.1423-1.5-2.122-1.5s-1.8131.6261-2.122 1.5h-7.628v1.5h7.628c.3089.8739 1.1423 1.5 2.122 1.5s1.8131-.6261 2.122-1.5h2.128z"
}));
/* harmony default export */ const library_settings = (settings_settings);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/font-library-modal/resolvers.js
/**
 * WordPress dependencies
 */

const FONT_FAMILIES_URL = '/wp/v2/font-families';
const FONT_COLLECTIONS_URL = '/wp/v2/font-collections';
async function fetchInstallFontFamily(data) {
  const config = {
    path: FONT_FAMILIES_URL,
    method: 'POST',
    body: data
  };
  const response = await external_wp_apiFetch_default()(config);
  return {
    id: response.id,
    ...response.font_family_settings,
    fontFace: []
  };
}
async function fetchInstallFontFace(fontFamilyId, data) {
  const config = {
    path: `${FONT_FAMILIES_URL}/${fontFamilyId}/font-faces`,
    method: 'POST',
    body: data
  };
  const response = await external_wp_apiFetch_default()(config);
  return {
    id: response.id,
    ...response.font_face_settings
  };
}
async function fetchGetFontFamilyBySlug(slug) {
  const config = {
    path: `${FONT_FAMILIES_URL}?slug=${slug}&_embed=true`,
    method: 'GET'
  };
  const response = await external_wp_apiFetch_default()(config);
  if (!response || response.length === 0) {
    return null;
  }
  const fontFamilyPost = response[0];
  return {
    id: fontFamilyPost.id,
    ...fontFamilyPost.font_family_settings,
    fontFace: fontFamilyPost?._embedded?.font_faces.map(face => face.font_face_settings) || []
  };
}
async function fetchUninstallFontFamily(fontFamilyId) {
  const config = {
    path: `${FONT_FAMILIES_URL}/${fontFamilyId}?force=true`,
    method: 'DELETE'
  };
  return await external_wp_apiFetch_default()(config);
}
async function fetchFontCollections() {
  const config = {
    path: `${FONT_COLLECTIONS_URL}?_fields=slug,name,description`,
    method: 'GET'
  };
  return await external_wp_apiFetch_default()(config);
}
async function fetchFontCollection(id) {
  const config = {
    path: `${FONT_COLLECTIONS_URL}/${id}`,
    method: 'GET'
  };
  return await external_wp_apiFetch_default()(config);
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/font-library-modal/utils/constants.js
/**
 * WordPress dependencies
 */

const ALLOWED_FILE_EXTENSIONS = ['otf', 'ttf', 'woff', 'woff2'];
const FONT_WEIGHTS = {
  100: (0,external_wp_i18n_namespaceObject._x)('Thin', 'font weight'),
  200: (0,external_wp_i18n_namespaceObject._x)('Extra-light', 'font weight'),
  300: (0,external_wp_i18n_namespaceObject._x)('Light', 'font weight'),
  400: (0,external_wp_i18n_namespaceObject._x)('Normal', 'font weight'),
  500: (0,external_wp_i18n_namespaceObject._x)('Medium', 'font weight'),
  600: (0,external_wp_i18n_namespaceObject._x)('Semi-bold', 'font weight'),
  700: (0,external_wp_i18n_namespaceObject._x)('Bold', 'font weight'),
  800: (0,external_wp_i18n_namespaceObject._x)('Extra-bold', 'font weight'),
  900: (0,external_wp_i18n_namespaceObject._x)('Black', 'font weight')
};
const FONT_STYLES = {
  normal: (0,external_wp_i18n_namespaceObject._x)('Normal', 'font style'),
  italic: (0,external_wp_i18n_namespaceObject._x)('Italic', 'font style')
};

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/font-library-modal/utils/preview-styles.js
function findNearest(input, numbers) {
  // If the numbers array is empty, return null
  if (numbers.length === 0) {
    return null;
  }
  // Sort the array based on the absolute difference with the input
  numbers.sort((a, b) => Math.abs(input - a) - Math.abs(input - b));
  // Return the first element (which will be the nearest) from the sorted array
  return numbers[0];
}
function extractFontWeights(fontFaces) {
  const result = [];
  fontFaces.forEach(face => {
    const weights = String(face.fontWeight).split(' ');
    if (weights.length === 2) {
      const start = parseInt(weights[0]);
      const end = parseInt(weights[1]);
      for (let i = start; i <= end; i += 100) {
        result.push(i);
      }
    } else if (weights.length === 1) {
      result.push(parseInt(weights[0]));
    }
  });
  return result;
}

/*
 * Format the font family to use in the CSS font-family property of a CSS rule.
 *
 * The input can be a string with the font family name or a string with multiple font family names separated by commas.
 * It follows the recommendations from the CSS Fonts Module Level 4.
 * https://www.w3.org/TR/css-fonts-4/#font-family-prop
 *
 * @param {string} input - The font family.
 * @return {string} The formatted font family.
 *
 * Example:
 * formatFontFamily( "Open Sans, Font+Name, sans-serif" ) => '"Open Sans", "Font+Name", sans-serif'
 * formatFontFamily( "'Open Sans', generic(kai), sans-serif" ) => '"Open Sans", sans-serif'
 * formatFontFamily( "DotGothic16, Slabo 27px, serif" ) => '"DotGothic16","Slabo 27px",serif'
 * formatFontFamily( "Mine's, Moe's Typography" ) => `"mine's","Moe's Typography"`
 */
function formatFontFamily(input) {
  // Matches strings that are not exclusively alphabetic characters or hyphens, and do not exactly follow the pattern generic(alphabetic characters or hyphens).
  const regex = /^(?!generic\([ a-zA-Z\-]+\)$)(?!^[a-zA-Z\-]+$).+/;
  const output = input.trim();
  const formatItem = item => {
    item = item.trim();
    if (item.match(regex)) {
      // removes leading and trailing quotes.
      item = item.replace(/^["']|["']$/g, '');
      return `"${item}"`;
    }
    return item;
  };
  if (output.includes(',')) {
    return output.split(',').map(formatItem).filter(item => item !== '').join(', ');
  }
  return formatItem(output);
}

/*
 * Format the font face name to use in the font-family property of a font face.
 *
 * The input can be a string with the font face name or a string with multiple font face names separated by commas.
 * It removes the leading and trailing quotes from the font face name.
 *
 * @param {string} input - The font face name.
 * @return {string} The formatted font face name.
 *
 * Example:
 * formatFontFaceName("Open Sans") => "Open Sans"
 * formatFontFaceName("'Open Sans', sans-serif") => "Open Sans"
 * formatFontFaceName(", 'Open Sans', 'Helvetica Neue', sans-serif") => "Open Sans"
 */
function formatFontFaceName(input) {
  if (!input) {
    return '';
  }
  let output = input.trim();
  if (output.includes(',')) {
    output = output.split(',')
    // finds the first item that is not an empty string.
    .find(item => item.trim() !== '').trim();
  }
  // removes leading and trailing quotes.
  output = output.replace(/^["']|["']$/g, '');

  // Firefox needs the font name to be wrapped in double quotes meanwhile other browsers don't.
  if (window.navigator.userAgent.toLowerCase().includes('firefox')) {
    output = `"${output}"`;
  }
  return output;
}
function getFamilyPreviewStyle(family) {
  const style = {
    fontFamily: formatFontFamily(family.fontFamily)
  };
  if (!Array.isArray(family.fontFace)) {
    style.fontWeight = '400';
    style.fontStyle = 'normal';
    return style;
  }
  if (family.fontFace) {
    //get all the font faces with normal style
    const normalFaces = family.fontFace.filter(face => face.fontStyle.toLowerCase() === 'normal');
    if (normalFaces.length > 0) {
      style.fontStyle = 'normal';
      const normalWeights = extractFontWeights(normalFaces);
      const nearestWeight = findNearest(400, normalWeights);
      style.fontWeight = String(nearestWeight) || '400';
    } else {
      style.fontStyle = family.fontFace.length && family.fontFace[0].fontStyle || 'normal';
      style.fontWeight = family.fontFace.length && String(family.fontFace[0].fontWeight) || '400';
    }
  }
  return style;
}
function getFacePreviewStyle(face) {
  return {
    fontFamily: formatFontFamily(face.fontFamily),
    fontStyle: face.fontStyle || 'normal',
    fontWeight: face.fontWeight || '400'
  };
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/font-library-modal/utils/index.js
/**
 * WordPress dependencies
 */


/**
 * Internal dependencies
 */





/**
 * Browser dependencies
 */
const {
  File
} = window;
function setUIValuesNeeded(font, extraValues = {}) {
  if (!font.name && (font.fontFamily || font.slug)) {
    font.name = font.fontFamily || font.slug;
  }
  return {
    ...font,
    ...extraValues
  };
}
function isUrlEncoded(url) {
  if (typeof url !== 'string') {
    return false;
  }
  return url !== decodeURIComponent(url);
}
function getFontFaceVariantName(face) {
  const weightName = FONT_WEIGHTS[face.fontWeight] || face.fontWeight;
  const styleName = face.fontStyle === 'normal' ? '' : FONT_STYLES[face.fontStyle] || face.fontStyle;
  return `${weightName} ${styleName}`;
}
function mergeFontFaces(existing = [], incoming = []) {
  const map = new Map();
  for (const face of existing) {
    map.set(`${face.fontWeight}${face.fontStyle}`, face);
  }
  for (const face of incoming) {
    // This will overwrite if the src already exists, keeping it unique.
    map.set(`${face.fontWeight}${face.fontStyle}`, face);
  }
  return Array.from(map.values());
}
function mergeFontFamilies(existing = [], incoming = []) {
  const map = new Map();
  // Add the existing array to the map.
  for (const font of existing) {
    map.set(font.slug, {
      ...font
    });
  }
  // Add the incoming array to the map, overwriting existing values excepting fontFace that need to be merged.
  for (const font of incoming) {
    if (map.has(font.slug)) {
      const {
        fontFace: incomingFontFaces,
        ...restIncoming
      } = font;
      const existingFont = map.get(font.slug);
      // Merge the fontFaces existing with the incoming fontFaces.
      const mergedFontFaces = mergeFontFaces(existingFont.fontFace, incomingFontFaces);
      // Except for the fontFace key all the other keys are overwritten with the incoming values.
      map.set(font.slug, {
        ...restIncoming,
        fontFace: mergedFontFaces
      });
    } else {
      map.set(font.slug, {
        ...font
      });
    }
  }
  return Array.from(map.values());
}

/*
 * Loads the font face from a URL and adds it to the browser.
 * It also adds it to the iframe document.
 */
async function loadFontFaceInBrowser(fontFace, source, addTo = 'all') {
  let dataSource;
  if (typeof source === 'string') {
    dataSource = `url(${source})`;
    // eslint-disable-next-line no-undef
  } else if (source instanceof File) {
    dataSource = await source.arrayBuffer();
  } else {
    return;
  }
  const newFont = new window.FontFace(formatFontFaceName(fontFace.fontFamily), dataSource, {
    style: fontFace.fontStyle,
    weight: fontFace.fontWeight
  });
  const loadedFace = await newFont.load();
  if (addTo === 'document' || addTo === 'all') {
    document.fonts.add(loadedFace);
  }
  if (addTo === 'iframe' || addTo === 'all') {
    const iframeDocument = document.querySelector('iframe[name="editor-canvas"]').contentDocument;
    iframeDocument.fonts.add(loadedFace);
  }
}

/*
 * Unloads the font face and remove it from the browser.
 * It also removes it from the iframe document.
 *
 * Note that Font faces that were added to the set using the CSS @font-face rule
 * remain connected to the corresponding CSS, and cannot be deleted.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet/delete.
 */
function unloadFontFaceInBrowser(fontFace, removeFrom = 'all') {
  const unloadFontFace = fonts => {
    fonts.forEach(f => {
      if (f.family === formatFontFaceName(fontFace?.fontFamily) && f.weight === fontFace?.fontWeight && f.style === fontFace?.fontStyle) {
        fonts.delete(f);
      }
    });
  };
  if (removeFrom === 'document' || removeFrom === 'all') {
    unloadFontFace(document.fonts);
  }
  if (removeFrom === 'iframe' || removeFrom === 'all') {
    const iframeDocument = document.querySelector('iframe[name="editor-canvas"]').contentDocument;
    unloadFontFace(iframeDocument.fonts);
  }
}

/**
 * Retrieves the display source from a font face src.
 *
 * @param {string|string[]} input - The font face src.
 * @return {string|undefined} The display source or undefined if the input is invalid.
 */
function getDisplaySrcFromFontFace(input) {
  if (!input) {
    return;
  }
  let src;
  if (Array.isArray(input)) {
    src = input[0];
  } else {
    src = input;
  }
  // It's expected theme fonts will already be loaded in the browser.
  if (src.startsWith('file:.')) {
    return;
  }
  if (!isUrlEncoded(src)) {
    src = encodeURI(src);
  }
  return src;
}
function makeFontFamilyFormData(fontFamily) {
  const formData = new FormData();
  const {
    kebabCase
  } = unlock(external_wp_components_namespaceObject.privateApis);
  const {
    fontFace,
    category,
    ...familyWithValidParameters
  } = fontFamily;
  const fontFamilySettings = {
    ...familyWithValidParameters,
    slug: kebabCase(fontFamily.slug)
  };
  formData.append('font_family_settings', JSON.stringify(fontFamilySettings));
  return formData;
}
function makeFontFacesFormData(font) {
  if (font?.fontFace) {
    const fontFacesFormData = font.fontFace.map((item, faceIndex) => {
      const face = {
        ...item
      };
      const formData = new FormData();
      if (face.file) {
        // Normalize to an array, since face.file may be a single file or an array of files.
        const files = Array.isArray(face.file) ? face.file : [face.file];
        const src = [];
        files.forEach((file, key) => {
          // Slugified file name because the it might contain spaces or characters treated differently on the server.
          const fileId = `file-${faceIndex}-${key}`;
          // Add the files to the formData
          formData.append(fileId, file, file.name);
          src.push(fileId);
        });
        face.src = src.length === 1 ? src[0] : src;
        delete face.file;
        formData.append('font_face_settings', JSON.stringify(face));
      } else {
        formData.append('font_face_settings', JSON.stringify(face));
      }
      return formData;
    });
    return fontFacesFormData;
  }
}
async function batchInstallFontFaces(fontFamilyId, fontFacesData) {
  const responses = [];

  /*
   * Uses the same response format as Promise.allSettled, but executes requests in sequence to work
   * around a race condition that can cause an error when the fonts directory doesn't exist yet.
   */
  for (const faceData of fontFacesData) {
    try {
      const response = await fetchInstallFontFace(fontFamilyId, faceData);
      responses.push({
        status: 'fulfilled',
        value: response
      });
    } catch (error) {
      responses.push({
        status: 'rejected',
        reason: error
      });
    }
  }
  const results = {
    errors: [],
    successes: []
  };
  responses.forEach((result, index) => {
    if (result.status === 'fulfilled') {
      const response = result.value;
      if (response.id) {
        results.successes.push(response);
      } else {
        results.errors.push({
          data: fontFacesData[index],
          message: `Error: ${response.message}`
        });
      }
    } else {
      // Handle network errors or other fetch-related errors
      results.errors.push({
        data: fontFacesData[index],
        message: result.reason.message
      });
    }
  });
  return results;
}

/*
 * Downloads a font face asset from a URL to the client and returns a File object.
 */
async function downloadFontFaceAssets(src) {
  // Normalize to an array, since `src` could be a string or array.
  src = Array.isArray(src) ? src : [src];
  const files = await Promise.all(src.map(async url => {
    return fetch(new Request(url)).then(response => {
      if (!response.ok) {
        throw new Error(`Error downloading font face asset from ${url}. Server responded with status: ${response.status}`);
      }
      return response.blob();
    }).then(blob => {
      const filename = url.split('/').pop();
      const file = new File([blob], filename, {
        type: blob.type
      });
      return file;
    });
  }));

  // If we only have one file return it (not the array).  Otherwise return all of them in the array.
  return files.length === 1 ? files[0] : files;
}

/*
 * Determine if a given Font Face is present in a given collection.
 * We determine that a font face has been installed by comparing the fontWeight and fontStyle
 *
 * @param {Object} fontFace The Font Face to seek
 * @param {Array} collection The Collection to seek in
 * @returns True if the font face is found in the collection.  Otherwise False.
 */
function checkFontFaceInstalled(fontFace, collection) {
  return -1 !== collection.findIndex(collectionFontFace => {
    return collectionFontFace.fontWeight === fontFace.fontWeight && collectionFontFace.fontStyle === fontFace.fontStyle;
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/font-library-modal/utils/toggleFont.js
/**
 * Toggles the activation of a given font or font variant within a list of custom fonts.
 *
 * - If only the font is provided (without face), the entire font family's activation is toggled.
 * - If both font and face are provided, the activation of the specific font variant is toggled.
 *
 * @param {Object} font            - The font to be toggled.
 * @param {string} font.slug       - The unique identifier for the font.
 * @param {Array}  [font.fontFace] - The list of font variants (faces) associated with the font.
 *
 * @param {Object} [face]          - The specific font variant to be toggled.
 * @param {string} face.fontWeight - The weight of the font variant.
 * @param {string} face.fontStyle  - The style of the font variant.
 *
 * @param {Array}  initialfonts    - The initial list of custom fonts.
 *
 * @return {Array} - The updated list of custom fonts with the font/font variant toggled.
 *
 * @example
 * const customFonts = [
 *     { slug: 'roboto', fontFace: [{ fontWeight: '400', fontStyle: 'normal' }] }
 * ];
 *
 * toggleFont({ slug: 'roboto' }, null, customFonts);
 * // This will remove 'roboto' from customFonts
 *
 * toggleFont({ slug: 'roboto' }, { fontWeight: '400', fontStyle: 'normal' }, customFonts);
 * // This will remove the specified face from 'roboto' in customFonts
 *
 * toggleFont({ slug: 'roboto' }, { fontWeight: '500', fontStyle: 'normal' }, customFonts);
 * // This will add the specified face to 'roboto' in customFonts
 */
function toggleFont(font, face, initialfonts) {
  // Helper to check if a font is activated based on its slug
  const isFontActivated = f => f.slug === font.slug;

  // Helper to get the activated font from a list of fonts
  const getActivatedFont = fonts => fonts.find(isFontActivated);

  // Toggle the activation status of an entire font family
  const toggleEntireFontFamily = activatedFont => {
    if (!activatedFont) {
      // If the font is not active, activate the entire font family
      return [...initialfonts, font];
    }
    // If the font is already active, deactivate the entire font family
    return initialfonts.filter(f => !isFontActivated(f));
  };

  // Toggle the activation status of a specific font variant
  const toggleFontVariant = activatedFont => {
    const isFaceActivated = f => f.fontWeight === face.fontWeight && f.fontStyle === face.fontStyle;
    if (!activatedFont) {
      // If the font family is not active, activate the font family with the font variant
      return [...initialfonts, {
        ...font,
        fontFace: [face]
      }];
    }
    let newFontFaces = activatedFont.fontFace || [];
    if (newFontFaces.find(isFaceActivated)) {
      // If the font variant is active, deactivate it
      newFontFaces = newFontFaces.filter(f => !isFaceActivated(f));
    } else {
      // If the font variant is not active, activate it
      newFontFaces = [...newFontFaces, face];
    }

    // If there are no more font faces, deactivate the font family
    if (newFontFaces.length === 0) {
      return initialfonts.filter(f => !isFontActivated(f));
    }

    // Return updated fonts list with toggled font variant
    return initialfonts.map(f => isFontActivated(f) ? {
      ...f,
      fontFace: newFontFaces
    } : f);
  };
  const activatedFont = getActivatedFont(initialfonts);
  if (!face) {
    return toggleEntireFontFamily(activatedFont);
  }
  return toggleFontVariant(activatedFont);
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/font-library-modal/context.js

/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */


const {
  useGlobalSetting: context_useGlobalSetting
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);



const FontLibraryContext = (0,external_wp_element_namespaceObject.createContext)({});
function FontLibraryProvider({
  children
}) {
  const {
    saveEntityRecord
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_coreData_namespaceObject.store);
  const {
    globalStylesId
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      __experimentalGetCurrentGlobalStylesId
    } = select(external_wp_coreData_namespaceObject.store);
    return {
      globalStylesId: __experimentalGetCurrentGlobalStylesId()
    };
  });
  const globalStyles = (0,external_wp_coreData_namespaceObject.useEntityRecord)('root', 'globalStyles', globalStylesId);
  const fontFamiliesHasChanges = !!globalStyles?.edits?.settings?.typography?.fontFamilies;
  const [isInstalling, setIsInstalling] = (0,external_wp_element_namespaceObject.useState)(false);
  const [refreshKey, setRefreshKey] = (0,external_wp_element_namespaceObject.useState)(0);
  const [notice, setNotice] = (0,external_wp_element_namespaceObject.useState)(null);
  const refreshLibrary = () => {
    setRefreshKey(Date.now());
  };
  const {
    records: libraryPosts = [],
    isResolving: isResolvingLibrary,
    hasResolved: hasResolvedLibrary
  } = (0,external_wp_coreData_namespaceObject.useEntityRecords)('postType', 'wp_font_family', {
    refreshKey,
    _embed: true
  });
  const libraryFonts = (libraryPosts || []).map(fontFamilyPost => {
    return {
      id: fontFamilyPost.id,
      ...fontFamilyPost.font_family_settings,
      fontFace: fontFamilyPost?._embedded?.font_faces.map(face => face.font_face_settings) || []
    };
  }) || [];

  // Global Styles (settings) font families
  const [fontFamilies, setFontFamilies] = context_useGlobalSetting('typography.fontFamilies');
  // theme.json file font families
  const [baseFontFamilies] = context_useGlobalSetting('typography.fontFamilies', undefined, 'base');

  /*
   * Save the font families to the database.
  	 * This function is called when the user activates or deactivates a font family.
   * It only updates the global styles post content in the database for new font families.
   * This avoids saving other styles/settings changed by the user using other parts of the editor.
   * 
   * It uses the font families from the param to avoid using the font families from an outdated state.
   * 
   * @param {Array} fonts - The font families that will be saved to the database.
   */
  const saveFontFamilies = async fonts => {
    // Gets the global styles database post content.
    const updatedGlobalStyles = globalStyles.record;

    // Updates the database version of global styles with the edited font families in the client.
    setNestedValue(updatedGlobalStyles, ['settings', 'typography', 'fontFamilies'], fonts);

    // Saves a new version of the global styles in the database.
    await saveEntityRecord('root', 'globalStyles', updatedGlobalStyles);
  };

  // Library Fonts
  const [modalTabOpen, setModalTabOpen] = (0,external_wp_element_namespaceObject.useState)(false);
  const [libraryFontSelected, setLibraryFontSelected] = (0,external_wp_element_namespaceObject.useState)(null);

  // Themes Fonts are the fonts defined in the global styles (database persisted theme.json data).
  const themeFonts = fontFamilies?.theme ? fontFamilies.theme.map(f => setUIValuesNeeded(f, {
    source: 'theme'
  })).sort((a, b) => a.name.localeCompare(b.name)) : [];
  const themeFontsSlugs = new Set(themeFonts.map(f => f.slug));

  /*
   * Base Theme Fonts are the fonts defined in the theme.json *file*.
   *
   * Uses the fonts from global styles + the ones from the theme.json file that hasn't repeated slugs.
   * Avoids incosistencies with the fonts listed in the font library modal as base (unactivated).
   * These inconsistencies can happen when the active theme fonts in global styles aren't defined in theme.json file as when a theme style variation is applied.
   */
  const baseThemeFonts = baseFontFamilies?.theme ? themeFonts.concat(baseFontFamilies.theme.filter(f => !themeFontsSlugs.has(f.slug)).map(f => setUIValuesNeeded(f, {
    source: 'theme'
  })).sort((a, b) => a.name.localeCompare(b.name))) : [];
  const customFonts = fontFamilies?.custom ? fontFamilies.custom.map(f => setUIValuesNeeded(f, {
    source: 'custom'
  })).sort((a, b) => a.name.localeCompare(b.name)) : [];
  const baseCustomFonts = libraryFonts ? libraryFonts.map(f => setUIValuesNeeded(f, {
    source: 'custom'
  })).sort((a, b) => a.name.localeCompare(b.name)) : [];
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    if (!modalTabOpen) {
      setLibraryFontSelected(null);
    }
  }, [modalTabOpen]);
  const handleSetLibraryFontSelected = font => {
    setNotice(null);

    // If font is null, reset the selected font
    if (!font) {
      setLibraryFontSelected(null);
      return;
    }
    const fonts = font.source === 'theme' ? themeFonts : baseCustomFonts;

    // Tries to find the font in the installed fonts
    const fontSelected = fonts.find(f => f.slug === font.slug);
    // If the font is not found (it is only defined in custom styles), use the font from custom styles
    setLibraryFontSelected({
      ...(fontSelected || font),
      source: font.source
    });
  };
  const toggleModal = tabName => {
    setModalTabOpen(tabName || null);
  };

  // Demo
  const [loadedFontUrls] = (0,external_wp_element_namespaceObject.useState)(new Set());
  const getAvailableFontsOutline = availableFontFamilies => {
    const outline = availableFontFamilies.reduce((acc, font) => {
      const availableFontFaces = font?.fontFace && font.fontFace?.length > 0 ? font?.fontFace.map(face => `${face.fontStyle + face.fontWeight}`) : ['normal400']; // If the font doesn't have fontFace, we assume it is a system font and we add the defaults: normal 400

      acc[font.slug] = availableFontFaces;
      return acc;
    }, {});
    return outline;
  };
  const getActivatedFontsOutline = source => {
    switch (source) {
      case 'theme':
        return getAvailableFontsOutline(themeFonts);
      case 'custom':
      default:
        return getAvailableFontsOutline(customFonts);
    }
  };
  const isFontActivated = (slug, style, weight, source) => {
    if (!style && !weight) {
      return !!getActivatedFontsOutline(source)[slug];
    }
    return !!getActivatedFontsOutline(source)[slug]?.includes(style + weight);
  };
  const getFontFacesActivated = (slug, source) => {
    return getActivatedFontsOutline(source)[slug] || [];
  };
  async function installFonts(fontFamiliesToInstall) {
    setIsInstalling(true);
    try {
      const fontFamiliesToActivate = [];
      let installationErrors = [];
      for (const fontFamilyToInstall of fontFamiliesToInstall) {
        let isANewFontFamily = false;

        // Get the font family if it already exists.
        let installedFontFamily = await fetchGetFontFamilyBySlug(fontFamilyToInstall.slug);

        // Otherwise create it.
        if (!installedFontFamily) {
          isANewFontFamily = true;
          // Prepare font family form data to install.
          installedFontFamily = await fetchInstallFontFamily(makeFontFamilyFormData(fontFamilyToInstall));
        }

        // Collect font faces that have already been installed (to be activated later)
        const alreadyInstalledFontFaces = installedFontFamily.fontFace && fontFamilyToInstall.fontFace ? installedFontFamily.fontFace.filter(fontFaceToInstall => checkFontFaceInstalled(fontFaceToInstall, fontFamilyToInstall.fontFace)) : [];

        // Filter out Font Faces that have already been installed (so that they are not re-installed)
        if (installedFontFamily.fontFace && fontFamilyToInstall.fontFace) {
          fontFamilyToInstall.fontFace = fontFamilyToInstall.fontFace.filter(fontFaceToInstall => !checkFontFaceInstalled(fontFaceToInstall, installedFontFamily.fontFace));
        }

        // Install the fonts (upload the font files to the server and create the post in the database).
        let sucessfullyInstalledFontFaces = [];
        let unsucessfullyInstalledFontFaces = [];
        if (fontFamilyToInstall?.fontFace?.length > 0) {
          const response = await batchInstallFontFaces(installedFontFamily.id, makeFontFacesFormData(fontFamilyToInstall));
          sucessfullyInstalledFontFaces = response?.successes;
          unsucessfullyInstalledFontFaces = response?.errors;
        }

        // Use the sucessfully installed font faces
        // As well as any font faces that were already installed (those will be activated)
        if (sucessfullyInstalledFontFaces?.length > 0 || alreadyInstalledFontFaces?.length > 0) {
          // Use font data from REST API not from client to ensure
          // correct font information is used.
          installedFontFamily.fontFace = [...sucessfullyInstalledFontFaces];
          fontFamiliesToActivate.push(installedFontFamily);
        }

        // If it's a system font but was installed successfully, activate it.
        if (installedFontFamily && !fontFamilyToInstall?.fontFace?.length) {
          fontFamiliesToActivate.push(installedFontFamily);
        }

        // If the font family is new and is not a system font, delete it to avoid having font families without font faces.
        if (isANewFontFamily && fontFamilyToInstall?.fontFace?.length > 0 && sucessfullyInstalledFontFaces?.length === 0) {
          await fetchUninstallFontFamily(installedFontFamily.id);
        }
        installationErrors = installationErrors.concat(unsucessfullyInstalledFontFaces);
      }
      installationErrors = installationErrors.reduce((unique, item) => unique.includes(item.message) ? unique : [...unique, item.message], []);
      if (fontFamiliesToActivate.length > 0) {
        // Activate the font family (add the font family to the global styles).
        const activeFonts = activateCustomFontFamilies(fontFamiliesToActivate);
        // Save the global styles to the database.
        await saveFontFamilies(activeFonts);
        refreshLibrary();
      }
      if (installationErrors.length > 0) {
        const installError = new Error((0,external_wp_i18n_namespaceObject.__)('There was an error installing fonts.'));
        installError.installationErrors = installationErrors;
        throw installError;
      }
    } finally {
      setIsInstalling(false);
    }
  }
  async function uninstallFontFamily(fontFamilyToUninstall) {
    try {
      // Uninstall the font family.
      // (Removes the font files from the server and the posts from the database).
      const uninstalledFontFamily = await fetchUninstallFontFamily(fontFamilyToUninstall.id);

      // Deactivate the font family if delete request is successful
      // (Removes the font family from the global styles).
      if (uninstalledFontFamily.deleted) {
        const activeFonts = deactivateFontFamily(fontFamilyToUninstall);
        // Save the global styles to the database.
        await saveFontFamilies(activeFonts);
      }

      // Refresh the library (the library font families from database).
      refreshLibrary();
      return uninstalledFontFamily;
    } catch (error) {
      // eslint-disable-next-line no-console
      console.error(`There was an error uninstalling the font family:`, error);
      throw error;
    }
  }
  const deactivateFontFamily = font => {
    var _fontFamilies$font$so;
    // If the user doesn't have custom fonts defined, include as custom fonts all the theme fonts
    // We want to save as active all the theme fonts at the beginning
    const initialCustomFonts = (_fontFamilies$font$so = fontFamilies?.[font.source]) !== null && _fontFamilies$font$so !== void 0 ? _fontFamilies$font$so : [];
    const newCustomFonts = initialCustomFonts.filter(f => f.slug !== font.slug);
    const activeFonts = {
      ...fontFamilies,
      [font.source]: newCustomFonts
    };
    setFontFamilies(activeFonts);
    if (font.fontFace) {
      font.fontFace.forEach(face => {
        unloadFontFaceInBrowser(face, 'all');
      });
    }
    return activeFonts;
  };
  const activateCustomFontFamilies = fontsToAdd => {
    const fontsToActivate = cleanFontsForSave(fontsToAdd);
    const activeFonts = {
      ...fontFamilies,
      // Merge the existing custom fonts with the new fonts.
      custom: mergeFontFamilies(fontFamilies?.custom, fontsToActivate)
    };

    // Activate the fonts by set the new custom fonts array.
    setFontFamilies(activeFonts);
    loadFontsInBrowser(fontsToActivate);
    return activeFonts;
  };

  // Removes the id from the families and faces to avoid saving that to global styles post content.
  const cleanFontsForSave = fonts => {
    return fonts.map(({
      id: _familyDbId,
      fontFace,
      ...font
    }) => ({
      ...font,
      ...(fontFace && fontFace.length > 0 ? {
        fontFace: fontFace.map(({
          id: _faceDbId,
          ...face
        }) => face)
      } : {})
    }));
  };
  const loadFontsInBrowser = fonts => {
    // Add custom fonts to the browser.
    fonts.forEach(font => {
      if (font.fontFace) {
        font.fontFace.forEach(face => {
          // Load font faces just in the iframe because they already are in the document.
          loadFontFaceInBrowser(face, getDisplaySrcFromFontFace(face.src), 'all');
        });
      }
    });
  };
  const toggleActivateFont = (font, face) => {
    var _fontFamilies$font$so2;
    // If the user doesn't have custom fonts defined, include as custom fonts all the theme fonts
    // We want to save as active all the theme fonts at the beginning
    const initialFonts = (_fontFamilies$font$so2 = fontFamilies?.[font.source]) !== null && _fontFamilies$font$so2 !== void 0 ? _fontFamilies$font$so2 : [];
    // Toggles the received font family or font face
    const newFonts = toggleFont(font, face, initialFonts);
    // Updates the font families activated in global settings:
    setFontFamilies({
      ...fontFamilies,
      [font.source]: newFonts
    });
    const isFaceActivated = isFontActivated(font.slug, face?.fontStyle, face?.fontWeight, font.source);
    if (isFaceActivated) {
      loadFontFaceInBrowser(face, getDisplaySrcFromFontFace(face?.src), 'all');
    } else {
      unloadFontFaceInBrowser(face, 'all');
    }
  };
  const loadFontFaceAsset = async fontFace => {
    // If the font doesn't have a src, don't load it.
    if (!fontFace.src) return;
    // Get the src of the font.
    const src = getDisplaySrcFromFontFace(fontFace.src);
    // If the font is already loaded, don't load it again.
    if (!src || loadedFontUrls.has(src)) return;
    // Load the font in the browser.
    loadFontFaceInBrowser(fontFace, src, 'document');
    // Add the font to the loaded fonts list.
    loadedFontUrls.add(src);
  };

  // Font Collections
  const [collections, setFontCollections] = (0,external_wp_element_namespaceObject.useState)([]);
  const getFontCollections = async () => {
    const response = await fetchFontCollections();
    setFontCollections(response);
  };
  const getFontCollection = async slug => {
    try {
      const hasData = !!collections.find(collection => collection.slug === slug)?.font_families;
      if (hasData) return;
      const response = await fetchFontCollection(slug);
      const updatedCollections = collections.map(collection => collection.slug === slug ? {
        ...collection,
        ...response
      } : collection);
      setFontCollections(updatedCollections);
    } catch (e) {
      // eslint-disable-next-line no-console
      console.error(e);
      throw e;
    }
  };
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    getFontCollections();
  }, []);
  return (0,external_React_.createElement)(FontLibraryContext.Provider, {
    value: {
      libraryFontSelected,
      handleSetLibraryFontSelected,
      fontFamilies,
      themeFonts,
      baseThemeFonts,
      customFonts,
      baseCustomFonts,
      isFontActivated,
      getFontFacesActivated,
      loadFontFaceAsset,
      installFonts,
      uninstallFontFamily,
      toggleActivateFont,
      getAvailableFontsOutline,
      modalTabOpen,
      toggleModal,
      refreshLibrary,
      notice,
      setNotice,
      saveFontFamilies,
      fontFamiliesHasChanges,
      isResolvingLibrary,
      hasResolvedLibrary,
      isInstalling,
      collections,
      getFontCollection
    }
  }, children);
}
/* harmony default export */ const context = (FontLibraryProvider);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/font-library-modal/font-demo.js

/**
 * WordPress dependencies
 */



/**
 * Internal dependencies
 */


function getPreviewUrl(fontFace) {
  if (fontFace.preview) {
    return fontFace.preview;
  }
  if (fontFace.src) {
    return Array.isArray(fontFace.src) ? fontFace.src[0] : fontFace.src;
  }
}
function getDisplayFontFace(font) {
  // if this IS a font face return it
  if (font.fontStyle || font.fontWeight) {
    return font;
  }
  // if this is a font family with a collection of font faces
  // return the first one that is normal and 400 OR just the first one
  if (font.fontFace && font.fontFace.length) {
    return font.fontFace.find(face => face.fontStyle === 'normal' && face.fontWeight === '400') || font.fontFace[0];
  }
  // This must be a font family with no font faces
  // return a fake font face
  return {
    fontStyle: 'normal',
    fontWeight: '400',
    fontFamily: font.fontFamily,
    fake: true
  };
}
function FontDemo({
  font,
  text
}) {
  const ref = (0,external_wp_element_namespaceObject.useRef)(null);
  const fontFace = getDisplayFontFace(font);
  const style = getFamilyPreviewStyle(font);
  text = text || font.name;
  const customPreviewUrl = font.preview;
  const [isIntersecting, setIsIntersecting] = (0,external_wp_element_namespaceObject.useState)(false);
  const [isAssetLoaded, setIsAssetLoaded] = (0,external_wp_element_namespaceObject.useState)(false);
  const {
    loadFontFaceAsset
  } = (0,external_wp_element_namespaceObject.useContext)(FontLibraryContext);
  const previewUrl = customPreviewUrl !== null && customPreviewUrl !== void 0 ? customPreviewUrl : getPreviewUrl(fontFace);
  const isPreviewImage = previewUrl && previewUrl.match(/\.(png|jpg|jpeg|gif|svg)$/i);
  const faceStyles = getFacePreviewStyle(fontFace);
  const textDemoStyle = {
    fontSize: '18px',
    lineHeight: 1,
    opacity: isAssetLoaded ? '1' : '0',
    ...style,
    ...faceStyles
  };
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    const observer = new window.IntersectionObserver(([entry]) => {
      setIsIntersecting(entry.isIntersecting);
    }, {});
    observer.observe(ref.current);
    return () => observer.disconnect();
  }, [ref]);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    const loadAsset = async () => {
      if (isIntersecting) {
        if (!isPreviewImage && fontFace.src) {
          await loadFontFaceAsset(fontFace);
        }
        setIsAssetLoaded(true);
      }
    };
    loadAsset();
  }, [fontFace, isIntersecting, loadFontFaceAsset, isPreviewImage]);
  return (0,external_React_.createElement)("div", {
    ref: ref
  }, isPreviewImage ? (0,external_React_.createElement)("img", {
    src: previewUrl,
    loading: "lazy",
    alt: text,
    className: "font-library-modal__font-variant_demo-image"
  }) : (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    style: textDemoStyle,
    className: "font-library-modal__font-variant_demo-text"
  }, text));
}
/* harmony default export */ const font_demo = (FontDemo);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/font-library-modal/font-card.js

/**
 * WordPress dependencies
 */



/**
 * Internal dependencies
 */


function FontCard({
  font,
  onClick,
  variantsText,
  navigatorPath
}) {
  const variantsCount = font.fontFace?.length || 1;
  const style = {
    cursor: !!onClick ? 'pointer' : 'default'
  };
  const navigator = (0,external_wp_components_namespaceObject.__experimentalUseNavigator)();
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    onClick: () => {
      onClick();
      if (navigatorPath) {
        navigator.goTo(navigatorPath);
      }
    },
    style: style,
    className: "font-library-modal__font-card"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Flex, {
    justify: "space-between",
    wrap: false
  }, (0,external_React_.createElement)(font_demo, {
    font: font
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.Flex, {
    justify: "flex-end"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.FlexItem, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    className: "font-library-modal__font-card__count"
  }, variantsText || (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %d: Number of font variants. */
  (0,external_wp_i18n_namespaceObject._n)('%d variant', '%d variants', variantsCount), variantsCount))), (0,external_React_.createElement)(external_wp_components_namespaceObject.FlexItem, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.Icon, {
    icon: chevron_right
  })))));
}
/* harmony default export */ const font_card = (FontCard);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/font-library-modal/library-font-variant.js

/**
 * WordPress dependencies
 */



/**
 * Internal dependencies
 */




function LibraryFontVariant({
  face,
  font
}) {
  const {
    isFontActivated,
    toggleActivateFont
  } = (0,external_wp_element_namespaceObject.useContext)(FontLibraryContext);
  const isInstalled = font?.fontFace?.length > 0 ? isFontActivated(font.slug, face.fontStyle, face.fontWeight, font.source) : isFontActivated(font.slug, null, null, font.source);
  const handleToggleActivation = () => {
    if (font?.fontFace?.length > 0) {
      toggleActivateFont(font, face);
      return;
    }
    toggleActivateFont(font);
  };
  const displayName = font.name + ' ' + getFontFaceVariantName(face);
  const {
    kebabCase
  } = unlock(external_wp_components_namespaceObject.privateApis);
  const checkboxId = kebabCase(`${font.slug}-${getFontFaceVariantName(face)}`);
  return (0,external_React_.createElement)("div", {
    className: "font-library-modal__font-card"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Flex, {
    justify: "flex-start",
    align: "center",
    gap: "1rem"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.CheckboxControl, {
    checked: isInstalled,
    onChange: handleToggleActivation,
    __nextHasNoMarginBottom: true,
    id: checkboxId
  }), (0,external_React_.createElement)("label", {
    htmlFor: checkboxId
  }, (0,external_React_.createElement)(font_demo, {
    font: face,
    text: displayName,
    onClick: handleToggleActivation
  }))));
}
/* harmony default export */ const library_font_variant = (LibraryFontVariant);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/font-library-modal/utils/sort-font-faces.js
function getNumericFontWeight(value) {
  switch (value) {
    case 'normal':
      return 400;
    case 'bold':
      return 700;
    case 'bolder':
      return 500;
    case 'lighter':
      return 300;
    default:
      return parseInt(value, 10);
  }
}
function sortFontFaces(faces) {
  return faces.sort((a, b) => {
    // Ensure 'normal' fontStyle is always first
    if (a.fontStyle === 'normal' && b.fontStyle !== 'normal') return -1;
    if (b.fontStyle === 'normal' && a.fontStyle !== 'normal') return 1;

    // If both fontStyles are the same, sort by fontWeight
    if (a.fontStyle === b.fontStyle) {
      return getNumericFontWeight(a.fontWeight) - getNumericFontWeight(b.fontWeight);
    }

    // Sort other fontStyles alphabetically
    return a.fontStyle.localeCompare(b.fontStyle);
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/font-library-modal/installed-fonts.js

/**
 * WordPress dependencies
 */







/**
 * Internal dependencies
 */





const {
  ProgressBar
} = unlock(external_wp_components_namespaceObject.privateApis);
function InstalledFonts() {
  const {
    baseCustomFonts,
    libraryFontSelected,
    baseThemeFonts,
    handleSetLibraryFontSelected,
    refreshLibrary,
    uninstallFontFamily,
    isResolvingLibrary,
    isInstalling,
    saveFontFamilies,
    getFontFacesActivated,
    fontFamiliesHasChanges,
    notice,
    setNotice,
    fontFamilies
  } = (0,external_wp_element_namespaceObject.useContext)(FontLibraryContext);
  const [isConfirmDeleteOpen, setIsConfirmDeleteOpen] = (0,external_wp_element_namespaceObject.useState)(false);
  const customFontFamilyId = libraryFontSelected?.source === 'custom' && libraryFontSelected?.id;
  const canUserDelete = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      canUser
    } = select(external_wp_coreData_namespaceObject.store);
    return customFontFamilyId && canUser('delete', 'font-families', customFontFamilyId);
  }, [customFontFamilyId]);
  const shouldDisplayDeleteButton = !!libraryFontSelected && libraryFontSelected?.source !== 'theme' && canUserDelete;
  const handleUninstallClick = () => {
    setIsConfirmDeleteOpen(true);
  };
  const getFontFacesToDisplay = font => {
    if (!font) {
      return [];
    }
    if (!font.fontFace || !font.fontFace.length) {
      return [{
        fontFamily: font.fontFamily,
        fontStyle: 'normal',
        fontWeight: '400'
      }];
    }
    return sortFontFaces(font.fontFace);
  };
  const getFontCardVariantsText = font => {
    const variantsInstalled = font?.fontFace?.length > 0 ? font.fontFace.length : 1;
    const variantsActive = getFontFacesActivated(font.slug, font.source).length;
    return (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: 1: Active font variants, 2: Total font variants. */
    (0,external_wp_i18n_namespaceObject.__)('%1$s/%2$s variants active'), variantsActive, variantsInstalled);
  };
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    handleSetLibraryFontSelected(libraryFontSelected);
    refreshLibrary();
  }, []);
  return (0,external_React_.createElement)("div", {
    className: "font-library-modal__tabpanel-layout"
  }, isResolvingLibrary && (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    align: "center"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, null), (0,external_React_.createElement)(external_wp_components_namespaceObject.Spinner, null), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, null)), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalNavigatorProvider, {
    initialPath: libraryFontSelected ? '/fontFamily' : '/'
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalNavigatorScreen, {
    path: "/"
  }, notice && (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    margin: 1
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.Notice, {
    status: notice.type,
    onRemove: () => setNotice(null)
  }, notice.message), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    margin: 1
  })), baseCustomFonts.length > 0 && (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    className: "font-library-modal__subtitle"
  }, (0,external_wp_i18n_namespaceObject.__)('Installed Fonts')), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    margin: 2
  }), baseCustomFonts.map(font => (0,external_React_.createElement)(font_card, {
    font: font,
    key: font.slug,
    navigatorPath: '/fontFamily',
    variantsText: getFontCardVariantsText(font),
    onClick: () => {
      handleSetLibraryFontSelected(font);
    }
  })), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    margin: 8
  })), baseThemeFonts.length > 0 && (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    className: "font-library-modal__subtitle"
  }, (0,external_wp_i18n_namespaceObject.__)('Theme Fonts')), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    margin: 2
  }), baseThemeFonts.map(font => (0,external_React_.createElement)(font_card, {
    font: font,
    key: font.slug,
    navigatorPath: '/fontFamily',
    variantsText: getFontCardVariantsText(font),
    onClick: () => {
      handleSetLibraryFontSelected(font);
    }
  })))), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalNavigatorScreen, {
    path: "/fontFamily"
  }, (0,external_React_.createElement)(ConfirmDeleteDialog, {
    font: libraryFontSelected,
    isOpen: isConfirmDeleteOpen,
    setIsOpen: setIsConfirmDeleteOpen,
    setNotice: setNotice,
    uninstallFontFamily: uninstallFontFamily,
    handleSetLibraryFontSelected: handleSetLibraryFontSelected
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.Flex, {
    justify: "flex-start"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalNavigatorToParentButton, {
    icon: chevron_left,
    isSmall: true,
    onClick: () => {
      handleSetLibraryFontSelected(null);
    },
    "aria-label": (0,external_wp_i18n_namespaceObject.__)('Navigate to the previous view')
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHeading, {
    level: 2,
    size: 13,
    className: "edit-site-global-styles-header"
  }, libraryFontSelected?.name)), notice && (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    margin: 1
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.Notice, {
    status: notice.type,
    onRemove: () => setNotice(null)
  }, notice.message), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    margin: 1
  })), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    margin: 4
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, null, (0,external_wp_i18n_namespaceObject.__)('Choose font variants. Keep in mind that too many variants could make your site slower.')), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    margin: 4
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    spacing: 0
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    margin: 8
  }), getFontFacesToDisplay(libraryFontSelected).map((face, i) => (0,external_React_.createElement)(library_font_variant, {
    font: libraryFontSelected,
    face: face,
    key: `face${i}`
  }))))), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    justify: "flex-end",
    className: "font-library-modal__tabpanel-layout__footer"
  }, isInstalling && (0,external_React_.createElement)(ProgressBar, null), shouldDisplayDeleteButton && (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    isDestructive: true,
    variant: "tertiary",
    onClick: handleUninstallClick
  }, (0,external_wp_i18n_namespaceObject.__)('Delete')), (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    variant: "primary",
    onClick: () => {
      saveFontFamilies(fontFamilies);
    },
    disabled: !fontFamiliesHasChanges,
    __experimentalIsFocusable: true
  }, (0,external_wp_i18n_namespaceObject.__)('Update'))));
}
function ConfirmDeleteDialog({
  font,
  isOpen,
  setIsOpen,
  setNotice,
  uninstallFontFamily,
  handleSetLibraryFontSelected
}) {
  const navigator = (0,external_wp_components_namespaceObject.__experimentalUseNavigator)();
  const handleConfirmUninstall = async () => {
    setNotice(null);
    setIsOpen(false);
    try {
      await uninstallFontFamily(font);
      navigator.goBack();
      handleSetLibraryFontSelected(null);
      setNotice({
        type: 'success',
        message: (0,external_wp_i18n_namespaceObject.__)('Font family uninstalled successfully.')
      });
    } catch (error) {
      setNotice({
        type: 'error',
        message: (0,external_wp_i18n_namespaceObject.__)('There was an error uninstalling the font family. ') + error.message
      });
    }
  };
  const handleCancelUninstall = () => {
    setIsOpen(false);
  };
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalConfirmDialog, {
    isOpen: isOpen,
    cancelButtonText: (0,external_wp_i18n_namespaceObject.__)('Cancel'),
    confirmButtonText: (0,external_wp_i18n_namespaceObject.__)('Delete'),
    onCancel: handleCancelUninstall,
    onConfirm: handleConfirmUninstall
  }, font && (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: Name of the font. */
  (0,external_wp_i18n_namespaceObject.__)('Are you sure you want to delete "%s" font and all its variants and assets?'), font.name));
}
/* harmony default export */ const installed_fonts = (InstalledFonts);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/font-library-modal/utils/filter-fonts.js
/**
 * Filters a list of fonts based on the specified filters.
 *
 * This function filters a given array of fonts based on the criteria provided in the filters object.
 * It supports filtering by category and a search term. If the category is provided and not equal to 'all',
 * the function filters the fonts array to include only those fonts that belong to the specified category.
 * Additionally, if a search term is provided, it filters the fonts array to include only those fonts
 * whose name includes the search term, case-insensitively.
 *
 * @param {Array}  fonts   Array of font objects in font-collection schema fashion to be filtered. Each font object should have a 'categories' property and a 'font_family_settings' property with a 'name' key.
 * @param {Object} filters Object containing the filter criteria. It should have a 'category' key and/or a 'search' key.
 *                         The 'category' key is a string representing the category to filter by.
 *                         The 'search' key is a string representing the search term to filter by.
 * @return {Array} Array of filtered font objects based on the provided criteria.
 */
function filterFonts(fonts, filters) {
  const {
    category,
    search
  } = filters;
  let filteredFonts = fonts || [];
  if (category && category !== 'all') {
    filteredFonts = filteredFonts.filter(font => font.categories.indexOf(category) !== -1);
  }
  if (search) {
    filteredFonts = filteredFonts.filter(font => font.font_family_settings.name.toLowerCase().includes(search.toLowerCase()));
  }
  return filteredFonts;
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/font-library-modal/utils/fonts-outline.js
function getFontsOutline(fonts) {
  return fonts.reduce((acc, font) => ({
    ...acc,
    [font.slug]: (font?.fontFace || []).reduce((faces, face) => ({
      ...faces,
      [`${face.fontStyle}-${face.fontWeight}`]: true
    }), {})
  }), {});
}
function isFontFontFaceInOutline(slug, face, outline) {
  if (!face) {
    return !!outline[slug];
  }
  return !!outline[slug]?.[`${face.fontStyle}-${face.fontWeight}`];
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/font-library-modal/google-fonts-confirm-dialog.js

/**
 * WordPress dependencies
 */


function GoogleFontsConfirmDialog() {
  const handleConfirm = () => {
    // eslint-disable-next-line no-undef
    window.localStorage.setItem('wp-font-library-google-fonts-permission', 'true');
    window.dispatchEvent(new Event('storage'));
  };
  return (0,external_React_.createElement)("div", {
    className: "font-library__google-fonts-confirm"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Card, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.CardBody, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    as: "h3"
  }, (0,external_wp_i18n_namespaceObject.__)('Connect to Google Fonts')), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    margin: 6
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    as: "p"
  }, (0,external_wp_i18n_namespaceObject.__)('To install fonts from Google you must give permission to connect directly to Google servers. The fonts you install will be downloaded from Google and stored on your site. Your site will then use these locally-hosted fonts.')), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    margin: 3
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    as: "p"
  }, (0,external_wp_i18n_namespaceObject.__)('You can alternatively upload files directly on the Upload tab.')), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    margin: 6
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    variant: "primary",
    onClick: handleConfirm
  }, (0,external_wp_i18n_namespaceObject.__)('Allow access to Google Fonts')))));
}
/* harmony default export */ const google_fonts_confirm_dialog = (GoogleFontsConfirmDialog);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/font-library-modal/collection-font-variant.js

/**
 * WordPress dependencies
 */


/**
 * Internal dependencies
 */



function CollectionFontVariant({
  face,
  font,
  handleToggleVariant,
  selected
}) {
  const handleToggleActivation = () => {
    if (font?.fontFace) {
      handleToggleVariant(font, face);
      return;
    }
    handleToggleVariant(font);
  };
  const displayName = font.name + ' ' + getFontFaceVariantName(face);
  const {
    kebabCase
  } = unlock(external_wp_components_namespaceObject.privateApis);
  const checkboxId = kebabCase(`${font.slug}-${getFontFaceVariantName(face)}`);
  return (0,external_React_.createElement)("div", {
    className: "font-library-modal__font-card"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Flex, {
    justify: "flex-start",
    align: "center",
    gap: "1rem"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.CheckboxControl, {
    checked: selected,
    onChange: handleToggleActivation,
    __nextHasNoMarginBottom: true,
    id: checkboxId
  }), (0,external_React_.createElement)("label", {
    htmlFor: checkboxId
  }, (0,external_React_.createElement)(font_demo, {
    font: face,
    text: displayName,
    onClick: handleToggleActivation
  }))));
}
/* harmony default export */ const collection_font_variant = (CollectionFontVariant);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/font-library-modal/font-collection.js

/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */









const DEFAULT_CATEGORY = {
  slug: 'all',
  name: (0,external_wp_i18n_namespaceObject._x)('All', 'font categories')
};
const LOCAL_STORAGE_ITEM = 'wp-font-library-google-fonts-permission';
const MIN_WINDOW_HEIGHT = 500;
function FontCollection({
  slug
}) {
  var _selectedCollection$c;
  const requiresPermission = slug === 'google-fonts';
  const getGoogleFontsPermissionFromStorage = () => {
    return window.localStorage.getItem(LOCAL_STORAGE_ITEM) === 'true';
  };
  const [selectedFont, setSelectedFont] = (0,external_wp_element_namespaceObject.useState)(null);
  const [fontsToInstall, setFontsToInstall] = (0,external_wp_element_namespaceObject.useState)([]);
  const [page, setPage] = (0,external_wp_element_namespaceObject.useState)(1);
  const [filters, setFilters] = (0,external_wp_element_namespaceObject.useState)({});
  const [renderConfirmDialog, setRenderConfirmDialog] = (0,external_wp_element_namespaceObject.useState)(requiresPermission && !getGoogleFontsPermissionFromStorage());
  const {
    collections,
    getFontCollection,
    installFonts,
    isInstalling,
    notice,
    setNotice
  } = (0,external_wp_element_namespaceObject.useContext)(FontLibraryContext);
  const selectedCollection = collections.find(collection => collection.slug === slug);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    const handleStorage = () => {
      setRenderConfirmDialog(requiresPermission && !getGoogleFontsPermissionFromStorage());
    };
    handleStorage();
    window.addEventListener('storage', handleStorage);
    return () => window.removeEventListener('storage', handleStorage);
  }, [slug, requiresPermission]);
  const revokeAccess = () => {
    window.localStorage.setItem(LOCAL_STORAGE_ITEM, 'false');
    window.dispatchEvent(new Event('storage'));
  };
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    const fetchFontCollection = async () => {
      try {
        await getFontCollection(slug);
        resetFilters();
      } catch (e) {
        if (!notice) {
          setNotice({
            type: 'error',
            message: e?.message
          });
        }
      }
    };
    fetchFontCollection();
  }, [slug, getFontCollection, setNotice, notice]);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    setSelectedFont(null);
    setNotice(null);
  }, [slug, setNotice]);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    // If the selected fonts change, reset the selected fonts to install
    setFontsToInstall([]);
  }, [selectedFont]);
  const collectionFonts = (0,external_wp_element_namespaceObject.useMemo)(() => {
    var _selectedCollection$f;
    return (_selectedCollection$f = selectedCollection?.font_families) !== null && _selectedCollection$f !== void 0 ? _selectedCollection$f : [];
  }, [selectedCollection]);
  const collectionCategories = (_selectedCollection$c = selectedCollection?.categories) !== null && _selectedCollection$c !== void 0 ? _selectedCollection$c : [];
  const categories = [DEFAULT_CATEGORY, ...collectionCategories];
  const fonts = (0,external_wp_element_namespaceObject.useMemo)(() => filterFonts(collectionFonts, filters), [collectionFonts, filters]);

  // NOTE: The height of the font library modal unavailable to use for rendering font family items is roughly 417px
  // The height of each font family item is 61px.
  const windowHeight = Math.max(window.innerHeight, MIN_WINDOW_HEIGHT);
  const pageSize = Math.floor((windowHeight - 417) / 61);
  const totalPages = Math.ceil(fonts.length / pageSize);
  const itemsStart = (page - 1) * pageSize;
  const itemsLimit = page * pageSize;
  const items = fonts.slice(itemsStart, itemsLimit);
  const handleCategoryFilter = category => {
    setFilters({
      ...filters,
      category
    });
    setPage(1);
  };
  const handleUpdateSearchInput = value => {
    setFilters({
      ...filters,
      search: value
    });
    setPage(1);
  };
  const debouncedUpdateSearchInput = (0,external_wp_compose_namespaceObject.debounce)(handleUpdateSearchInput, 300);
  const resetFilters = () => {
    setFilters({});
    setPage(1);
  };
  const resetSearch = () => {
    setFilters({
      ...filters,
      search: ''
    });
    setPage(1);
  };
  const handleToggleVariant = (font, face) => {
    const newFontsToInstall = toggleFont(font, face, fontsToInstall);
    setFontsToInstall(newFontsToInstall);
  };
  const fontToInstallOutline = getFontsOutline(fontsToInstall);
  const resetFontsToInstall = () => {
    setFontsToInstall([]);
  };
  const handleInstall = async () => {
    setNotice(null);
    const fontFamily = fontsToInstall[0];
    try {
      if (fontFamily?.fontFace) {
        await Promise.all(fontFamily.fontFace.map(async fontFace => {
          if (fontFace.src) {
            fontFace.file = await downloadFontFaceAssets(fontFace.src);
          }
        }));
      }
    } catch (error) {
      // If any of the fonts fail to download,
      // show an error notice and stop the request from being sent.
      setNotice({
        type: 'error',
        message: (0,external_wp_i18n_namespaceObject.__)('Error installing the fonts, could not be downloaded.')
      });
      return;
    }
    try {
      await installFonts([fontFamily]);
      setNotice({
        type: 'success',
        message: (0,external_wp_i18n_namespaceObject.__)('Fonts were installed successfully.')
      });
    } catch (error) {
      setNotice({
        type: 'error',
        message: error.message
      });
    }
    resetFontsToInstall();
  };
  const getSortedFontFaces = fontFamily => {
    if (!fontFamily) {
      return [];
    }
    if (!fontFamily.fontFace || !fontFamily.fontFace.length) {
      return [{
        fontFamily: fontFamily.fontFamily,
        fontStyle: 'normal',
        fontWeight: '400'
      }];
    }
    return sortFontFaces(fontFamily.fontFace);
  };
  if (renderConfirmDialog) {
    return (0,external_React_.createElement)(google_fonts_confirm_dialog, null);
  }
  const ActionsComponent = () => {
    if (slug !== 'google-fonts' || renderConfirmDialog || selectedFont) {
      return null;
    }
    return (0,external_React_.createElement)(external_wp_components_namespaceObject.DropdownMenu, {
      icon: more_vertical,
      label: (0,external_wp_i18n_namespaceObject.__)('Actions'),
      popoverProps: {
        position: 'bottom left'
      },
      controls: [{
        title: (0,external_wp_i18n_namespaceObject.__)('Revoke access to Google Fonts'),
        onClick: revokeAccess
      }]
    });
  };
  return (0,external_React_.createElement)("div", {
    className: "font-library-modal__tabpanel-layout"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalNavigatorProvider, {
    initialPath: "/",
    className: "font-library-modal__tabpanel-layout"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalNavigatorScreen, {
    path: "/"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    justify: "space-between"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHeading, {
    level: 2,
    size: 13
  }, selectedCollection.name), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, null, selectedCollection.description)), (0,external_React_.createElement)(ActionsComponent, null)), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    margin: 4
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.Flex, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.FlexItem, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalInputControl, {
    value: filters.search,
    placeholder: (0,external_wp_i18n_namespaceObject.__)('Font name…'),
    label: (0,external_wp_i18n_namespaceObject.__)('Search'),
    onChange: debouncedUpdateSearchInput,
    prefix: (0,external_React_.createElement)(external_wp_components_namespaceObject.Icon, {
      icon: library_search
    }),
    suffix: filters?.search ? (0,external_React_.createElement)(external_wp_components_namespaceObject.Icon, {
      icon: close_small,
      onClick: resetSearch
    }) : null
  })), (0,external_React_.createElement)(external_wp_components_namespaceObject.FlexItem, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.SelectControl, {
    label: (0,external_wp_i18n_namespaceObject.__)('Category'),
    value: filters.category,
    onChange: handleCategoryFilter
  }, categories && categories.map(category => (0,external_React_.createElement)("option", {
    value: category.slug,
    key: category.slug
  }, category.name))))), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    margin: 4
  }), !selectedCollection?.font_families && !notice && (0,external_React_.createElement)(external_wp_components_namespaceObject.Spinner, null), !!selectedCollection?.font_families?.length && !fonts.length && (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, null, (0,external_wp_i18n_namespaceObject.__)('No fonts found. Try with a different search term')), (0,external_React_.createElement)("div", {
    className: "font-library-modal__fonts-grid__main"
  }, items.map(font => (0,external_React_.createElement)(font_card, {
    key: font.font_family_settings.slug,
    font: font.font_family_settings,
    navigatorPath: '/fontFamily',
    onClick: () => {
      setSelectedFont(font.font_family_settings);
    }
  })))), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalNavigatorScreen, {
    path: "/fontFamily"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Flex, {
    justify: "flex-start"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalNavigatorToParentButton, {
    icon: chevron_left,
    isSmall: true,
    onClick: () => {
      setSelectedFont(null);
      setNotice(null);
    },
    "aria-label": (0,external_wp_i18n_namespaceObject.__)('Navigate to the previous view')
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHeading, {
    level: 2,
    size: 13,
    className: "edit-site-global-styles-header"
  }, selectedFont?.name)), notice && (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    margin: 1
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.Notice, {
    status: notice.type,
    onRemove: () => setNotice(null)
  }, notice.message), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    margin: 1
  })), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    margin: 4
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, null, " ", (0,external_wp_i18n_namespaceObject.__)('Select font variants to install.'), " "), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    margin: 4
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    spacing: 0
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    margin: 8
  }), getSortedFontFaces(selectedFont).map((face, i) => (0,external_React_.createElement)(collection_font_variant, {
    font: selectedFont,
    face: face,
    key: `face${i}`,
    handleToggleVariant: handleToggleVariant,
    selected: isFontFontFaceInOutline(selectedFont.slug, selectedFont.fontFace ? face : null,
    // If the font has no fontFace, we want to check if the font is in the outline
    fontToInstallOutline)
  }))), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    margin: 16
  }))), selectedFont && (0,external_React_.createElement)(external_wp_components_namespaceObject.Flex, {
    justify: "flex-end",
    className: "font-library-modal__tabpanel-layout__footer"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    variant: "primary",
    onClick: handleInstall,
    isBusy: isInstalling,
    disabled: fontsToInstall.length === 0 || isInstalling,
    __experimentalIsFocusable: true
  }, (0,external_wp_i18n_namespaceObject.__)('Install'))), !selectedFont && (0,external_React_.createElement)(external_wp_components_namespaceObject.Flex, {
    justify: "center",
    className: "font-library-modal__tabpanel-layout__footer"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    label: (0,external_wp_i18n_namespaceObject.__)('First page'),
    size: "compact",
    onClick: () => setPage(1),
    disabled: page === 1,
    __experimentalIsFocusable: true
  }, (0,external_React_.createElement)("span", null, "\xAB")), (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    label: (0,external_wp_i18n_namespaceObject.__)('Previous page'),
    size: "compact",
    onClick: () => setPage(page - 1),
    disabled: page === 1,
    __experimentalIsFocusable: true
  }, (0,external_React_.createElement)("span", null, "\u2039")), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    justify: "flex-start",
    expanded: false,
    spacing: 2
  }, (0,external_wp_element_namespaceObject.createInterpolateElement)((0,external_wp_i18n_namespaceObject.sprintf)(
  // translators: %s: Total number of pages.
  (0,external_wp_i18n_namespaceObject._x)('Page <CurrentPageControl /> of %s', 'paging'), totalPages), {
    CurrentPageControl: (0,external_React_.createElement)(external_wp_components_namespaceObject.SelectControl, {
      "aria-label": (0,external_wp_i18n_namespaceObject.__)('Current page'),
      value: page,
      options: [...Array(totalPages)].map((e, i) => {
        return {
          label: i + 1,
          value: i + 1
        };
      }),
      onChange: newPage => setPage(parseInt(newPage)),
      size: 'compact',
      __nextHasNoMarginBottom: true
    })
  })), (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    label: (0,external_wp_i18n_namespaceObject.__)('Next page'),
    size: "compact",
    onClick: () => setPage(page + 1),
    disabled: page === totalPages,
    __experimentalIsFocusable: true
  }, (0,external_React_.createElement)("span", null, "\u203A")), (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    label: (0,external_wp_i18n_namespaceObject.__)('Last page'),
    size: "compact",
    onClick: () => setPage(totalPages),
    disabled: page === totalPages,
    __experimentalIsFocusable: true
  }, (0,external_React_.createElement)("span", null, "\xBB"))));
}
/* harmony default export */ const font_collection = (FontCollection);

// EXTERNAL MODULE: ./node_modules/@wordpress/edit-site/lib/unbrotli.js
var unbrotli = __webpack_require__(8572);
var unbrotli_default = /*#__PURE__*/__webpack_require__.n(unbrotli);
// EXTERNAL MODULE: ./node_modules/@wordpress/edit-site/lib/inflate.js
var inflate = __webpack_require__(4660);
var inflate_default = /*#__PURE__*/__webpack_require__.n(inflate);
;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/lib/lib-font.browser.js
/* eslint eslint-comments/no-unlimited-disable: 0 */
/* eslint-disable */
// import pako from 'pako';



let fetchFunction = globalThis.fetch;
// if ( ! fetchFunction ) {
// 	let backlog = [];
// 	fetchFunction = globalThis.fetch = ( ...args ) =>
// 		new Promise( ( resolve, reject ) => {
// 			backlog.push( { args: args, resolve: resolve, reject: reject } );
// 		} );
// 	import( 'fs' )
// 		.then( ( fs ) => {
// 			fetchFunction = globalThis.fetch = async function ( path ) {
// 				return new Promise( ( resolve, reject ) => {
// 					fs.readFile( path, ( err, data ) => {
// 						if ( err ) return reject( err );
// 						resolve( { ok: true, arrayBuffer: () => data.buffer } );
// 					} );
// 				} );
// 			};
// 			while ( backlog.length ) {
// 				let instruction = backlog.shift();
// 				fetchFunction( ...instruction.args )
// 					.then( ( data ) => instruction.resolve( data ) )
// 					.catch( ( err ) => instruction.reject( err ) );
// 			}
// 		} )
// 		.catch( ( err ) => {
// 			console.error( err );
// 			throw new Error(
// 				`lib-font cannot run unless either the Fetch API or Node's filesystem module is available.`
// 			);
// 		} );
// }
class lib_font_browser_Event {
	constructor( type, detail = {}, msg ) {
		this.type = type;
		this.detail = detail;
		this.msg = msg;
		Object.defineProperty( this, `__mayPropagate`, {
			enumerable: false,
			writable: true,
		} );
		this.__mayPropagate = true;
	}
	preventDefault() {}
	stopPropagation() {
		this.__mayPropagate = false;
	}
	valueOf() {
		return this;
	}
	toString() {
		return this.msg
			? `[${ this.type } event]: ${ this.msg }`
			: `[${ this.type } event]`;
	}
}
class EventManager {
	constructor() {
		this.listeners = {};
	}
	addEventListener( type, listener, useCapture ) {
		let bin = this.listeners[ type ] || [];
		if ( useCapture ) bin.unshift( listener );
		else bin.push( listener );
		this.listeners[ type ] = bin;
	}
	removeEventListener( type, listener ) {
		let bin = this.listeners[ type ] || [];
		let pos = bin.findIndex( ( e ) => e === listener );
		if ( pos > -1 ) {
			bin.splice( pos, 1 );
			this.listeners[ type ] = bin;
		}
	}
	dispatch( event ) {
		let bin = this.listeners[ event.type ];
		if ( bin ) {
			for ( let l = 0, e = bin.length; l < e; l++ ) {
				if ( ! event.__mayPropagate ) break;
				bin[ l ]( event );
			}
		}
	}
}
const startDate = new Date( `1904-01-01T00:00:00+0000` ).getTime();
function asText( data ) {
	return Array.from( data )
		.map( ( v ) => String.fromCharCode( v ) )
		.join( `` );
}
class Parser {
	constructor( dict, dataview, name ) {
		this.name = ( name || dict.tag || `` ).trim();
		this.length = dict.length;
		this.start = dict.offset;
		this.offset = 0;
		this.data = dataview;
		[
			`getInt8`,
			`getUint8`,
			`getInt16`,
			`getUint16`,
			`getInt32`,
			`getUint32`,
			`getBigInt64`,
			`getBigUint64`,
		].forEach( ( name ) => {
			let fn = name.replace( /get(Big)?/, '' ).toLowerCase();
			let increment = parseInt( name.replace( /[^\d]/g, '' ) ) / 8;
			Object.defineProperty( this, fn, {
				get: () => this.getValue( name, increment ),
			} );
		} );
	}
	get currentPosition() {
		return this.start + this.offset;
	}
	set currentPosition( position ) {
		this.start = position;
		this.offset = 0;
	}
	skip( n = 0, bits = 8 ) {
		this.offset += ( n * bits ) / 8;
	}
	getValue( type, increment ) {
		let pos = this.start + this.offset;
		this.offset += increment;
		try {
			return this.data[ type ]( pos );
		} catch ( e ) {
			console.error( `parser`, type, increment, this );
			console.error( `parser`, this.start, this.offset );
			throw e;
		}
	}
	flags( n ) {
		if ( n === 8 || n === 16 || n === 32 || n === 64 ) {
			return this[ `uint${ n }` ]
				.toString( 2 )
				.padStart( n, 0 )
				.split( `` )
				.map( ( v ) => v === '1' );
		}
		console.error(
			`Error parsing flags: flag types can only be 1, 2, 4, or 8 bytes long`
		);
		console.trace();
	}
	get tag() {
		const t = this.uint32;
		return asText( [
			( t >> 24 ) & 255,
			( t >> 16 ) & 255,
			( t >> 8 ) & 255,
			t & 255,
		] );
	}
	get fixed() {
		let major = this.int16;
		let minor = Math.round( ( 1e3 * this.uint16 ) / 65356 );
		return major + minor / 1e3;
	}
	get legacyFixed() {
		let major = this.uint16;
		let minor = this.uint16.toString( 16 ).padStart( 4, 0 );
		return parseFloat( `${ major }.${ minor }` );
	}
	get uint24() {
		return ( this.uint8 << 16 ) + ( this.uint8 << 8 ) + this.uint8;
	}
	get uint128() {
		let value = 0;
		for ( let i = 0; i < 5; i++ ) {
			let byte = this.uint8;
			value = value * 128 + ( byte & 127 );
			if ( byte < 128 ) break;
		}
		return value;
	}
	get longdatetime() {
		return new Date( startDate + 1e3 * parseInt( this.int64.toString() ) );
	}
	get fword() {
		return this.int16;
	}
	get ufword() {
		return this.uint16;
	}
	get Offset16() {
		return this.uint16;
	}
	get Offset32() {
		return this.uint32;
	}
	get F2DOT14() {
		const bits = p.uint16;
		const integer = [ 0, 1, -2, -1 ][ bits >> 14 ];
		const fraction = bits & 16383;
		return integer + fraction / 16384;
	}
	verifyLength() {
		if ( this.offset != this.length ) {
			console.error(
				`unexpected parsed table size (${ this.offset }) for "${ this.name }" (expected ${ this.length })`
			);
		}
	}
	readBytes( n = 0, position = 0, bits = 8, signed = false ) {
		n = n || this.length;
		if ( n === 0 ) return [];
		if ( position ) this.currentPosition = position;
		const fn = `${ signed ? `` : `u` }int${ bits }`,
			slice = [];
		while ( n-- ) slice.push( this[ fn ] );
		return slice;
	}
}
class ParsedData {
	constructor( parser ) {
		const pGetter = { enumerable: false, get: () => parser };
		Object.defineProperty( this, `parser`, pGetter );
		const start = parser.currentPosition;
		const startGetter = { enumerable: false, get: () => start };
		Object.defineProperty( this, `start`, startGetter );
	}
	load( struct ) {
		Object.keys( struct ).forEach( ( p ) => {
			let props = Object.getOwnPropertyDescriptor( struct, p );
			if ( props.get ) {
				this[ p ] = props.get.bind( this );
			} else if ( props.value !== undefined ) {
				this[ p ] = props.value;
			}
		} );
		if ( this.parser.length ) {
			this.parser.verifyLength();
		}
	}
}
class SimpleTable extends ParsedData {
	constructor( dict, dataview, name ) {
		const { parser: parser, start: start } = super(
			new Parser( dict, dataview, name )
		);
		const pGetter = { enumerable: false, get: () => parser };
		Object.defineProperty( this, `p`, pGetter );
		const startGetter = { enumerable: false, get: () => start };
		Object.defineProperty( this, `tableStart`, startGetter );
	}
}
function lazy$1( object, property, getter ) {
	let val;
	Object.defineProperty( object, property, {
		get: () => {
			if ( val ) return val;
			val = getter();
			return val;
		},
		enumerable: true,
	} );
}
class SFNT extends SimpleTable {
	constructor( font, dataview, createTable ) {
		const { p: p } = super( { offset: 0, length: 12 }, dataview, `sfnt` );
		this.version = p.uint32;
		this.numTables = p.uint16;
		this.searchRange = p.uint16;
		this.entrySelector = p.uint16;
		this.rangeShift = p.uint16;
		p.verifyLength();
		this.directory = [ ...new Array( this.numTables ) ].map(
			( _ ) => new TableRecord( p )
		);
		this.tables = {};
		this.directory.forEach( ( entry ) => {
			const getter = () =>
				createTable(
					this.tables,
					{
						tag: entry.tag,
						offset: entry.offset,
						length: entry.length,
					},
					dataview
				);
			lazy$1( this.tables, entry.tag.trim(), getter );
		} );
	}
}
class TableRecord {
	constructor( p ) {
		this.tag = p.tag;
		this.checksum = p.uint32;
		this.offset = p.uint32;
		this.length = p.uint32;
	}
}
const gzipDecode = (inflate_default()).inflate || undefined;
let nativeGzipDecode = undefined;
// if ( ! gzipDecode ) {
// 	import( 'zlib' ).then( ( zlib ) => {
// 		nativeGzipDecode = ( buffer ) => zlib.unzipSync( buffer );
// 	} );
// }
class WOFF$1 extends SimpleTable {
	constructor( font, dataview, createTable ) {
		const { p: p } = super( { offset: 0, length: 44 }, dataview, `woff` );
		this.signature = p.tag;
		this.flavor = p.uint32;
		this.length = p.uint32;
		this.numTables = p.uint16;
		p.uint16;
		this.totalSfntSize = p.uint32;
		this.majorVersion = p.uint16;
		this.minorVersion = p.uint16;
		this.metaOffset = p.uint32;
		this.metaLength = p.uint32;
		this.metaOrigLength = p.uint32;
		this.privOffset = p.uint32;
		this.privLength = p.uint32;
		p.verifyLength();
		this.directory = [ ...new Array( this.numTables ) ].map(
			( _ ) => new WoffTableDirectoryEntry( p )
		);
		buildWoffLazyLookups( this, dataview, createTable );
	}
}
class WoffTableDirectoryEntry {
	constructor( p ) {
		this.tag = p.tag;
		this.offset = p.uint32;
		this.compLength = p.uint32;
		this.origLength = p.uint32;
		this.origChecksum = p.uint32;
	}
}
function buildWoffLazyLookups( woff, dataview, createTable ) {
	woff.tables = {};
	woff.directory.forEach( ( entry ) => {
		lazy$1( woff.tables, entry.tag.trim(), () => {
			let offset = 0;
			let view = dataview;
			if ( entry.compLength !== entry.origLength ) {
				const data = dataview.buffer.slice(
					entry.offset,
					entry.offset + entry.compLength
				);
				let unpacked;
				if ( gzipDecode ) {
					unpacked = gzipDecode( new Uint8Array( data ) );
				} else if ( nativeGzipDecode ) {
					unpacked = nativeGzipDecode( new Uint8Array( data ) );
				} else {
					const msg = `no brotli decoder available to decode WOFF2 font`;
					if ( font.onerror ) font.onerror( msg );
					throw new Error( msg );
				}
				view = new DataView( unpacked.buffer );
			} else {
				offset = entry.offset;
			}
			return createTable(
				woff.tables,
				{ tag: entry.tag, offset: offset, length: entry.origLength },
				view
			);
		} );
	} );
}
const brotliDecode = (unbrotli_default());
let nativeBrotliDecode = undefined;
// if ( ! brotliDecode ) {
// 	import( 'zlib' ).then( ( zlib ) => {
// 		nativeBrotliDecode = ( buffer ) => zlib.brotliDecompressSync( buffer );
// 	} );
// }
class WOFF2$1 extends SimpleTable {
	constructor( font, dataview, createTable ) {
		const { p: p } = super( { offset: 0, length: 48 }, dataview, `woff2` );
		this.signature = p.tag;
		this.flavor = p.uint32;
		this.length = p.uint32;
		this.numTables = p.uint16;
		p.uint16;
		this.totalSfntSize = p.uint32;
		this.totalCompressedSize = p.uint32;
		this.majorVersion = p.uint16;
		this.minorVersion = p.uint16;
		this.metaOffset = p.uint32;
		this.metaLength = p.uint32;
		this.metaOrigLength = p.uint32;
		this.privOffset = p.uint32;
		this.privLength = p.uint32;
		p.verifyLength();
		this.directory = [ ...new Array( this.numTables ) ].map(
			( _ ) => new Woff2TableDirectoryEntry( p )
		);
		let dictOffset = p.currentPosition;
		this.directory[ 0 ].offset = 0;
		this.directory.forEach( ( e, i ) => {
			let next = this.directory[ i + 1 ];
			if ( next ) {
				next.offset =
					e.offset +
					( e.transformLength !== undefined
						? e.transformLength
						: e.origLength );
			}
		} );
		let decoded;
		let buffer = dataview.buffer.slice( dictOffset );
		if ( brotliDecode ) {
			decoded = brotliDecode( new Uint8Array( buffer ) );
		} else if ( nativeBrotliDecode ) {
			decoded = new Uint8Array( nativeBrotliDecode( buffer ) );
		} else {
			const msg = `no brotli decoder available to decode WOFF2 font`;
			if ( font.onerror ) font.onerror( msg );
			throw new Error( msg );
		}
		buildWoff2LazyLookups( this, decoded, createTable );
	}
}
class Woff2TableDirectoryEntry {
	constructor( p ) {
		this.flags = p.uint8;
		const tagNumber = ( this.tagNumber = this.flags & 63 );
		if ( tagNumber === 63 ) {
			this.tag = p.tag;
		} else {
			this.tag = getWOFF2Tag( tagNumber );
		}
		const transformVersion = ( this.transformVersion =
			( this.flags & 192 ) >> 6 );
		let hasTransforms = transformVersion !== 0;
		if ( this.tag === `glyf` || this.tag === `loca` ) {
			hasTransforms = this.transformVersion !== 3;
		}
		this.origLength = p.uint128;
		if ( hasTransforms ) {
			this.transformLength = p.uint128;
		}
	}
}
function buildWoff2LazyLookups( woff2, decoded, createTable ) {
	woff2.tables = {};
	woff2.directory.forEach( ( entry ) => {
		lazy$1( woff2.tables, entry.tag.trim(), () => {
			const start = entry.offset;
			const end =
				start +
				( entry.transformLength
					? entry.transformLength
					: entry.origLength );
			const data = new DataView( decoded.slice( start, end ).buffer );
			try {
				return createTable(
					woff2.tables,
					{ tag: entry.tag, offset: 0, length: entry.origLength },
					data
				);
			} catch ( e ) {
				console.error( e );
			}
		} );
	} );
}
function getWOFF2Tag( flag ) {
	return [
		`cmap`,
		`head`,
		`hhea`,
		`hmtx`,
		`maxp`,
		`name`,
		`OS/2`,
		`post`,
		`cvt `,
		`fpgm`,
		`glyf`,
		`loca`,
		`prep`,
		`CFF `,
		`VORG`,
		`EBDT`,
		`EBLC`,
		`gasp`,
		`hdmx`,
		`kern`,
		`LTSH`,
		`PCLT`,
		`VDMX`,
		`vhea`,
		`vmtx`,
		`BASE`,
		`GDEF`,
		`GPOS`,
		`GSUB`,
		`EBSC`,
		`JSTF`,
		`MATH`,
		`CBDT`,
		`CBLC`,
		`COLR`,
		`CPAL`,
		`SVG `,
		`sbix`,
		`acnt`,
		`avar`,
		`bdat`,
		`bloc`,
		`bsln`,
		`cvar`,
		`fdsc`,
		`feat`,
		`fmtx`,
		`fvar`,
		`gvar`,
		`hsty`,
		`just`,
		`lcar`,
		`mort`,
		`morx`,
		`opbd`,
		`prop`,
		`trak`,
		`Zapf`,
		`Silf`,
		`Glat`,
		`Gloc`,
		`Feat`,
		`Sill`,
	][ flag & 63 ];
}
const tableClasses = {};
let tableClassesLoaded = false;
Promise.all( [
	Promise.resolve().then( function () {
		return cmap$1;
	} ),
	Promise.resolve().then( function () {
		return head$1;
	} ),
	Promise.resolve().then( function () {
		return hhea$1;
	} ),
	Promise.resolve().then( function () {
		return hmtx$1;
	} ),
	Promise.resolve().then( function () {
		return maxp$1;
	} ),
	Promise.resolve().then( function () {
		return name$1;
	} ),
	Promise.resolve().then( function () {
		return OS2$1;
	} ),
	Promise.resolve().then( function () {
		return post$1;
	} ),
	Promise.resolve().then( function () {
		return BASE$1;
	} ),
	Promise.resolve().then( function () {
		return GDEF$1;
	} ),
	Promise.resolve().then( function () {
		return GSUB$1;
	} ),
	Promise.resolve().then( function () {
		return GPOS$1;
	} ),
	Promise.resolve().then( function () {
		return SVG$1;
	} ),
	Promise.resolve().then( function () {
		return fvar$1;
	} ),
	Promise.resolve().then( function () {
		return cvt$1;
	} ),
	Promise.resolve().then( function () {
		return fpgm$1;
	} ),
	Promise.resolve().then( function () {
		return gasp$1;
	} ),
	Promise.resolve().then( function () {
		return glyf$1;
	} ),
	Promise.resolve().then( function () {
		return loca$1;
	} ),
	Promise.resolve().then( function () {
		return prep$1;
	} ),
	Promise.resolve().then( function () {
		return CFF$1;
	} ),
	Promise.resolve().then( function () {
		return CFF2$1;
	} ),
	Promise.resolve().then( function () {
		return VORG$1;
	} ),
	Promise.resolve().then( function () {
		return EBLC$1;
	} ),
	Promise.resolve().then( function () {
		return EBDT$1;
	} ),
	Promise.resolve().then( function () {
		return EBSC$1;
	} ),
	Promise.resolve().then( function () {
		return CBLC$1;
	} ),
	Promise.resolve().then( function () {
		return CBDT$1;
	} ),
	Promise.resolve().then( function () {
		return sbix$1;
	} ),
	Promise.resolve().then( function () {
		return COLR$1;
	} ),
	Promise.resolve().then( function () {
		return CPAL$1;
	} ),
	Promise.resolve().then( function () {
		return DSIG$1;
	} ),
	Promise.resolve().then( function () {
		return hdmx$1;
	} ),
	Promise.resolve().then( function () {
		return kern$1;
	} ),
	Promise.resolve().then( function () {
		return LTSH$1;
	} ),
	Promise.resolve().then( function () {
		return MERG$1;
	} ),
	Promise.resolve().then( function () {
		return meta$1;
	} ),
	Promise.resolve().then( function () {
		return PCLT$1;
	} ),
	Promise.resolve().then( function () {
		return VDMX$1;
	} ),
	Promise.resolve().then( function () {
		return vhea$1;
	} ),
	Promise.resolve().then( function () {
		return vmtx$1;
	} ),
] ).then( ( data ) => {
	data.forEach( ( e ) => {
		let name = Object.keys( e )[ 0 ];
		tableClasses[ name ] = e[ name ];
	} );
	tableClassesLoaded = true;
} );
function createTable( tables, dict, dataview ) {
	let name = dict.tag.replace( /[^\w\d]/g, `` );
	let Type = tableClasses[ name ];
	if ( Type ) return new Type( dict, dataview, tables );
	console.warn(
		`lib-font has no definition for ${ name }. The table was skipped.`
	);
	return {};
}
function loadTableClasses() {
	let count = 0;
	function checkLoaded( resolve, reject ) {
		if ( ! tableClassesLoaded ) {
			if ( count > 10 ) {
				return reject( new Error( `loading took too long` ) );
			}
			count++;
			return setTimeout( () => checkLoaded( resolve ), 250 );
		}
		resolve( createTable );
	}
	return new Promise( ( resolve, reject ) => checkLoaded( resolve ) );
}
function getFontCSSFormat( path, errorOnStyle ) {
	let pos = path.lastIndexOf( `.` );
	let ext = ( path.substring( pos + 1 ) || `` ).toLowerCase();
	let format = {
		ttf: `truetype`,
		otf: `opentype`,
		woff: `woff`,
		woff2: `woff2`,
	}[ ext ];
	if ( format ) return format;
	let msg = {
		eot: `The .eot format is not supported: it died in January 12, 2016, when Microsoft retired all versions of IE that didn't already support WOFF.`,
		svg: `The .svg format is not supported: SVG fonts (not to be confused with OpenType with embedded SVG) were so bad we took the entire fonts chapter out of the SVG specification again.`,
		fon: `The .fon format is not supported: this is an ancient Windows bitmap font format.`,
		ttc: `Based on the current CSS specification, font collections are not (yet?) supported.`,
	}[ ext ];
	if ( ! msg ) msg = `${ path } is not a known webfont format.`;
	if ( errorOnStyle ) {
		throw new Error( msg );
	} else {
		console.warn( `Could not load font: ${ msg }` );
	}
}
async function setupFontFace( name, url, options = {} ) {
	if ( ! globalThis.document ) return;
	let format = getFontCSSFormat( url, options.errorOnStyle );
	if ( ! format ) return;
	let style = document.createElement( `style` );
	style.className = `injected-by-Font-js`;
	let rules = [];
	if ( options.styleRules ) {
		rules = Object.entries( options.styleRules ).map(
			( [ key, value ] ) => `${ key }: ${ value };`
		);
	}
	style.textContent = `\n@font-face {\n    font-family: "${ name }";\n    ${ rules.join(
		`\n\t`
	) }\n    src: url("${ url }") format("${ format }");\n}`;
	globalThis.document.head.appendChild( style );
	return style;
}
const TTF = [ 0, 1, 0, 0 ];
const OTF = [ 79, 84, 84, 79 ];
const WOFF = [ 119, 79, 70, 70 ];
const WOFF2 = [ 119, 79, 70, 50 ];
function match( ar1, ar2 ) {
	if ( ar1.length !== ar2.length ) return;
	for ( let i = 0; i < ar1.length; i++ ) {
		if ( ar1[ i ] !== ar2[ i ] ) return;
	}
	return true;
}
function validFontFormat( dataview ) {
	const LEAD_BYTES = [
		dataview.getUint8( 0 ),
		dataview.getUint8( 1 ),
		dataview.getUint8( 2 ),
		dataview.getUint8( 3 ),
	];
	if ( match( LEAD_BYTES, TTF ) || match( LEAD_BYTES, OTF ) ) return `SFNT`;
	if ( match( LEAD_BYTES, WOFF ) ) return `WOFF`;
	if ( match( LEAD_BYTES, WOFF2 ) ) return `WOFF2`;
}
function checkFetchResponseStatus( response ) {
	if ( ! response.ok ) {
		throw new Error(
			`HTTP ${ response.status } - ${ response.statusText }`
		);
	}
	return response;
}
class Font extends EventManager {
	constructor( name, options = {} ) {
		super();
		this.name = name;
		this.options = options;
		this.metrics = false;
	}
	get src() {
		return this.__src;
	}
	set src( src ) {
		this.__src = src;
		( async () => {
			if ( globalThis.document && ! this.options.skipStyleSheet ) {
				await setupFontFace( this.name, src, this.options );
			}
			this.loadFont( src );
		} )();
	}
	async loadFont( url, filename ) {
		fetch( url )
			.then(
				( response ) =>
					checkFetchResponseStatus( response ) &&
					response.arrayBuffer()
			)
			.then( ( buffer ) =>
				this.fromDataBuffer( buffer, filename || url )
			)
			.catch( ( err ) => {
				const evt = new lib_font_browser_Event(
					`error`,
					err,
					`Failed to load font at ${ filename || url }`
				);
				this.dispatch( evt );
				if ( this.onerror ) this.onerror( evt );
			} );
	}
	async fromDataBuffer( buffer, filenameOrUrL ) {
		this.fontData = new DataView( buffer );
		let type = validFontFormat( this.fontData );
		if ( ! type ) {
			throw new Error(
				`${ filenameOrUrL } is either an unsupported font format, or not a font at all.`
			);
		}
		await this.parseBasicData( type );
		const evt = new lib_font_browser_Event( 'load', { font: this } );
		this.dispatch( evt );
		if ( this.onload ) this.onload( evt );
	}
	async parseBasicData( type ) {
		return loadTableClasses().then( ( createTable ) => {
			if ( type === `SFNT` ) {
				this.opentype = new SFNT( this, this.fontData, createTable );
			}
			if ( type === `WOFF` ) {
				this.opentype = new WOFF$1( this, this.fontData, createTable );
			}
			if ( type === `WOFF2` ) {
				this.opentype = new WOFF2$1( this, this.fontData, createTable );
			}
			return this.opentype;
		} );
	}
	getGlyphId( char ) {
		return this.opentype.tables.cmap.getGlyphId( char );
	}
	reverse( glyphid ) {
		return this.opentype.tables.cmap.reverse( glyphid );
	}
	supports( char ) {
		return this.getGlyphId( char ) !== 0;
	}
	supportsVariation( variation ) {
		return (
			this.opentype.tables.cmap.supportsVariation( variation ) !== false
		);
	}
	measureText( text, size = 16 ) {
		if ( this.__unloaded )
			throw new Error(
				'Cannot measure text: font was unloaded. Please reload before calling measureText()'
			);
		let d = document.createElement( 'div' );
		d.textContent = text;
		d.style.fontFamily = this.name;
		d.style.fontSize = `${ size }px`;
		d.style.color = `transparent`;
		d.style.background = `transparent`;
		d.style.top = `0`;
		d.style.left = `0`;
		d.style.position = `absolute`;
		document.body.appendChild( d );
		let bbox = d.getBoundingClientRect();
		document.body.removeChild( d );
		const OS2 = this.opentype.tables[ 'OS/2' ];
		bbox.fontSize = size;
		bbox.ascender = OS2.sTypoAscender;
		bbox.descender = OS2.sTypoDescender;
		return bbox;
	}
	unload() {
		if ( this.styleElement.parentNode ) {
			this.styleElement.parentNode.removeElement( this.styleElement );
			const evt = new lib_font_browser_Event( 'unload', { font: this } );
			this.dispatch( evt );
			if ( this.onunload ) this.onunload( evt );
		}
		this._unloaded = true;
	}
	load() {
		if ( this.__unloaded ) {
			delete this.__unloaded;
			document.head.appendChild( this.styleElement );
			const evt = new lib_font_browser_Event( 'load', { font: this } );
			this.dispatch( evt );
			if ( this.onload ) this.onload( evt );
		}
	}
}
globalThis.Font = Font;
class Subtable extends ParsedData {
	constructor( p, plaformID, encodingID ) {
		super( p );
		this.plaformID = plaformID;
		this.encodingID = encodingID;
	}
}
class Format0 extends Subtable {
	constructor( p, platformID, encodingID ) {
		super( p, platformID, encodingID );
		this.format = 0;
		this.length = p.uint16;
		this.language = p.uint16;
		this.glyphIdArray = [ ...new Array( 256 ) ].map( ( _ ) => p.uint8 );
	}
	supports( charCode ) {
		if ( charCode.charCodeAt ) {
			charCode = -1;
			console.warn(
				`supports(character) not implemented for cmap subtable format 0. only supports(id) is implemented.`
			);
		}
		return 0 <= charCode && charCode <= 255;
	}
	reverse( glyphID ) {
		console.warn( `reverse not implemented for cmap subtable format 0` );
		return {};
	}
	getSupportedCharCodes() {
		return [ { start: 1, end: 256 } ];
	}
}
class Format2 extends Subtable {
	constructor( p, platformID, encodingID ) {
		super( p, platformID, encodingID );
		this.format = 2;
		this.length = p.uint16;
		this.language = p.uint16;
		this.subHeaderKeys = [ ...new Array( 256 ) ].map( ( _ ) => p.uint16 );
		const subHeaderCount = Math.max( ...this.subHeaderKeys );
		const subHeaderOffset = p.currentPosition;
		lazy$1( this, `subHeaders`, () => {
			p.currentPosition = subHeaderOffset;
			return [ ...new Array( subHeaderCount ) ].map(
				( _ ) => new SubHeader( p )
			);
		} );
		const glyphIndexOffset = subHeaderOffset + subHeaderCount * 8;
		lazy$1( this, `glyphIndexArray`, () => {
			p.currentPosition = glyphIndexOffset;
			return [ ...new Array( subHeaderCount ) ].map( ( _ ) => p.uint16 );
		} );
	}
	supports( charCode ) {
		if ( charCode.charCodeAt ) {
			charCode = -1;
			console.warn(
				`supports(character) not implemented for cmap subtable format 2. only supports(id) is implemented.`
			);
		}
		const low = charCode && 255;
		const high = charCode && 65280;
		const subHeaderKey = this.subHeaders[ high ];
		const subheader = this.subHeaders[ subHeaderKey ];
		const first = subheader.firstCode;
		const last = first + subheader.entryCount;
		return first <= low && low <= last;
	}
	reverse( glyphID ) {
		console.warn( `reverse not implemented for cmap subtable format 2` );
		return {};
	}
	getSupportedCharCodes( preservePropNames = false ) {
		if ( preservePropNames ) {
			return this.subHeaders.map( ( h ) => ( {
				firstCode: h.firstCode,
				lastCode: h.lastCode,
			} ) );
		}
		return this.subHeaders.map( ( h ) => ( {
			start: h.firstCode,
			end: h.lastCode,
		} ) );
	}
}
class SubHeader {
	constructor( p ) {
		this.firstCode = p.uint16;
		this.entryCount = p.uint16;
		this.lastCode = this.first + this.entryCount;
		this.idDelta = p.int16;
		this.idRangeOffset = p.uint16;
	}
}
class Format4 extends Subtable {
	constructor( p, platformID, encodingID ) {
		super( p, platformID, encodingID );
		this.format = 4;
		this.length = p.uint16;
		this.language = p.uint16;
		this.segCountX2 = p.uint16;
		this.segCount = this.segCountX2 / 2;
		this.searchRange = p.uint16;
		this.entrySelector = p.uint16;
		this.rangeShift = p.uint16;
		const endCodePosition = p.currentPosition;
		lazy$1( this, `endCode`, () =>
			p.readBytes( this.segCount, endCodePosition, 16 )
		);
		const startCodePosition = endCodePosition + 2 + this.segCountX2;
		lazy$1( this, `startCode`, () =>
			p.readBytes( this.segCount, startCodePosition, 16 )
		);
		const idDeltaPosition = startCodePosition + this.segCountX2;
		lazy$1( this, `idDelta`, () =>
			p.readBytes( this.segCount, idDeltaPosition, 16, true )
		);
		const idRangePosition = idDeltaPosition + this.segCountX2;
		lazy$1( this, `idRangeOffset`, () =>
			p.readBytes( this.segCount, idRangePosition, 16 )
		);
		const glyphIdArrayPosition = idRangePosition + this.segCountX2;
		const glyphIdArrayLength =
			this.length - ( glyphIdArrayPosition - this.tableStart );
		lazy$1( this, `glyphIdArray`, () =>
			p.readBytes( glyphIdArrayLength, glyphIdArrayPosition, 16 )
		);
		lazy$1( this, `segments`, () =>
			this.buildSegments( idRangePosition, glyphIdArrayPosition, p )
		);
	}
	buildSegments( idRangePosition, glyphIdArrayPosition, p ) {
		const build = ( _, i ) => {
			let startCode = this.startCode[ i ],
				endCode = this.endCode[ i ],
				idDelta = this.idDelta[ i ],
				idRangeOffset = this.idRangeOffset[ i ],
				idRangeOffsetPointer = idRangePosition + 2 * i,
				glyphIDs = [];
			if ( idRangeOffset === 0 ) {
				for (
					let i = startCode + idDelta, e = endCode + idDelta;
					i <= e;
					i++
				) {
					glyphIDs.push( i );
				}
			} else {
				for ( let i = 0, e = endCode - startCode; i <= e; i++ ) {
					p.currentPosition =
						idRangeOffsetPointer + idRangeOffset + i * 2;
					glyphIDs.push( p.uint16 );
				}
			}
			return {
				startCode: startCode,
				endCode: endCode,
				idDelta: idDelta,
				idRangeOffset: idRangeOffset,
				glyphIDs: glyphIDs,
			};
		};
		return [ ...new Array( this.segCount ) ].map( build );
	}
	reverse( glyphID ) {
		let s = this.segments.find( ( v ) => v.glyphIDs.includes( glyphID ) );
		if ( ! s ) return {};
		const code = s.startCode + s.glyphIDs.indexOf( glyphID );
		return { code: code, unicode: String.fromCodePoint( code ) };
	}
	getGlyphId( charCode ) {
		if ( charCode.charCodeAt ) charCode = charCode.charCodeAt( 0 );
		if ( 55296 <= charCode && charCode <= 57343 ) return 0;
		if ( ( charCode & 65534 ) === 65534 || ( charCode & 65535 ) === 65535 )
			return 0;
		let segment = this.segments.find(
			( s ) => s.startCode <= charCode && charCode <= s.endCode
		);
		if ( ! segment ) return 0;
		return segment.glyphIDs[ charCode - segment.startCode ];
	}
	supports( charCode ) {
		return this.getGlyphId( charCode ) !== 0;
	}
	getSupportedCharCodes( preservePropNames = false ) {
		if ( preservePropNames ) return this.segments;
		return this.segments.map( ( v ) => ( {
			start: v.startCode,
			end: v.endCode,
		} ) );
	}
}
class Format6 extends Subtable {
	constructor( p, platformID, encodingID ) {
		super( p, platformID, encodingID );
		this.format = 6;
		this.length = p.uint16;
		this.language = p.uint16;
		this.firstCode = p.uint16;
		this.entryCount = p.uint16;
		this.lastCode = this.firstCode + this.entryCount - 1;
		const getter = () =>
			[ ...new Array( this.entryCount ) ].map( ( _ ) => p.uint16 );
		lazy$1( this, `glyphIdArray`, getter );
	}
	supports( charCode ) {
		if ( charCode.charCodeAt ) {
			charCode = -1;
			console.warn(
				`supports(character) not implemented for cmap subtable format 6. only supports(id) is implemented.`
			);
		}
		if ( charCode < this.firstCode ) return {};
		if ( charCode > this.firstCode + this.entryCount ) return {};
		const code = charCode - this.firstCode;
		return { code: code, unicode: String.fromCodePoint( code ) };
	}
	reverse( glyphID ) {
		let pos = this.glyphIdArray.indexOf( glyphID );
		if ( pos > -1 ) return this.firstCode + pos;
	}
	getSupportedCharCodes( preservePropNames = false ) {
		if ( preservePropNames ) {
			return [ { firstCode: this.firstCode, lastCode: this.lastCode } ];
		}
		return [ { start: this.firstCode, end: this.lastCode } ];
	}
}
class Format8 extends Subtable {
	constructor( p, platformID, encodingID ) {
		super( p, platformID, encodingID );
		this.format = 8;
		p.uint16;
		this.length = p.uint32;
		this.language = p.uint32;
		this.is32 = [ ...new Array( 8192 ) ].map( ( _ ) => p.uint8 );
		this.numGroups = p.uint32;
		const getter = () =>
			[ ...new Array( this.numGroups ) ].map(
				( _ ) => new SequentialMapGroup$1( p )
			);
		lazy$1( this, `groups`, getter );
	}
	supports( charCode ) {
		if ( charCode.charCodeAt ) {
			charCode = -1;
			console.warn(
				`supports(character) not implemented for cmap subtable format 8. only supports(id) is implemented.`
			);
		}
		return (
			this.groups.findIndex(
				( s ) =>
					s.startcharCode <= charCode && charCode <= s.endcharCode
			) !== -1
		);
	}
	reverse( glyphID ) {
		console.warn( `reverse not implemented for cmap subtable format 8` );
		return {};
	}
	getSupportedCharCodes( preservePropNames = false ) {
		if ( preservePropNames ) return this.groups;
		return this.groups.map( ( v ) => ( {
			start: v.startcharCode,
			end: v.endcharCode,
		} ) );
	}
}
class SequentialMapGroup$1 {
	constructor( p ) {
		this.startcharCode = p.uint32;
		this.endcharCode = p.uint32;
		this.startGlyphID = p.uint32;
	}
}
class Format10 extends Subtable {
	constructor( p, platformID, encodingID ) {
		super( p, platformID, encodingID );
		this.format = 10;
		p.uint16;
		this.length = p.uint32;
		this.language = p.uint32;
		this.startCharCode = p.uint32;
		this.numChars = p.uint32;
		this.endCharCode = this.startCharCode + this.numChars;
		const getter = () =>
			[ ...new Array( this.numChars ) ].map( ( _ ) => p.uint16 );
		lazy$1( this, `glyphs`, getter );
	}
	supports( charCode ) {
		if ( charCode.charCodeAt ) {
			charCode = -1;
			console.warn(
				`supports(character) not implemented for cmap subtable format 10. only supports(id) is implemented.`
			);
		}
		if ( charCode < this.startCharCode ) return false;
		if ( charCode > this.startCharCode + this.numChars ) return false;
		return charCode - this.startCharCode;
	}
	reverse( glyphID ) {
		console.warn( `reverse not implemented for cmap subtable format 10` );
		return {};
	}
	getSupportedCharCodes( preservePropNames = false ) {
		if ( preservePropNames ) {
			return [
				{
					startCharCode: this.startCharCode,
					endCharCode: this.endCharCode,
				},
			];
		}
		return [ { start: this.startCharCode, end: this.endCharCode } ];
	}
}
class Format12 extends Subtable {
	constructor( p, platformID, encodingID ) {
		super( p, platformID, encodingID );
		this.format = 12;
		p.uint16;
		this.length = p.uint32;
		this.language = p.uint32;
		this.numGroups = p.uint32;
		const getter = () =>
			[ ...new Array( this.numGroups ) ].map(
				( _ ) => new SequentialMapGroup( p )
			);
		lazy$1( this, `groups`, getter );
	}
	supports( charCode ) {
		if ( charCode.charCodeAt ) charCode = charCode.charCodeAt( 0 );
		if ( 55296 <= charCode && charCode <= 57343 ) return 0;
		if ( ( charCode & 65534 ) === 65534 || ( charCode & 65535 ) === 65535 )
			return 0;
		return (
			this.groups.findIndex(
				( s ) =>
					s.startCharCode <= charCode && charCode <= s.endCharCode
			) !== -1
		);
	}
	reverse( glyphID ) {
		for ( let group of this.groups ) {
			let start = group.startGlyphID;
			if ( start > glyphID ) continue;
			if ( start === glyphID ) return group.startCharCode;
			let end = start + ( group.endCharCode - group.startCharCode );
			if ( end < glyphID ) continue;
			const code = group.startCharCode + ( glyphID - start );
			return { code: code, unicode: String.fromCodePoint( code ) };
		}
		return {};
	}
	getSupportedCharCodes( preservePropNames = false ) {
		if ( preservePropNames ) return this.groups;
		return this.groups.map( ( v ) => ( {
			start: v.startCharCode,
			end: v.endCharCode,
		} ) );
	}
}
class SequentialMapGroup {
	constructor( p ) {
		this.startCharCode = p.uint32;
		this.endCharCode = p.uint32;
		this.startGlyphID = p.uint32;
	}
}
class Format13 extends Subtable {
	constructor( p, platformID, encodingID ) {
		super( p, platformID, encodingID );
		this.format = 13;
		p.uint16;
		this.length = p.uint32;
		this.language = p.uint32;
		this.numGroups = p.uint32;
		const getter = [ ...new Array( this.numGroups ) ].map(
			( _ ) => new ConstantMapGroup( p )
		);
		lazy$1( this, `groups`, getter );
	}
	supports( charCode ) {
		if ( charCode.charCodeAt ) charCode = charCode.charCodeAt( 0 );
		return (
			this.groups.findIndex(
				( s ) =>
					s.startCharCode <= charCode && charCode <= s.endCharCode
			) !== -1
		);
	}
	reverse( glyphID ) {
		console.warn( `reverse not implemented for cmap subtable format 13` );
		return {};
	}
	getSupportedCharCodes( preservePropNames = false ) {
		if ( preservePropNames ) return this.groups;
		return this.groups.map( ( v ) => ( {
			start: v.startCharCode,
			end: v.endCharCode,
		} ) );
	}
}
class ConstantMapGroup {
	constructor( p ) {
		this.startCharCode = p.uint32;
		this.endCharCode = p.uint32;
		this.glyphID = p.uint32;
	}
}
class Format14 extends Subtable {
	constructor( p, platformID, encodingID ) {
		super( p, platformID, encodingID );
		this.subTableStart = p.currentPosition;
		this.format = 14;
		this.length = p.uint32;
		this.numVarSelectorRecords = p.uint32;
		lazy$1( this, `varSelectors`, () =>
			[ ...new Array( this.numVarSelectorRecords ) ].map(
				( _ ) => new VariationSelector( p )
			)
		);
	}
	supports() {
		console.warn( `supports not implemented for cmap subtable format 14` );
		return 0;
	}
	getSupportedCharCodes() {
		console.warn(
			`getSupportedCharCodes not implemented for cmap subtable format 14`
		);
		return [];
	}
	reverse( glyphID ) {
		console.warn( `reverse not implemented for cmap subtable format 14` );
		return {};
	}
	supportsVariation( variation ) {
		let v = this.varSelector.find(
			( uvs ) => uvs.varSelector === variation
		);
		return v ? v : false;
	}
	getSupportedVariations() {
		return this.varSelectors.map( ( v ) => v.varSelector );
	}
}
class VariationSelector {
	constructor( p ) {
		this.varSelector = p.uint24;
		this.defaultUVSOffset = p.Offset32;
		this.nonDefaultUVSOffset = p.Offset32;
	}
}
function createSubTable( parser, platformID, encodingID ) {
	const format = parser.uint16;
	if ( format === 0 ) return new Format0( parser, platformID, encodingID );
	if ( format === 2 ) return new Format2( parser, platformID, encodingID );
	if ( format === 4 ) return new Format4( parser, platformID, encodingID );
	if ( format === 6 ) return new Format6( parser, platformID, encodingID );
	if ( format === 8 ) return new Format8( parser, platformID, encodingID );
	if ( format === 10 ) return new Format10( parser, platformID, encodingID );
	if ( format === 12 ) return new Format12( parser, platformID, encodingID );
	if ( format === 13 ) return new Format13( parser, platformID, encodingID );
	if ( format === 14 ) return new Format14( parser, platformID, encodingID );
	return {};
}
class cmap extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		this.version = p.uint16;
		this.numTables = p.uint16;
		this.encodingRecords = [ ...new Array( this.numTables ) ].map(
			( _ ) => new EncodingRecord( p, this.tableStart )
		);
	}
	getSubTable( tableID ) {
		return this.encodingRecords[ tableID ].table;
	}
	getSupportedEncodings() {
		return this.encodingRecords.map( ( r ) => ( {
			platformID: r.platformID,
			encodingId: r.encodingID,
		} ) );
	}
	getSupportedCharCodes( platformID, encodingID ) {
		const recordID = this.encodingRecords.findIndex(
			( r ) => r.platformID === platformID && r.encodingID === encodingID
		);
		if ( recordID === -1 ) return false;
		const subtable = this.getSubTable( recordID );
		return subtable.getSupportedCharCodes();
	}
	reverse( glyphid ) {
		for ( let i = 0; i < this.numTables; i++ ) {
			let code = this.getSubTable( i ).reverse( glyphid );
			if ( code ) return code;
		}
	}
	getGlyphId( char ) {
		let last = 0;
		this.encodingRecords.some( ( _, tableID ) => {
			let t = this.getSubTable( tableID );
			if ( ! t.getGlyphId ) return false;
			last = t.getGlyphId( char );
			return last !== 0;
		} );
		return last;
	}
	supports( char ) {
		return this.encodingRecords.some( ( _, tableID ) => {
			const t = this.getSubTable( tableID );
			return t.supports && t.supports( char ) !== false;
		} );
	}
	supportsVariation( variation ) {
		return this.encodingRecords.some( ( _, tableID ) => {
			const t = this.getSubTable( tableID );
			return (
				t.supportsVariation &&
				t.supportsVariation( variation ) !== false
			);
		} );
	}
}
class EncodingRecord {
	constructor( p, tableStart ) {
		const platformID = ( this.platformID = p.uint16 );
		const encodingID = ( this.encodingID = p.uint16 );
		const offset = ( this.offset = p.Offset32 );
		lazy$1( this, `table`, () => {
			p.currentPosition = tableStart + offset;
			return createSubTable( p, platformID, encodingID );
		} );
	}
}
var cmap$1 = Object.freeze( { __proto__: null, cmap: cmap } );
class head extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		this.load( {
			majorVersion: p.uint16,
			minorVersion: p.uint16,
			fontRevision: p.fixed,
			checkSumAdjustment: p.uint32,
			magicNumber: p.uint32,
			flags: p.flags( 16 ),
			unitsPerEm: p.uint16,
			created: p.longdatetime,
			modified: p.longdatetime,
			xMin: p.int16,
			yMin: p.int16,
			xMax: p.int16,
			yMax: p.int16,
			macStyle: p.flags( 16 ),
			lowestRecPPEM: p.uint16,
			fontDirectionHint: p.uint16,
			indexToLocFormat: p.uint16,
			glyphDataFormat: p.uint16,
		} );
	}
}
var head$1 = Object.freeze( { __proto__: null, head: head } );
class hhea extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		this.majorVersion = p.uint16;
		this.minorVersion = p.uint16;
		this.ascender = p.fword;
		this.descender = p.fword;
		this.lineGap = p.fword;
		this.advanceWidthMax = p.ufword;
		this.minLeftSideBearing = p.fword;
		this.minRightSideBearing = p.fword;
		this.xMaxExtent = p.fword;
		this.caretSlopeRise = p.int16;
		this.caretSlopeRun = p.int16;
		this.caretOffset = p.int16;
		p.int16;
		p.int16;
		p.int16;
		p.int16;
		this.metricDataFormat = p.int16;
		this.numberOfHMetrics = p.uint16;
		p.verifyLength();
	}
}
var hhea$1 = Object.freeze( { __proto__: null, hhea: hhea } );
class hmtx extends SimpleTable {
	constructor( dict, dataview, tables ) {
		const { p: p } = super( dict, dataview );
		const numberOfHMetrics = tables.hhea.numberOfHMetrics;
		const numGlyphs = tables.maxp.numGlyphs;
		const metricsStart = p.currentPosition;
		lazy$1( this, `hMetrics`, () => {
			p.currentPosition = metricsStart;
			return [ ...new Array( numberOfHMetrics ) ].map(
				( _ ) => new LongHorMetric( p.uint16, p.int16 )
			);
		} );
		if ( numberOfHMetrics < numGlyphs ) {
			const lsbStart = metricsStart + numberOfHMetrics * 4;
			lazy$1( this, `leftSideBearings`, () => {
				p.currentPosition = lsbStart;
				return [ ...new Array( numGlyphs - numberOfHMetrics ) ].map(
					( _ ) => p.int16
				);
			} );
		}
	}
}
class LongHorMetric {
	constructor( w, b ) {
		this.advanceWidth = w;
		this.lsb = b;
	}
}
var hmtx$1 = Object.freeze( { __proto__: null, hmtx: hmtx } );
class maxp extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		this.version = p.legacyFixed;
		this.numGlyphs = p.uint16;
		if ( this.version === 1 ) {
			this.maxPoints = p.uint16;
			this.maxContours = p.uint16;
			this.maxCompositePoints = p.uint16;
			this.maxCompositeContours = p.uint16;
			this.maxZones = p.uint16;
			this.maxTwilightPoints = p.uint16;
			this.maxStorage = p.uint16;
			this.maxFunctionDefs = p.uint16;
			this.maxInstructionDefs = p.uint16;
			this.maxStackElements = p.uint16;
			this.maxSizeOfInstructions = p.uint16;
			this.maxComponentElements = p.uint16;
			this.maxComponentDepth = p.uint16;
		}
		p.verifyLength();
	}
}
var maxp$1 = Object.freeze( { __proto__: null, maxp: maxp } );
class lib_font_browser_name extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		this.format = p.uint16;
		this.count = p.uint16;
		this.stringOffset = p.Offset16;
		this.nameRecords = [ ...new Array( this.count ) ].map(
			( _ ) => new NameRecord( p, this )
		);
		if ( this.format === 1 ) {
			this.langTagCount = p.uint16;
			this.langTagRecords = [ ...new Array( this.langTagCount ) ].map(
				( _ ) => new LangTagRecord( p.uint16, p.Offset16 )
			);
		}
		this.stringStart = this.tableStart + this.stringOffset;
	}
	get( nameID ) {
		let record = this.nameRecords.find(
			( record ) => record.nameID === nameID
		);
		if ( record ) return record.string;
	}
}
class LangTagRecord {
	constructor( length, offset ) {
		this.length = length;
		this.offset = offset;
	}
}
class NameRecord {
	constructor( p, nameTable ) {
		this.platformID = p.uint16;
		this.encodingID = p.uint16;
		this.languageID = p.uint16;
		this.nameID = p.uint16;
		this.length = p.uint16;
		this.offset = p.Offset16;
		lazy$1( this, `string`, () => {
			p.currentPosition = nameTable.stringStart + this.offset;
			return decodeString( p, this );
		} );
	}
}
function decodeString( p, record ) {
	const { platformID: platformID, length: length } = record;
	if ( length === 0 ) return ``;
	if ( platformID === 0 || platformID === 3 ) {
		const str = [];
		for ( let i = 0, e = length / 2; i < e; i++ )
			str[ i ] = String.fromCharCode( p.uint16 );
		return str.join( `` );
	}
	const bytes = p.readBytes( length );
	const str = [];
	bytes.forEach( function ( b, i ) {
		str[ i ] = String.fromCharCode( b );
	} );
	return str.join( `` );
}
var name$1 = Object.freeze( { __proto__: null, name: lib_font_browser_name } );
class OS2 extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		this.version = p.uint16;
		this.xAvgCharWidth = p.int16;
		this.usWeightClass = p.uint16;
		this.usWidthClass = p.uint16;
		this.fsType = p.uint16;
		this.ySubscriptXSize = p.int16;
		this.ySubscriptYSize = p.int16;
		this.ySubscriptXOffset = p.int16;
		this.ySubscriptYOffset = p.int16;
		this.ySuperscriptXSize = p.int16;
		this.ySuperscriptYSize = p.int16;
		this.ySuperscriptXOffset = p.int16;
		this.ySuperscriptYOffset = p.int16;
		this.yStrikeoutSize = p.int16;
		this.yStrikeoutPosition = p.int16;
		this.sFamilyClass = p.int16;
		this.panose = [ ...new Array( 10 ) ].map( ( _ ) => p.uint8 );
		this.ulUnicodeRange1 = p.flags( 32 );
		this.ulUnicodeRange2 = p.flags( 32 );
		this.ulUnicodeRange3 = p.flags( 32 );
		this.ulUnicodeRange4 = p.flags( 32 );
		this.achVendID = p.tag;
		this.fsSelection = p.uint16;
		this.usFirstCharIndex = p.uint16;
		this.usLastCharIndex = p.uint16;
		this.sTypoAscender = p.int16;
		this.sTypoDescender = p.int16;
		this.sTypoLineGap = p.int16;
		this.usWinAscent = p.uint16;
		this.usWinDescent = p.uint16;
		if ( this.version === 0 ) return p.verifyLength();
		this.ulCodePageRange1 = p.flags( 32 );
		this.ulCodePageRange2 = p.flags( 32 );
		if ( this.version === 1 ) return p.verifyLength();
		this.sxHeight = p.int16;
		this.sCapHeight = p.int16;
		this.usDefaultChar = p.uint16;
		this.usBreakChar = p.uint16;
		this.usMaxContext = p.uint16;
		if ( this.version <= 4 ) return p.verifyLength();
		this.usLowerOpticalPointSize = p.uint16;
		this.usUpperOpticalPointSize = p.uint16;
		if ( this.version === 5 ) return p.verifyLength();
	}
}
var OS2$1 = Object.freeze( { __proto__: null, OS2: OS2 } );
class lib_font_browser_post extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		this.version = p.legacyFixed;
		this.italicAngle = p.fixed;
		this.underlinePosition = p.fword;
		this.underlineThickness = p.fword;
		this.isFixedPitch = p.uint32;
		this.minMemType42 = p.uint32;
		this.maxMemType42 = p.uint32;
		this.minMemType1 = p.uint32;
		this.maxMemType1 = p.uint32;
		if ( this.version === 1 || this.version === 3 ) return p.verifyLength();
		this.numGlyphs = p.uint16;
		if ( this.version === 2 ) {
			this.glyphNameIndex = [ ...new Array( this.numGlyphs ) ].map(
				( _ ) => p.uint16
			);
			this.namesOffset = p.currentPosition;
			this.glyphNameOffsets = [ 1 ];
			for ( let i = 0; i < this.numGlyphs; i++ ) {
				let index = this.glyphNameIndex[ i ];
				if ( index < macStrings.length ) {
					this.glyphNameOffsets.push( this.glyphNameOffsets[ i ] );
					continue;
				}
				let bytelength = p.int8;
				p.skip( bytelength );
				this.glyphNameOffsets.push(
					this.glyphNameOffsets[ i ] + bytelength + 1
				);
			}
		}
		if ( this.version === 2.5 ) {
			this.offset = [ ...new Array( this.numGlyphs ) ].map(
				( _ ) => p.int8
			);
		}
	}
	getGlyphName( glyphid ) {
		if ( this.version !== 2 ) {
			console.warn(
				`post table version ${ this.version } does not support glyph name lookups`
			);
			return ``;
		}
		let index = this.glyphNameIndex[ glyphid ];
		if ( index < 258 ) return macStrings[ index ];
		let offset = this.glyphNameOffsets[ glyphid ];
		let next = this.glyphNameOffsets[ glyphid + 1 ];
		let len = next - offset - 1;
		if ( len === 0 ) return `.notdef.`;
		this.parser.currentPosition = this.namesOffset + offset;
		const data = this.parser.readBytes(
			len,
			this.namesOffset + offset,
			8,
			true
		);
		return data.map( ( b ) => String.fromCharCode( b ) ).join( `` );
	}
}
const macStrings = [
	`.notdef`,
	`.null`,
	`nonmarkingreturn`,
	`space`,
	`exclam`,
	`quotedbl`,
	`numbersign`,
	`dollar`,
	`percent`,
	`ampersand`,
	`quotesingle`,
	`parenleft`,
	`parenright`,
	`asterisk`,
	`plus`,
	`comma`,
	`hyphen`,
	`period`,
	`slash`,
	`zero`,
	`one`,
	`two`,
	`three`,
	`four`,
	`five`,
	`six`,
	`seven`,
	`eight`,
	`nine`,
	`colon`,
	`semicolon`,
	`less`,
	`equal`,
	`greater`,
	`question`,
	`at`,
	`A`,
	`B`,
	`C`,
	`D`,
	`E`,
	`F`,
	`G`,
	`H`,
	`I`,
	`J`,
	`K`,
	`L`,
	`M`,
	`N`,
	`O`,
	`P`,
	`Q`,
	`R`,
	`S`,
	`T`,
	`U`,
	`V`,
	`W`,
	`X`,
	`Y`,
	`Z`,
	`bracketleft`,
	`backslash`,
	`bracketright`,
	`asciicircum`,
	`underscore`,
	`grave`,
	`a`,
	`b`,
	`c`,
	`d`,
	`e`,
	`f`,
	`g`,
	`h`,
	`i`,
	`j`,
	`k`,
	`l`,
	`m`,
	`n`,
	`o`,
	`p`,
	`q`,
	`r`,
	`s`,
	`t`,
	`u`,
	`v`,
	`w`,
	`x`,
	`y`,
	`z`,
	`braceleft`,
	`bar`,
	`braceright`,
	`asciitilde`,
	`Adieresis`,
	`Aring`,
	`Ccedilla`,
	`Eacute`,
	`Ntilde`,
	`Odieresis`,
	`Udieresis`,
	`aacute`,
	`agrave`,
	`acircumflex`,
	`adieresis`,
	`atilde`,
	`aring`,
	`ccedilla`,
	`eacute`,
	`egrave`,
	`ecircumflex`,
	`edieresis`,
	`iacute`,
	`igrave`,
	`icircumflex`,
	`idieresis`,
	`ntilde`,
	`oacute`,
	`ograve`,
	`ocircumflex`,
	`odieresis`,
	`otilde`,
	`uacute`,
	`ugrave`,
	`ucircumflex`,
	`udieresis`,
	`dagger`,
	`degree`,
	`cent`,
	`sterling`,
	`section`,
	`bullet`,
	`paragraph`,
	`germandbls`,
	`registered`,
	`copyright`,
	`trademark`,
	`acute`,
	`dieresis`,
	`notequal`,
	`AE`,
	`Oslash`,
	`infinity`,
	`plusminus`,
	`lessequal`,
	`greaterequal`,
	`yen`,
	`mu`,
	`partialdiff`,
	`summation`,
	`product`,
	`pi`,
	`integral`,
	`ordfeminine`,
	`ordmasculine`,
	`Omega`,
	`ae`,
	`oslash`,
	`questiondown`,
	`exclamdown`,
	`logicalnot`,
	`radical`,
	`florin`,
	`approxequal`,
	`Delta`,
	`guillemotleft`,
	`guillemotright`,
	`ellipsis`,
	`nonbreakingspace`,
	`Agrave`,
	`Atilde`,
	`Otilde`,
	`OE`,
	`oe`,
	`endash`,
	`emdash`,
	`quotedblleft`,
	`quotedblright`,
	`quoteleft`,
	`quoteright`,
	`divide`,
	`lozenge`,
	`ydieresis`,
	`Ydieresis`,
	`fraction`,
	`currency`,
	`guilsinglleft`,
	`guilsinglright`,
	`fi`,
	`fl`,
	`daggerdbl`,
	`periodcentered`,
	`quotesinglbase`,
	`quotedblbase`,
	`perthousand`,
	`Acircumflex`,
	`Ecircumflex`,
	`Aacute`,
	`Edieresis`,
	`Egrave`,
	`Iacute`,
	`Icircumflex`,
	`Idieresis`,
	`Igrave`,
	`Oacute`,
	`Ocircumflex`,
	`apple`,
	`Ograve`,
	`Uacute`,
	`Ucircumflex`,
	`Ugrave`,
	`dotlessi`,
	`circumflex`,
	`tilde`,
	`macron`,
	`breve`,
	`dotaccent`,
	`ring`,
	`cedilla`,
	`hungarumlaut`,
	`ogonek`,
	`caron`,
	`Lslash`,
	`lslash`,
	`Scaron`,
	`scaron`,
	`Zcaron`,
	`zcaron`,
	`brokenbar`,
	`Eth`,
	`eth`,
	`Yacute`,
	`yacute`,
	`Thorn`,
	`thorn`,
	`minus`,
	`multiply`,
	`onesuperior`,
	`twosuperior`,
	`threesuperior`,
	`onehalf`,
	`onequarter`,
	`threequarters`,
	`franc`,
	`Gbreve`,
	`gbreve`,
	`Idotaccent`,
	`Scedilla`,
	`scedilla`,
	`Cacute`,
	`cacute`,
	`Ccaron`,
	`ccaron`,
	`dcroat`,
];
var post$1 = Object.freeze( { __proto__: null, post: lib_font_browser_post } );
class BASE extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		this.majorVersion = p.uint16;
		this.minorVersion = p.uint16;
		this.horizAxisOffset = p.Offset16;
		this.vertAxisOffset = p.Offset16;
		lazy$1(
			this,
			`horizAxis`,
			() =>
				new AxisTable(
					{ offset: dict.offset + this.horizAxisOffset },
					dataview
				)
		);
		lazy$1(
			this,
			`vertAxis`,
			() =>
				new AxisTable(
					{ offset: dict.offset + this.vertAxisOffset },
					dataview
				)
		);
		if ( this.majorVersion === 1 && this.minorVersion === 1 ) {
			this.itemVarStoreOffset = p.Offset32;
			lazy$1(
				this,
				`itemVarStore`,
				() =>
					new AxisTable(
						{ offset: dict.offset + this.itemVarStoreOffset },
						dataview
					)
			);
		}
	}
}
class AxisTable extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview, `AxisTable` );
		this.baseTagListOffset = p.Offset16;
		this.baseScriptListOffset = p.Offset16;
		lazy$1(
			this,
			`baseTagList`,
			() =>
				new BaseTagListTable(
					{ offset: dict.offset + this.baseTagListOffset },
					dataview
				)
		);
		lazy$1(
			this,
			`baseScriptList`,
			() =>
				new BaseScriptListTable(
					{ offset: dict.offset + this.baseScriptListOffset },
					dataview
				)
		);
	}
}
class BaseTagListTable extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview, `BaseTagListTable` );
		this.baseTagCount = p.uint16;
		this.baselineTags = [ ...new Array( this.baseTagCount ) ].map(
			( _ ) => p.tag
		);
	}
}
class BaseScriptListTable extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview, `BaseScriptListTable` );
		this.baseScriptCount = p.uint16;
		const recordStart = p.currentPosition;
		lazy$1( this, `baseScriptRecords`, () => {
			p.currentPosition = recordStart;
			return [ ...new Array( this.baseScriptCount ) ].map(
				( _ ) => new BaseScriptRecord( this.start, p )
			);
		} );
	}
}
class BaseScriptRecord {
	constructor( baseScriptListTableStart, p ) {
		this.baseScriptTag = p.tag;
		this.baseScriptOffset = p.Offset16;
		lazy$1( this, `baseScriptTable`, () => {
			p.currentPosition =
				baseScriptListTableStart + this.baseScriptOffset;
			return new BaseScriptTable( p );
		} );
	}
}
class BaseScriptTable {
	constructor( p ) {
		this.start = p.currentPosition;
		this.baseValuesOffset = p.Offset16;
		this.defaultMinMaxOffset = p.Offset16;
		this.baseLangSysCount = p.uint16;
		this.baseLangSysRecords = [ ...new Array( this.baseLangSysCount ) ].map(
			( _ ) => new BaseLangSysRecord( this.start, p )
		);
		lazy$1( this, `baseValues`, () => {
			p.currentPosition = this.start + this.baseValuesOffset;
			return new BaseValuesTable( p );
		} );
		lazy$1( this, `defaultMinMax`, () => {
			p.currentPosition = this.start + this.defaultMinMaxOffset;
			return new MinMaxTable( p );
		} );
	}
}
class BaseLangSysRecord {
	constructor( baseScriptTableStart, p ) {
		this.baseLangSysTag = p.tag;
		this.minMaxOffset = p.Offset16;
		lazy$1( this, `minMax`, () => {
			p.currentPosition = baseScriptTableStart + this.minMaxOffset;
			return new MinMaxTable( p );
		} );
	}
}
class BaseValuesTable {
	constructor( p ) {
		this.parser = p;
		this.start = p.currentPosition;
		this.defaultBaselineIndex = p.uint16;
		this.baseCoordCount = p.uint16;
		this.baseCoords = [ ...new Array( this.baseCoordCount ) ].map(
			( _ ) => p.Offset16
		);
	}
	getTable( id ) {
		this.parser.currentPosition = this.start + this.baseCoords[ id ];
		return new BaseCoordTable( this.parser );
	}
}
class MinMaxTable {
	constructor( p ) {
		this.minCoord = p.Offset16;
		this.maxCoord = p.Offset16;
		this.featMinMaxCount = p.uint16;
		const recordStart = p.currentPosition;
		lazy$1( this, `featMinMaxRecords`, () => {
			p.currentPosition = recordStart;
			return [ ...new Array( this.featMinMaxCount ) ].map(
				( _ ) => new FeatMinMaxRecord( p )
			);
		} );
	}
}
class FeatMinMaxRecord {
	constructor( p ) {
		this.featureTableTag = p.tag;
		this.minCoord = p.Offset16;
		this.maxCoord = p.Offset16;
	}
}
class BaseCoordTable {
	constructor( p ) {
		this.baseCoordFormat = p.uint16;
		this.coordinate = p.int16;
		if ( this.baseCoordFormat === 2 ) {
			this.referenceGlyph = p.uint16;
			this.baseCoordPoint = p.uint16;
		}
		if ( this.baseCoordFormat === 3 ) {
			this.deviceTable = p.Offset16;
		}
	}
}
var BASE$1 = Object.freeze( { __proto__: null, BASE: BASE } );
class ClassDefinition {
	constructor( p ) {
		this.classFormat = p.uint16;
		if ( this.classFormat === 1 ) {
			this.startGlyphID = p.uint16;
			this.glyphCount = p.uint16;
			this.classValueArray = [ ...new Array( this.glyphCount ) ].map(
				( _ ) => p.uint16
			);
		}
		if ( this.classFormat === 2 ) {
			this.classRangeCount = p.uint16;
			this.classRangeRecords = [
				...new Array( this.classRangeCount ),
			].map( ( _ ) => new ClassRangeRecord( p ) );
		}
	}
}
class ClassRangeRecord {
	constructor( p ) {
		this.startGlyphID = p.uint16;
		this.endGlyphID = p.uint16;
		this.class = p.uint16;
	}
}
class CoverageTable extends ParsedData {
	constructor( p ) {
		super( p );
		this.coverageFormat = p.uint16;
		if ( this.coverageFormat === 1 ) {
			this.glyphCount = p.uint16;
			this.glyphArray = [ ...new Array( this.glyphCount ) ].map(
				( _ ) => p.uint16
			);
		}
		if ( this.coverageFormat === 2 ) {
			this.rangeCount = p.uint16;
			this.rangeRecords = [ ...new Array( this.rangeCount ) ].map(
				( _ ) => new CoverageRangeRecord( p )
			);
		}
	}
}
class CoverageRangeRecord {
	constructor( p ) {
		this.startGlyphID = p.uint16;
		this.endGlyphID = p.uint16;
		this.startCoverageIndex = p.uint16;
	}
}
class ItemVariationStoreTable {
	constructor( table, p ) {
		this.table = table;
		this.parser = p;
		this.start = p.currentPosition;
		this.format = p.uint16;
		this.variationRegionListOffset = p.Offset32;
		this.itemVariationDataCount = p.uint16;
		this.itemVariationDataOffsets = [
			...new Array( this.itemVariationDataCount ),
		].map( ( _ ) => p.Offset32 );
	}
}
class GDEF extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		this.majorVersion = p.uint16;
		this.minorVersion = p.uint16;
		this.glyphClassDefOffset = p.Offset16;
		lazy$1( this, `glyphClassDefs`, () => {
			if ( this.glyphClassDefOffset === 0 ) return undefined;
			p.currentPosition = this.tableStart + this.glyphClassDefOffset;
			return new ClassDefinition( p );
		} );
		this.attachListOffset = p.Offset16;
		lazy$1( this, `attachList`, () => {
			if ( this.attachListOffset === 0 ) return undefined;
			p.currentPosition = this.tableStart + this.attachListOffset;
			return new AttachList( p );
		} );
		this.ligCaretListOffset = p.Offset16;
		lazy$1( this, `ligCaretList`, () => {
			if ( this.ligCaretListOffset === 0 ) return undefined;
			p.currentPosition = this.tableStart + this.ligCaretListOffset;
			return new LigCaretList( p );
		} );
		this.markAttachClassDefOffset = p.Offset16;
		lazy$1( this, `markAttachClassDef`, () => {
			if ( this.markAttachClassDefOffset === 0 ) return undefined;
			p.currentPosition = this.tableStart + this.markAttachClassDefOffset;
			return new ClassDefinition( p );
		} );
		if ( this.minorVersion >= 2 ) {
			this.markGlyphSetsDefOffset = p.Offset16;
			lazy$1( this, `markGlyphSetsDef`, () => {
				if ( this.markGlyphSetsDefOffset === 0 ) return undefined;
				p.currentPosition =
					this.tableStart + this.markGlyphSetsDefOffset;
				return new MarkGlyphSetsTable( p );
			} );
		}
		if ( this.minorVersion === 3 ) {
			this.itemVarStoreOffset = p.Offset32;
			lazy$1( this, `itemVarStore`, () => {
				if ( this.itemVarStoreOffset === 0 ) return undefined;
				p.currentPosition = this.tableStart + this.itemVarStoreOffset;
				return new ItemVariationStoreTable( p );
			} );
		}
	}
}
class AttachList extends ParsedData {
	constructor( p ) {
		super( p );
		this.coverageOffset = p.Offset16;
		this.glyphCount = p.uint16;
		this.attachPointOffsets = [ ...new Array( this.glyphCount ) ].map(
			( _ ) => p.Offset16
		);
	}
	getPoint( pointID ) {
		this.parser.currentPosition =
			this.start + this.attachPointOffsets[ pointID ];
		return new AttachPoint( this.parser );
	}
}
class AttachPoint {
	constructor( p ) {
		this.pointCount = p.uint16;
		this.pointIndices = [ ...new Array( this.pointCount ) ].map(
			( _ ) => p.uint16
		);
	}
}
class LigCaretList extends ParsedData {
	constructor( p ) {
		super( p );
		this.coverageOffset = p.Offset16;
		lazy$1( this, `coverage`, () => {
			p.currentPosition = this.start + this.coverageOffset;
			return new CoverageTable( p );
		} );
		this.ligGlyphCount = p.uint16;
		this.ligGlyphOffsets = [ ...new Array( this.ligGlyphCount ) ].map(
			( _ ) => p.Offset16
		);
	}
	getLigGlyph( ligGlyphID ) {
		this.parser.currentPosition =
			this.start + this.ligGlyphOffsets[ ligGlyphID ];
		return new LigGlyph( this.parser );
	}
}
class LigGlyph extends ParsedData {
	constructor( p ) {
		super( p );
		this.caretCount = p.uint16;
		this.caretValueOffsets = [ ...new Array( this.caretCount ) ].map(
			( _ ) => p.Offset16
		);
	}
	getCaretValue( caretID ) {
		this.parser.currentPosition =
			this.start + this.caretValueOffsets[ caretID ];
		return new CaretValue( this.parser );
	}
}
class CaretValue {
	constructor( p ) {
		this.caretValueFormat = p.uint16;
		if ( this.caretValueFormat === 1 ) {
			this.coordinate = p.int16;
		}
		if ( this.caretValueFormat === 2 ) {
			this.caretValuePointIndex = p.uint16;
		}
		if ( this.caretValueFormat === 3 ) {
			this.coordinate = p.int16;
			this.deviceOffset = p.Offset16;
		}
	}
}
class MarkGlyphSetsTable extends ParsedData {
	constructor( p ) {
		super( p );
		this.markGlyphSetTableFormat = p.uint16;
		this.markGlyphSetCount = p.uint16;
		this.coverageOffsets = [ ...new Array( this.markGlyphSetCount ) ].map(
			( _ ) => p.Offset32
		);
	}
	getMarkGlyphSet( markGlyphSetID ) {
		this.parser.currentPosition =
			this.start + this.coverageOffsets[ markGlyphSetID ];
		return new CoverageTable( this.parser );
	}
}
var GDEF$1 = Object.freeze( { __proto__: null, GDEF: GDEF } );
class ScriptList extends ParsedData {
	static EMPTY = { scriptCount: 0, scriptRecords: [] };
	constructor( p ) {
		super( p );
		this.scriptCount = p.uint16;
		this.scriptRecords = [ ...new Array( this.scriptCount ) ].map(
			( _ ) => new ScriptRecord( p )
		);
	}
}
class ScriptRecord {
	constructor( p ) {
		this.scriptTag = p.tag;
		this.scriptOffset = p.Offset16;
	}
}
class ScriptTable extends ParsedData {
	constructor( p ) {
		super( p );
		this.defaultLangSys = p.Offset16;
		this.langSysCount = p.uint16;
		this.langSysRecords = [ ...new Array( this.langSysCount ) ].map(
			( _ ) => new LangSysRecord( p )
		);
	}
}
class LangSysRecord {
	constructor( p ) {
		this.langSysTag = p.tag;
		this.langSysOffset = p.Offset16;
	}
}
class LangSysTable {
	constructor( p ) {
		this.lookupOrder = p.Offset16;
		this.requiredFeatureIndex = p.uint16;
		this.featureIndexCount = p.uint16;
		this.featureIndices = [ ...new Array( this.featureIndexCount ) ].map(
			( _ ) => p.uint16
		);
	}
}
class FeatureList extends ParsedData {
	static EMPTY = { featureCount: 0, featureRecords: [] };
	constructor( p ) {
		super( p );
		this.featureCount = p.uint16;
		this.featureRecords = [ ...new Array( this.featureCount ) ].map(
			( _ ) => new FeatureRecord( p )
		);
	}
}
class FeatureRecord {
	constructor( p ) {
		this.featureTag = p.tag;
		this.featureOffset = p.Offset16;
	}
}
class FeatureTable extends ParsedData {
	constructor( p ) {
		super( p );
		this.featureParams = p.Offset16;
		this.lookupIndexCount = p.uint16;
		this.lookupListIndices = [ ...new Array( this.lookupIndexCount ) ].map(
			( _ ) => p.uint16
		);
	}
	getFeatureParams() {
		if ( this.featureParams > 0 ) {
			const p = this.parser;
			p.currentPosition = this.start + this.featureParams;
			const tag = this.featureTag;
			if ( tag === `size` ) return new Size( p );
			if ( tag.startsWith( `cc` ) ) return new CharacterVariant( p );
			if ( tag.startsWith( `ss` ) ) return new StylisticSet( p );
		}
	}
}
class CharacterVariant {
	constructor( p ) {
		this.format = p.uint16;
		this.featUiLabelNameId = p.uint16;
		this.featUiTooltipTextNameId = p.uint16;
		this.sampleTextNameId = p.uint16;
		this.numNamedParameters = p.uint16;
		this.firstParamUiLabelNameId = p.uint16;
		this.charCount = p.uint16;
		this.character = [ ...new Array( this.charCount ) ].map(
			( _ ) => p.uint24
		);
	}
}
class Size {
	constructor( p ) {
		this.designSize = p.uint16;
		this.subfamilyIdentifier = p.uint16;
		this.subfamilyNameID = p.uint16;
		this.smallEnd = p.uint16;
		this.largeEnd = p.uint16;
	}
}
class StylisticSet {
	constructor( p ) {
		this.version = p.uint16;
		this.UINameID = p.uint16;
	}
}
function undoCoverageOffsetParsing( instance ) {
	instance.parser.currentPosition -= 2;
	delete instance.coverageOffset;
	delete instance.getCoverageTable;
}
class LookupType$1 extends ParsedData {
	constructor( p ) {
		super( p );
		this.substFormat = p.uint16;
		this.coverageOffset = p.Offset16;
	}
	getCoverageTable() {
		let p = this.parser;
		p.currentPosition = this.start + this.coverageOffset;
		return new CoverageTable( p );
	}
}
class SubstLookupRecord {
	constructor( p ) {
		this.glyphSequenceIndex = p.uint16;
		this.lookupListIndex = p.uint16;
	}
}
class LookupType1$1 extends LookupType$1 {
	constructor( p ) {
		super( p );
		this.deltaGlyphID = p.int16;
	}
}
class LookupType2$1 extends LookupType$1 {
	constructor( p ) {
		super( p );
		this.sequenceCount = p.uint16;
		this.sequenceOffsets = [ ...new Array( this.sequenceCount ) ].map(
			( _ ) => p.Offset16
		);
	}
	getSequence( index ) {
		let p = this.parser;
		p.currentPosition = this.start + this.sequenceOffsets[ index ];
		return new SequenceTable( p );
	}
}
class SequenceTable {
	constructor( p ) {
		this.glyphCount = p.uint16;
		this.substituteGlyphIDs = [ ...new Array( this.glyphCount ) ].map(
			( _ ) => p.uint16
		);
	}
}
class LookupType3$1 extends LookupType$1 {
	constructor( p ) {
		super( p );
		this.alternateSetCount = p.uint16;
		this.alternateSetOffsets = [
			...new Array( this.alternateSetCount ),
		].map( ( _ ) => p.Offset16 );
	}
	getAlternateSet( index ) {
		let p = this.parser;
		p.currentPosition = this.start + this.alternateSetOffsets[ index ];
		return new AlternateSetTable( p );
	}
}
class AlternateSetTable {
	constructor( p ) {
		this.glyphCount = p.uint16;
		this.alternateGlyphIDs = [ ...new Array( this.glyphCount ) ].map(
			( _ ) => p.uint16
		);
	}
}
class LookupType4$1 extends LookupType$1 {
	constructor( p ) {
		super( p );
		this.ligatureSetCount = p.uint16;
		this.ligatureSetOffsets = [ ...new Array( this.ligatureSetCount ) ].map(
			( _ ) => p.Offset16
		);
	}
	getLigatureSet( index ) {
		let p = this.parser;
		p.currentPosition = this.start + this.ligatureSetOffsets[ index ];
		return new LigatureSetTable( p );
	}
}
class LigatureSetTable extends ParsedData {
	constructor( p ) {
		super( p );
		this.ligatureCount = p.uint16;
		this.ligatureOffsets = [ ...new Array( this.ligatureCount ) ].map(
			( _ ) => p.Offset16
		);
	}
	getLigature( index ) {
		let p = this.parser;
		p.currentPosition = this.start + this.ligatureOffsets[ index ];
		return new LigatureTable( p );
	}
}
class LigatureTable {
	constructor( p ) {
		this.ligatureGlyph = p.uint16;
		this.componentCount = p.uint16;
		this.componentGlyphIDs = [
			...new Array( this.componentCount - 1 ),
		].map( ( _ ) => p.uint16 );
	}
}
class LookupType5$1 extends LookupType$1 {
	constructor( p ) {
		super( p );
		if ( this.substFormat === 1 ) {
			this.subRuleSetCount = p.uint16;
			this.subRuleSetOffsets = [
				...new Array( this.subRuleSetCount ),
			].map( ( _ ) => p.Offset16 );
		}
		if ( this.substFormat === 2 ) {
			this.classDefOffset = p.Offset16;
			this.subClassSetCount = p.uint16;
			this.subClassSetOffsets = [
				...new Array( this.subClassSetCount ),
			].map( ( _ ) => p.Offset16 );
		}
		if ( this.substFormat === 3 ) {
			undoCoverageOffsetParsing( this );
			this.glyphCount = p.uint16;
			this.substitutionCount = p.uint16;
			this.coverageOffsets = [ ...new Array( this.glyphCount ) ].map(
				( _ ) => p.Offset16
			);
			this.substLookupRecords = [
				...new Array( this.substitutionCount ),
			].map( ( _ ) => new SubstLookupRecord( p ) );
		}
	}
	getSubRuleSet( index ) {
		if ( this.substFormat !== 1 )
			throw new Error(
				`lookup type 5.${ this.substFormat } has no subrule sets.`
			);
		let p = this.parser;
		p.currentPosition = this.start + this.subRuleSetOffsets[ index ];
		return new SubRuleSetTable( p );
	}
	getSubClassSet( index ) {
		if ( this.substFormat !== 2 )
			throw new Error(
				`lookup type 5.${ this.substFormat } has no subclass sets.`
			);
		let p = this.parser;
		p.currentPosition = this.start + this.subClassSetOffsets[ index ];
		return new SubClassSetTable( p );
	}
	getCoverageTable( index ) {
		if ( this.substFormat !== 3 && ! index )
			return super.getCoverageTable();
		if ( ! index )
			throw new Error(
				`lookup type 5.${ this.substFormat } requires an coverage table index.`
			);
		let p = this.parser;
		p.currentPosition = this.start + this.coverageOffsets[ index ];
		return new CoverageTable( p );
	}
}
class SubRuleSetTable extends ParsedData {
	constructor( p ) {
		super( p );
		this.subRuleCount = p.uint16;
		this.subRuleOffsets = [ ...new Array( this.subRuleCount ) ].map(
			( _ ) => p.Offset16
		);
	}
	getSubRule( index ) {
		let p = this.parser;
		p.currentPosition = this.start + this.subRuleOffsets[ index ];
		return new SubRuleTable( p );
	}
}
class SubRuleTable {
	constructor( p ) {
		this.glyphCount = p.uint16;
		this.substitutionCount = p.uint16;
		this.inputSequence = [ ...new Array( this.glyphCount - 1 ) ].map(
			( _ ) => p.uint16
		);
		this.substLookupRecords = [
			...new Array( this.substitutionCount ),
		].map( ( _ ) => new SubstLookupRecord( p ) );
	}
}
class SubClassSetTable extends ParsedData {
	constructor( p ) {
		super( p );
		this.subClassRuleCount = p.uint16;
		this.subClassRuleOffsets = [
			...new Array( this.subClassRuleCount ),
		].map( ( _ ) => p.Offset16 );
	}
	getSubClass( index ) {
		let p = this.parser;
		p.currentPosition = this.start + this.subClassRuleOffsets[ index ];
		return new SubClassRuleTable( p );
	}
}
class SubClassRuleTable extends SubRuleTable {
	constructor( p ) {
		super( p );
	}
}
class LookupType6$1 extends LookupType$1 {
	constructor( p ) {
		super( p );
		if ( this.substFormat === 1 ) {
			this.chainSubRuleSetCount = p.uint16;
			this.chainSubRuleSetOffsets = [
				...new Array( this.chainSubRuleSetCount ),
			].map( ( _ ) => p.Offset16 );
		}
		if ( this.substFormat === 2 ) {
			this.backtrackClassDefOffset = p.Offset16;
			this.inputClassDefOffset = p.Offset16;
			this.lookaheadClassDefOffset = p.Offset16;
			this.chainSubClassSetCount = p.uint16;
			this.chainSubClassSetOffsets = [
				...new Array( this.chainSubClassSetCount ),
			].map( ( _ ) => p.Offset16 );
		}
		if ( this.substFormat === 3 ) {
			undoCoverageOffsetParsing( this );
			this.backtrackGlyphCount = p.uint16;
			this.backtrackCoverageOffsets = [
				...new Array( this.backtrackGlyphCount ),
			].map( ( _ ) => p.Offset16 );
			this.inputGlyphCount = p.uint16;
			this.inputCoverageOffsets = [
				...new Array( this.inputGlyphCount ),
			].map( ( _ ) => p.Offset16 );
			this.lookaheadGlyphCount = p.uint16;
			this.lookaheadCoverageOffsets = [
				...new Array( this.lookaheadGlyphCount ),
			].map( ( _ ) => p.Offset16 );
			this.seqLookupCount = p.uint16;
			this.seqLookupRecords = [
				...new Array( this.substitutionCount ),
			].map( ( _ ) => new SequenceLookupRecord( p ) );
		}
	}
	getChainSubRuleSet( index ) {
		if ( this.substFormat !== 1 )
			throw new Error(
				`lookup type 6.${ this.substFormat } has no chainsubrule sets.`
			);
		let p = this.parser;
		p.currentPosition = this.start + this.chainSubRuleSetOffsets[ index ];
		return new ChainSubRuleSetTable( p );
	}
	getChainSubClassSet( index ) {
		if ( this.substFormat !== 2 )
			throw new Error(
				`lookup type 6.${ this.substFormat } has no chainsubclass sets.`
			);
		let p = this.parser;
		p.currentPosition = this.start + this.chainSubClassSetOffsets[ index ];
		return new ChainSubClassSetTable( p );
	}
	getCoverageFromOffset( offset ) {
		if ( this.substFormat !== 3 )
			throw new Error(
				`lookup type 6.${ this.substFormat } does not use contextual coverage offsets.`
			);
		let p = this.parser;
		p.currentPosition = this.start + offset;
		return new CoverageTable( p );
	}
}
class ChainSubRuleSetTable extends ParsedData {
	constructor( p ) {
		super( p );
		this.chainSubRuleCount = p.uint16;
		this.chainSubRuleOffsets = [
			...new Array( this.chainSubRuleCount ),
		].map( ( _ ) => p.Offset16 );
	}
	getSubRule( index ) {
		let p = this.parser;
		p.currentPosition = this.start + this.chainSubRuleOffsets[ index ];
		return new ChainSubRuleTable( p );
	}
}
class ChainSubRuleTable {
	constructor( p ) {
		this.backtrackGlyphCount = p.uint16;
		this.backtrackSequence = [
			...new Array( this.backtrackGlyphCount ),
		].map( ( _ ) => p.uint16 );
		this.inputGlyphCount = p.uint16;
		this.inputSequence = [ ...new Array( this.inputGlyphCount - 1 ) ].map(
			( _ ) => p.uint16
		);
		this.lookaheadGlyphCount = p.uint16;
		this.lookAheadSequence = [
			...new Array( this.lookAheadGlyphCount ),
		].map( ( _ ) => p.uint16 );
		this.substitutionCount = p.uint16;
		this.substLookupRecords = [ ...new Array( this.SubstCount ) ].map(
			( _ ) => new SubstLookupRecord( p )
		);
	}
}
class ChainSubClassSetTable extends ParsedData {
	constructor( p ) {
		super( p );
		this.chainSubClassRuleCount = p.uint16;
		this.chainSubClassRuleOffsets = [
			...new Array( this.chainSubClassRuleCount ),
		].map( ( _ ) => p.Offset16 );
	}
	getSubClass( index ) {
		let p = this.parser;
		p.currentPosition = this.start + this.chainSubRuleOffsets[ index ];
		return new ChainSubClassRuleTable( p );
	}
}
class ChainSubClassRuleTable {
	constructor( p ) {
		this.backtrackGlyphCount = p.uint16;
		this.backtrackSequence = [
			...new Array( this.backtrackGlyphCount ),
		].map( ( _ ) => p.uint16 );
		this.inputGlyphCount = p.uint16;
		this.inputSequence = [ ...new Array( this.inputGlyphCount - 1 ) ].map(
			( _ ) => p.uint16
		);
		this.lookaheadGlyphCount = p.uint16;
		this.lookAheadSequence = [
			...new Array( this.lookAheadGlyphCount ),
		].map( ( _ ) => p.uint16 );
		this.substitutionCount = p.uint16;
		this.substLookupRecords = [
			...new Array( this.substitutionCount ),
		].map( ( _ ) => new SequenceLookupRecord( p ) );
	}
}
class SequenceLookupRecord extends ParsedData {
	constructor( p ) {
		super( p );
		this.sequenceIndex = p.uint16;
		this.lookupListIndex = p.uint16;
	}
}
class LookupType7$1 extends ParsedData {
	constructor( p ) {
		super( p );
		this.substFormat = p.uint16;
		this.extensionLookupType = p.uint16;
		this.extensionOffset = p.Offset32;
	}
}
class LookupType8$1 extends LookupType$1 {
	constructor( p ) {
		super( p );
		this.backtrackGlyphCount = p.uint16;
		this.backtrackCoverageOffsets = [
			...new Array( this.backtrackGlyphCount ),
		].map( ( _ ) => p.Offset16 );
		this.lookaheadGlyphCount = p.uint16;
		this.lookaheadCoverageOffsets = [
			new Array( this.lookaheadGlyphCount ),
		].map( ( _ ) => p.Offset16 );
		this.glyphCount = p.uint16;
		this.substituteGlyphIDs = [ ...new Array( this.glyphCount ) ].map(
			( _ ) => p.uint16
		);
	}
}
var GSUBtables = {
	buildSubtable: function ( type, p ) {
		const subtable = new [
			undefined,
			LookupType1$1,
			LookupType2$1,
			LookupType3$1,
			LookupType4$1,
			LookupType5$1,
			LookupType6$1,
			LookupType7$1,
			LookupType8$1,
		][ type ]( p );
		subtable.type = type;
		return subtable;
	},
};
class LookupType extends ParsedData {
	constructor( p ) {
		super( p );
	}
}
class LookupType1 extends LookupType {
	constructor( p ) {
		super( p );
		console.log( `lookup type 1` );
	}
}
class LookupType2 extends LookupType {
	constructor( p ) {
		super( p );
		console.log( `lookup type 2` );
	}
}
class LookupType3 extends LookupType {
	constructor( p ) {
		super( p );
		console.log( `lookup type 3` );
	}
}
class LookupType4 extends LookupType {
	constructor( p ) {
		super( p );
		console.log( `lookup type 4` );
	}
}
class LookupType5 extends LookupType {
	constructor( p ) {
		super( p );
		console.log( `lookup type 5` );
	}
}
class LookupType6 extends LookupType {
	constructor( p ) {
		super( p );
		console.log( `lookup type 6` );
	}
}
class LookupType7 extends LookupType {
	constructor( p ) {
		super( p );
		console.log( `lookup type 7` );
	}
}
class LookupType8 extends LookupType {
	constructor( p ) {
		super( p );
		console.log( `lookup type 8` );
	}
}
class LookupType9 extends LookupType {
	constructor( p ) {
		super( p );
		console.log( `lookup type 9` );
	}
}
var GPOStables = {
	buildSubtable: function ( type, p ) {
		const subtable = new [
			undefined,
			LookupType1,
			LookupType2,
			LookupType3,
			LookupType4,
			LookupType5,
			LookupType6,
			LookupType7,
			LookupType8,
			LookupType9,
		][ type ]( p );
		subtable.type = type;
		return subtable;
	},
};
class LookupList extends ParsedData {
	static EMPTY = { lookupCount: 0, lookups: [] };
	constructor( p ) {
		super( p );
		this.lookupCount = p.uint16;
		this.lookups = [ ...new Array( this.lookupCount ) ].map(
			( _ ) => p.Offset16
		);
	}
}
class LookupTable extends ParsedData {
	constructor( p, type ) {
		super( p );
		this.ctType = type;
		this.lookupType = p.uint16;
		this.lookupFlag = p.uint16;
		this.subTableCount = p.uint16;
		this.subtableOffsets = [ ...new Array( this.subTableCount ) ].map(
			( _ ) => p.Offset16
		);
		this.markFilteringSet = p.uint16;
	}
	get rightToLeft() {
		return this.lookupFlag & ( 1 === 1 );
	}
	get ignoreBaseGlyphs() {
		return this.lookupFlag & ( 2 === 2 );
	}
	get ignoreLigatures() {
		return this.lookupFlag & ( 4 === 4 );
	}
	get ignoreMarks() {
		return this.lookupFlag & ( 8 === 8 );
	}
	get useMarkFilteringSet() {
		return this.lookupFlag & ( 16 === 16 );
	}
	get markAttachmentType() {
		return this.lookupFlag & ( 65280 === 65280 );
	}
	getSubTable( index ) {
		const builder = this.ctType === `GSUB` ? GSUBtables : GPOStables;
		this.parser.currentPosition =
			this.start + this.subtableOffsets[ index ];
		return builder.buildSubtable( this.lookupType, this.parser );
	}
}
class CommonLayoutTable extends SimpleTable {
	constructor( dict, dataview, name ) {
		const { p: p, tableStart: tableStart } = super( dict, dataview, name );
		this.majorVersion = p.uint16;
		this.minorVersion = p.uint16;
		this.scriptListOffset = p.Offset16;
		this.featureListOffset = p.Offset16;
		this.lookupListOffset = p.Offset16;
		if ( this.majorVersion === 1 && this.minorVersion === 1 ) {
			this.featureVariationsOffset = p.Offset32;
		}
		const no_content = ! (
			this.scriptListOffset ||
			this.featureListOffset ||
			this.lookupListOffset
		);
		lazy$1( this, `scriptList`, () => {
			if ( no_content ) return ScriptList.EMPTY;
			p.currentPosition = tableStart + this.scriptListOffset;
			return new ScriptList( p );
		} );
		lazy$1( this, `featureList`, () => {
			if ( no_content ) return FeatureList.EMPTY;
			p.currentPosition = tableStart + this.featureListOffset;
			return new FeatureList( p );
		} );
		lazy$1( this, `lookupList`, () => {
			if ( no_content ) return LookupList.EMPTY;
			p.currentPosition = tableStart + this.lookupListOffset;
			return new LookupList( p );
		} );
		if ( this.featureVariationsOffset ) {
			lazy$1( this, `featureVariations`, () => {
				if ( no_content ) return FeatureVariations.EMPTY;
				p.currentPosition = tableStart + this.featureVariationsOffset;
				return new FeatureVariations( p );
			} );
		}
	}
	getSupportedScripts() {
		return this.scriptList.scriptRecords.map( ( r ) => r.scriptTag );
	}
	getScriptTable( scriptTag ) {
		let record = this.scriptList.scriptRecords.find(
			( r ) => r.scriptTag === scriptTag
		);
		this.parser.currentPosition =
			this.scriptList.start + record.scriptOffset;
		let table = new ScriptTable( this.parser );
		table.scriptTag = scriptTag;
		return table;
	}
	ensureScriptTable( arg ) {
		if ( typeof arg === 'string' ) {
			return this.getScriptTable( arg );
		}
		return arg;
	}
	getSupportedLangSys( scriptTable ) {
		scriptTable = this.ensureScriptTable( scriptTable );
		const hasDefault = scriptTable.defaultLangSys !== 0;
		const supported = scriptTable.langSysRecords.map(
			( l ) => l.langSysTag
		);
		if ( hasDefault ) supported.unshift( `dflt` );
		return supported;
	}
	getDefaultLangSysTable( scriptTable ) {
		scriptTable = this.ensureScriptTable( scriptTable );
		let offset = scriptTable.defaultLangSys;
		if ( offset !== 0 ) {
			this.parser.currentPosition = scriptTable.start + offset;
			let table = new LangSysTable( this.parser );
			table.langSysTag = ``;
			table.defaultForScript = scriptTable.scriptTag;
			return table;
		}
	}
	getLangSysTable( scriptTable, langSysTag = `dflt` ) {
		if ( langSysTag === `dflt` )
			return this.getDefaultLangSysTable( scriptTable );
		scriptTable = this.ensureScriptTable( scriptTable );
		let record = scriptTable.langSysRecords.find(
			( l ) => l.langSysTag === langSysTag
		);
		this.parser.currentPosition = scriptTable.start + record.langSysOffset;
		let table = new LangSysTable( this.parser );
		table.langSysTag = langSysTag;
		return table;
	}
	getFeatures( langSysTable ) {
		return langSysTable.featureIndices.map( ( index ) =>
			this.getFeature( index )
		);
	}
	getFeature( indexOrTag ) {
		let record;
		if ( parseInt( indexOrTag ) == indexOrTag ) {
			record = this.featureList.featureRecords[ indexOrTag ];
		} else {
			record = this.featureList.featureRecords.find(
				( f ) => f.featureTag === indexOrTag
			);
		}
		if ( ! record ) return;
		this.parser.currentPosition =
			this.featureList.start + record.featureOffset;
		let table = new FeatureTable( this.parser );
		table.featureTag = record.featureTag;
		return table;
	}
	getLookups( featureTable ) {
		return featureTable.lookupListIndices.map( ( index ) =>
			this.getLookup( index )
		);
	}
	getLookup( lookupIndex, type ) {
		let lookupOffset = this.lookupList.lookups[ lookupIndex ];
		this.parser.currentPosition = this.lookupList.start + lookupOffset;
		return new LookupTable( this.parser, type );
	}
}
class GSUB extends CommonLayoutTable {
	constructor( dict, dataview ) {
		super( dict, dataview, `GSUB` );
	}
	getLookup( lookupIndex ) {
		return super.getLookup( lookupIndex, `GSUB` );
	}
}
var GSUB$1 = Object.freeze( { __proto__: null, GSUB: GSUB } );
class GPOS extends CommonLayoutTable {
	constructor( dict, dataview ) {
		super( dict, dataview, `GPOS` );
	}
	getLookup( lookupIndex ) {
		return super.getLookup( lookupIndex, `GPOS` );
	}
}
var GPOS$1 = Object.freeze( { __proto__: null, GPOS: GPOS } );
class SVG extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		this.version = p.uint16;
		this.offsetToSVGDocumentList = p.Offset32;
		p.currentPosition = this.tableStart + this.offsetToSVGDocumentList;
		this.documentList = new SVGDocumentList( p );
	}
}
class SVGDocumentList extends ParsedData {
	constructor( p ) {
		super( p );
		this.numEntries = p.uint16;
		this.documentRecords = [ ...new Array( this.numEntries ) ].map(
			( _ ) => new SVGDocumentRecord( p )
		);
	}
	getDocument( documentID ) {
		let record = this.documentRecords[ documentID ];
		if ( ! record ) return '';
		let offset = this.start + record.svgDocOffset;
		this.parser.currentPosition = offset;
		return this.parser.readBytes( record.svgDocLength );
	}
	getDocumentForGlyph( glyphID ) {
		let id = this.documentRecords.findIndex(
			( d ) => d.startGlyphID <= glyphID && glyphID <= d.endGlyphID
		);
		if ( id === -1 ) return '';
		return this.getDocument( id );
	}
}
class SVGDocumentRecord {
	constructor( p ) {
		this.startGlyphID = p.uint16;
		this.endGlyphID = p.uint16;
		this.svgDocOffset = p.Offset32;
		this.svgDocLength = p.uint32;
	}
}
var SVG$1 = Object.freeze( { __proto__: null, SVG: SVG } );
class fvar extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		this.majorVersion = p.uint16;
		this.minorVersion = p.uint16;
		this.axesArrayOffset = p.Offset16;
		p.uint16;
		this.axisCount = p.uint16;
		this.axisSize = p.uint16;
		this.instanceCount = p.uint16;
		this.instanceSize = p.uint16;
		const axisStart = this.tableStart + this.axesArrayOffset;
		lazy$1( this, `axes`, () => {
			p.currentPosition = axisStart;
			return [ ...new Array( this.axisCount ) ].map(
				( _ ) => new VariationAxisRecord( p )
			);
		} );
		const instanceStart = axisStart + this.axisCount * this.axisSize;
		lazy$1( this, `instances`, () => {
			let instances = [];
			for ( let i = 0; i < this.instanceCount; i++ ) {
				p.currentPosition = instanceStart + i * this.instanceSize;
				instances.push(
					new InstanceRecord( p, this.axisCount, this.instanceSize )
				);
			}
			return instances;
		} );
	}
	getSupportedAxes() {
		return this.axes.map( ( a ) => a.tag );
	}
	getAxis( name ) {
		return this.axes.find( ( a ) => a.tag === name );
	}
}
class VariationAxisRecord {
	constructor( p ) {
		this.tag = p.tag;
		this.minValue = p.fixed;
		this.defaultValue = p.fixed;
		this.maxValue = p.fixed;
		this.flags = p.flags( 16 );
		this.axisNameID = p.uint16;
	}
}
class InstanceRecord {
	constructor( p, axisCount, size ) {
		let start = p.currentPosition;
		this.subfamilyNameID = p.uint16;
		p.uint16;
		this.coordinates = [ ...new Array( axisCount ) ].map(
			( _ ) => p.fixed
		);
		if ( p.currentPosition - start < size ) {
			this.postScriptNameID = p.uint16;
		}
	}
}
var fvar$1 = Object.freeze( { __proto__: null, fvar: fvar } );
class cvt extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		const n = dict.length / 2;
		lazy$1( this, `items`, () =>
			[ ...new Array( n ) ].map( ( _ ) => p.fword )
		);
	}
}
var cvt$1 = Object.freeze( { __proto__: null, cvt: cvt } );
class fpgm extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		lazy$1( this, `instructions`, () =>
			[ ...new Array( dict.length ) ].map( ( _ ) => p.uint8 )
		);
	}
}
var fpgm$1 = Object.freeze( { __proto__: null, fpgm: fpgm } );
class gasp extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		this.version = p.uint16;
		this.numRanges = p.uint16;
		const getter = () =>
			[ ...new Array( this.numRanges ) ].map(
				( _ ) => new GASPRange( p )
			);
		lazy$1( this, `gaspRanges`, getter );
	}
}
class GASPRange {
	constructor( p ) {
		this.rangeMaxPPEM = p.uint16;
		this.rangeGaspBehavior = p.uint16;
	}
}
var gasp$1 = Object.freeze( { __proto__: null, gasp: gasp } );
class glyf extends SimpleTable {
	constructor( dict, dataview ) {
		super( dict, dataview );
	}
	getGlyphData( offset, length ) {
		this.parser.currentPosition = this.tableStart + offset;
		return this.parser.readBytes( length );
	}
}
var glyf$1 = Object.freeze( { __proto__: null, glyf: glyf } );
class loca extends SimpleTable {
	constructor( dict, dataview, tables ) {
		const { p: p } = super( dict, dataview );
		const n = tables.maxp.numGlyphs + 1;
		if ( tables.head.indexToLocFormat === 0 ) {
			this.x2 = true;
			lazy$1( this, `offsets`, () =>
				[ ...new Array( n ) ].map( ( _ ) => p.Offset16 )
			);
		} else {
			lazy$1( this, `offsets`, () =>
				[ ...new Array( n ) ].map( ( _ ) => p.Offset32 )
			);
		}
	}
	getGlyphDataOffsetAndLength( glyphID ) {
		let offset = this.offsets[ glyphID ] * this.x2 ? 2 : 1;
		let nextOffset = this.offsets[ glyphID + 1 ] * this.x2 ? 2 : 1;
		return { offset: offset, length: nextOffset - offset };
	}
}
var loca$1 = Object.freeze( { __proto__: null, loca: loca } );
class prep extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		lazy$1( this, `instructions`, () =>
			[ ...new Array( dict.length ) ].map( ( _ ) => p.uint8 )
		);
	}
}
var prep$1 = Object.freeze( { __proto__: null, prep: prep } );
class CFF extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		lazy$1( this, `data`, () => p.readBytes() );
	}
}
var CFF$1 = Object.freeze( { __proto__: null, CFF: CFF } );
class CFF2 extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		lazy$1( this, `data`, () => p.readBytes() );
	}
}
var CFF2$1 = Object.freeze( { __proto__: null, CFF2: CFF2 } );
class VORG extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		this.majorVersion = p.uint16;
		this.minorVersion = p.uint16;
		this.defaultVertOriginY = p.int16;
		this.numVertOriginYMetrics = p.uint16;
		lazy$1( this, `vertORiginYMetrics`, () =>
			[ ...new Array( this.numVertOriginYMetrics ) ].map(
				( _ ) => new VertOriginYMetric( p )
			)
		);
	}
}
class VertOriginYMetric {
	constructor( p ) {
		this.glyphIndex = p.uint16;
		this.vertOriginY = p.int16;
	}
}
var VORG$1 = Object.freeze( { __proto__: null, VORG: VORG } );
class BitmapSize {
	constructor( p ) {
		this.indexSubTableArrayOffset = p.Offset32;
		this.indexTablesSize = p.uint32;
		this.numberofIndexSubTables = p.uint32;
		this.colorRef = p.uint32;
		this.hori = new SbitLineMetrics( p );
		this.vert = new SbitLineMetrics( p );
		this.startGlyphIndex = p.uint16;
		this.endGlyphIndex = p.uint16;
		this.ppemX = p.uint8;
		this.ppemY = p.uint8;
		this.bitDepth = p.uint8;
		this.flags = p.int8;
	}
}
class BitmapScale {
	constructor( p ) {
		this.hori = new SbitLineMetrics( p );
		this.vert = new SbitLineMetrics( p );
		this.ppemX = p.uint8;
		this.ppemY = p.uint8;
		this.substitutePpemX = p.uint8;
		this.substitutePpemY = p.uint8;
	}
}
class SbitLineMetrics {
	constructor( p ) {
		this.ascender = p.int8;
		this.descender = p.int8;
		this.widthMax = p.uint8;
		this.caretSlopeNumerator = p.int8;
		this.caretSlopeDenominator = p.int8;
		this.caretOffset = p.int8;
		this.minOriginSB = p.int8;
		this.minAdvanceSB = p.int8;
		this.maxBeforeBL = p.int8;
		this.minAfterBL = p.int8;
		this.pad1 = p.int8;
		this.pad2 = p.int8;
	}
}
class EBLC extends SimpleTable {
	constructor( dict, dataview, name ) {
		const { p: p } = super( dict, dataview, name );
		this.majorVersion = p.uint16;
		this.minorVersion = p.uint16;
		this.numSizes = p.uint32;
		lazy$1( this, `bitMapSizes`, () =>
			[ ...new Array( this.numSizes ) ].map(
				( _ ) => new BitmapSize( p )
			)
		);
	}
}
var EBLC$1 = Object.freeze( { __proto__: null, EBLC: EBLC } );
class EBDT extends SimpleTable {
	constructor( dict, dataview, name ) {
		const { p: p } = super( dict, dataview, name );
		this.majorVersion = p.uint16;
		this.minorVersion = p.uint16;
	}
}
var EBDT$1 = Object.freeze( { __proto__: null, EBDT: EBDT } );
class EBSC extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		this.majorVersion = p.uint16;
		this.minorVersion = p.uint16;
		this.numSizes = p.uint32;
		lazy$1( this, `bitmapScales`, () =>
			[ ...new Array( this.numSizes ) ].map(
				( _ ) => new BitmapScale( p )
			)
		);
	}
}
var EBSC$1 = Object.freeze( { __proto__: null, EBSC: EBSC } );
class CBLC extends EBLC {
	constructor( dict, dataview ) {
		super( dict, dataview, `CBLC` );
	}
}
var CBLC$1 = Object.freeze( { __proto__: null, CBLC: CBLC } );
class CBDT extends EBDT {
	constructor( dict, dataview ) {
		super( dict, dataview, `CBDT` );
	}
}
var CBDT$1 = Object.freeze( { __proto__: null, CBDT: CBDT } );
class sbix extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		this.version = p.uint16;
		this.flags = p.flags( 16 );
		this.numStrikes = p.uint32;
		lazy$1( this, `strikeOffsets`, () =>
			[ ...new Array( this.numStrikes ) ].map( ( _ ) => p.Offset32 )
		);
	}
}
var sbix$1 = Object.freeze( { __proto__: null, sbix: sbix } );
class COLR extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		this.version = p.uint16;
		this.numBaseGlyphRecords = p.uint16;
		this.baseGlyphRecordsOffset = p.Offset32;
		this.layerRecordsOffset = p.Offset32;
		this.numLayerRecords = p.uint16;
	}
	getBaseGlyphRecord( glyphID ) {
		let start = this.tableStart + this.baseGlyphRecordsOffset;
		this.parser.currentPosition = start;
		let first = new BaseGlyphRecord( this.parser );
		let firstID = first.gID;
		let end = this.tableStart + this.layerRecordsOffset - 6;
		this.parser.currentPosition = end;
		let last = new BaseGlyphRecord( this.parser );
		let lastID = last.gID;
		if ( firstID === glyphID ) return first;
		if ( lastID === glyphID ) return last;
		while ( true ) {
			if ( start === end ) break;
			let mid = start + ( end - start ) / 12;
			this.parser.currentPosition = mid;
			let middle = new BaseGlyphRecord( this.parser );
			let midID = middle.gID;
			if ( midID === glyphID ) return middle;
			else if ( midID > glyphID ) {
				end = mid;
			} else if ( midID < glyphID ) {
				start = mid;
			}
		}
		return false;
	}
	getLayers( glyphID ) {
		let record = this.getBaseGlyphRecord( glyphID );
		this.parser.currentPosition =
			this.tableStart +
			this.layerRecordsOffset +
			4 * record.firstLayerIndex;
		return [ ...new Array( record.numLayers ) ].map(
			( _ ) => new LayerRecord( p )
		);
	}
}
class BaseGlyphRecord {
	constructor( p ) {
		this.gID = p.uint16;
		this.firstLayerIndex = p.uint16;
		this.numLayers = p.uint16;
	}
}
class LayerRecord {
	constructor( p ) {
		this.gID = p.uint16;
		this.paletteIndex = p.uint16;
	}
}
var COLR$1 = Object.freeze( { __proto__: null, COLR: COLR } );
class CPAL extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		this.version = p.uint16;
		this.numPaletteEntries = p.uint16;
		const numPalettes = ( this.numPalettes = p.uint16 );
		this.numColorRecords = p.uint16;
		this.offsetFirstColorRecord = p.Offset32;
		this.colorRecordIndices = [ ...new Array( this.numPalettes ) ].map(
			( _ ) => p.uint16
		);
		lazy$1( this, `colorRecords`, () => {
			p.currentPosition = this.tableStart + this.offsetFirstColorRecord;
			return [ ...new Array( this.numColorRecords ) ].map(
				( _ ) => new ColorRecord( p )
			);
		} );
		if ( this.version === 1 ) {
			this.offsetPaletteTypeArray = p.Offset32;
			this.offsetPaletteLabelArray = p.Offset32;
			this.offsetPaletteEntryLabelArray = p.Offset32;
			lazy$1( this, `paletteTypeArray`, () => {
				p.currentPosition =
					this.tableStart + this.offsetPaletteTypeArray;
				return new PaletteTypeArray( p, numPalettes );
			} );
			lazy$1( this, `paletteLabelArray`, () => {
				p.currentPosition =
					this.tableStart + this.offsetPaletteLabelArray;
				return new PaletteLabelsArray( p, numPalettes );
			} );
			lazy$1( this, `paletteEntryLabelArray`, () => {
				p.currentPosition =
					this.tableStart + this.offsetPaletteEntryLabelArray;
				return new PaletteEntryLabelArray( p, numPalettes );
			} );
		}
	}
}
class ColorRecord {
	constructor( p ) {
		this.blue = p.uint8;
		this.green = p.uint8;
		this.red = p.uint8;
		this.alpha = p.uint8;
	}
}
class PaletteTypeArray {
	constructor( p, numPalettes ) {
		this.paletteTypes = [ ...new Array( numPalettes ) ].map(
			( _ ) => p.uint32
		);
	}
}
class PaletteLabelsArray {
	constructor( p, numPalettes ) {
		this.paletteLabels = [ ...new Array( numPalettes ) ].map(
			( _ ) => p.uint16
		);
	}
}
class PaletteEntryLabelArray {
	constructor( p, numPalettes ) {
		this.paletteEntryLabels = [ ...new Array( numPalettes ) ].map(
			( _ ) => p.uint16
		);
	}
}
var CPAL$1 = Object.freeze( { __proto__: null, CPAL: CPAL } );
class DSIG extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		this.version = p.uint32;
		this.numSignatures = p.uint16;
		this.flags = p.uint16;
		this.signatureRecords = [ ...new Array( this.numSignatures ) ].map(
			( _ ) => new SignatureRecord( p )
		);
	}
	getData( signatureID ) {
		const record = this.signatureRecords[ signatureID ];
		this.parser.currentPosition = this.tableStart + record.offset;
		return new SignatureBlockFormat1( this.parser );
	}
}
class SignatureRecord {
	constructor( p ) {
		this.format = p.uint32;
		this.length = p.uint32;
		this.offset = p.Offset32;
	}
}
class SignatureBlockFormat1 {
	constructor( p ) {
		p.uint16;
		p.uint16;
		this.signatureLength = p.uint32;
		this.signature = p.readBytes( this.signatureLength );
	}
}
var DSIG$1 = Object.freeze( { __proto__: null, DSIG: DSIG } );
class hdmx extends SimpleTable {
	constructor( dict, dataview, tables ) {
		const { p: p } = super( dict, dataview );
		const numGlyphs = tables.hmtx.numGlyphs;
		this.version = p.uint16;
		this.numRecords = p.int16;
		this.sizeDeviceRecord = p.int32;
		this.records = [ ...new Array( numRecords ) ].map(
			( _ ) => new DeviceRecord( p, numGlyphs )
		);
	}
}
class DeviceRecord {
	constructor( p, numGlyphs ) {
		this.pixelSize = p.uint8;
		this.maxWidth = p.uint8;
		this.widths = p.readBytes( numGlyphs );
	}
}
var hdmx$1 = Object.freeze( { __proto__: null, hdmx: hdmx } );
class kern extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		this.version = p.uint16;
		this.nTables = p.uint16;
		lazy$1( this, `tables`, () => {
			let offset = this.tableStart + 4;
			const tables = [];
			for ( let i = 0; i < this.nTables; i++ ) {
				p.currentPosition = offset;
				let subtable = new KernSubTable( p );
				tables.push( subtable );
				offset += subtable;
			}
			return tables;
		} );
	}
}
class KernSubTable {
	constructor( p ) {
		this.version = p.uint16;
		this.length = p.uint16;
		this.coverage = p.flags( 8 );
		this.format = p.uint8;
		if ( this.format === 0 ) {
			this.nPairs = p.uint16;
			this.searchRange = p.uint16;
			this.entrySelector = p.uint16;
			this.rangeShift = p.uint16;
			lazy$1( this, `pairs`, () =>
				[ ...new Array( this.nPairs ) ].map( ( _ ) => new Pair( p ) )
			);
		}
		if ( this.format === 2 ) {
			console.warn(
				`Kern subtable format 2 is not supported: this parser currently only parses universal table data.`
			);
		}
	}
	get horizontal() {
		return this.coverage[ 0 ];
	}
	get minimum() {
		return this.coverage[ 1 ];
	}
	get crossstream() {
		return this.coverage[ 2 ];
	}
	get override() {
		return this.coverage[ 3 ];
	}
}
class Pair {
	constructor( p ) {
		this.left = p.uint16;
		this.right = p.uint16;
		this.value = p.fword;
	}
}
var kern$1 = Object.freeze( { __proto__: null, kern: kern } );
class LTSH extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		this.version = p.uint16;
		this.numGlyphs = p.uint16;
		this.yPels = p.readBytes( this.numGlyphs );
	}
}
var LTSH$1 = Object.freeze( { __proto__: null, LTSH: LTSH } );
class MERG extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		this.version = p.uint16;
		this.mergeClassCount = p.uint16;
		this.mergeDataOffset = p.Offset16;
		this.classDefCount = p.uint16;
		this.offsetToClassDefOffsets = p.Offset16;
		lazy$1( this, `mergeEntryMatrix`, () =>
			[ ...new Array( this.mergeClassCount ) ].map( ( _ ) =>
				p.readBytes( this.mergeClassCount )
			)
		);
		console.warn( `Full MERG parsing is currently not supported.` );
		console.warn(
			`If you need this table parsed, please file an issue, or better yet, a PR.`
		);
	}
}
var MERG$1 = Object.freeze( { __proto__: null, MERG: MERG } );
class meta extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		this.version = p.uint32;
		this.flags = p.uint32;
		p.uint32;
		this.dataMapsCount = p.uint32;
		this.dataMaps = [ ...new Array( this.dataMapsCount ) ].map(
			( _ ) => new DataMap( this.tableStart, p )
		);
	}
}
class DataMap {
	constructor( tableStart, p ) {
		this.tableStart = tableStart;
		this.parser = p;
		this.tag = p.tag;
		this.dataOffset = p.Offset32;
		this.dataLength = p.uint32;
	}
	getData() {
		this.parser.currentField = this.tableStart + this.dataOffset;
		return this.parser.readBytes( this.dataLength );
	}
}
var meta$1 = Object.freeze( { __proto__: null, meta: meta } );
class PCLT extends SimpleTable {
	constructor( dict, dataview ) {
		super( dict, dataview );
		console.warn(
			`This font uses a PCLT table, which is currently not supported by this parser.`
		);
		console.warn(
			`If you need this table parsed, please file an issue, or better yet, a PR.`
		);
	}
}
var PCLT$1 = Object.freeze( { __proto__: null, PCLT: PCLT } );
class VDMX extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		this.version = p.uint16;
		this.numRecs = p.uint16;
		this.numRatios = p.uint16;
		this.ratRanges = [ ...new Array( this.numRatios ) ].map(
			( _ ) => new RatioRange( p )
		);
		this.offsets = [ ...new Array( this.numRatios ) ].map(
			( _ ) => p.Offset16
		);
		this.VDMXGroups = [ ...new Array( this.numRecs ) ].map(
			( _ ) => new VDMXGroup( p )
		);
	}
}
class RatioRange {
	constructor( p ) {
		this.bCharSet = p.uint8;
		this.xRatio = p.uint8;
		this.yStartRatio = p.uint8;
		this.yEndRatio = p.uint8;
	}
}
class VDMXGroup {
	constructor( p ) {
		this.recs = p.uint16;
		this.startsz = p.uint8;
		this.endsz = p.uint8;
		this.records = [ ...new Array( this.recs ) ].map(
			( _ ) => new vTable( p )
		);
	}
}
class vTable {
	constructor( p ) {
		this.yPelHeight = p.uint16;
		this.yMax = p.int16;
		this.yMin = p.int16;
	}
}
var VDMX$1 = Object.freeze( { __proto__: null, VDMX: VDMX } );
class vhea extends SimpleTable {
	constructor( dict, dataview ) {
		const { p: p } = super( dict, dataview );
		this.version = p.fixed;
		this.ascent = this.vertTypoAscender = p.int16;
		this.descent = this.vertTypoDescender = p.int16;
		this.lineGap = this.vertTypoLineGap = p.int16;
		this.advanceHeightMax = p.int16;
		this.minTopSideBearing = p.int16;
		this.minBottomSideBearing = p.int16;
		this.yMaxExtent = p.int16;
		this.caretSlopeRise = p.int16;
		this.caretSlopeRun = p.int16;
		this.caretOffset = p.int16;
		this.reserved = p.int16;
		this.reserved = p.int16;
		this.reserved = p.int16;
		this.reserved = p.int16;
		this.metricDataFormat = p.int16;
		this.numOfLongVerMetrics = p.uint16;
		p.verifyLength();
	}
}
var vhea$1 = Object.freeze( { __proto__: null, vhea: vhea } );
class vmtx extends SimpleTable {
	constructor( dict, dataview, tables ) {
		super( dict, dataview );
		const numOfLongVerMetrics = tables.vhea.numOfLongVerMetrics;
		const numGlyphs = tables.maxp.numGlyphs;
		const metricsStart = p.currentPosition;
		lazy( this, `vMetrics`, () => {
			p.currentPosition = metricsStart;
			return [ ...new Array( numOfLongVerMetrics ) ].map(
				( _ ) => new LongVertMetric( p.uint16, p.int16 )
			);
		} );
		if ( numOfLongVerMetrics < numGlyphs ) {
			const tsbStart = metricsStart + numOfLongVerMetrics * 4;
			lazy( this, `topSideBearings`, () => {
				p.currentPosition = tsbStart;
				return [ ...new Array( numGlyphs - numOfLongVerMetrics ) ].map(
					( _ ) => p.int16
				);
			} );
		}
	}
}
class LongVertMetric {
	constructor( h, b ) {
		this.advanceHeight = h;
		this.topSideBearing = b;
	}
}
var vmtx$1 = Object.freeze( { __proto__: null, vmtx: vmtx } );

/* eslint-enable */

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/font-library-modal/utils/make-families-from-faces.js
/**
 * WordPress dependencies
 */


/**
 * Internal dependencies
 */

const {
  kebabCase: make_families_from_faces_kebabCase
} = unlock(external_wp_components_namespaceObject.privateApis);
function makeFamiliesFromFaces(fontFaces) {
  const fontFamiliesObject = fontFaces.reduce((acc, item) => {
    if (!acc[item.fontFamily]) {
      acc[item.fontFamily] = {
        name: item.fontFamily,
        fontFamily: item.fontFamily,
        slug: make_families_from_faces_kebabCase(item.fontFamily.toLowerCase()),
        fontFace: []
      };
    }
    acc[item.fontFamily].fontFace.push(item);
    return acc;
  }, {});
  return Object.values(fontFamiliesObject);
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/font-library-modal/upload-fonts.js

/**
 * WordPress dependencies
 */




/**
 * Internal dependencies
 */






const {
  ProgressBar: upload_fonts_ProgressBar
} = unlock(external_wp_components_namespaceObject.privateApis);
function UploadFonts() {
  const {
    installFonts,
    notice,
    setNotice
  } = (0,external_wp_element_namespaceObject.useContext)(FontLibraryContext);
  const [isUploading, setIsUploading] = (0,external_wp_element_namespaceObject.useState)(false);
  const handleDropZone = files => {
    handleFilesUpload(files);
  };
  const onFilesUpload = event => {
    handleFilesUpload(event.target.files);
  };

  /**
   * Filters the selected files to only allow the ones with the allowed extensions
   *
   * @param {Array} files The files to be filtered
   * @return {void}
   */
  const handleFilesUpload = async files => {
    setNotice(null);
    setIsUploading(true);
    const uniqueFilenames = new Set();
    const selectedFiles = [...files];
    let hasInvalidFiles = false;

    // Use map to create a promise for each file check, then filter with Promise.all.
    const checkFilesPromises = selectedFiles.map(async file => {
      const isFont = await isFontFile(file);
      if (!isFont) {
        hasInvalidFiles = true;
        return null; // Return null for invalid files.
      }
      // Check for duplicates
      if (uniqueFilenames.has(file.name)) {
        return null; // Return null for duplicates.
      }
      // Check if the file extension is allowed.
      const fileExtension = file.name.split('.').pop().toLowerCase();
      if (ALLOWED_FILE_EXTENSIONS.includes(fileExtension)) {
        uniqueFilenames.add(file.name);
        return file; // Return the file if it passes all checks.
      }
      return null; // Return null for disallowed file extensions.
    });

    // Filter out the nulls after all promises have resolved.
    const allowedFiles = (await Promise.all(checkFilesPromises)).filter(file => null !== file);
    if (allowedFiles.length > 0) {
      loadFiles(allowedFiles);
    } else {
      const message = hasInvalidFiles ? (0,external_wp_i18n_namespaceObject.__)('Sorry, you are not allowed to upload this file type.') : (0,external_wp_i18n_namespaceObject.__)('No fonts found to install.');
      setNotice({
        type: 'error',
        message
      });
      setIsUploading(false);
    }
  };

  /**
   * Loads the selected files and reads the font metadata
   *
   * @param {Array} files The files to be loaded
   * @return {void}
   */
  const loadFiles = async files => {
    const fontFacesLoaded = await Promise.all(files.map(async fontFile => {
      const fontFaceData = await getFontFaceMetadata(fontFile);
      await loadFontFaceInBrowser(fontFaceData, fontFaceData.file, 'all');
      return fontFaceData;
    }));
    handleInstall(fontFacesLoaded);
  };

  /**
   * Checks if a file is a valid Font file.
   *
   * @param {File} file The file to be checked.
   * @return {boolean} Whether the file is a valid font file.
   */
  async function isFontFile(file) {
    const font = new Font('Uploaded Font');
    try {
      const buffer = await readFileAsArrayBuffer(file);
      await font.fromDataBuffer(buffer, 'font');
      return true;
    } catch (error) {
      return false;
    }
  }

  // Create a function to read the file as array buffer
  async function readFileAsArrayBuffer(file) {
    return new Promise((resolve, reject) => {
      const reader = new window.FileReader();
      reader.readAsArrayBuffer(file);
      reader.onload = () => resolve(reader.result);
      reader.onerror = reject;
    });
  }
  const getFontFaceMetadata = async fontFile => {
    const buffer = await readFileAsArrayBuffer(fontFile);
    const fontObj = new Font('Uploaded Font');
    fontObj.fromDataBuffer(buffer, fontFile.name);
    // Assuming that fromDataBuffer triggers onload event and returning a Promise
    const onloadEvent = await new Promise(resolve => fontObj.onload = resolve);
    const font = onloadEvent.detail.font;
    const {
      name
    } = font.opentype.tables;
    const fontName = name.get(16) || name.get(1);
    const isItalic = name.get(2).toLowerCase().includes('italic');
    const fontWeight = font.opentype.tables['OS/2'].usWeightClass || 'normal';
    const isVariable = !!font.opentype.tables.fvar;
    const weightAxis = isVariable && font.opentype.tables.fvar.axes.find(({
      tag
    }) => tag === 'wght');
    const weightRange = weightAxis ? `${weightAxis.minValue} ${weightAxis.maxValue}` : null;
    return {
      file: fontFile,
      fontFamily: fontName,
      fontStyle: isItalic ? 'italic' : 'normal',
      fontWeight: weightRange || fontWeight
    };
  };

  /**
   * Creates the font family definition and sends it to the server
   *
   * @param {Array} fontFaces The font faces to be installed
   * @return {void}
   */
  const handleInstall = async fontFaces => {
    const fontFamilies = makeFamiliesFromFaces(fontFaces);
    try {
      await installFonts(fontFamilies);
      setNotice({
        type: 'success',
        message: (0,external_wp_i18n_namespaceObject.__)('Fonts were installed successfully.')
      });
    } catch (error) {
      setNotice({
        type: 'error',
        message: error.message,
        errors: error?.installationErrors
      });
    }
    setIsUploading(false);
  };
  return (0,external_React_.createElement)("div", {
    className: "font-library-modal__tabpanel-layout"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.DropZone, {
    onFilesDrop: handleDropZone
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    className: "font-library-modal__local-fonts"
  }, notice && (0,external_React_.createElement)(external_wp_components_namespaceObject.Notice, {
    status: notice.type,
    __unstableHTML: true,
    onRemove: () => setNotice(null)
  }, notice.message, notice.errors && (0,external_React_.createElement)("ul", null, notice.errors.map((error, index) => (0,external_React_.createElement)("li", {
    key: index
  }, error)))), isUploading && (0,external_React_.createElement)(external_wp_components_namespaceObject.FlexItem, null, (0,external_React_.createElement)("div", {
    className: "font-library-modal__upload-area"
  }, (0,external_React_.createElement)(upload_fonts_ProgressBar, null))), !isUploading && (0,external_React_.createElement)(external_wp_components_namespaceObject.FormFileUpload, {
    accept: ALLOWED_FILE_EXTENSIONS.map(ext => `.${ext}`).join(','),
    multiple: true,
    onChange: onFilesUpload,
    render: ({
      openFileDialog
    }) => (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
      className: "font-library-modal__upload-area",
      onClick: openFileDialog
    }, (0,external_wp_i18n_namespaceObject.__)('Upload font'))
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    margin: 2
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    className: "font-library-modal__upload-area__text"
  }, (0,external_wp_i18n_namespaceObject.__)('Uploaded fonts appear in your library and can be used in your theme. Supported formats: .ttf, .otf, .woff, and .woff2.'))));
}
/* harmony default export */ const upload_fonts = (UploadFonts);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/font-library-modal/index.js

/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */





const {
  Tabs: font_library_modal_Tabs
} = unlock(external_wp_components_namespaceObject.privateApis);
const DEFAULT_TAB = {
  id: 'installed-fonts',
  title: (0,external_wp_i18n_namespaceObject._x)('Library', 'Font library')
};
const UPLOAD_TAB = {
  id: 'upload-fonts',
  title: (0,external_wp_i18n_namespaceObject.__)('Upload')
};
const tabsFromCollections = collections => collections.map(({
  slug,
  name
}) => ({
  id: slug,
  title: collections.length === 1 && slug === 'google-fonts' ? (0,external_wp_i18n_namespaceObject.__)('Install Fonts') : name
}));
function FontLibraryModal({
  onRequestClose,
  initialTabId = 'installed-fonts'
}) {
  const {
    collections,
    setNotice
  } = (0,external_wp_element_namespaceObject.useContext)(FontLibraryContext);
  const canUserCreate = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      canUser
    } = select(external_wp_coreData_namespaceObject.store);
    return canUser('create', 'font-families');
  }, []);
  const tabs = [DEFAULT_TAB];
  if (canUserCreate) {
    tabs.push(UPLOAD_TAB);
    tabs.push(...tabsFromCollections(collections || []));
  }

  // Reset notice when new tab is selected.
  const onSelect = () => {
    setNotice(null);
  };
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Modal, {
    title: (0,external_wp_i18n_namespaceObject.__)('Fonts'),
    onRequestClose: onRequestClose,
    isFullScreen: true,
    className: "font-library-modal"
  }, (0,external_React_.createElement)("div", {
    className: "font-library-modal__tabs"
  }, (0,external_React_.createElement)(font_library_modal_Tabs, {
    initialTabId: initialTabId,
    onSelect: onSelect
  }, (0,external_React_.createElement)(font_library_modal_Tabs.TabList, null, tabs.map(({
    id,
    title
  }) => (0,external_React_.createElement)(font_library_modal_Tabs.Tab, {
    key: id,
    tabId: id
  }, title))), tabs.map(({
    id
  }) => {
    let contents;
    switch (id) {
      case 'upload-fonts':
        contents = (0,external_React_.createElement)(upload_fonts, null);
        break;
      case 'installed-fonts':
        contents = (0,external_React_.createElement)(installed_fonts, null);
        break;
      default:
        contents = (0,external_React_.createElement)(font_collection, {
          slug: id
        });
    }
    return (0,external_React_.createElement)(font_library_modal_Tabs.TabPanel, {
      key: id,
      tabId: id,
      focusable: false
    }, contents);
  }))));
}
/* harmony default export */ const font_library_modal = (FontLibraryModal);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/font-family-item.js

/**
 * WordPress dependencies
 */




/**
 * Internal dependencies
 */


function FontFamilyItem({
  font
}) {
  const {
    handleSetLibraryFontSelected,
    toggleModal
  } = (0,external_wp_element_namespaceObject.useContext)(FontLibraryContext);
  const variantsCount = font?.fontFace?.length || 1;
  const handleClick = () => {
    handleSetLibraryFontSelected(font);
    toggleModal('installed-fonts');
  };
  const previewStyle = getFamilyPreviewStyle(font);
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItem, {
    onClick: handleClick
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    justify: "space-between"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.FlexItem, {
    style: previewStyle
  }, font.name), (0,external_React_.createElement)(external_wp_components_namespaceObject.FlexItem, {
    className: "edit-site-global-styles-screen-typography__font-variants-count"
  }, (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %d: Number of font variants. */
  (0,external_wp_i18n_namespaceObject._n)('%d variant', '%d variants', variantsCount), variantsCount))));
}
/* harmony default export */ const font_family_item = (FontFamilyItem);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/font-families.js

/**
 * WordPress dependencies
 */





/**
 * Internal dependencies
 */




function FontFamilies() {
  const {
    modalTabOpen,
    toggleModal,
    themeFonts,
    customFonts
  } = (0,external_wp_element_namespaceObject.useContext)(FontLibraryContext);
  const hasFonts = 0 < customFonts.length || 0 < themeFonts.length;
  return (0,external_React_.createElement)(external_React_.Fragment, null, !!modalTabOpen && (0,external_React_.createElement)(font_library_modal, {
    onRequestClose: () => toggleModal(),
    initialTabId: modalTabOpen
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    spacing: 3
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    justify: "space-between"
  }, (0,external_React_.createElement)(subtitle, {
    level: 3
  }, (0,external_wp_i18n_namespaceObject.__)('Fonts')), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    justify: "flex-end"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Tooltip, {
    text: (0,external_wp_i18n_namespaceObject.__)('Manage fonts')
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    onClick: () => toggleModal('installed-fonts'),
    "aria-label": (0,external_wp_i18n_namespaceObject.__)('Manage fonts'),
    icon: library_settings,
    size: 'small'
  })))), hasFonts ? (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItemGroup, {
    isBordered: true,
    isSeparated: true
  }, customFonts.map(font => (0,external_React_.createElement)(font_family_item, {
    key: font.slug,
    font: font
  })), themeFonts.map(font => (0,external_React_.createElement)(font_family_item, {
    key: font.slug,
    font: font
  }))) : (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_wp_i18n_namespaceObject.__)('No fonts installed.'), (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    className: "edit-site-global-styles-font-families__add-fonts",
    variant: "secondary",
    onClick: () => toggleModal('upload-fonts')
  }, (0,external_wp_i18n_namespaceObject.__)('Add fonts')))));
}
/* harmony default export */ const font_families = (({
  ...props
}) => (0,external_React_.createElement)(context, null, (0,external_React_.createElement)(FontFamilies, {
  ...props
})));

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/screen-typography.js

/**
 * WordPress dependencies
 */





/**
 * Internal dependencies
 */



function ScreenTypography() {
  const fontLibraryEnabled = (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_editor_namespaceObject.store).getEditorSettings().fontLibraryEnabled, []);
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(header, {
    title: (0,external_wp_i18n_namespaceObject.__)('Typography'),
    description: (0,external_wp_i18n_namespaceObject.__)('Manage the typography settings for different elements.')
  }), (0,external_React_.createElement)("div", {
    className: "edit-site-global-styles-screen-typography"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    spacing: 6
  }, fontLibraryEnabled && (0,external_React_.createElement)(font_families, null), (0,external_React_.createElement)(typogrphy_elements, null))));
}
/* harmony default export */ const screen_typography = (ScreenTypography);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/typography-panel.js

/**
 * WordPress dependencies
 */


/**
 * Internal dependencies
 */

const {
  useGlobalStyle: typography_panel_useGlobalStyle,
  useGlobalSetting: typography_panel_useGlobalSetting,
  useSettingsForBlockElement: typography_panel_useSettingsForBlockElement,
  TypographyPanel: typography_panel_StylesTypographyPanel
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
function TypographyPanel({
  element,
  headingLevel
}) {
  let prefixParts = [];
  if (element === 'heading') {
    prefixParts = prefixParts.concat(['elements', headingLevel]);
  } else if (element && element !== 'text') {
    prefixParts = prefixParts.concat(['elements', element]);
  }
  const prefix = prefixParts.join('.');
  const [style] = typography_panel_useGlobalStyle(prefix, undefined, 'user', {
    shouldDecodeEncode: false
  });
  const [inheritedStyle, setStyle] = typography_panel_useGlobalStyle(prefix, undefined, 'all', {
    shouldDecodeEncode: false
  });
  const [rawSettings] = typography_panel_useGlobalSetting('');
  const usedElement = element === 'heading' ? headingLevel : element;
  const settings = typography_panel_useSettingsForBlockElement(rawSettings, undefined, usedElement);
  return (0,external_React_.createElement)(typography_panel_StylesTypographyPanel, {
    inheritedValue: inheritedStyle,
    value: style,
    onChange: setStyle,
    settings: settings
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/typography-preview.js

/**
 * WordPress dependencies
 */


/**
 * Internal dependencies
 */

const {
  useGlobalStyle: typography_preview_useGlobalStyle
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
function TypographyPreview({
  name,
  element,
  headingLevel
}) {
  let prefix = '';
  if (element === 'heading') {
    prefix = `elements.${headingLevel}.`;
  } else if (element && element !== 'text') {
    prefix = `elements.${element}.`;
  }
  const [fontFamily] = typography_preview_useGlobalStyle(prefix + 'typography.fontFamily', name);
  const [gradientValue] = typography_preview_useGlobalStyle(prefix + 'color.gradient', name);
  const [backgroundColor] = typography_preview_useGlobalStyle(prefix + 'color.background', name);
  const [color] = typography_preview_useGlobalStyle(prefix + 'color.text', name);
  const [fontSize] = typography_preview_useGlobalStyle(prefix + 'typography.fontSize', name);
  const [fontStyle] = typography_preview_useGlobalStyle(prefix + 'typography.fontStyle', name);
  const [fontWeight] = typography_preview_useGlobalStyle(prefix + 'typography.fontWeight', name);
  const [letterSpacing] = typography_preview_useGlobalStyle(prefix + 'typography.letterSpacing', name);
  const extraStyles = element === 'link' ? {
    textDecoration: 'underline'
  } : {};
  return (0,external_React_.createElement)("div", {
    className: "edit-site-typography-preview",
    style: {
      fontFamily: fontFamily !== null && fontFamily !== void 0 ? fontFamily : 'serif',
      background: gradientValue !== null && gradientValue !== void 0 ? gradientValue : backgroundColor,
      color,
      fontSize,
      fontStyle,
      fontWeight,
      letterSpacing,
      ...extraStyles
    }
  }, "Aa");
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/screen-typography-element.js

/**
 * WordPress dependencies
 */




/**
 * Internal dependencies
 */



const screen_typography_element_elements = {
  text: {
    description: (0,external_wp_i18n_namespaceObject.__)('Manage the fonts used on the site.'),
    title: (0,external_wp_i18n_namespaceObject.__)('Text')
  },
  link: {
    description: (0,external_wp_i18n_namespaceObject.__)('Manage the fonts and typography used on the links.'),
    title: (0,external_wp_i18n_namespaceObject.__)('Links')
  },
  heading: {
    description: (0,external_wp_i18n_namespaceObject.__)('Manage the fonts and typography used on headings.'),
    title: (0,external_wp_i18n_namespaceObject.__)('Headings')
  },
  caption: {
    description: (0,external_wp_i18n_namespaceObject.__)('Manage the fonts and typography used on captions.'),
    title: (0,external_wp_i18n_namespaceObject.__)('Captions')
  },
  button: {
    description: (0,external_wp_i18n_namespaceObject.__)('Manage the fonts and typography used on buttons.'),
    title: (0,external_wp_i18n_namespaceObject.__)('Buttons')
  }
};
function ScreenTypographyElement({
  element
}) {
  const [headingLevel, setHeadingLevel] = (0,external_wp_element_namespaceObject.useState)('heading');
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(header, {
    title: screen_typography_element_elements[element].title,
    description: screen_typography_element_elements[element].description
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    marginX: 4
  }, (0,external_React_.createElement)(TypographyPreview, {
    element: element,
    headingLevel: headingLevel
  })), element === 'heading' && (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    marginX: 4,
    marginBottom: "1em"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalToggleGroupControl, {
    label: (0,external_wp_i18n_namespaceObject.__)('Select heading level'),
    hideLabelFromVision: true,
    value: headingLevel,
    onChange: setHeadingLevel,
    isBlock: true,
    size: "__unstable-large",
    __nextHasNoMarginBottom: true
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalToggleGroupControlOption, {
    value: "heading",
    label: (0,external_wp_i18n_namespaceObject._x)('All', 'heading levels')
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalToggleGroupControlOption, {
    value: "h1",
    label: (0,external_wp_i18n_namespaceObject.__)('H1')
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalToggleGroupControlOption, {
    value: "h2",
    label: (0,external_wp_i18n_namespaceObject.__)('H2')
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalToggleGroupControlOption, {
    value: "h3",
    label: (0,external_wp_i18n_namespaceObject.__)('H3')
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalToggleGroupControlOption, {
    value: "h4",
    label: (0,external_wp_i18n_namespaceObject.__)('H4')
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalToggleGroupControlOption, {
    value: "h5",
    label: (0,external_wp_i18n_namespaceObject.__)('H5')
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalToggleGroupControlOption, {
    value: "h6",
    label: (0,external_wp_i18n_namespaceObject.__)('H6')
  }))), (0,external_React_.createElement)(TypographyPanel, {
    element: element,
    headingLevel: headingLevel
  }));
}
/* harmony default export */ const screen_typography_element = (ScreenTypographyElement);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/shuffle.js

/**
 * WordPress dependencies
 */

const shuffle = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/SVG"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M17.192 6.75L15.47 5.03l1.06-1.06 3.537 3.53-3.537 3.53-1.06-1.06 1.723-1.72h-3.19c-.602 0-.993.202-1.28.498-.309.319-.538.792-.695 1.383-.13.488-.222 1.023-.296 1.508-.034.664-.116 1.413-.303 2.117-.193.721-.513 1.467-1.068 2.04-.575.594-1.359.954-2.357.954H4v-1.5h4.003c.601 0 .993-.202 1.28-.498.308-.319.538-.792.695-1.383.149-.557.216-1.093.288-1.662l.039-.31a9.653 9.653 0 0 1 .272-1.653c.193-.722.513-1.467 1.067-2.04.576-.594 1.36-.954 2.358-.954h3.19zM8.004 6.75c.8 0 1.46.23 1.988.628a6.24 6.24 0 0 0-.684 1.396 1.725 1.725 0 0 0-.024-.026c-.287-.296-.679-.498-1.28-.498H4v-1.5h4.003zM12.699 14.726c-.161.459-.38.94-.684 1.396.527.397 1.188.628 1.988.628h3.19l-1.722 1.72 1.06 1.06L20.067 16l-3.537-3.53-1.06 1.06 1.723 1.72h-3.19c-.602 0-.993-.202-1.28-.498a1.96 1.96 0 0 1-.024-.026z"
}));
/* harmony default export */ const library_shuffle = (shuffle);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/color-indicator-wrapper.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */

function ColorIndicatorWrapper({
  className,
  ...props
}) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Flex, {
    className: classnames_default()('edit-site-global-styles__color-indicator-wrapper', className),
    ...props
  });
}
/* harmony default export */ const color_indicator_wrapper = (ColorIndicatorWrapper);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/palette.js

/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */





const {
  useGlobalSetting: palette_useGlobalSetting
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
const EMPTY_COLORS = [];
function Palette({
  name
}) {
  const [customColors] = palette_useGlobalSetting('color.palette.custom');
  const [themeColors] = palette_useGlobalSetting('color.palette.theme');
  const [defaultColors] = palette_useGlobalSetting('color.palette.default');
  const [defaultPaletteEnabled] = palette_useGlobalSetting('color.defaultPalette', name);
  const [randomizeThemeColors] = useColorRandomizer();
  const colors = (0,external_wp_element_namespaceObject.useMemo)(() => [...(customColors || EMPTY_COLORS), ...(themeColors || EMPTY_COLORS), ...(defaultColors && defaultPaletteEnabled ? defaultColors : EMPTY_COLORS)], [customColors, themeColors, defaultColors, defaultPaletteEnabled]);
  const screenPath = !name ? '/colors/palette' : '/blocks/' + encodeURIComponent(name) + '/colors/palette';
  const paletteButtonText = colors.length > 0 ? (0,external_wp_i18n_namespaceObject.sprintf)(
  // Translators: %d: Number of palette colors.
  (0,external_wp_i18n_namespaceObject._n)('%d color', '%d colors', colors.length), colors.length) : (0,external_wp_i18n_namespaceObject.__)('Add custom colors');
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    spacing: 3
  }, (0,external_React_.createElement)(subtitle, {
    level: 3
  }, (0,external_wp_i18n_namespaceObject.__)('Palette')), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalItemGroup, {
    isBordered: true,
    isSeparated: true
  }, (0,external_React_.createElement)(NavigationButtonAsItem, {
    path: screenPath,
    "aria-label": (0,external_wp_i18n_namespaceObject.__)('Color palettes')
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    direction: colors.length === 0 ? 'row-reverse' : 'row'
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalZStack, {
    isLayered: false,
    offset: -8
  }, colors.slice(0, 5).map(({
    color
  }, index) => (0,external_React_.createElement)(color_indicator_wrapper, {
    key: `${color}-${index}`
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.ColorIndicator, {
    colorValue: color
  })))), (0,external_React_.createElement)(external_wp_components_namespaceObject.FlexItem, null, paletteButtonText)))), window.__experimentalEnableColorRandomizer && themeColors?.length > 0 && (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    variant: "secondary",
    icon: library_shuffle,
    onClick: randomizeThemeColors
  }, (0,external_wp_i18n_namespaceObject.__)('Randomize colors')));
}
/* harmony default export */ const palette = (Palette);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/screen-colors.js

/**
 * WordPress dependencies
 */




/**
 * Internal dependencies
 */



const {
  useGlobalStyle: screen_colors_useGlobalStyle,
  useGlobalSetting: screen_colors_useGlobalSetting,
  useSettingsForBlockElement: screen_colors_useSettingsForBlockElement,
  ColorPanel: screen_colors_StylesColorPanel
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
function ScreenColors() {
  const [style] = screen_colors_useGlobalStyle('', undefined, 'user', {
    shouldDecodeEncode: false
  });
  const [inheritedStyle, setStyle] = screen_colors_useGlobalStyle('', undefined, 'all', {
    shouldDecodeEncode: false
  });
  const [rawSettings] = screen_colors_useGlobalSetting('');
  const settings = screen_colors_useSettingsForBlockElement(rawSettings);
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(header, {
    title: (0,external_wp_i18n_namespaceObject.__)('Colors'),
    description: (0,external_wp_i18n_namespaceObject.__)('Manage palettes and the default color of different global elements on the site.')
  }), (0,external_React_.createElement)("div", {
    className: "edit-site-global-styles-screen-colors"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    spacing: 10
  }, (0,external_React_.createElement)(palette, null), (0,external_React_.createElement)(screen_colors_StylesColorPanel, {
    inheritedValue: inheritedStyle,
    value: style,
    onChange: setStyle,
    settings: settings
  }))));
}
/* harmony default export */ const screen_colors = (ScreenColors);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/color-palette-panel.js

/**
 * WordPress dependencies
 */





/**
 * Internal dependencies
 */

const {
  useGlobalSetting: color_palette_panel_useGlobalSetting
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
const mobilePopoverProps = {
  placement: 'bottom-start',
  offset: 8
};
function ColorPalettePanel({
  name
}) {
  const [themeColors, setThemeColors] = color_palette_panel_useGlobalSetting('color.palette.theme', name);
  const [baseThemeColors] = color_palette_panel_useGlobalSetting('color.palette.theme', name, 'base');
  const [defaultColors, setDefaultColors] = color_palette_panel_useGlobalSetting('color.palette.default', name);
  const [baseDefaultColors] = color_palette_panel_useGlobalSetting('color.palette.default', name, 'base');
  const [customColors, setCustomColors] = color_palette_panel_useGlobalSetting('color.palette.custom', name);
  const [defaultPaletteEnabled] = color_palette_panel_useGlobalSetting('color.defaultPalette', name);
  const isMobileViewport = (0,external_wp_compose_namespaceObject.useViewportMatch)('small', '<');
  const popoverProps = isMobileViewport ? mobilePopoverProps : undefined;
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    className: "edit-site-global-styles-color-palette-panel",
    spacing: 10
  }, !!themeColors && !!themeColors.length && (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalPaletteEdit, {
    canReset: themeColors !== baseThemeColors,
    canOnlyChangeValues: true,
    colors: themeColors,
    onChange: setThemeColors,
    paletteLabel: (0,external_wp_i18n_namespaceObject.__)('Theme'),
    paletteLabelHeadingLevel: 3,
    popoverProps: popoverProps
  }), !!defaultColors && !!defaultColors.length && !!defaultPaletteEnabled && (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalPaletteEdit, {
    canReset: defaultColors !== baseDefaultColors,
    canOnlyChangeValues: true,
    colors: defaultColors,
    onChange: setDefaultColors,
    paletteLabel: (0,external_wp_i18n_namespaceObject.__)('Default'),
    paletteLabelHeadingLevel: 3,
    popoverProps: popoverProps
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalPaletteEdit, {
    colors: customColors,
    onChange: setCustomColors,
    paletteLabel: (0,external_wp_i18n_namespaceObject.__)('Custom'),
    paletteLabelHeadingLevel: 3,
    emptyMessage: (0,external_wp_i18n_namespaceObject.__)('Custom colors are empty! Add some colors to create your own color palette.'),
    slugPrefix: "custom-",
    popoverProps: popoverProps
  }));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/gradients-palette-panel.js

/**
 * WordPress dependencies
 */





/**
 * Internal dependencies
 */


const {
  useGlobalSetting: gradients_palette_panel_useGlobalSetting
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
const gradients_palette_panel_mobilePopoverProps = {
  placement: 'bottom-start',
  offset: 8
};
const gradients_palette_panel_noop = () => {};
function GradientPalettePanel({
  name
}) {
  const [themeGradients, setThemeGradients] = gradients_palette_panel_useGlobalSetting('color.gradients.theme', name);
  const [baseThemeGradients] = gradients_palette_panel_useGlobalSetting('color.gradients.theme', name, 'base');
  const [defaultGradients, setDefaultGradients] = gradients_palette_panel_useGlobalSetting('color.gradients.default', name);
  const [baseDefaultGradients] = gradients_palette_panel_useGlobalSetting('color.gradients.default', name, 'base');
  const [customGradients, setCustomGradients] = gradients_palette_panel_useGlobalSetting('color.gradients.custom', name);
  const [defaultPaletteEnabled] = gradients_palette_panel_useGlobalSetting('color.defaultGradients', name);
  const [customDuotone] = gradients_palette_panel_useGlobalSetting('color.duotone.custom') || [];
  const [defaultDuotone] = gradients_palette_panel_useGlobalSetting('color.duotone.default') || [];
  const [themeDuotone] = gradients_palette_panel_useGlobalSetting('color.duotone.theme') || [];
  const [defaultDuotoneEnabled] = gradients_palette_panel_useGlobalSetting('color.defaultDuotone');
  const duotonePalette = [...(customDuotone || []), ...(themeDuotone || []), ...(defaultDuotone && defaultDuotoneEnabled ? defaultDuotone : [])];
  const isMobileViewport = (0,external_wp_compose_namespaceObject.useViewportMatch)('small', '<');
  const popoverProps = isMobileViewport ? gradients_palette_panel_mobilePopoverProps : undefined;
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    className: "edit-site-global-styles-gradient-palette-panel",
    spacing: 10
  }, !!themeGradients && !!themeGradients.length && (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalPaletteEdit, {
    canReset: themeGradients !== baseThemeGradients,
    canOnlyChangeValues: true,
    gradients: themeGradients,
    onChange: setThemeGradients,
    paletteLabel: (0,external_wp_i18n_namespaceObject.__)('Theme'),
    paletteLabelHeadingLevel: 3,
    popoverProps: popoverProps
  }), !!defaultGradients && !!defaultGradients.length && !!defaultPaletteEnabled && (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalPaletteEdit, {
    canReset: defaultGradients !== baseDefaultGradients,
    canOnlyChangeValues: true,
    gradients: defaultGradients,
    onChange: setDefaultGradients,
    paletteLabel: (0,external_wp_i18n_namespaceObject.__)('Default'),
    paletteLabelLevel: 3,
    popoverProps: popoverProps
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalPaletteEdit, {
    gradients: customGradients,
    onChange: setCustomGradients,
    paletteLabel: (0,external_wp_i18n_namespaceObject.__)('Custom'),
    paletteLabelLevel: 3,
    emptyMessage: (0,external_wp_i18n_namespaceObject.__)('Custom gradients are empty! Add some gradients to create your own palette.'),
    slugPrefix: "custom-",
    popoverProps: popoverProps
  }), !!duotonePalette && !!duotonePalette.length && (0,external_React_.createElement)("div", null, (0,external_React_.createElement)(subtitle, {
    level: 3
  }, (0,external_wp_i18n_namespaceObject.__)('Duotone')), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalSpacer, {
    margin: 3
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.DuotonePicker, {
    duotonePalette: duotonePalette,
    disableCustomDuotone: true,
    disableCustomColors: true,
    clearable: false,
    onChange: gradients_palette_panel_noop
  })));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/screen-color-palette.js

/**
 * WordPress dependencies
 */



/**
 * Internal dependencies
 */




const {
  Tabs: screen_color_palette_Tabs
} = unlock(external_wp_components_namespaceObject.privateApis);
function ScreenColorPalette({
  name
}) {
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(header, {
    title: (0,external_wp_i18n_namespaceObject.__)('Palette'),
    description: (0,external_wp_i18n_namespaceObject.__)('Palettes are used to provide default color options for blocks and various design tools. Here you can edit the colors with their labels.')
  }), (0,external_React_.createElement)(screen_color_palette_Tabs, null, (0,external_React_.createElement)(screen_color_palette_Tabs.TabList, null, (0,external_React_.createElement)(screen_color_palette_Tabs.Tab, {
    tabId: "solid"
  }, "Solid"), (0,external_React_.createElement)(screen_color_palette_Tabs.Tab, {
    tabId: "gradient"
  }, "Gradient")), (0,external_React_.createElement)(screen_color_palette_Tabs.TabPanel, {
    tabId: "solid",
    focusable: false
  }, (0,external_React_.createElement)(ColorPalettePanel, {
    name: name
  })), (0,external_React_.createElement)(screen_color_palette_Tabs.TabPanel, {
    tabId: "gradient",
    focusable: false
  }, (0,external_React_.createElement)(GradientPalettePanel, {
    name: name
  }))));
}
/* harmony default export */ const screen_color_palette = (ScreenColorPalette);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/dimensions-panel.js

/**
 * WordPress dependencies
 */



/**
 * Internal dependencies
 */

const {
  useGlobalStyle: dimensions_panel_useGlobalStyle,
  useGlobalSetting: dimensions_panel_useGlobalSetting,
  useSettingsForBlockElement: dimensions_panel_useSettingsForBlockElement,
  DimensionsPanel: dimensions_panel_StylesDimensionsPanel
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
const DEFAULT_CONTROLS = {
  contentSize: true,
  wideSize: true,
  padding: true,
  margin: true,
  blockGap: true,
  minHeight: true,
  childLayout: false
};
function DimensionsPanel() {
  const [style] = dimensions_panel_useGlobalStyle('', undefined, 'user', {
    shouldDecodeEncode: false
  });
  const [inheritedStyle, setStyle] = dimensions_panel_useGlobalStyle('', undefined, 'all', {
    shouldDecodeEncode: false
  });
  const [userSettings] = dimensions_panel_useGlobalSetting('', undefined, 'user');
  const [rawSettings, setSettings] = dimensions_panel_useGlobalSetting('');
  const settings = dimensions_panel_useSettingsForBlockElement(rawSettings);

  // These intermediary objects are needed because the "layout" property is stored
  // in settings rather than styles.
  const inheritedStyleWithLayout = (0,external_wp_element_namespaceObject.useMemo)(() => {
    return {
      ...inheritedStyle,
      layout: settings.layout
    };
  }, [inheritedStyle, settings.layout]);
  const styleWithLayout = (0,external_wp_element_namespaceObject.useMemo)(() => {
    return {
      ...style,
      layout: userSettings.layout
    };
  }, [style, userSettings.layout]);
  const onChange = newStyle => {
    const updatedStyle = {
      ...newStyle
    };
    delete updatedStyle.layout;
    setStyle(updatedStyle);
    if (newStyle.layout !== userSettings.layout) {
      const updatedSettings = {
        ...userSettings,
        layout: newStyle.layout
      };

      // Ensure any changes to layout definitions are not persisted.
      if (updatedSettings.layout?.definitions) {
        delete updatedSettings.layout.definitions;
      }
      setSettings(updatedSettings);
    }
  };
  return (0,external_React_.createElement)(dimensions_panel_StylesDimensionsPanel, {
    inheritedValue: inheritedStyleWithLayout,
    value: styleWithLayout,
    onChange: onChange,
    settings: settings,
    includeLayoutControls: true,
    defaultControls: DEFAULT_CONTROLS
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/screen-layout.js

/**
 * WordPress dependencies
 */



/**
 * Internal dependencies
 */



const {
  useHasDimensionsPanel: screen_layout_useHasDimensionsPanel,
  useGlobalSetting: screen_layout_useGlobalSetting,
  useSettingsForBlockElement: screen_layout_useSettingsForBlockElement
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
function ScreenLayout() {
  const [rawSettings] = screen_layout_useGlobalSetting('');
  const settings = screen_layout_useSettingsForBlockElement(rawSettings);
  const hasDimensionsPanel = screen_layout_useHasDimensionsPanel(settings);
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(header, {
    title: (0,external_wp_i18n_namespaceObject.__)('Layout')
  }), hasDimensionsPanel && (0,external_React_.createElement)(DimensionsPanel, null));
}
/* harmony default export */ const screen_layout = (ScreenLayout);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/screen-style-variations.js

/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */


function ScreenStyleVariations() {
  const {
    mode
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    return {
      mode: select(external_wp_blockEditor_namespaceObject.store).__unstableGetEditorMode()
    };
  }, []);
  const shouldRevertInitialMode = (0,external_wp_element_namespaceObject.useRef)(null);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    // ignore changes to zoom-out mode as we explictily change to it on mount.
    if (mode !== 'zoom-out') {
      shouldRevertInitialMode.current = false;
    }
  }, [mode]);

  // Intentionality left without any dependency.
  // This effect should only run the first time the component is rendered.
  // The effect opens the zoom-out view if it is not open before when applying a style variation.
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    if (mode !== 'zoom-out') {
      __unstableSetEditorMode('zoom-out');
      shouldRevertInitialMode.current = true;
      return () => {
        // if there were not mode changes revert to the initial mode when unmounting.
        if (shouldRevertInitialMode.current) {
          __unstableSetEditorMode(mode);
        }
      };
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  const {
    __unstableSetEditorMode
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_blockEditor_namespaceObject.store);
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(header, {
    back: "/",
    title: (0,external_wp_i18n_namespaceObject.__)('Browse styles'),
    description: (0,external_wp_i18n_namespaceObject.__)('Choose a variation to change the look of the site.')
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.Card, {
    size: "small",
    isBorderless: true,
    className: "edit-site-global-styles-screen-style-variations"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.CardBody, null, (0,external_React_.createElement)(StyleVariationsContainer, null))));
}
/* harmony default export */ const screen_style_variations = (ScreenStyleVariations);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/screen-css.js

/**
 * WordPress dependencies
 */




/**
 * Internal dependencies
 */


const {
  useGlobalStyle: screen_css_useGlobalStyle,
  AdvancedPanel: screen_css_StylesAdvancedPanel
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
function ScreenCSS() {
  const description = (0,external_wp_i18n_namespaceObject.__)('Add your own CSS to customize the appearance and layout of your site.');
  const [style] = screen_css_useGlobalStyle('', undefined, 'user', {
    shouldDecodeEncode: false
  });
  const [inheritedStyle, setStyle] = screen_css_useGlobalStyle('', undefined, 'all', {
    shouldDecodeEncode: false
  });
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(header, {
    title: (0,external_wp_i18n_namespaceObject.__)('CSS'),
    description: (0,external_React_.createElement)(external_React_.Fragment, null, description, (0,external_React_.createElement)(external_wp_components_namespaceObject.ExternalLink, {
      href: "https://wordpress.org/documentation/article/css/",
      className: "edit-site-global-styles-screen-css-help-link"
    }, (0,external_wp_i18n_namespaceObject.__)('Learn more about CSS')))
  }), (0,external_React_.createElement)("div", {
    className: "edit-site-global-styles-screen-css"
  }, (0,external_React_.createElement)(screen_css_StylesAdvancedPanel, {
    value: style,
    onChange: setStyle,
    inheritedValue: inheritedStyle
  })));
}
/* harmony default export */ const screen_css = (ScreenCSS);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/revisions/index.js

/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */




const {
  ExperimentalBlockEditorProvider: revisions_ExperimentalBlockEditorProvider,
  GlobalStylesContext: revisions_GlobalStylesContext,
  useGlobalStylesOutputWithConfig: revisions_useGlobalStylesOutputWithConfig
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
function revisions_isObjectEmpty(object) {
  return !object || Object.keys(object).length === 0;
}
function Revisions({
  userConfig,
  blocks
}) {
  const {
    base: baseConfig
  } = (0,external_wp_element_namespaceObject.useContext)(revisions_GlobalStylesContext);
  const mergedConfig = (0,external_wp_element_namespaceObject.useMemo)(() => {
    if (!revisions_isObjectEmpty(userConfig) && !revisions_isObjectEmpty(baseConfig)) {
      return mergeBaseAndUserConfigs(baseConfig, userConfig);
    }
    return {};
  }, [baseConfig, userConfig]);
  const renderedBlocksArray = (0,external_wp_element_namespaceObject.useMemo)(() => Array.isArray(blocks) ? blocks : [blocks], [blocks]);
  const originalSettings = (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_blockEditor_namespaceObject.store).getSettings(), []);
  const settings = (0,external_wp_element_namespaceObject.useMemo)(() => ({
    ...originalSettings,
    __unstableIsPreviewMode: true
  }), [originalSettings]);
  const [globalStyles] = revisions_useGlobalStylesOutputWithConfig(mergedConfig);
  const editorStyles = !revisions_isObjectEmpty(globalStyles) && !revisions_isObjectEmpty(userConfig) ? globalStyles : settings.styles;
  return (0,external_React_.createElement)(editor_canvas_container, {
    title: (0,external_wp_i18n_namespaceObject.__)('Revisions'),
    closeButtonLabel: (0,external_wp_i18n_namespaceObject.__)('Close revisions'),
    enableResizing: true
  }, (0,external_React_.createElement)(external_wp_blockEditor_namespaceObject.__unstableIframe, {
    className: "edit-site-revisions__iframe",
    name: "revisions",
    tabIndex: 0
  }, (0,external_React_.createElement)(external_wp_blockEditor_namespaceObject.__unstableEditorStyles, {
    styles: editorStyles
  }), (0,external_React_.createElement)("style", null,
  // Forming a "block formatting context" to prevent margin collapsing.
  // @see https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context
  `.is-root-container { display: flow-root; }`), (0,external_React_.createElement)(external_wp_components_namespaceObject.Disabled, {
    className: "edit-site-revisions__example-preview__content"
  }, (0,external_React_.createElement)(revisions_ExperimentalBlockEditorProvider, {
    value: renderedBlocksArray,
    settings: settings
  }, (0,external_React_.createElement)(external_wp_blockEditor_namespaceObject.BlockList, {
    renderAppender: false
  })))));
}
/* harmony default export */ const components_revisions = (Revisions);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/screen-revisions/revisions-buttons.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */







/**
 * Internal dependencies
 */

const DAY_IN_MILLISECONDS = 60 * 60 * 1000 * 24;
const {
  getGlobalStylesChanges
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
function ChangesSummary({
  revision,
  previousRevision
}) {
  const changes = getGlobalStylesChanges(revision, previousRevision, {
    maxResults: 7
  });
  if (!changes.length) {
    return null;
  }
  return (0,external_React_.createElement)("ul", {
    "data-testid": "global-styles-revision-changes",
    className: "edit-site-global-styles-screen-revisions__changes"
  }, changes.map(change => (0,external_React_.createElement)("li", {
    key: change
  }, change)));
}

/**
 * Returns a button label for the revision.
 *
 * @param {string|number} id                    A revision object.
 * @param {string}        authorDisplayName     Author name.
 * @param {string}        formattedModifiedDate Revision modified date formatted.
 * @param {boolean}       areStylesEqual        Whether the revision matches the current editor styles.
 * @return {string} Translated label.
 */
function getRevisionLabel(id, authorDisplayName, formattedModifiedDate, areStylesEqual) {
  if ('parent' === id) {
    return (0,external_wp_i18n_namespaceObject.__)('Reset the styles to the theme defaults');
  }
  if ('unsaved' === id) {
    return (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: author display name */
    (0,external_wp_i18n_namespaceObject.__)('Unsaved changes by %s'), authorDisplayName);
  }
  return areStylesEqual ? (0,external_wp_i18n_namespaceObject.sprintf)(
  // translators: %1$s: author display name, %2$s: revision creation date.
  (0,external_wp_i18n_namespaceObject.__)('Changes saved by %1$s on %2$s. This revision matches current editor styles.'), authorDisplayName, formattedModifiedDate) : (0,external_wp_i18n_namespaceObject.sprintf)(
  // translators: %1$s: author display name, %2$s: revision creation date.
  (0,external_wp_i18n_namespaceObject.__)('Changes saved by %1$s on %2$s'), authorDisplayName, formattedModifiedDate);
}

/**
 * Returns a rendered list of revisions buttons.
 *
 * @typedef {Object} props
 * @property {Array<Object>} userRevisions      A collection of user revisions.
 * @property {number}        selectedRevisionId The id of the currently-selected revision.
 * @property {Function}      onChange           Callback fired when a revision is selected.
 *
 * @param    {props}         Component          props.
 * @return {JSX.Element} The modal component.
 */
function RevisionsButtons({
  userRevisions,
  selectedRevisionId,
  onChange,
  canApplyRevision,
  onApplyRevision
}) {
  const {
    currentThemeName,
    currentUser
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getCurrentTheme,
      getCurrentUser
    } = select(external_wp_coreData_namespaceObject.store);
    const currentTheme = getCurrentTheme();
    return {
      currentThemeName: currentTheme?.name?.rendered || currentTheme?.stylesheet,
      currentUser: getCurrentUser()
    };
  }, []);
  const dateNowInMs = (0,external_wp_date_namespaceObject.getDate)().getTime();
  const {
    datetimeAbbreviated
  } = (0,external_wp_date_namespaceObject.getSettings)().formats;
  return (0,external_React_.createElement)("ol", {
    className: "edit-site-global-styles-screen-revisions__revisions-list",
    "aria-label": (0,external_wp_i18n_namespaceObject.__)('Global styles revisions list'),
    role: "group"
  }, userRevisions.map((revision, index) => {
    const {
      id,
      author,
      modified
    } = revision;
    const isUnsaved = 'unsaved' === id;
    // Unsaved changes are created by the current user.
    const revisionAuthor = isUnsaved ? currentUser : author;
    const authorDisplayName = revisionAuthor?.name || (0,external_wp_i18n_namespaceObject.__)('User');
    const authorAvatar = revisionAuthor?.avatar_urls?.['48'];
    const isFirstItem = index === 0;
    const isSelected = selectedRevisionId ? selectedRevisionId === id : isFirstItem;
    const areStylesEqual = !canApplyRevision && isSelected;
    const isReset = 'parent' === id;
    const modifiedDate = (0,external_wp_date_namespaceObject.getDate)(modified);
    const displayDate = modified && dateNowInMs - modifiedDate.getTime() > DAY_IN_MILLISECONDS ? (0,external_wp_date_namespaceObject.dateI18n)(datetimeAbbreviated, modifiedDate) : (0,external_wp_date_namespaceObject.humanTimeDiff)(modified);
    const revisionLabel = getRevisionLabel(id, authorDisplayName, (0,external_wp_date_namespaceObject.dateI18n)(datetimeAbbreviated, modifiedDate), areStylesEqual);
    return (0,external_React_.createElement)("li", {
      className: classnames_default()('edit-site-global-styles-screen-revisions__revision-item', {
        'is-selected': isSelected,
        'is-active': areStylesEqual,
        'is-reset': isReset
      }),
      key: id,
      "aria-current": isSelected
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
      className: "edit-site-global-styles-screen-revisions__revision-button",
      disabled: isSelected,
      onClick: () => {
        onChange(revision);
      },
      "aria-label": revisionLabel
    }, isReset ? (0,external_React_.createElement)("span", {
      className: "edit-site-global-styles-screen-revisions__description"
    }, (0,external_wp_i18n_namespaceObject.__)('Default styles'), (0,external_React_.createElement)("span", {
      className: "edit-site-global-styles-screen-revisions__meta"
    }, currentThemeName)) : (0,external_React_.createElement)("span", {
      className: "edit-site-global-styles-screen-revisions__description"
    }, isUnsaved ? (0,external_React_.createElement)("span", {
      className: "edit-site-global-styles-screen-revisions__date"
    }, (0,external_wp_i18n_namespaceObject.__)('(Unsaved)')) : (0,external_React_.createElement)("time", {
      className: "edit-site-global-styles-screen-revisions__date",
      dateTime: modified
    }, displayDate), (0,external_React_.createElement)("span", {
      className: "edit-site-global-styles-screen-revisions__meta"
    }, (0,external_React_.createElement)("img", {
      alt: authorDisplayName,
      src: authorAvatar
    }), authorDisplayName), isSelected && (0,external_React_.createElement)(ChangesSummary, {
      revision: revision,
      previousRevision: index < userRevisions.length ? userRevisions[index + 1] : {}
    }))), isSelected && (areStylesEqual ? (0,external_React_.createElement)("p", {
      className: "edit-site-global-styles-screen-revisions__applied-text"
    }, (0,external_wp_i18n_namespaceObject.__)('These styles are already applied to your site.')) : (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
      disabled: areStylesEqual,
      size: "compact",
      variant: "primary",
      className: "edit-site-global-styles-screen-revisions__apply-button",
      onClick: onApplyRevision
    }, isReset ? (0,external_wp_i18n_namespaceObject.__)('Reset to defaults') : (0,external_wp_i18n_namespaceObject.__)('Apply'))));
  }));
}
/* harmony default export */ const revisions_buttons = (RevisionsButtons);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/pagination/index.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */


function Pagination({
  currentPage,
  numPages,
  changePage,
  totalItems,
  className,
  disabled = false,
  buttonVariant = 'tertiary',
  label = (0,external_wp_i18n_namespaceObject.__)('Pagination Navigation')
}) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    expanded: false,
    as: "nav",
    "aria-label": label,
    spacing: 3,
    justify: "flex-start",
    className: classnames_default()('edit-site-pagination', className)
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    variant: "muted",
    className: "edit-site-pagination__total"
  },
  // translators: %s: Total number of patterns.
  (0,external_wp_i18n_namespaceObject.sprintf)(
  // translators: %s: Total number of patterns.
  (0,external_wp_i18n_namespaceObject._n)('%s item', '%s items', totalItems), totalItems)), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    expanded: false,
    spacing: 1
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    variant: buttonVariant,
    onClick: () => changePage(1),
    disabled: disabled || currentPage === 1,
    "aria-label": (0,external_wp_i18n_namespaceObject.__)('First page')
  }, "\xAB"), (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    variant: buttonVariant,
    onClick: () => changePage(currentPage - 1),
    disabled: disabled || currentPage === 1,
    "aria-label": (0,external_wp_i18n_namespaceObject.__)('Previous page')
  }, "\u2039")), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    variant: "muted"
  }, (0,external_wp_i18n_namespaceObject.sprintf)(
  // translators: %1$s: Current page number, %2$s: Total number of pages.
  (0,external_wp_i18n_namespaceObject._x)('%1$s of %2$s', 'paging'), currentPage, numPages)), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    expanded: false,
    spacing: 1
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    variant: buttonVariant,
    onClick: () => changePage(currentPage + 1),
    disabled: disabled || currentPage === numPages,
    "aria-label": (0,external_wp_i18n_namespaceObject.__)('Next page')
  }, "\u203A"), (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    variant: buttonVariant,
    onClick: () => changePage(numPages),
    disabled: disabled || currentPage === numPages,
    "aria-label": (0,external_wp_i18n_namespaceObject.__)('Last page')
  }, "\xBB")));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/screen-revisions/index.js

/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */








const {
  GlobalStylesContext: screen_revisions_GlobalStylesContext,
  areGlobalStyleConfigsEqual: screen_revisions_areGlobalStyleConfigsEqual
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
const PAGE_SIZE = 10;
function ScreenRevisions() {
  const {
    goTo
  } = (0,external_wp_components_namespaceObject.__experimentalUseNavigator)();
  const {
    user: currentEditorGlobalStyles,
    setUserConfig
  } = (0,external_wp_element_namespaceObject.useContext)(screen_revisions_GlobalStylesContext);
  const {
    blocks,
    editorCanvasContainerView
  } = (0,external_wp_data_namespaceObject.useSelect)(select => ({
    editorCanvasContainerView: unlock(select(store_store)).getEditorCanvasContainerView(),
    blocks: select(external_wp_blockEditor_namespaceObject.store).getBlocks()
  }), []);
  const [currentPage, setCurrentPage] = (0,external_wp_element_namespaceObject.useState)(1);
  const [currentRevisions, setCurrentRevisions] = (0,external_wp_element_namespaceObject.useState)([]);
  const {
    revisions,
    isLoading,
    hasUnsavedChanges,
    revisionsCount
  } = useGlobalStylesRevisions({
    query: {
      per_page: PAGE_SIZE,
      page: currentPage
    }
  });
  const numPages = Math.ceil(revisionsCount / PAGE_SIZE);
  const [currentlySelectedRevision, setCurrentlySelectedRevision] = (0,external_wp_element_namespaceObject.useState)(currentEditorGlobalStyles);
  const [isLoadingRevisionWithUnsavedChanges, setIsLoadingRevisionWithUnsavedChanges] = (0,external_wp_element_namespaceObject.useState)(false);
  const {
    setEditorCanvasContainerView
  } = unlock((0,external_wp_data_namespaceObject.useDispatch)(store_store));
  const selectedRevisionMatchesEditorStyles = screen_revisions_areGlobalStyleConfigsEqual(currentlySelectedRevision, currentEditorGlobalStyles);
  const onCloseRevisions = () => {
    goTo('/'); // Return to global styles main panel.
    const canvasContainerView = editorCanvasContainerView === 'global-styles-revisions:style-book' ? 'style-book' : undefined;
    setEditorCanvasContainerView(canvasContainerView);
  };
  const restoreRevision = revision => {
    setUserConfig(() => ({
      styles: revision?.styles,
      settings: revision?.settings
    }));
    setIsLoadingRevisionWithUnsavedChanges(false);
    onCloseRevisions();
  };
  const selectRevision = revision => {
    setCurrentlySelectedRevision({
      styles: revision?.styles || {},
      settings: revision?.settings || {},
      id: revision?.id
    });
  };
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    if (!editorCanvasContainerView || !editorCanvasContainerView.startsWith('global-styles-revisions')) {
      goTo('/'); // Return to global styles main panel.
    }
  }, [editorCanvasContainerView]);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    if (!isLoading && revisions.length) {
      setCurrentRevisions(revisions);
    }
  }, [revisions, isLoading]);
  const firstRevision = revisions[0];
  const currentlySelectedRevisionId = currentlySelectedRevision?.id;
  const shouldSelectFirstItem = !!firstRevision?.id && !selectedRevisionMatchesEditorStyles && !currentlySelectedRevisionId;
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    /*
     * Ensure that the first item is selected and loaded into the preview pane
     * when no revision is selected and the selected styles don't match the current editor styles.
     * This is required in case editor styles are changed outside the revisions panel,
     * e.g., via the reset styles function of useGlobalStylesReset().
     * See: https://github.com/WordPress/gutenberg/issues/55866
     */
    if (shouldSelectFirstItem) {
      setCurrentlySelectedRevision({
        styles: firstRevision?.styles || {},
        settings: firstRevision?.settings || {},
        id: firstRevision?.id
      });
    }
  }, [shouldSelectFirstItem, firstRevision]);

  // Only display load button if there is a revision to load,
  // and it is different from the current editor styles.
  const isLoadButtonEnabled = !!currentlySelectedRevisionId && currentlySelectedRevisionId !== 'unsaved' && !selectedRevisionMatchesEditorStyles;
  const hasRevisions = !!currentRevisions.length;
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(header, {
    title: revisionsCount &&
    // translators: %s: number of revisions.
    (0,external_wp_i18n_namespaceObject.sprintf)((0,external_wp_i18n_namespaceObject.__)('Revisions (%s)'), revisionsCount),
    description: (0,external_wp_i18n_namespaceObject.__)('Click on previously saved styles to preview them. To restore a selected version to the editor, hit "Apply." When you\'re ready, use the Save button to save your changes.'),
    onBack: onCloseRevisions
  }), !hasRevisions && (0,external_React_.createElement)(external_wp_components_namespaceObject.Spinner, {
    className: "edit-site-global-styles-screen-revisions__loading"
  }), hasRevisions && (editorCanvasContainerView === 'global-styles-revisions:style-book' ? (0,external_React_.createElement)(style_book, {
    userConfig: currentlySelectedRevision,
    isSelected: () => {},
    onClose: () => {
      setEditorCanvasContainerView('global-styles-revisions');
    }
  }) : (0,external_React_.createElement)(components_revisions, {
    blocks: blocks,
    userConfig: currentlySelectedRevision,
    closeButtonLabel: (0,external_wp_i18n_namespaceObject.__)('Close revisions')
  })), (0,external_React_.createElement)(revisions_buttons, {
    onChange: selectRevision,
    selectedRevisionId: currentlySelectedRevisionId,
    userRevisions: currentRevisions,
    canApplyRevision: isLoadButtonEnabled,
    onApplyRevision: () => hasUnsavedChanges ? setIsLoadingRevisionWithUnsavedChanges(true) : restoreRevision(currentlySelectedRevision)
  }), numPages > 1 && (0,external_React_.createElement)("div", {
    className: "edit-site-global-styles-screen-revisions__footer"
  }, (0,external_React_.createElement)(Pagination, {
    className: "edit-site-global-styles-screen-revisions__pagination",
    currentPage: currentPage,
    numPages: numPages,
    changePage: setCurrentPage,
    totalItems: revisionsCount,
    disabled: isLoading,
    label: (0,external_wp_i18n_namespaceObject.__)('Global Styles pagination navigation')
  })), isLoadingRevisionWithUnsavedChanges && (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalConfirmDialog, {
    isOpen: isLoadingRevisionWithUnsavedChanges,
    confirmButtonText: (0,external_wp_i18n_namespaceObject.__)('Apply'),
    onConfirm: () => restoreRevision(currentlySelectedRevision),
    onCancel: () => setIsLoadingRevisionWithUnsavedChanges(false)
  }, (0,external_wp_i18n_namespaceObject.__)('Any unsaved changes will be lost when you apply this revision.')));
}
/* harmony default export */ const screen_revisions = (ScreenRevisions);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/ui.js

/**
 * WordPress dependencies
 */










/**
 * Internal dependencies
 */














const ui_SLOT_FILL_NAME = 'GlobalStylesMenu';
const {
  useGlobalStylesReset: ui_useGlobalStylesReset
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
const {
  Slot: GlobalStylesMenuSlot,
  Fill: GlobalStylesMenuFill
} = (0,external_wp_components_namespaceObject.createSlotFill)(ui_SLOT_FILL_NAME);
function GlobalStylesActionMenu() {
  const [canReset, onReset] = ui_useGlobalStylesReset();
  const {
    toggle
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_preferences_namespaceObject.store);
  const {
    canEditCSS
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getEntityRecord,
      __experimentalGetCurrentGlobalStylesId
    } = select(external_wp_coreData_namespaceObject.store);
    const globalStylesId = __experimentalGetCurrentGlobalStylesId();
    const globalStyles = globalStylesId ? getEntityRecord('root', 'globalStyles', globalStylesId) : undefined;
    return {
      canEditCSS: !!globalStyles?._links?.['wp:action-edit-css']
    };
  }, []);
  const {
    setEditorCanvasContainerView
  } = unlock((0,external_wp_data_namespaceObject.useDispatch)(store_store));
  const {
    goTo
  } = (0,external_wp_components_namespaceObject.__experimentalUseNavigator)();
  const loadCustomCSS = () => {
    setEditorCanvasContainerView('global-styles-css');
    goTo('/css');
  };
  return (0,external_React_.createElement)(GlobalStylesMenuFill, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.DropdownMenu, {
    icon: more_vertical,
    label: (0,external_wp_i18n_namespaceObject.__)('More')
  }, ({
    onClose
  }) => (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuGroup, null, canEditCSS && (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
    onClick: loadCustomCSS
  }, (0,external_wp_i18n_namespaceObject.__)('Additional CSS')), (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
    onClick: () => {
      toggle('core/edit-site', 'welcomeGuideStyles');
      onClose();
    }
  }, (0,external_wp_i18n_namespaceObject.__)('Welcome Guide'))), (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuGroup, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
    onClick: () => {
      onReset();
      onClose();
    },
    disabled: !canReset
  }, (0,external_wp_i18n_namespaceObject.__)('Reset styles'))))));
}
function GlobalStylesNavigationScreen({
  className,
  ...props
}) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalNavigatorScreen, {
    className: ['edit-site-global-styles-sidebar__navigator-screen', className].filter(Boolean).join(' '),
    ...props
  });
}
function BlockStylesNavigationScreens({
  parentMenu,
  blockStyles,
  blockName
}) {
  return blockStyles.map((style, index) => (0,external_React_.createElement)(GlobalStylesNavigationScreen, {
    key: index,
    path: parentMenu + '/variations/' + style.name
  }, (0,external_React_.createElement)(screen_block, {
    name: blockName,
    variation: style.name
  })));
}
function ContextScreens({
  name,
  parentMenu = ''
}) {
  const blockStyleVariations = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getBlockStyles
    } = select(external_wp_blocks_namespaceObject.store);
    return getBlockStyles(name);
  }, [name]);
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(GlobalStylesNavigationScreen, {
    path: parentMenu + '/colors/palette'
  }, (0,external_React_.createElement)(screen_color_palette, {
    name: name
  })), !!blockStyleVariations?.length && (0,external_React_.createElement)(BlockStylesNavigationScreens, {
    parentMenu: parentMenu,
    blockStyles: blockStyleVariations,
    blockName: name
  }));
}
function GlobalStylesStyleBook() {
  const navigator = (0,external_wp_components_namespaceObject.__experimentalUseNavigator)();
  const {
    path
  } = navigator.location;
  return (0,external_React_.createElement)(style_book, {
    isSelected: blockName =>
    // Match '/blocks/core%2Fbutton' and
    // '/blocks/core%2Fbutton/typography', but not
    // '/blocks/core%2Fbuttons'.
    path === `/blocks/${encodeURIComponent(blockName)}` || path.startsWith(`/blocks/${encodeURIComponent(blockName)}/`),
    onSelect: blockName => {
      // Now go to the selected block.
      navigator.goTo('/blocks/' + encodeURIComponent(blockName));
    }
  });
}
function GlobalStylesBlockLink() {
  const navigator = (0,external_wp_components_namespaceObject.__experimentalUseNavigator)();
  const {
    selectedBlockName,
    selectedBlockClientId
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getSelectedBlockClientId,
      getBlockName
    } = select(external_wp_blockEditor_namespaceObject.store);
    const clientId = getSelectedBlockClientId();
    return {
      selectedBlockName: getBlockName(clientId),
      selectedBlockClientId: clientId
    };
  }, []);
  const blockHasGlobalStyles = useBlockHasGlobalStyles(selectedBlockName);
  // When we're in the `Blocks` screen enable deep linking to the selected block.
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    if (!selectedBlockClientId || !blockHasGlobalStyles) {
      return;
    }
    const currentPath = navigator.location.path;
    if (currentPath !== '/blocks' && !currentPath.startsWith('/blocks/')) {
      return;
    }
    const newPath = '/blocks/' + encodeURIComponent(selectedBlockName);
    // Avoid navigating to the same path. This can happen when selecting
    // a new block of the same type.
    if (newPath !== currentPath) {
      navigator.goTo(newPath, {
        skipFocus: true
      });
    }
  }, [selectedBlockClientId, selectedBlockName, blockHasGlobalStyles]);
}
function GlobalStylesEditorCanvasContainerLink() {
  const {
    goTo,
    location
  } = (0,external_wp_components_namespaceObject.__experimentalUseNavigator)();
  const editorCanvasContainerView = (0,external_wp_data_namespaceObject.useSelect)(select => unlock(select(store_store)).getEditorCanvasContainerView(), []);
  const path = location?.path;
  const isRevisionsOpen = path === '/revisions';

  // If the user switches the editor canvas container view, redirect
  // to the appropriate screen. This effectively allows deep linking to the
  // desired screens from outside the global styles navigation provider.
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    switch (editorCanvasContainerView) {
      case 'global-styles-revisions':
      case 'global-styles-revisions:style-book':
        goTo('/revisions');
        break;
      case 'global-styles-css':
        goTo('/css');
        break;
      case 'style-book':
        /*
         * The stand-alone style book is open
         * and the revisions panel is open,
         * close the revisions panel.
         * Otherwise keep the style book open while
         * browsing global styles panel.
         */
        if (isRevisionsOpen) {
          goTo('/');
        }
        break;
      default:
        /*
         * Example: the user has navigated to "Browse styles" or elsewhere
         * and changes the editorCanvasContainerView, e.g., closes the style book.
         * The panel should not be affected.
         * Exclude revisions panel from this behavior,
         * as it should close when the editorCanvasContainerView doesn't correspond.
         */
        if (path !== '/' && !isRevisionsOpen) {
          return;
        }
        goTo('/');
        break;
    }
  }, [editorCanvasContainerView, isRevisionsOpen, goTo]);
}
function GlobalStylesUI() {
  const blocks = (0,external_wp_blocks_namespaceObject.getBlockTypes)();
  const editorCanvasContainerView = (0,external_wp_data_namespaceObject.useSelect)(select => unlock(select(store_store)).getEditorCanvasContainerView(), []);
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalNavigatorProvider, {
    className: "edit-site-global-styles-sidebar__navigator-provider",
    initialPath: "/"
  }, (0,external_React_.createElement)(GlobalStylesNavigationScreen, {
    path: "/"
  }, (0,external_React_.createElement)(screen_root, null)), (0,external_React_.createElement)(GlobalStylesNavigationScreen, {
    path: "/variations"
  }, (0,external_React_.createElement)(screen_style_variations, null)), (0,external_React_.createElement)(GlobalStylesNavigationScreen, {
    path: "/blocks"
  }, (0,external_React_.createElement)(screen_block_list, null)), (0,external_React_.createElement)(GlobalStylesNavigationScreen, {
    path: "/typography"
  }, (0,external_React_.createElement)(screen_typography, null)), (0,external_React_.createElement)(GlobalStylesNavigationScreen, {
    path: "/typography/text"
  }, (0,external_React_.createElement)(screen_typography_element, {
    element: "text"
  })), (0,external_React_.createElement)(GlobalStylesNavigationScreen, {
    path: "/typography/link"
  }, (0,external_React_.createElement)(screen_typography_element, {
    element: "link"
  })), (0,external_React_.createElement)(GlobalStylesNavigationScreen, {
    path: "/typography/heading"
  }, (0,external_React_.createElement)(screen_typography_element, {
    element: "heading"
  })), (0,external_React_.createElement)(GlobalStylesNavigationScreen, {
    path: "/typography/caption"
  }, (0,external_React_.createElement)(screen_typography_element, {
    element: "caption"
  })), (0,external_React_.createElement)(GlobalStylesNavigationScreen, {
    path: "/typography/button"
  }, (0,external_React_.createElement)(screen_typography_element, {
    element: "button"
  })), (0,external_React_.createElement)(GlobalStylesNavigationScreen, {
    path: "/colors"
  }, (0,external_React_.createElement)(screen_colors, null)), (0,external_React_.createElement)(GlobalStylesNavigationScreen, {
    path: "/layout"
  }, (0,external_React_.createElement)(screen_layout, null)), (0,external_React_.createElement)(GlobalStylesNavigationScreen, {
    path: "/css"
  }, (0,external_React_.createElement)(screen_css, null)), (0,external_React_.createElement)(GlobalStylesNavigationScreen, {
    path: '/revisions'
  }, (0,external_React_.createElement)(screen_revisions, null)), blocks.map(block => (0,external_React_.createElement)(GlobalStylesNavigationScreen, {
    key: 'menu-block-' + block.name,
    path: '/blocks/' + encodeURIComponent(block.name)
  }, (0,external_React_.createElement)(screen_block, {
    name: block.name
  }))), (0,external_React_.createElement)(ContextScreens, null), blocks.map(block => (0,external_React_.createElement)(ContextScreens, {
    key: 'screens-block-' + block.name,
    name: block.name,
    parentMenu: '/blocks/' + encodeURIComponent(block.name)
  })), 'style-book' === editorCanvasContainerView && (0,external_React_.createElement)(GlobalStylesStyleBook, null), (0,external_React_.createElement)(GlobalStylesActionMenu, null), (0,external_React_.createElement)(GlobalStylesBlockLink, null), (0,external_React_.createElement)(GlobalStylesEditorCanvasContainerLink, null));
}

/* harmony default export */ const ui = (GlobalStylesUI);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles/index.js


;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-edit-mode/global-styles-sidebar.js

/**
 * WordPress dependencies
 */









/**
 * Internal dependencies
 */






function GlobalStylesSidebar() {
  const {
    shouldClearCanvasContainerView,
    isStyleBookOpened,
    showListViewByDefault,
    hasRevisions,
    isRevisionsOpened,
    isRevisionsStyleBookOpened
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getActiveComplementaryArea
    } = select(store);
    const {
      getEditorCanvasContainerView,
      getCanvasMode
    } = unlock(select(store_store));
    const canvasContainerView = getEditorCanvasContainerView();
    const _isVisualEditorMode = 'visual' === select(store_store).getEditorMode();
    const _isEditCanvasMode = 'edit' === getCanvasMode();
    const _showListViewByDefault = select(external_wp_preferences_namespaceObject.store).get('core', 'showListViewByDefault');
    const {
      getEntityRecord,
      __experimentalGetCurrentGlobalStylesId
    } = select(external_wp_coreData_namespaceObject.store);
    const globalStylesId = __experimentalGetCurrentGlobalStylesId();
    const globalStyles = globalStylesId ? getEntityRecord('root', 'globalStyles', globalStylesId) : undefined;
    return {
      isStyleBookOpened: 'style-book' === canvasContainerView,
      shouldClearCanvasContainerView: 'edit-site/global-styles' !== getActiveComplementaryArea('core/edit-site') || !_isVisualEditorMode || !_isEditCanvasMode,
      showListViewByDefault: _showListViewByDefault,
      hasRevisions: !!globalStyles?._links?.['version-history']?.[0]?.count,
      isRevisionsStyleBookOpened: 'global-styles-revisions:style-book' === canvasContainerView,
      isRevisionsOpened: 'global-styles-revisions' === canvasContainerView
    };
  }, []);
  const {
    setEditorCanvasContainerView
  } = unlock((0,external_wp_data_namespaceObject.useDispatch)(store_store));
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    if (shouldClearCanvasContainerView) {
      setEditorCanvasContainerView(undefined);
    }
  }, [shouldClearCanvasContainerView]);
  const {
    setIsListViewOpened
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_editor_namespaceObject.store);
  const {
    goTo
  } = (0,external_wp_components_namespaceObject.__experimentalUseNavigator)();
  const toggleRevisions = () => {
    setIsListViewOpened(false);
    if (isRevisionsStyleBookOpened) {
      goTo('/');
      setEditorCanvasContainerView('style-book');
      return;
    }
    if (isRevisionsOpened) {
      goTo('/');
      setEditorCanvasContainerView(undefined);
      return;
    }
    goTo('/revisions');
    if (isStyleBookOpened) {
      setEditorCanvasContainerView('global-styles-revisions:style-book');
    } else {
      setEditorCanvasContainerView('global-styles-revisions');
    }
  };
  const toggleStyleBook = () => {
    if (isRevisionsOpened) {
      setEditorCanvasContainerView('global-styles-revisions:style-book');
      return;
    }
    if (isRevisionsStyleBookOpened) {
      setEditorCanvasContainerView('global-styles-revisions');
      return;
    }
    setIsListViewOpened(isStyleBookOpened && showListViewByDefault);
    setEditorCanvasContainerView(isStyleBookOpened ? undefined : 'style-book');
  };
  return (0,external_React_.createElement)(DefaultSidebar, {
    className: "edit-site-global-styles-sidebar",
    identifier: "edit-site/global-styles",
    title: (0,external_wp_i18n_namespaceObject.__)('Styles'),
    icon: library_styles,
    closeLabel: (0,external_wp_i18n_namespaceObject.__)('Close Styles'),
    panelClassName: "edit-site-global-styles-sidebar__panel",
    header: (0,external_React_.createElement)(external_wp_components_namespaceObject.Flex, {
      className: "edit-site-global-styles-sidebar__header",
      role: "menubar",
      "aria-label": (0,external_wp_i18n_namespaceObject.__)('Styles actions')
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.FlexBlock, {
      style: {
        minWidth: 'min-content'
      }
    }, (0,external_React_.createElement)("strong", null, (0,external_wp_i18n_namespaceObject.__)('Styles'))), (0,external_React_.createElement)(external_wp_components_namespaceObject.FlexItem, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
      icon: library_seen,
      label: (0,external_wp_i18n_namespaceObject.__)('Style Book'),
      isPressed: isStyleBookOpened || isRevisionsStyleBookOpened,
      disabled: shouldClearCanvasContainerView,
      onClick: toggleStyleBook
    })), (0,external_React_.createElement)(external_wp_components_namespaceObject.FlexItem, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
      label: (0,external_wp_i18n_namespaceObject.__)('Revisions'),
      icon: library_backup,
      onClick: toggleRevisions,
      disabled: !hasRevisions,
      isPressed: isRevisionsOpened || isRevisionsStyleBookOpened
    })), (0,external_React_.createElement)(GlobalStylesMenuSlot, null))
  }, (0,external_React_.createElement)(ui, null));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-edit-mode/constants.js
const SIDEBAR_TEMPLATE = 'edit-site/template';
const SIDEBAR_BLOCK = 'edit-site/block-inspector';

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-edit-mode/settings-header/index.js

/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */


const {
  Tabs: settings_header_Tabs
} = unlock(external_wp_components_namespaceObject.privateApis);
const SettingsHeader = (_, ref) => {
  const postTypeLabel = (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_editor_namespaceObject.store).getPostTypeLabel(), []);
  return (0,external_React_.createElement)(settings_header_Tabs.TabList, {
    ref: ref
  }, (0,external_React_.createElement)(settings_header_Tabs.Tab, {
    tabId: SIDEBAR_TEMPLATE
    // Used for focus management in the SettingsSidebar component.
    ,
    "data-tab-id": SIDEBAR_TEMPLATE
  }, postTypeLabel), (0,external_React_.createElement)(settings_header_Tabs.Tab, {
    tabId: SIDEBAR_BLOCK
    // Used for focus management in the SettingsSidebar component.
    ,
    "data-tab-id": SIDEBAR_BLOCK
  }, (0,external_wp_i18n_namespaceObject.__)('Block')));
};
/* harmony default export */ const settings_header = ((0,external_wp_element_namespaceObject.forwardRef)(SettingsHeader));

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-edit-mode/sidebar-card/index.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */

function SidebarCard({
  className,
  title,
  icon,
  description,
  actions,
  children
}) {
  return (0,external_React_.createElement)("div", {
    className: classnames_default()('edit-site-sidebar-card', className)
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Icon, {
    className: "edit-site-sidebar-card__icon",
    icon: icon
  }), (0,external_React_.createElement)("div", {
    className: "edit-site-sidebar-card__content"
  }, (0,external_React_.createElement)("div", {
    className: "edit-site-sidebar-card__header"
  }, (0,external_React_.createElement)("h2", {
    className: "edit-site-sidebar-card__title"
  }, title), actions), (0,external_React_.createElement)("div", {
    className: "edit-site-sidebar-card__description"
  }, description), children));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-edit-mode/page-panels/page-content.js

/**
 * WordPress dependencies
 */




/**
 * Internal dependencies
 */

const {
  BlockQuickNavigation
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
function PageContent() {
  const clientIdsTree = (0,external_wp_data_namespaceObject.useSelect)(select => unlock(select(external_wp_blockEditor_namespaceObject.store)).getEnabledClientIdsTree(), []);
  const clientIds = (0,external_wp_element_namespaceObject.useMemo)(() => clientIdsTree.map(({
    clientId
  }) => clientId), [clientIdsTree]);
  return (0,external_React_.createElement)(BlockQuickNavigation, {
    clientIds: clientIds
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-edit-mode/page-panels/page-status.js

/**
 * WordPress dependencies
 */










/**
 * Internal dependencies
 */


const {
  PostPanelRow
} = unlock(external_wp_editor_namespaceObject.privateApis);
const STATUS_OPTIONS = [{
  label: (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_wp_i18n_namespaceObject.__)('Draft'), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    variant: "muted"
  }, (0,external_wp_i18n_namespaceObject.__)('Not ready to publish.'))),
  value: 'draft'
}, {
  label: (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_wp_i18n_namespaceObject.__)('Pending'), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    variant: "muted"
  }, (0,external_wp_i18n_namespaceObject.__)('Waiting for review before publishing.'))),
  value: 'pending'
}, {
  label: (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_wp_i18n_namespaceObject.__)('Private'), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    variant: "muted"
  }, (0,external_wp_i18n_namespaceObject.__)('Only visible to site admins and editors.'))),
  value: 'private'
}, {
  label: (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_wp_i18n_namespaceObject.__)('Scheduled'), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    variant: "muted"
  }, (0,external_wp_i18n_namespaceObject.__)('Publish automatically on a chosen date.'))),
  value: 'future'
}, {
  label: (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_wp_i18n_namespaceObject.__)('Published'), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    variant: "muted"
  }, (0,external_wp_i18n_namespaceObject.__)('Visible to everyone.'))),
  value: 'publish'
}];
function PageStatus({
  postType,
  postId,
  status,
  password,
  date
}) {
  const [showPassword, setShowPassword] = (0,external_wp_element_namespaceObject.useState)(!!password);
  const instanceId = (0,external_wp_compose_namespaceObject.useInstanceId)(PageStatus);
  const {
    editEntityRecord
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_coreData_namespaceObject.store);
  const {
    createErrorNotice
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_notices_namespaceObject.store);
  const [popoverAnchor, setPopoverAnchor] = (0,external_wp_element_namespaceObject.useState)(null);
  // Memoize popoverProps to avoid returning a new object every time.
  const popoverProps = (0,external_wp_element_namespaceObject.useMemo)(() => ({
    // Anchor the popover to the middle of the entire row so that it doesn't
    // move around when the label changes.
    anchor: popoverAnchor,
    'aria-label': (0,external_wp_i18n_namespaceObject.__)('Change status'),
    placement: 'bottom-end'
  }), [popoverAnchor]);
  const saveStatus = async ({
    status: newStatus = status,
    password: newPassword = password,
    date: newDate = date
  }) => {
    try {
      await editEntityRecord('postType', postType, postId, {
        status: newStatus,
        date: newDate,
        password: newPassword
      });
    } catch (error) {
      const errorMessage = error.message && error.code !== 'unknown_error' ? error.message : (0,external_wp_i18n_namespaceObject.__)('An error occurred while updating the status');
      createErrorNotice(errorMessage, {
        type: 'snackbar'
      });
    }
  };
  const handleTogglePassword = value => {
    setShowPassword(value);
    if (!value) {
      saveStatus({
        password: ''
      });
    }
  };
  const handleStatus = value => {
    let newDate = date;
    let newPassword = password;
    if (value === 'publish') {
      if (new Date(date) > new Date()) {
        newDate = null;
      }
    } else if (value === 'future') {
      if (!date || new Date(date) < new Date()) {
        newDate = new Date();
        newDate.setDate(newDate.getDate() + 7);
      }
    } else if (value === 'private' && password) {
      setShowPassword(false);
      newPassword = '';
    }
    saveStatus({
      status: value,
      date: newDate,
      password: newPassword
    });
  };
  return (0,external_React_.createElement)(PostPanelRow, {
    label: (0,external_wp_i18n_namespaceObject.__)('Status')
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Dropdown, {
    contentClassName: "edit-site-change-status__content",
    popoverProps: popoverProps,
    focusOnMount: true,
    ref: setPopoverAnchor,
    renderToggle: ({
      onToggle
    }) => (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
      className: "edit-site-summary-field__trigger",
      variant: "tertiary",
      onClick: onToggle
    }, (0,external_React_.createElement)(StatusLabel, {
      status: password ? 'protected' : status
    })),
    renderContent: ({
      onClose
    }) => (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_blockEditor_namespaceObject.__experimentalInspectorPopoverHeader, {
      title: (0,external_wp_i18n_namespaceObject.__)('Status'),
      onClose: onClose
    }), (0,external_React_.createElement)("form", null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
      spacing: 5
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.RadioControl, {
      className: "edit-site-change-status__options",
      hideLabelFromVision: true,
      label: (0,external_wp_i18n_namespaceObject.__)('Status'),
      options: STATUS_OPTIONS,
      onChange: handleStatus,
      selected: status
    }), status !== 'private' && (0,external_React_.createElement)("fieldset", {
      className: "edit-site-change-status__password-fieldset"
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
      as: "legend",
      className: "edit-site-change-status__password-legend",
      size: "11",
      lineHeight: 1.4,
      weight: 500,
      upperCase: true
    }, (0,external_wp_i18n_namespaceObject.__)('Password')), (0,external_React_.createElement)(external_wp_components_namespaceObject.ToggleControl, {
      label: (0,external_wp_i18n_namespaceObject.__)('Hide this page behind a password'),
      checked: showPassword,
      onChange: handleTogglePassword
    }), showPassword && (0,external_React_.createElement)("div", {
      className: "edit-site-change-status__password-input"
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.VisuallyHidden, {
      as: "label",
      htmlFor: `edit-site-change-status__password-input-${instanceId}`
    }, (0,external_wp_i18n_namespaceObject.__)('Create password')), (0,external_React_.createElement)(external_wp_components_namespaceObject.TextControl, {
      onChange: value => saveStatus({
        password: value
      }),
      value: password,
      placeholder: (0,external_wp_i18n_namespaceObject.__)('Use a secure password'),
      type: "text",
      id: `edit-site-change-status__password-input-${instanceId}`
    }))))))
  }));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-edit-mode/page-panels/page-summary.js

/**
 * WordPress dependencies
 */



/**
 * Internal dependencies
 */

function PageSummary({
  status,
  date,
  password,
  postId,
  postType
}) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    spacing: 0
  }, (0,external_React_.createElement)(PageStatus, {
    status: status,
    date: date,
    password: password,
    postId: postId,
    postType: postType
  }), (0,external_React_.createElement)(external_wp_editor_namespaceObject.PostSchedulePanel, null), (0,external_React_.createElement)(external_wp_editor_namespaceObject.PostTemplatePanel, null), (0,external_React_.createElement)(external_wp_editor_namespaceObject.PostURLPanel, null), (0,external_React_.createElement)(external_wp_editor_namespaceObject.PostAuthorPanel, null));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-edit-mode/page-panels/index.js

/**
 * WordPress dependencies
 */









/**
 * Internal dependencies
 */




function PagePanels() {
  const {
    id,
    type,
    hasResolved,
    status,
    date,
    password,
    title,
    modified,
    renderingMode
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getEditedPostContext
    } = select(store_store);
    const {
      getEditedEntityRecord,
      hasFinishedResolution
    } = select(external_wp_coreData_namespaceObject.store);
    const {
      getRenderingMode
    } = select(external_wp_editor_namespaceObject.store);
    const context = getEditedPostContext();
    const queryArgs = ['postType', context.postType, context.postId];
    const page = getEditedEntityRecord(...queryArgs);
    return {
      hasResolved: hasFinishedResolution('getEditedEntityRecord', queryArgs),
      title: page?.title,
      id: page?.id,
      type: page?.type,
      status: page?.status,
      date: page?.date,
      password: page?.password,
      modified: page?.modified,
      renderingMode: getRenderingMode()
    };
  }, []);
  if (!hasResolved) {
    return null;
  }
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.PanelBody, null, (0,external_React_.createElement)(SidebarCard, {
    title: (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(title),
    icon: library_page,
    description: (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, null, (0,external_wp_i18n_namespaceObject.sprintf)(
    // translators: %s: Human-readable time difference, e.g. "2 days ago".
    (0,external_wp_i18n_namespaceObject.__)('Last edited %s'), (0,external_wp_date_namespaceObject.humanTimeDiff)(modified))))
  })), (0,external_React_.createElement)(external_wp_components_namespaceObject.PanelBody, {
    title: (0,external_wp_i18n_namespaceObject.__)('Summary')
  }, (0,external_React_.createElement)(PageSummary, {
    status: status,
    date: date,
    password: password,
    postId: id,
    postType: type
  })), renderingMode !== 'post-only' && (0,external_React_.createElement)(external_wp_components_namespaceObject.PanelBody, {
    title: (0,external_wp_i18n_namespaceObject.__)('Content')
  }, (0,external_React_.createElement)(PageContent, null)), (0,external_React_.createElement)(external_wp_editor_namespaceObject.PostLastRevisionPanel, null), (0,external_React_.createElement)(external_wp_editor_namespaceObject.PostTaxonomiesPanel, null), (0,external_React_.createElement)(external_wp_editor_namespaceObject.PostFeaturedImagePanel, null), (0,external_React_.createElement)(external_wp_editor_namespaceObject.PostExcerptPanel, null), (0,external_React_.createElement)(external_wp_editor_namespaceObject.PostDiscussionPanel, null), (0,external_React_.createElement)(external_wp_editor_namespaceObject.PageAttributesPanel, null));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-edit-mode/template-panel/replace-template-button.js

/**
 * WordPress dependencies
 */









/**
 * Internal dependencies
 */

function ReplaceTemplateButton({
  onClick,
  availableTemplates
}) {
  const {
    editEntityRecord
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_coreData_namespaceObject.store);
  const [showModal, setShowModal] = (0,external_wp_element_namespaceObject.useState)(false);
  const onClose = () => {
    setShowModal(false);
  };
  const {
    postId,
    postType
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    return {
      postId: select(store_store).getEditedPostId(),
      postType: select(store_store).getEditedPostType()
    };
  }, []);
  const onTemplateSelect = async selectedTemplate => {
    onClose(); // Close the template suggestions modal first.
    onClick();
    await editEntityRecord('postType', postType, postId, {
      blocks: selectedTemplate.blocks,
      content: (0,external_wp_blocks_namespaceObject.serialize)(selectedTemplate.blocks)
    });
  };
  if (!availableTemplates.length || availableTemplates.length < 1) {
    return null;
  }
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
    info: (0,external_wp_i18n_namespaceObject.__)('Replace the contents of this template with another.'),
    onClick: () => setShowModal(true)
  }, (0,external_wp_i18n_namespaceObject.__)('Replace template')), showModal && (0,external_React_.createElement)(external_wp_components_namespaceObject.Modal, {
    title: (0,external_wp_i18n_namespaceObject.__)('Choose a template'),
    onRequestClose: onClose,
    overlayClassName: "edit-site-template-panel__replace-template-modal",
    isFullScreen: true
  }, (0,external_React_.createElement)("div", {
    className: "edit-site-template-panel__replace-template-modal__content"
  }, (0,external_React_.createElement)(TemplatesList, {
    availableTemplates: availableTemplates,
    onSelect: onTemplateSelect
  }))));
}
function TemplatesList({
  availableTemplates,
  onSelect
}) {
  const shownTemplates = (0,external_wp_compose_namespaceObject.useAsyncList)(availableTemplates);
  return (0,external_React_.createElement)(external_wp_blockEditor_namespaceObject.__experimentalBlockPatternsList, {
    label: (0,external_wp_i18n_namespaceObject.__)('Templates'),
    blockPatterns: availableTemplates,
    shownPatterns: shownTemplates,
    onClickPattern: onSelect
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-edit-mode/template-panel/hooks.js
/**
 * WordPress dependencies
 */





/**
 * Internal dependencies
 */



function injectThemeAttributeInBlockTemplateContent(block, currentThemeStylesheet) {
  block.innerBlocks = block.innerBlocks.map(innerBlock => {
    return injectThemeAttributeInBlockTemplateContent(innerBlock, currentThemeStylesheet);
  });
  if (block.name === 'core/template-part' && block.attributes.theme === undefined) {
    block.attributes.theme = currentThemeStylesheet;
  }
  return block;
}
function preparePatterns(patterns, template, currentThemeStylesheet) {
  // Filter out duplicates.
  const filterOutDuplicatesByName = (currentItem, index, items) => index === items.findIndex(item => currentItem.name === item.name);

  // Filter out core/directory patterns not included in theme.json.
  const filterOutExcludedPatternSources = pattern => !EXCLUDED_PATTERN_SOURCES.includes(pattern.source);

  // Filter only the patterns that are compatible with the current template.
  const filterCompatiblePatterns = pattern => pattern.templateTypes?.includes(template.slug);
  return patterns.filter((pattern, index, items) => filterOutExcludedPatternSources(pattern) && filterOutDuplicatesByName(pattern, index, items) && filterCompatiblePatterns(pattern)).map(pattern => ({
    ...pattern,
    keywords: pattern.keywords || [],
    type: PATTERN_TYPES.theme,
    blocks: (0,external_wp_blocks_namespaceObject.parse)(pattern.content, {
      __unstableSkipMigrationLogs: true
    }).map(block => injectThemeAttributeInBlockTemplateContent(block, currentThemeStylesheet))
  }));
}
function useAvailablePatterns(template) {
  const {
    blockPatterns,
    restBlockPatterns,
    currentThemeStylesheet
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    var _settings$__experimen;
    const {
      getSettings
    } = unlock(select(store_store));
    const settings = getSettings();
    return {
      blockPatterns: (_settings$__experimen = settings.__experimentalAdditionalBlockPatterns) !== null && _settings$__experimen !== void 0 ? _settings$__experimen : settings.__experimentalBlockPatterns,
      restBlockPatterns: select(external_wp_coreData_namespaceObject.store).getBlockPatterns(),
      currentThemeStylesheet: select(external_wp_coreData_namespaceObject.store).getCurrentTheme().stylesheet
    };
  }, []);
  return (0,external_wp_element_namespaceObject.useMemo)(() => {
    const mergedPatterns = [...(blockPatterns || []), ...(restBlockPatterns || [])];
    return preparePatterns(mergedPatterns, template, currentThemeStylesheet);
  }, [blockPatterns, restBlockPatterns, template, currentThemeStylesheet]);
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-edit-mode/template-panel/template-actions.js

/**
 * WordPress dependencies
 */





/**
 * Internal dependencies
 */




function Actions({
  template
}) {
  const availablePatterns = useAvailablePatterns(template);
  const {
    revertTemplate
  } = (0,external_wp_data_namespaceObject.useDispatch)(store_store);
  const isRevertable = isTemplateRevertable(template);
  if (!isRevertable && (!availablePatterns.length || availablePatterns.length < 1)) {
    return null;
  }
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.DropdownMenu, {
    icon: more_vertical,
    label: (0,external_wp_i18n_namespaceObject.__)('Actions'),
    className: "edit-site-template-card__actions",
    toggleProps: {
      isSmall: true
    }
  }, ({
    onClose
  }) => (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuGroup, null, isRevertable && (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
    info: (0,external_wp_i18n_namespaceObject.__)('Use the template as supplied by the theme.'),
    onClick: () => {
      revertTemplate(template);
      onClose();
    }
  }, (0,external_wp_i18n_namespaceObject.__)('Clear customizations')), (0,external_React_.createElement)(ReplaceTemplateButton, {
    availableTemplates: availablePatterns,
    template: template,
    onClick: onClose
  })));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-edit-mode/template-panel/template-areas.js

/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */

function TemplateAreaItem({
  area,
  clientId
}) {
  const {
    selectBlock,
    toggleBlockHighlight
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_blockEditor_namespaceObject.store);
  const templatePartArea = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const defaultAreas = select(external_wp_editor_namespaceObject.store).__experimentalGetDefaultTemplatePartAreas();
    return defaultAreas.find(defaultArea => defaultArea.area === area);
  }, [area]);
  const highlightBlock = () => toggleBlockHighlight(clientId, true);
  const cancelHighlightBlock = () => toggleBlockHighlight(clientId, false);
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    className: "edit-site-template-card__template-areas-item",
    icon: templatePartArea?.icon,
    onMouseOver: highlightBlock,
    onMouseLeave: cancelHighlightBlock,
    onFocus: highlightBlock,
    onBlur: cancelHighlightBlock,
    onClick: () => {
      selectBlock(clientId);
    }
  }, templatePartArea?.label);
}
function template_areas_TemplateAreas() {
  const templateParts = (0,external_wp_data_namespaceObject.useSelect)(select => select(store_store).getCurrentTemplateTemplateParts(), []);
  if (!templateParts.length) {
    return null;
  }
  return (0,external_React_.createElement)("section", {
    className: "edit-site-template-card__template-areas"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHeading, {
    level: 3,
    className: "edit-site-template-card__template-areas-title"
  }, (0,external_wp_i18n_namespaceObject.__)('Areas')), (0,external_React_.createElement)("ul", {
    className: "edit-site-template-card__template-areas-list"
  }, templateParts.map(({
    templatePart,
    block
  }) => (0,external_React_.createElement)("li", {
    key: block.clientId
  }, (0,external_React_.createElement)(TemplateAreaItem, {
    area: templatePart.area,
    clientId: block.clientId
  })))));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-edit-mode/template-panel/index.js

/**
 * WordPress dependencies
 */







/**
 * Internal dependencies
 */




const CARD_ICONS = {
  wp_block: library_symbol,
  wp_navigation: library_navigation
};
function TemplatePanel() {
  var _CARD_ICONS$record$ty;
  const {
    title,
    description,
    icon,
    record
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getEditedPostType,
      getEditedPostId
    } = select(store_store);
    const {
      getEditedEntityRecord
    } = select(external_wp_coreData_namespaceObject.store);
    const {
      __experimentalGetTemplateInfo: getTemplateInfo
    } = select(external_wp_editor_namespaceObject.store);
    const type = getEditedPostType();
    const postId = getEditedPostId();
    const _record = getEditedEntityRecord('postType', type, postId);
    const info = getTemplateInfo(_record);
    return {
      title: info.title,
      description: info.description,
      icon: info.icon,
      record: _record
    };
  }, []);
  if (!title && !description) {
    return null;
  }
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.PanelBody, null, (0,external_React_.createElement)(SidebarCard, {
    className: "edit-site-template-card",
    title: (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(title),
    icon: (_CARD_ICONS$record$ty = CARD_ICONS[record?.type]) !== null && _CARD_ICONS$record$ty !== void 0 ? _CARD_ICONS$record$ty : icon,
    description: (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(description),
    actions: (0,external_React_.createElement)(Actions, {
      template: record
    })
  }, (0,external_React_.createElement)(template_areas_TemplateAreas, null))), (0,external_React_.createElement)(external_wp_editor_namespaceObject.PostLastRevisionPanel, null), (0,external_React_.createElement)(external_wp_editor_namespaceObject.PostTaxonomiesPanel, null), (0,external_React_.createElement)(external_wp_editor_namespaceObject.PostFeaturedImagePanel, null), (0,external_React_.createElement)(external_wp_editor_namespaceObject.PostExcerptPanel, null), (0,external_React_.createElement)(external_wp_editor_namespaceObject.PostDiscussionPanel, null), (0,external_React_.createElement)(external_wp_editor_namespaceObject.PageAttributesPanel, null));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/plugin-template-setting-panel/index.js
/**
 * Defines an extensibility slot for the Template sidebar.
 */

/**
 * WordPress dependencies
 */

const {
  Fill,
  Slot: plugin_template_setting_panel_Slot
} = (0,external_wp_components_namespaceObject.createSlotFill)('PluginTemplateSettingPanel');
const PluginTemplateSettingPanel = Fill;
PluginTemplateSettingPanel.Slot = plugin_template_setting_panel_Slot;

/**
 * Renders items in the Template Sidebar below the main information
 * like the Template Card.
 *
 * @example
 * ```jsx
 * // Using ESNext syntax
 * import { PluginTemplateSettingPanel } from '@wordpress/edit-site';
 *
 * const MyTemplateSettingTest = () => (
 * 		<PluginTemplateSettingPanel>
 *			<p>Hello, World!</p>
 *		</PluginTemplateSettingPanel>
 *	);
 * ```
 *
 * @return {Component} The component to be rendered.
 */
/* harmony default export */ const plugin_template_setting_panel = (PluginTemplateSettingPanel);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-edit-mode/index.js

/**
 * WordPress dependencies
 */









/**
 * Internal dependencies
 */










const {
  Tabs: sidebar_edit_mode_Tabs
} = unlock(external_wp_components_namespaceObject.privateApis);
const {
  Slot: InspectorSlot,
  Fill: InspectorFill
} = (0,external_wp_components_namespaceObject.createSlotFill)('EditSiteSidebarInspector');
const SidebarInspectorFill = InspectorFill;
const FillContents = ({
  sidebarName,
  isEditingPage,
  supportsGlobalStyles
}) => {
  const tabListRef = (0,external_wp_element_namespaceObject.useRef)(null);
  // Because `DefaultSidebar` renders a `ComplementaryArea`, we
  // need to forward the `Tabs` context so it can be passed through the
  // underlying slot/fill.
  const tabsContextValue = (0,external_wp_element_namespaceObject.useContext)(sidebar_edit_mode_Tabs.Context);

  // This effect addresses a race condition caused by tabbing from the last
  // block in the editor into the settings sidebar. Without this effect, the
  // selected tab and browser focus can become separated in an unexpected way.
  // (e.g the "block" tab is focused, but the "post" tab is selected).
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    const tabsElements = Array.from(tabListRef.current?.querySelectorAll('[role="tab"]') || []);
    const selectedTabElement = tabsElements.find(
    // We are purposefully using a custom `data-tab-id` attribute here
    // because we don't want rely on any assumptions about `Tabs`
    // component internals.
    element => element.getAttribute('data-tab-id') === sidebarName);
    const activeElement = selectedTabElement?.ownerDocument.activeElement;
    const tabsHasFocus = tabsElements.some(element => {
      return activeElement && activeElement.id === element.id;
    });
    if (tabsHasFocus && selectedTabElement && selectedTabElement.id !== activeElement?.id) {
      selectedTabElement?.focus();
    }
  }, [sidebarName]);
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(DefaultSidebar, {
    identifier: sidebarName,
    title: (0,external_wp_i18n_namespaceObject.__)('Settings'),
    icon: (0,external_wp_i18n_namespaceObject.isRTL)() ? drawer_left : drawer_right,
    closeLabel: (0,external_wp_i18n_namespaceObject.__)('Close Settings'),
    header: (0,external_React_.createElement)(sidebar_edit_mode_Tabs.Context.Provider, {
      value: tabsContextValue
    }, (0,external_React_.createElement)(settings_header, {
      ref: tabListRef
    })),
    headerClassName: "edit-site-sidebar-edit-mode__panel-tabs"
    // This classname is added so we can apply a corrective negative
    // margin to the panel.
    // see https://github.com/WordPress/gutenberg/pull/55360#pullrequestreview-1737671049
    ,
    className: "edit-site-sidebar__panel"
  }, (0,external_React_.createElement)(sidebar_edit_mode_Tabs.Context.Provider, {
    value: tabsContextValue
  }, (0,external_React_.createElement)(sidebar_edit_mode_Tabs.TabPanel, {
    tabId: SIDEBAR_TEMPLATE,
    focusable: false
  }, isEditingPage ? (0,external_React_.createElement)(PagePanels, null) : (0,external_React_.createElement)(TemplatePanel, null), (0,external_React_.createElement)(plugin_template_setting_panel.Slot, null)), (0,external_React_.createElement)(sidebar_edit_mode_Tabs.TabPanel, {
    tabId: SIDEBAR_BLOCK,
    focusable: false
  }, (0,external_React_.createElement)(InspectorSlot, {
    bubblesVirtually: true
  })))), supportsGlobalStyles && (0,external_React_.createElement)(GlobalStylesSidebar, null));
};
function SidebarComplementaryAreaFills() {
  const {
    sidebar,
    isEditorSidebarOpened,
    hasBlockSelection,
    supportsGlobalStyles,
    isEditingPage,
    isEditorOpen
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const _sidebar = select(store).getActiveComplementaryArea(constants_STORE_NAME);
    const _isEditorSidebarOpened = [SIDEBAR_BLOCK, SIDEBAR_TEMPLATE].includes(_sidebar);
    const {
      getCanvasMode
    } = unlock(select(store_store));
    return {
      sidebar: _sidebar,
      isEditorSidebarOpened: _isEditorSidebarOpened,
      hasBlockSelection: !!select(external_wp_blockEditor_namespaceObject.store).getBlockSelectionStart(),
      supportsGlobalStyles: select(external_wp_coreData_namespaceObject.store).getCurrentTheme()?.is_block_theme,
      isEditingPage: select(store_store).isPage(),
      isEditorOpen: getCanvasMode() === 'edit'
    };
  }, []);
  const {
    enableComplementaryArea
  } = (0,external_wp_data_namespaceObject.useDispatch)(store);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    // Don't automatically switch tab when the sidebar is closed or when we
    // are focused on page content.
    if (!isEditorSidebarOpened) {
      return;
    }
    if (hasBlockSelection) {
      if (!isEditingPage) {
        enableComplementaryArea(constants_STORE_NAME, SIDEBAR_BLOCK);
      }
    } else {
      enableComplementaryArea(constants_STORE_NAME, SIDEBAR_TEMPLATE);
    }
  }, [hasBlockSelection, isEditorSidebarOpened, isEditingPage, enableComplementaryArea]);
  let sidebarName = sidebar;
  if (!isEditorSidebarOpened) {
    sidebarName = hasBlockSelection ? SIDEBAR_BLOCK : SIDEBAR_TEMPLATE;
  }

  // `newSelectedTabId` could technically be falsey if no tab is selected (i.e.
  // the initial render) or when we don't want a tab displayed (i.e. the
  // sidebar is closed). These cases should both be covered by the `!!` check
  // below, so we shouldn't need any additional falsey handling.
  const onTabSelect = (0,external_wp_element_namespaceObject.useCallback)(newSelectedTabId => {
    if (!!newSelectedTabId) {
      enableComplementaryArea(constants_STORE_NAME, newSelectedTabId);
    }
  }, [enableComplementaryArea]);
  return (0,external_React_.createElement)(sidebar_edit_mode_Tabs
  // Due to how this component is controlled (via a value from the
  // edit-site store), when the sidebar closes the currently selected
  // tab can't be found. This causes the component to continuously reset
  // the selection to `null` in an infinite loop. Proactively setting
  // the selected tab to `null` avoids that.
  , {
    selectedTabId: isEditorOpen && isEditorSidebarOpened ? sidebarName : null,
    onSelect: onTabSelect,
    selectOnMove: false
  }, (0,external_React_.createElement)(FillContents, {
    sidebarName: sidebarName,
    isEditingPage: isEditingPage,
    supportsGlobalStyles: supportsGlobalStyles
  }));
}

// EXTERNAL MODULE: ./node_modules/react-autosize-textarea/lib/index.js
var lib = __webpack_require__(4132);
;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/code-editor/index.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */









/**
 * Internal dependencies
 */

function CodeEditor() {
  const instanceId = (0,external_wp_compose_namespaceObject.useInstanceId)(CodeEditor);
  const {
    shortcut,
    content,
    blocks,
    type,
    id
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getEditedEntityRecord
    } = select(external_wp_coreData_namespaceObject.store);
    const {
      getEditedPostType,
      getEditedPostId
    } = select(store_store);
    const {
      getShortcutRepresentation
    } = select(external_wp_keyboardShortcuts_namespaceObject.store);
    const _type = getEditedPostType();
    const _id = getEditedPostId();
    const editedRecord = getEditedEntityRecord('postType', _type, _id);
    return {
      shortcut: getShortcutRepresentation('core/edit-site/toggle-mode'),
      content: editedRecord?.content,
      blocks: editedRecord?.blocks,
      type: _type,
      id: _id
    };
  }, []);
  const {
    editEntityRecord
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_coreData_namespaceObject.store);
  // Replicates the logic found in getEditedPostContent().
  const realContent = (0,external_wp_element_namespaceObject.useMemo)(() => {
    if (content instanceof Function) {
      return content({
        blocks
      });
    } else if (blocks) {
      // If we have parsed blocks already, they should be our source of truth.
      // Parsing applies block deprecations and legacy block conversions that
      // unparsed content will not have.
      return (0,external_wp_blocks_namespaceObject.__unstableSerializeAndClean)(blocks);
    }
    return content;
  }, [content, blocks]);
  const {
    switchEditorMode
  } = (0,external_wp_data_namespaceObject.useDispatch)(store_store);
  return (0,external_React_.createElement)("div", {
    className: "edit-site-code-editor"
  }, (0,external_React_.createElement)("div", {
    className: "edit-site-code-editor__toolbar"
  }, (0,external_React_.createElement)("h2", null, (0,external_wp_i18n_namespaceObject.__)('Editing code')), (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    variant: "tertiary",
    onClick: () => switchEditorMode('visual'),
    shortcut: shortcut
  }, (0,external_wp_i18n_namespaceObject.__)('Exit code editor'))), (0,external_React_.createElement)("div", {
    className: "edit-site-code-editor__body"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.VisuallyHidden, {
    as: "label",
    htmlFor: `code-editor-text-area-${instanceId}`
  }, (0,external_wp_i18n_namespaceObject.__)('Type text or HTML')), (0,external_React_.createElement)(lib/* default */.A, {
    autoComplete: "off",
    dir: "auto",
    value: realContent,
    onChange: event => {
      editEntityRecord('postType', type, id, {
        content: event.target.value,
        blocks: undefined,
        selection: undefined
      });
    },
    className: "edit-site-code-editor-text-area",
    id: `code-editor-text-area-${instanceId}`,
    placeholder: (0,external_wp_i18n_namespaceObject.__)('Start writing with text or HTML')
  })));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/keyboard-shortcuts/edit-mode.js
/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */



function KeyboardShortcutsEditMode() {
  const {
    getEditorMode
  } = (0,external_wp_data_namespaceObject.useSelect)(store_store);
  const isBlockInspectorOpen = (0,external_wp_data_namespaceObject.useSelect)(select => select(store).getActiveComplementaryArea(store_store.name) === SIDEBAR_BLOCK, []);
  const {
    switchEditorMode,
    toggleDistractionFree
  } = (0,external_wp_data_namespaceObject.useDispatch)(store_store);
  const {
    enableComplementaryArea,
    disableComplementaryArea
  } = (0,external_wp_data_namespaceObject.useDispatch)(store);
  const {
    replaceBlocks
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_blockEditor_namespaceObject.store);
  const {
    getBlockName,
    getSelectedBlockClientId,
    getBlockAttributes
  } = (0,external_wp_data_namespaceObject.useSelect)(external_wp_blockEditor_namespaceObject.store);
  const handleTextLevelShortcut = (event, level) => {
    event.preventDefault();
    const destinationBlockName = level === 0 ? 'core/paragraph' : 'core/heading';
    const currentClientId = getSelectedBlockClientId();
    if (currentClientId === null) {
      return;
    }
    const blockName = getBlockName(currentClientId);
    if (blockName !== 'core/paragraph' && blockName !== 'core/heading') {
      return;
    }
    const attributes = getBlockAttributes(currentClientId);
    const textAlign = blockName === 'core/paragraph' ? 'align' : 'textAlign';
    const destinationTextAlign = destinationBlockName === 'core/paragraph' ? 'align' : 'textAlign';
    replaceBlocks(currentClientId, (0,external_wp_blocks_namespaceObject.createBlock)(destinationBlockName, {
      level,
      content: attributes.content,
      ...{
        [destinationTextAlign]: attributes[textAlign]
      }
    }));
  };
  (0,external_wp_keyboardShortcuts_namespaceObject.useShortcut)('core/edit-site/toggle-block-settings-sidebar', event => {
    // This shortcut has no known clashes, but use preventDefault to prevent any
    // obscure shortcuts from triggering.
    event.preventDefault();
    if (isBlockInspectorOpen) {
      disableComplementaryArea(constants_STORE_NAME);
    } else {
      enableComplementaryArea(constants_STORE_NAME, SIDEBAR_BLOCK);
    }
  });
  (0,external_wp_keyboardShortcuts_namespaceObject.useShortcut)('core/edit-site/toggle-mode', () => {
    switchEditorMode(getEditorMode() === 'visual' ? 'text' : 'visual');
  });
  (0,external_wp_keyboardShortcuts_namespaceObject.useShortcut)('core/edit-site/transform-heading-to-paragraph', event => handleTextLevelShortcut(event, 0));
  [1, 2, 3, 4, 5, 6].forEach(level => {
    //the loop is based off on a constant therefore
    //the hook will execute the same way every time
    //eslint-disable-next-line react-hooks/rules-of-hooks
    (0,external_wp_keyboardShortcuts_namespaceObject.useShortcut)(`core/edit-site/transform-paragraph-to-heading-${level}`, event => handleTextLevelShortcut(event, level));
  });
  (0,external_wp_keyboardShortcuts_namespaceObject.useShortcut)('core/edit-site/toggle-distraction-free', () => {
    toggleDistractionFree();
  });
  return null;
}
/* harmony default export */ const edit_mode = (KeyboardShortcutsEditMode);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/welcome-guide/image.js

function WelcomeGuideImage({
  nonAnimatedSrc,
  animatedSrc
}) {
  return (0,external_React_.createElement)("picture", {
    className: "edit-site-welcome-guide__image"
  }, (0,external_React_.createElement)("source", {
    srcSet: nonAnimatedSrc,
    media: "(prefers-reduced-motion: reduce)"
  }), (0,external_React_.createElement)("img", {
    src: animatedSrc,
    width: "312",
    height: "240",
    alt: ""
  }));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/welcome-guide/editor.js

/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */

function WelcomeGuideEditor() {
  const {
    toggle
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_preferences_namespaceObject.store);
  const isActive = (0,external_wp_data_namespaceObject.useSelect)(select => !!select(external_wp_preferences_namespaceObject.store).get('core/edit-site', 'welcomeGuide'), []);
  if (!isActive) {
    return null;
  }
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Guide, {
    className: "edit-site-welcome-guide guide-editor",
    contentLabel: (0,external_wp_i18n_namespaceObject.__)('Welcome to the site editor'),
    finishButtonText: (0,external_wp_i18n_namespaceObject.__)('Get started'),
    onFinish: () => toggle('core/edit-site', 'welcomeGuide'),
    pages: [{
      image: (0,external_React_.createElement)(WelcomeGuideImage, {
        nonAnimatedSrc: "https://s.w.org/images/block-editor/edit-your-site.svg?1",
        animatedSrc: "https://s.w.org/images/block-editor/edit-your-site.gif?1"
      }),
      content: (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)("h1", {
        className: "edit-site-welcome-guide__heading"
      }, (0,external_wp_i18n_namespaceObject.__)('Edit your site')), (0,external_React_.createElement)("p", {
        className: "edit-site-welcome-guide__text"
      }, (0,external_wp_i18n_namespaceObject.__)('Design everything on your site — from the header right down to the footer — using blocks.')), (0,external_React_.createElement)("p", {
        className: "edit-site-welcome-guide__text"
      }, (0,external_wp_element_namespaceObject.createInterpolateElement)((0,external_wp_i18n_namespaceObject.__)('Click <StylesIconImage /> to start designing your blocks, and choose your typography, layout, and colors.'), {
        StylesIconImage: (0,external_React_.createElement)("img", {
          alt: (0,external_wp_i18n_namespaceObject.__)('styles'),
          src: "data:image/svg+xml,%3Csvg width='18' height='18' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M12 4c-4.4 0-8 3.6-8 8v.1c0 4.1 3.2 7.5 7.2 7.9h.8c4.4 0 8-3.6 8-8s-3.6-8-8-8zm0 15V5c3.9 0 7 3.1 7 7s-3.1 7-7 7z' fill='%231E1E1E'/%3E%3C/svg%3E%0A"
        })
      })))
    }]
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/welcome-guide/styles.js

/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */


function WelcomeGuideStyles() {
  const {
    toggle
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_preferences_namespaceObject.store);
  const {
    isActive,
    isStylesOpen
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const sidebar = select(store).getActiveComplementaryArea(store_store.name);
    return {
      isActive: !!select(external_wp_preferences_namespaceObject.store).get('core/edit-site', 'welcomeGuideStyles'),
      isStylesOpen: sidebar === 'edit-site/global-styles'
    };
  }, []);
  if (!isActive || !isStylesOpen) {
    return null;
  }
  const welcomeLabel = (0,external_wp_i18n_namespaceObject.__)('Welcome to Styles');
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Guide, {
    className: "edit-site-welcome-guide guide-styles",
    contentLabel: welcomeLabel,
    finishButtonText: (0,external_wp_i18n_namespaceObject.__)('Get started'),
    onFinish: () => toggle('core/edit-site', 'welcomeGuideStyles'),
    pages: [{
      image: (0,external_React_.createElement)(WelcomeGuideImage, {
        nonAnimatedSrc: "https://s.w.org/images/block-editor/welcome-to-styles.svg?1",
        animatedSrc: "https://s.w.org/images/block-editor/welcome-to-styles.gif?1"
      }),
      content: (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)("h1", {
        className: "edit-site-welcome-guide__heading"
      }, welcomeLabel), (0,external_React_.createElement)("p", {
        className: "edit-site-welcome-guide__text"
      }, (0,external_wp_i18n_namespaceObject.__)('Tweak your site, or give it a whole new look! Get creative — how about a new color palette for your buttons, or choosing a new font? Take a look at what you can do here.')))
    }, {
      image: (0,external_React_.createElement)(WelcomeGuideImage, {
        nonAnimatedSrc: "https://s.w.org/images/block-editor/set-the-design.svg?1",
        animatedSrc: "https://s.w.org/images/block-editor/set-the-design.gif?1"
      }),
      content: (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)("h1", {
        className: "edit-site-welcome-guide__heading"
      }, (0,external_wp_i18n_namespaceObject.__)('Set the design')), (0,external_React_.createElement)("p", {
        className: "edit-site-welcome-guide__text"
      }, (0,external_wp_i18n_namespaceObject.__)('You can customize your site as much as you like with different colors, typography, and layouts. Or if you prefer, just leave it up to your theme to handle!')))
    }, {
      image: (0,external_React_.createElement)(WelcomeGuideImage, {
        nonAnimatedSrc: "https://s.w.org/images/block-editor/personalize-blocks.svg?1",
        animatedSrc: "https://s.w.org/images/block-editor/personalize-blocks.gif?1"
      }),
      content: (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)("h1", {
        className: "edit-site-welcome-guide__heading"
      }, (0,external_wp_i18n_namespaceObject.__)('Personalize blocks')), (0,external_React_.createElement)("p", {
        className: "edit-site-welcome-guide__text"
      }, (0,external_wp_i18n_namespaceObject.__)('You can adjust your blocks to ensure a cohesive experience across your site — add your unique colors to a branded Button block, or adjust the Heading block to your preferred size.')))
    }, {
      image: (0,external_React_.createElement)(WelcomeGuideImage, {
        nonAnimatedSrc: "https://s.w.org/images/block-editor/welcome-documentation.svg",
        animatedSrc: "https://s.w.org/images/block-editor/welcome-documentation.gif"
      }),
      content: (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)("h1", {
        className: "edit-site-welcome-guide__heading"
      }, (0,external_wp_i18n_namespaceObject.__)('Learn more')), (0,external_React_.createElement)("p", {
        className: "edit-site-welcome-guide__text"
      }, (0,external_wp_i18n_namespaceObject.__)('New to block themes and styling your site?'), ' ', (0,external_React_.createElement)(external_wp_components_namespaceObject.ExternalLink, {
        href: (0,external_wp_i18n_namespaceObject.__)('https://wordpress.org/documentation/article/styles-overview/')
      }, (0,external_wp_i18n_namespaceObject.__)('Here’s a detailed guide to learn how to make the most of it.'))))
    }]
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/welcome-guide/page.js

/**
 * WordPress dependencies
 */





/**
 * Internal dependencies
 */

function WelcomeGuidePage() {
  const {
    toggle
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_preferences_namespaceObject.store);
  const isVisible = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const isPageActive = !!select(external_wp_preferences_namespaceObject.store).get('core/edit-site', 'welcomeGuidePage');
    const isEditorActive = !!select(external_wp_preferences_namespaceObject.store).get('core/edit-site', 'welcomeGuide');
    const {
      isPage
    } = select(store_store);
    return isPageActive && !isEditorActive && isPage();
  }, []);
  if (!isVisible) {
    return null;
  }
  const heading = (0,external_wp_i18n_namespaceObject.__)('Editing a page');
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Guide, {
    className: "edit-site-welcome-guide guide-page",
    contentLabel: heading,
    finishButtonText: (0,external_wp_i18n_namespaceObject.__)('Continue'),
    onFinish: () => toggle('core/edit-site', 'welcomeGuidePage'),
    pages: [{
      image: (0,external_React_.createElement)("video", {
        className: "edit-site-welcome-guide__video",
        autoPlay: true,
        loop: true,
        muted: true,
        width: "312",
        height: "240"
      }, (0,external_React_.createElement)("source", {
        src: "https://s.w.org/images/block-editor/editing-your-page.mp4",
        type: "video/mp4"
      })),
      content: (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)("h1", {
        className: "edit-site-welcome-guide__heading"
      }, heading), (0,external_React_.createElement)("p", {
        className: "edit-site-welcome-guide__text"
      }, (0,external_wp_i18n_namespaceObject.__)('It’s now possible to edit page content in the site editor. To customise other parts of the page like the header and footer switch to editing the template using the settings sidebar.')))
    }]
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/welcome-guide/template.js

/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */

function WelcomeGuideTemplate() {
  const {
    toggle
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_preferences_namespaceObject.store);
  const isVisible = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const isTemplateActive = !!select(external_wp_preferences_namespaceObject.store).get('core/edit-site', 'welcomeGuideTemplate');
    const isEditorActive = !!select(external_wp_preferences_namespaceObject.store).get('core/edit-site', 'welcomeGuide');
    const {
      isPage
    } = select(store_store);
    const {
      getCurrentPostType
    } = select(external_wp_editor_namespaceObject.store);
    return isTemplateActive && !isEditorActive && isPage() && getCurrentPostType() === 'wp_template';
  }, []);
  if (!isVisible) {
    return null;
  }
  const heading = (0,external_wp_i18n_namespaceObject.__)('Editing a template');
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Guide, {
    className: "edit-site-welcome-guide guide-template",
    contentLabel: heading,
    finishButtonText: (0,external_wp_i18n_namespaceObject.__)('Continue'),
    onFinish: () => toggle('core/edit-site', 'welcomeGuideTemplate'),
    pages: [{
      image: (0,external_React_.createElement)("video", {
        className: "edit-site-welcome-guide__video",
        autoPlay: true,
        loop: true,
        muted: true,
        width: "312",
        height: "240"
      }, (0,external_React_.createElement)("source", {
        src: "https://s.w.org/images/block-editor/editing-your-template.mp4",
        type: "video/mp4"
      })),
      content: (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)("h1", {
        className: "edit-site-welcome-guide__heading"
      }, heading), (0,external_React_.createElement)("p", {
        className: "edit-site-welcome-guide__text"
      }, (0,external_wp_i18n_namespaceObject.__)('Note that the same template can be used by multiple pages, so any changes made here may affect other pages on the site. To switch back to editing the page content click the ‘Back’ button in the toolbar.')))
    }]
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/welcome-guide/index.js

/**
 * Internal dependencies
 */




function WelcomeGuide() {
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(WelcomeGuideEditor, null), (0,external_React_.createElement)(WelcomeGuideStyles, null), (0,external_React_.createElement)(WelcomeGuidePage, null), (0,external_React_.createElement)(WelcomeGuideTemplate, null));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/start-template-options/index.js

/**
 * WordPress dependencies
 */










/**
 * Internal dependencies
 */


function useFallbackTemplateContent(slug, isCustom = false) {
  return (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getEntityRecord,
      getDefaultTemplateId
    } = select(external_wp_coreData_namespaceObject.store);
    const templateId = getDefaultTemplateId({
      slug,
      is_custom: isCustom,
      ignore_empty: true
    });
    return templateId ? getEntityRecord('postType', constants_TEMPLATE_POST_TYPE, templateId)?.content?.raw : undefined;
  }, [slug, isCustom]);
}
function useStartPatterns(fallbackContent) {
  const {
    slug,
    patterns
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getEditedPostType,
      getEditedPostId
    } = select(store_store);
    const {
      getEntityRecord,
      getBlockPatterns
    } = select(external_wp_coreData_namespaceObject.store);
    const postId = getEditedPostId();
    const postType = getEditedPostType();
    const record = getEntityRecord('postType', postType, postId);
    return {
      slug: record.slug,
      patterns: getBlockPatterns()
    };
  }, []);
  const currentThemeStylesheet = (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_coreData_namespaceObject.store).getCurrentTheme().stylesheet);

  // Duplicated from packages/block-library/src/pattern/edit.js.
  function injectThemeAttributeInBlockTemplateContent(block) {
    if (block.innerBlocks.find(innerBlock => innerBlock.name === 'core/template-part')) {
      block.innerBlocks = block.innerBlocks.map(innerBlock => {
        if (innerBlock.name === 'core/template-part' && innerBlock.attributes.theme === undefined) {
          innerBlock.attributes.theme = currentThemeStylesheet;
        }
        return innerBlock;
      });
    }
    if (block.name === 'core/template-part' && block.attributes.theme === undefined) {
      block.attributes.theme = currentThemeStylesheet;
    }
    return block;
  }
  return (0,external_wp_element_namespaceObject.useMemo)(() => {
    // filter patterns that are supposed to be used in the current template being edited.
    return [{
      name: 'fallback',
      blocks: (0,external_wp_blocks_namespaceObject.parse)(fallbackContent),
      title: (0,external_wp_i18n_namespaceObject.__)('Fallback content')
    }, ...patterns.filter(pattern => {
      return Array.isArray(pattern.templateTypes) && pattern.templateTypes.some(templateType => slug.startsWith(templateType));
    }).map(pattern => {
      return {
        ...pattern,
        blocks: (0,external_wp_blocks_namespaceObject.parse)(pattern.content).map(block => injectThemeAttributeInBlockTemplateContent(block))
      };
    })];
  }, [fallbackContent, slug, patterns]);
}
function PatternSelection({
  fallbackContent,
  onChoosePattern,
  postType
}) {
  const [,, onChange] = (0,external_wp_coreData_namespaceObject.useEntityBlockEditor)('postType', postType);
  const blockPatterns = useStartPatterns(fallbackContent);
  const shownBlockPatterns = (0,external_wp_compose_namespaceObject.useAsyncList)(blockPatterns);
  return (0,external_React_.createElement)(external_wp_blockEditor_namespaceObject.__experimentalBlockPatternsList, {
    blockPatterns: blockPatterns,
    shownPatterns: shownBlockPatterns,
    onClickPattern: (pattern, blocks) => {
      onChange(blocks, {
        selection: undefined
      });
      onChoosePattern();
    }
  });
}
function StartModal({
  slug,
  isCustom,
  onClose,
  postType
}) {
  const fallbackContent = useFallbackTemplateContent(slug, isCustom);
  if (!fallbackContent) {
    return null;
  }
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Modal, {
    className: "edit-site-start-template-options__modal",
    title: (0,external_wp_i18n_namespaceObject.__)('Choose a pattern'),
    closeLabel: (0,external_wp_i18n_namespaceObject.__)('Cancel'),
    focusOnMount: "firstElement",
    onRequestClose: onClose,
    isFullScreen: true
  }, (0,external_React_.createElement)("div", {
    className: "edit-site-start-template-options__modal-content"
  }, (0,external_React_.createElement)(PatternSelection, {
    fallbackContent: fallbackContent,
    slug: slug,
    isCustom: isCustom,
    postType: postType,
    onChoosePattern: () => {
      onClose();
    }
  })), (0,external_React_.createElement)(external_wp_components_namespaceObject.Flex, {
    className: "edit-site-start-template-options__modal__actions",
    justify: "flex-end",
    expanded: false
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.FlexItem, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    variant: "tertiary",
    onClick: onClose
  }, (0,external_wp_i18n_namespaceObject.__)('Skip')))));
}
const START_TEMPLATE_MODAL_STATES = {
  INITIAL: 'INITIAL',
  CLOSED: 'CLOSED'
};
function StartTemplateOptions() {
  const [modalState, setModalState] = (0,external_wp_element_namespaceObject.useState)(START_TEMPLATE_MODAL_STATES.INITIAL);
  const {
    shouldOpenModal,
    slug,
    isCustom,
    postType
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getEditedPostType,
      getEditedPostId
    } = select(store_store);
    const _postType = getEditedPostType();
    const postId = getEditedPostId();
    const {
      getEditedEntityRecord,
      hasEditsForEntityRecord
    } = select(external_wp_coreData_namespaceObject.store);
    const templateRecord = getEditedEntityRecord('postType', _postType, postId);
    const hasEdits = hasEditsForEntityRecord('postType', _postType, postId);
    return {
      shouldOpenModal: !hasEdits && '' === templateRecord.content && constants_TEMPLATE_POST_TYPE === _postType && !select(external_wp_preferences_namespaceObject.store).get('core/edit-site', 'welcomeGuide'),
      slug: templateRecord.slug,
      isCustom: templateRecord.is_custom,
      postType: _postType
    };
  }, []);
  if (modalState === START_TEMPLATE_MODAL_STATES.INITIAL && !shouldOpenModal || modalState === START_TEMPLATE_MODAL_STATES.CLOSED) {
    return null;
  }
  return (0,external_React_.createElement)(StartModal, {
    slug: slug,
    isCustom: isCustom,
    postType: postType,
    onClose: () => setModalState(START_TEMPLATE_MODAL_STATES.CLOSED)
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/global-styles-renderer/index.js
/**
 * WordPress dependencies
 */




/**
 * Internal dependencies
 */


const {
  useGlobalStylesOutput: global_styles_renderer_useGlobalStylesOutput
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
function useGlobalStylesRenderer() {
  const [styles, settings] = global_styles_renderer_useGlobalStylesOutput();
  const {
    getSettings
  } = (0,external_wp_data_namespaceObject.useSelect)(store_store);
  const {
    updateSettings
  } = (0,external_wp_data_namespaceObject.useDispatch)(store_store);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    var _currentStoreSettings;
    if (!styles || !settings) {
      return;
    }
    const currentStoreSettings = getSettings();
    const nonGlobalStyles = Object.values((_currentStoreSettings = currentStoreSettings.styles) !== null && _currentStoreSettings !== void 0 ? _currentStoreSettings : []).filter(style => !style.isGlobalStyles);
    updateSettings({
      ...currentStoreSettings,
      styles: [...nonGlobalStyles, ...styles],
      __experimentalFeatures: settings
    });
  }, [styles, settings, updateSettings, getSettings]);
}
function GlobalStylesRenderer() {
  useGlobalStylesRenderer();
  return null;
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/routes/use-title.js
/**
 * WordPress dependencies
 */








/**
 * Internal dependencies
 */

const {
  useLocation: use_title_useLocation
} = unlock(external_wp_router_namespaceObject.privateApis);
function useTitle(title) {
  const location = use_title_useLocation();
  const siteTitle = (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_coreData_namespaceObject.store).getEntityRecord('root', 'site')?.title, []);
  const isInitialLocationRef = (0,external_wp_element_namespaceObject.useRef)(true);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    isInitialLocationRef.current = false;
  }, [location]);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    // Don't update or announce the title for initial page load.
    if (isInitialLocationRef.current) {
      return;
    }
    if (title && siteTitle) {
      // @see https://github.com/WordPress/wordpress-develop/blob/94849898192d271d533e09756007e176feb80697/src/wp-admin/admin-header.php#L67-L68
      const formattedTitle = (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: Admin document title. 1: Admin screen name, 2: Network or site name. */
      (0,external_wp_i18n_namespaceObject.__)('%1$s ‹ %2$s ‹ Editor — WordPress'), (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(title), (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(siteTitle));
      document.title = formattedTitle;

      // Announce title on route change for screen readers.
      (0,external_wp_a11y_namespaceObject.speak)(title, 'assertive');
    }
  }, [title, siteTitle, location]);
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/canvas-loader/index.js

/**
 * WordPress dependencies
 */





/**
 * Internal dependencies
 */


const {
  ProgressBar: canvas_loader_ProgressBar,
  Theme
} = unlock(external_wp_components_namespaceObject.privateApis);
const {
  useGlobalStyle: canvas_loader_useGlobalStyle
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
function CanvasLoader({
  id
}) {
  var _highlightedColors$0$;
  const [fallbackIndicatorColor] = canvas_loader_useGlobalStyle('color.text');
  const [backgroundColor] = canvas_loader_useGlobalStyle('color.background');
  const {
    highlightedColors
  } = useStylesPreviewColors();
  const indicatorColor = (_highlightedColors$0$ = highlightedColors[0]?.color) !== null && _highlightedColors$0$ !== void 0 ? _highlightedColors$0$ : fallbackIndicatorColor;
  const {
    elapsed,
    total
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    var _selectorsByStatus$re, _selectorsByStatus$fi;
    const selectorsByStatus = select(external_wp_coreData_namespaceObject.store).countSelectorsByStatus();
    const resolving = (_selectorsByStatus$re = selectorsByStatus.resolving) !== null && _selectorsByStatus$re !== void 0 ? _selectorsByStatus$re : 0;
    const finished = (_selectorsByStatus$fi = selectorsByStatus.finished) !== null && _selectorsByStatus$fi !== void 0 ? _selectorsByStatus$fi : 0;
    return {
      elapsed: finished,
      total: finished + resolving
    };
  }, []);
  return (0,external_React_.createElement)("div", {
    className: "edit-site-canvas-loader"
  }, (0,external_React_.createElement)(Theme, {
    accent: indicatorColor,
    background: backgroundColor
  }, (0,external_React_.createElement)(canvas_loader_ProgressBar, {
    id: id,
    max: total,
    value: elapsed
  })));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/block-editor/editor-canvas.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */







/**
 * Internal dependencies
 */



const {
  EditorCanvas: EditorCanvasRoot
} = unlock(external_wp_editor_namespaceObject.privateApis);
function EditorCanvas({
  enableResizing,
  settings,
  children,
  ...props
}) {
  const {
    hasBlocks,
    isFocusMode,
    templateType,
    canvasMode,
    isZoomOutMode
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getBlockCount,
      __unstableGetEditorMode
    } = select(external_wp_blockEditor_namespaceObject.store);
    const {
      getEditedPostType,
      getCanvasMode
    } = unlock(select(store_store));
    const _templateType = getEditedPostType();
    return {
      templateType: _templateType,
      isFocusMode: FOCUSABLE_ENTITIES.includes(_templateType),
      isZoomOutMode: __unstableGetEditorMode() === 'zoom-out',
      canvasMode: getCanvasMode(),
      hasBlocks: !!getBlockCount()
    };
  }, []);
  const {
    setCanvasMode
  } = unlock((0,external_wp_data_namespaceObject.useDispatch)(store_store));
  const [isFocused, setIsFocused] = (0,external_wp_element_namespaceObject.useState)(false);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    if (canvasMode === 'edit') {
      setIsFocused(false);
    }
  }, [canvasMode]);
  const viewModeProps = {
    'aria-label': (0,external_wp_i18n_namespaceObject.__)('Editor Canvas'),
    role: 'button',
    tabIndex: 0,
    onFocus: () => setIsFocused(true),
    onBlur: () => setIsFocused(false),
    onKeyDown: event => {
      const {
        keyCode
      } = event;
      if (keyCode === external_wp_keycodes_namespaceObject.ENTER || keyCode === external_wp_keycodes_namespaceObject.SPACE) {
        event.preventDefault();
        setCanvasMode('edit');
      }
    },
    onClick: () => setCanvasMode('edit'),
    readonly: true
  };
  const isTemplateTypeNavigation = templateType === NAVIGATION_POST_TYPE;
  const isNavigationFocusMode = isTemplateTypeNavigation && isFocusMode;
  // Hide the appender when:
  // - In navigation focus mode (should only allow the root Nav block).
  // - In view mode (i.e. not editing).
  const showBlockAppender = isNavigationFocusMode && hasBlocks || canvasMode === 'view' ? false : undefined;
  const styles = (0,external_wp_element_namespaceObject.useMemo)(() => [...settings.styles, {
    // Forming a "block formatting context" to prevent margin collapsing.
    // @see https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context

    css: `.is-root-container{display:flow-root;${
    // Some themes will have `min-height: 100vh` for the root container,
    // which isn't a requirement in auto resize mode.
    enableResizing ? 'min-height:0!important;' : ''}}body{position:relative; ${canvasMode === 'view' ? 'cursor: pointer; min-height: 100vh;' : ''}}}`
  }], [settings.styles, enableResizing, canvasMode]);
  return (0,external_React_.createElement)(EditorCanvasRoot, {
    className: classnames_default()('edit-site-editor-canvas__block-list', {
      'is-navigation-block': isTemplateTypeNavigation
    }),
    renderAppender: showBlockAppender,
    styles: styles,
    iframeProps: {
      expand: isZoomOutMode,
      scale: isZoomOutMode ? 0.45 : undefined,
      frameSize: isZoomOutMode ? 100 : undefined,
      className: classnames_default()('edit-site-visual-editor__editor-canvas', {
        'is-focused': isFocused && canvasMode === 'view'
      }),
      ...props,
      ...(canvasMode === 'view' ? viewModeProps : {})
    }
  }, children);
}
/* harmony default export */ const editor_canvas = (EditorCanvas);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/block-editor/use-navigate-to-entity-record.js
/**
 * WordPress dependencies
 */



/**
 * Internal dependencies
 */

const {
  useHistory: use_navigate_to_entity_record_useHistory
} = unlock(external_wp_router_namespaceObject.privateApis);
function useNavigateToEntityRecord() {
  const history = use_navigate_to_entity_record_useHistory();
  const onNavigateToEntityRecord = (0,external_wp_element_namespaceObject.useCallback)(params => {
    history.push({
      ...params,
      focusMode: true,
      canvas: 'edit'
    });
  }, [history]);
  return onNavigateToEntityRecord;
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/block-editor/use-site-editor-settings.js
/**
 * WordPress dependencies
 */







/**
 * Internal dependencies
 */




const {
  useBlockEditorSettings
} = unlock(external_wp_editor_namespaceObject.privateApis);
const {
  useLocation: use_site_editor_settings_useLocation,
  useHistory: use_site_editor_settings_useHistory
} = unlock(external_wp_router_namespaceObject.privateApis);
function useArchiveLabel(templateSlug) {
  const taxonomyMatches = templateSlug?.match(/^(category|tag|taxonomy-([^-]+))$|^(((category|tag)|taxonomy-([^-]+))-(.+))$/);
  let taxonomy;
  let term;
  let isAuthor = false;
  let authorSlug;
  if (taxonomyMatches) {
    // If is for a all taxonomies of a type
    if (taxonomyMatches[1]) {
      taxonomy = taxonomyMatches[2] ? taxonomyMatches[2] : taxonomyMatches[1];
    }
    // If is for a all taxonomies of a type
    else if (taxonomyMatches[3]) {
      taxonomy = taxonomyMatches[6] ? taxonomyMatches[6] : taxonomyMatches[4];
      term = taxonomyMatches[7];
    }
    taxonomy = taxonomy === 'tag' ? 'post_tag' : taxonomy;

    //getTaxonomy( 'category' );
    //wp.data.select('core').getEntityRecords( 'taxonomy', 'category', {slug: 'newcat'} );
  } else {
    const authorMatches = templateSlug?.match(/^(author)$|^author-(.+)$/);
    if (authorMatches) {
      isAuthor = true;
      if (authorMatches[2]) {
        authorSlug = authorMatches[2];
      }
    }
  }
  return (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getEntityRecords,
      getTaxonomy,
      getAuthors
    } = select(external_wp_coreData_namespaceObject.store);
    let archiveTypeLabel;
    let archiveNameLabel;
    if (taxonomy) {
      archiveTypeLabel = getTaxonomy(taxonomy)?.labels?.singular_name;
    }
    if (term) {
      const records = getEntityRecords('taxonomy', taxonomy, {
        slug: term,
        per_page: 1
      });
      if (records && records[0]) {
        archiveNameLabel = records[0].name;
      }
    }
    if (isAuthor) {
      archiveTypeLabel = 'Author';
      if (authorSlug) {
        const authorRecords = getAuthors({
          slug: authorSlug
        });
        if (authorRecords && authorRecords[0]) {
          archiveNameLabel = authorRecords[0].name;
        }
      }
    }
    return {
      archiveTypeLabel,
      archiveNameLabel
    };
  }, [authorSlug, isAuthor, taxonomy, term]);
}
function useNavigateToPreviousEntityRecord() {
  const location = use_site_editor_settings_useLocation();
  const previousLocation = (0,external_wp_compose_namespaceObject.usePrevious)(location);
  const history = use_site_editor_settings_useHistory();
  const goBack = (0,external_wp_element_namespaceObject.useMemo)(() => {
    const isFocusMode = location.params.focusMode || location.params.postId && FOCUSABLE_ENTITIES.includes(location.params.postType);
    const didComeFromEditorCanvas = previousLocation?.params.canvas === 'edit';
    const showBackButton = isFocusMode && didComeFromEditorCanvas;
    return showBackButton ? () => history.back() : undefined;
    // Disable reason: previousLocation changes when the component updates for any reason, not
    // just when location changes. Until this is fixed we can't add it to deps. See
    // https://github.com/WordPress/gutenberg/pull/58710#discussion_r1479219465.
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [location, history]);
  return goBack;
}
function useSpecificEditorSettings() {
  const onNavigateToEntityRecord = useNavigateToEntityRecord();
  const {
    templateSlug,
    canvasMode,
    settings,
    postWithTemplate
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getEditedPostType,
      getEditedPostId,
      getEditedPostContext,
      getCanvasMode,
      getSettings
    } = unlock(select(store_store));
    const {
      getEditedEntityRecord
    } = select(external_wp_coreData_namespaceObject.store);
    const usedPostType = getEditedPostType();
    const usedPostId = getEditedPostId();
    const _record = getEditedEntityRecord('postType', usedPostType, usedPostId);
    const _context = getEditedPostContext();
    return {
      templateSlug: _record.slug,
      canvasMode: getCanvasMode(),
      settings: getSettings(),
      postWithTemplate: _context?.postId
    };
  }, []);
  const archiveLabels = useArchiveLabel(templateSlug);
  const defaultRenderingMode = postWithTemplate ? 'template-locked' : 'post-only';
  const onNavigateToPreviousEntityRecord = useNavigateToPreviousEntityRecord();
  const defaultEditorSettings = (0,external_wp_element_namespaceObject.useMemo)(() => {
    return {
      ...settings,
      richEditingEnabled: true,
      supportsTemplateMode: true,
      focusMode: canvasMode !== 'view',
      defaultRenderingMode,
      onNavigateToEntityRecord,
      onNavigateToPreviousEntityRecord,
      // I wonder if they should be set in the post editor too
      __experimentalArchiveTitleTypeLabel: archiveLabels.archiveTypeLabel,
      __experimentalArchiveTitleNameLabel: archiveLabels.archiveNameLabel
    };
  }, [settings, canvasMode, defaultRenderingMode, onNavigateToEntityRecord, onNavigateToPreviousEntityRecord, archiveLabels.archiveTypeLabel, archiveLabels.archiveNameLabel]);
  return defaultEditorSettings;
}
function useSiteEditorSettings() {
  const defaultEditorSettings = useSpecificEditorSettings();
  const {
    postType,
    postId
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getEditedPostType,
      getEditedPostId
    } = unlock(select(store_store));
    const usedPostType = getEditedPostType();
    const usedPostId = getEditedPostId();
    return {
      postType: usedPostType,
      postId: usedPostId
    };
  }, []);
  return useBlockEditorSettings(defaultEditorSettings, postType, postId);
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/block-editor/site-editor-canvas.js

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */



/**
 * Internal dependencies
 */








const {
  useLocation: site_editor_canvas_useLocation
} = unlock(external_wp_router_namespaceObject.privateApis);
function SiteEditorCanvas() {
  const location = site_editor_canvas_useLocation();
  const {
    templateType,
    isFocusableEntity,
    isViewMode
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getEditedPostType,
      getCanvasMode
    } = unlock(select(store_store));
    const _templateType = getEditedPostType();
    return {
      templateType: _templateType,
      isFocusableEntity: FOCUSABLE_ENTITIES.includes(_templateType),
      isViewMode: getCanvasMode() === 'view'
    };
  }, []);
  const isFocusMode = location.params.focusMode || isFocusableEntity;
  const [resizeObserver, sizes] = (0,external_wp_compose_namespaceObject.useResizeObserver)();
  const settings = useSiteEditorSettings();
  const isMobileViewport = (0,external_wp_compose_namespaceObject.useViewportMatch)('small', '<');
  const enableResizing = isFocusMode && !isViewMode &&
  // Disable resizing in mobile viewport.
  !isMobileViewport &&
  // Disable resizing when editing a template in focus mode.
  templateType !== constants_TEMPLATE_POST_TYPE;
  const isTemplateTypeNavigation = templateType === NAVIGATION_POST_TYPE;
  const isNavigationFocusMode = isTemplateTypeNavigation && isFocusMode;
  const forceFullHeight = isNavigationFocusMode;
  return (0,external_React_.createElement)(editor_canvas_container.Slot, null, ([editorCanvasView]) => editorCanvasView ? (0,external_React_.createElement)("div", {
    className: "edit-site-visual-editor is-focus-mode"
  }, editorCanvasView) : (0,external_React_.createElement)("div", {
    className: classnames_default()('edit-site-visual-editor', {
      'is-focus-mode': isFocusMode || !!editorCanvasView,
      'is-view-mode': isViewMode
    })
  }, (0,external_React_.createElement)(resizable_editor, {
    enableResizing: enableResizing,
    height: sizes.height && !forceFullHeight ? sizes.height : '100%'
  }, (0,external_React_.createElement)(editor_canvas, {
    enableResizing: enableResizing,
    settings: settings
  }, resizeObserver))));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/template-part-converter/convert-to-regular.js

/**
 * WordPress dependencies
 */




function ConvertToRegularBlocks({
  clientId,
  onClose
}) {
  const {
    getBlocks
  } = (0,external_wp_data_namespaceObject.useSelect)(external_wp_blockEditor_namespaceObject.store);
  const {
    replaceBlocks
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_blockEditor_namespaceObject.store);
  const canRemove = (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_blockEditor_namespaceObject.store).canRemoveBlock(clientId), [clientId]);
  if (!canRemove) {
    return null;
  }
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
    onClick: () => {
      replaceBlocks(clientId, getBlocks(clientId));
      onClose();
    }
  }, (0,external_wp_i18n_namespaceObject.__)('Detach'));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/template-part-converter/convert-to-template-part.js

/**
 * WordPress dependencies
 */









/**
 * Internal dependencies
 */


function ConvertToTemplatePart({
  clientIds,
  blocks
}) {
  const [isModalOpen, setIsModalOpen] = (0,external_wp_element_namespaceObject.useState)(false);
  const {
    replaceBlocks
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_blockEditor_namespaceObject.store);
  const {
    createSuccessNotice
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_notices_namespaceObject.store);
  const {
    canCreate
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      supportsTemplatePartsMode
    } = select(store_store).getSettings();
    return {
      canCreate: !supportsTemplatePartsMode
    };
  }, []);
  if (!canCreate) {
    return null;
  }
  const onConvert = async templatePart => {
    replaceBlocks(clientIds, (0,external_wp_blocks_namespaceObject.createBlock)('core/template-part', {
      slug: templatePart.slug,
      theme: templatePart.theme
    }));
    createSuccessNotice((0,external_wp_i18n_namespaceObject.__)('Template part created.'), {
      type: 'snackbar'
    });

    // The modal and this component will be unmounted because of `replaceBlocks` above,
    // so no need to call `closeModal` or `onClose`.
  };
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
    icon: symbol_filled,
    onClick: () => {
      setIsModalOpen(true);
    },
    "aria-expanded": isModalOpen,
    "aria-haspopup": "dialog"
  }, (0,external_wp_i18n_namespaceObject.__)('Create template part')), isModalOpen && (0,external_React_.createElement)(CreateTemplatePartModal, {
    closeModal: () => {
      setIsModalOpen(false);
    },
    blocks: blocks,
    onCreate: onConvert
  }));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/template-part-converter/index.js

/**
 * WordPress dependencies
 */



/**
 * Internal dependencies
 */


function TemplatePartConverter() {
  return (0,external_React_.createElement)(external_wp_blockEditor_namespaceObject.BlockSettingsMenuControls, null, ({
    selectedClientIds,
    onClose
  }) => (0,external_React_.createElement)(TemplatePartConverterMenuItem, {
    clientIds: selectedClientIds,
    onClose: onClose
  }));
}
function TemplatePartConverterMenuItem({
  clientIds,
  onClose
}) {
  const blocks = (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_blockEditor_namespaceObject.store).getBlocksByClientId(clientIds), [clientIds]);

  // Allow converting a single template part to standard blocks.
  if (blocks.length === 1 && blocks[0]?.name === 'core/template-part') {
    return (0,external_React_.createElement)(ConvertToRegularBlocks, {
      clientId: clientIds[0],
      onClose: onClose
    });
  }
  return (0,external_React_.createElement)(ConvertToTemplatePart, {
    clientIds: clientIds,
    blocks: blocks
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/editor/index.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */










/**
 * Internal dependencies
 */
















const {
  BlockRemovalWarningModal
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
const {
  ExperimentalEditorProvider: EditorProvider,
  InserterSidebar,
  ListViewSidebar
} = unlock(external_wp_editor_namespaceObject.privateApis);
const interfaceLabels = {
  /* translators: accessibility text for the editor content landmark region. */
  body: (0,external_wp_i18n_namespaceObject.__)('Editor content'),
  /* translators: accessibility text for the editor settings landmark region. */
  sidebar: (0,external_wp_i18n_namespaceObject.__)('Editor settings'),
  /* translators: accessibility text for the editor publish landmark region. */
  actions: (0,external_wp_i18n_namespaceObject.__)('Editor publish'),
  /* translators: accessibility text for the editor footer landmark region. */
  footer: (0,external_wp_i18n_namespaceObject.__)('Editor footer')
};

// Prevent accidental removal of certain blocks, asking the user for
// confirmation.
const blockRemovalRules = {
  'core/query': (0,external_wp_i18n_namespaceObject.__)('Query Loop displays a list of posts or pages.'),
  'core/post-content': (0,external_wp_i18n_namespaceObject.__)('Post Content displays the content of a post or page.'),
  'core/post-template': (0,external_wp_i18n_namespaceObject.__)('Post Template displays each post or page in a Query Loop.'),
  'bindings/core/pattern-overrides': (0,external_wp_i18n_namespaceObject.__)('Blocks from synced patterns that can have overriden content.')
};
function Editor({
  isLoading
}) {
  const {
    record: editedPost,
    getTitle,
    isLoaded: hasLoadedPost
  } = useEditedEntityRecord();
  const {
    type: editedPostType
  } = editedPost;
  const isLargeViewport = (0,external_wp_compose_namespaceObject.useViewportMatch)('medium');
  const {
    context,
    contextPost,
    editorMode,
    canvasMode,
    blockEditorMode,
    isRightSidebarOpen,
    isInserterOpen,
    isListViewOpen,
    isDistractionFree,
    showIconLabels,
    showBlockBreadcrumbs,
    postTypeLabel
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      get
    } = select(external_wp_preferences_namespaceObject.store);
    const {
      getEditedPostContext,
      getEditorMode,
      getCanvasMode
    } = unlock(select(store_store));
    const {
      __unstableGetEditorMode
    } = select(external_wp_blockEditor_namespaceObject.store);
    const {
      getActiveComplementaryArea
    } = select(store);
    const {
      getEntityRecord
    } = select(external_wp_coreData_namespaceObject.store);
    const {
      isInserterOpened,
      isListViewOpened,
      getPostTypeLabel
    } = select(external_wp_editor_namespaceObject.store);
    const _context = getEditedPostContext();

    // The currently selected entity to display.
    // Typically template or template part in the site editor.
    return {
      context: _context,
      contextPost: _context?.postId ? getEntityRecord('postType', _context.postType, _context.postId) : undefined,
      editorMode: getEditorMode(),
      canvasMode: getCanvasMode(),
      blockEditorMode: __unstableGetEditorMode(),
      isInserterOpen: isInserterOpened(),
      isListViewOpen: isListViewOpened(),
      isRightSidebarOpen: getActiveComplementaryArea(store_store.name),
      isDistractionFree: get('core', 'distractionFree'),
      showBlockBreadcrumbs: get('core', 'showBlockBreadcrumbs'),
      showIconLabels: get('core', 'showIconLabels'),
      postTypeLabel: getPostTypeLabel()
    };
  }, []);
  const isViewMode = canvasMode === 'view';
  const isEditMode = canvasMode === 'edit';
  const showVisualEditor = isViewMode || editorMode === 'visual';
  const shouldShowBlockBreadcrumbs = !isDistractionFree && showBlockBreadcrumbs && isEditMode && showVisualEditor && blockEditorMode !== 'zoom-out';
  const shouldShowInserter = isEditMode && showVisualEditor && isInserterOpen;
  const shouldShowListView = isEditMode && showVisualEditor && isListViewOpen;
  const secondarySidebarLabel = isListViewOpen ? (0,external_wp_i18n_namespaceObject.__)('List View') : (0,external_wp_i18n_namespaceObject.__)('Block Library');
  const postWithTemplate = !!context?.postId;
  let title;
  if (hasLoadedPost) {
    var _POST_TYPE_LABELS$edi;
    title = (0,external_wp_i18n_namespaceObject.sprintf)(
    // translators: A breadcrumb trail for the Admin document title. %1$s: title of template being edited, %2$s: type of template (Template or Template Part).
    (0,external_wp_i18n_namespaceObject.__)('%1$s ‹ %2$s'), getTitle(), (_POST_TYPE_LABELS$edi = POST_TYPE_LABELS[editedPostType]) !== null && _POST_TYPE_LABELS$edi !== void 0 ? _POST_TYPE_LABELS$edi : POST_TYPE_LABELS[constants_TEMPLATE_POST_TYPE]);
  }

  // Only announce the title once the editor is ready to prevent "Replace"
  // action in <URLQueryController> from double-announcing.
  useTitle(hasLoadedPost && title);
  const loadingProgressId = (0,external_wp_compose_namespaceObject.useInstanceId)(CanvasLoader, 'edit-site-editor__loading-progress');
  const settings = useSpecificEditorSettings();
  const isReady = !isLoading && (postWithTemplate && !!contextPost && !!editedPost || !postWithTemplate && !!editedPost);
  return (0,external_React_.createElement)(external_React_.Fragment, null, !isReady ? (0,external_React_.createElement)(CanvasLoader, {
    id: loadingProgressId
  }) : null, isEditMode && (0,external_React_.createElement)(WelcomeGuide, null), hasLoadedPost && !editedPost && (0,external_React_.createElement)(external_wp_components_namespaceObject.Notice, {
    status: "warning",
    isDismissible: false
  }, (0,external_wp_i18n_namespaceObject.__)("You attempted to edit an item that doesn't exist. Perhaps it was deleted?")), isReady && (0,external_React_.createElement)(EditorProvider, {
    post: postWithTemplate ? contextPost : editedPost,
    __unstableTemplate: postWithTemplate ? editedPost : undefined,
    settings: settings,
    useSubRegistry: false
  }, (0,external_React_.createElement)(SidebarComplementaryAreaFills, null), isEditMode && (0,external_React_.createElement)(StartTemplateOptions, null), (0,external_React_.createElement)(interface_skeleton, {
    isDistractionFree: isDistractionFree,
    enableRegionNavigation: false,
    className: classnames_default()('edit-site-editor__interface-skeleton', {
      'show-icon-labels': showIconLabels
    }),
    notices: (0,external_React_.createElement)(external_wp_editor_namespaceObject.EditorSnackbars, null),
    content: (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(GlobalStylesRenderer, null), isEditMode && (0,external_React_.createElement)(external_wp_editor_namespaceObject.EditorNotices, null), showVisualEditor && (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(TemplatePartConverter, null), (0,external_React_.createElement)(SidebarInspectorFill, null, (0,external_React_.createElement)(external_wp_blockEditor_namespaceObject.BlockInspector, null)), !isLargeViewport && (0,external_React_.createElement)(external_wp_blockEditor_namespaceObject.BlockToolbar, {
      hideDragHandle: true
    }), (0,external_React_.createElement)(SiteEditorCanvas, null), (0,external_React_.createElement)(BlockRemovalWarningModal, {
      rules: blockRemovalRules
    }), (0,external_React_.createElement)(PatternModal, null)), editorMode === 'text' && isEditMode && (0,external_React_.createElement)(CodeEditor, null), isEditMode && (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(edit_mode, null), (0,external_React_.createElement)(external_wp_editor_namespaceObject.EditorKeyboardShortcutsRegister, null), (0,external_React_.createElement)(external_wp_editor_namespaceObject.EditorKeyboardShortcuts, null))),
    secondarySidebar: isEditMode && (shouldShowInserter && (0,external_React_.createElement)(InserterSidebar, null) || shouldShowListView && (0,external_React_.createElement)(ListViewSidebar, null)),
    sidebar: !isDistractionFree && isEditMode && isRightSidebarOpen && (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(complementary_area.Slot, {
      scope: "core/edit-site"
    })),
    footer: shouldShowBlockBreadcrumbs && (0,external_React_.createElement)(external_wp_blockEditor_namespaceObject.BlockBreadcrumb, {
      rootLabelText: postTypeLabel
    }),
    labels: {
      ...interfaceLabels,
      secondarySidebar: secondarySidebarLabel
    }
  })));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/dataviews/build-module/pagination.js

/**
 * WordPress dependencies
 */




const pagination_Pagination = (0,external_wp_element_namespaceObject.memo)(function Pagination({
  view,
  onChangeView,
  paginationInfo: {
    totalItems = 0,
    totalPages
  }
}) {
  if (!totalItems || !totalPages) {
    return null;
  }
  return !!totalItems && totalPages !== 1 && (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    expanded: false,
    spacing: 6,
    justify: "end",
    className: "dataviews-pagination"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    justify: "flex-start",
    expanded: false,
    spacing: 2,
    className: "dataviews-pagination__page-selection"
  }, (0,external_wp_element_namespaceObject.createInterpolateElement)((0,external_wp_i18n_namespaceObject.sprintf)(
  // translators: %s: Total number of pages.
  (0,external_wp_i18n_namespaceObject._x)('Page <CurrentPageControl /> of %s', 'paging'), totalPages), {
    CurrentPageControl: (0,external_React_.createElement)(external_wp_components_namespaceObject.SelectControl, {
      "aria-label": (0,external_wp_i18n_namespaceObject.__)('Current page'),
      value: view.page,
      options: Array.from(Array(totalPages)).map((_, i) => {
        const page = i + 1;
        return {
          value: page,
          label: page
        };
      }),
      onChange: newValue => {
        onChangeView({
          ...view,
          page: +newValue
        });
      },
      size: 'compact',
      __nextHasNoMarginBottom: true
    })
  })), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    expanded: false,
    spacing: 1
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    onClick: () => onChangeView({
      ...view,
      page: view.page - 1
    }),
    disabled: view.page === 1,
    __experimentalIsFocusable: true,
    label: (0,external_wp_i18n_namespaceObject.__)('Previous page'),
    icon: chevron_left,
    showTooltip: true,
    size: "compact",
    tooltipPosition: "top"
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    onClick: () => onChangeView({
      ...view,
      page: view.page + 1
    }),
    disabled: view.page >= totalPages,
    __experimentalIsFocusable: true,
    label: (0,external_wp_i18n_namespaceObject.__)('Next page'),
    icon: chevron_right,
    showTooltip: true,
    size: "compact",
    tooltipPosition: "top"
  })));
});
/* harmony default export */ const pagination = (pagination_Pagination);

;// CONCATENATED MODULE: ./node_modules/@wordpress/dataviews/build-module/view-actions.js

/**
 * WordPress dependencies
 */





/**
 * Internal dependencies
 */


const {
  DropdownMenuV2: view_actions_DropdownMenu,
  DropdownMenuGroupV2: view_actions_DropdownMenuGroup,
  DropdownMenuItemV2: view_actions_DropdownMenuItem,
  DropdownMenuRadioItemV2: view_actions_DropdownMenuRadioItem,
  DropdownMenuCheckboxItemV2: DropdownMenuCheckboxItem,
  DropdownMenuItemLabelV2: view_actions_DropdownMenuItemLabel
} = lock_unlock_unlock(external_wp_components_namespaceObject.privateApis);
function ViewTypeMenu({
  view,
  onChangeView,
  supportedLayouts
}) {
  let _availableViews = VIEW_LAYOUTS;
  if (supportedLayouts) {
    _availableViews = _availableViews.filter(_view => supportedLayouts.includes(_view.type));
  }
  if (_availableViews.length === 1) {
    return null;
  }
  const activeView = _availableViews.find(v => view.type === v.type);
  return (0,external_React_.createElement)(view_actions_DropdownMenu, {
    trigger: (0,external_React_.createElement)(view_actions_DropdownMenuItem, {
      suffix: (0,external_React_.createElement)("span", {
        "aria-hidden": "true"
      }, activeView.label)
    }, (0,external_React_.createElement)(view_actions_DropdownMenuItemLabel, null, (0,external_wp_i18n_namespaceObject.__)('Layout')))
  }, _availableViews.map(availableView => {
    return (0,external_React_.createElement)(view_actions_DropdownMenuRadioItem, {
      key: availableView.type,
      value: availableView.type,
      name: "view-actions-available-view",
      checked: availableView.type === view.type,
      hideOnClick: true,
      onChange: e => {
        onChangeView({
          ...view,
          type: e.target.value
        });
      }
    }, (0,external_React_.createElement)(view_actions_DropdownMenuItemLabel, null, availableView.label));
  }));
}
const PAGE_SIZE_VALUES = [10, 20, 50, 100];
function PageSizeMenu({
  view,
  onChangeView
}) {
  return (0,external_React_.createElement)(view_actions_DropdownMenu, {
    trigger: (0,external_React_.createElement)(view_actions_DropdownMenuItem, {
      suffix: (0,external_React_.createElement)("span", {
        "aria-hidden": "true"
      }, view.perPage)
    }, (0,external_React_.createElement)(view_actions_DropdownMenuItemLabel, null, (0,external_wp_i18n_namespaceObject.__)('Items per page')))
  }, PAGE_SIZE_VALUES.map(size => {
    return (0,external_React_.createElement)(view_actions_DropdownMenuRadioItem, {
      key: size,
      value: size,
      name: "view-actions-page-size",
      checked: view.perPage === size,
      onChange: () => {
        onChangeView({
          ...view,
          // `e.target.value` holds the same value as `size` but as a string,
          // so we use `size` directly to avoid parsing to int.
          perPage: size,
          page: 1
        });
      }
    }, (0,external_React_.createElement)(view_actions_DropdownMenuItemLabel, null, size));
  }));
}
function FieldsVisibilityMenu({
  view,
  onChangeView,
  fields
}) {
  const hidableFields = fields.filter(field => field.enableHiding !== false && field.id !== view.layout.mediaField);
  if (!hidableFields?.length) {
    return null;
  }
  return (0,external_React_.createElement)(view_actions_DropdownMenu, {
    trigger: (0,external_React_.createElement)(view_actions_DropdownMenuItem, null, (0,external_React_.createElement)(view_actions_DropdownMenuItemLabel, null, (0,external_wp_i18n_namespaceObject.__)('Fields')))
  }, hidableFields?.map(field => {
    return (0,external_React_.createElement)(DropdownMenuCheckboxItem, {
      key: field.id,
      value: field.id,
      checked: !view.hiddenFields?.includes(field.id),
      onChange: () => {
        onChangeView({
          ...view,
          hiddenFields: view.hiddenFields?.includes(field.id) ? view.hiddenFields.filter(id => id !== field.id) : [...(view.hiddenFields || []), field.id]
        });
      }
    }, (0,external_React_.createElement)(view_actions_DropdownMenuItemLabel, null, field.header));
  }));
}
function SortMenu({
  fields,
  view,
  onChangeView
}) {
  const sortableFields = fields.filter(field => field.enableSorting !== false);
  if (!sortableFields?.length) {
    return null;
  }
  const currentSortedField = fields.find(field => field.id === view.sort?.field);
  return (0,external_React_.createElement)(view_actions_DropdownMenu, {
    trigger: (0,external_React_.createElement)(view_actions_DropdownMenuItem, {
      suffix: (0,external_React_.createElement)("span", {
        "aria-hidden": "true"
      }, currentSortedField?.header)
    }, (0,external_React_.createElement)(view_actions_DropdownMenuItemLabel, null, (0,external_wp_i18n_namespaceObject.__)('Sort by')))
  }, sortableFields?.map(field => {
    const sortedDirection = view.sort?.direction;
    return (0,external_React_.createElement)(view_actions_DropdownMenu, {
      key: field.id,
      trigger: (0,external_React_.createElement)(view_actions_DropdownMenuItem, null, (0,external_React_.createElement)(view_actions_DropdownMenuItemLabel, null, field.header)),
      style: {
        minWidth: '220px'
      }
    }, Object.entries(SORTING_DIRECTIONS).map(([direction, info]) => {
      const isChecked = currentSortedField !== undefined && sortedDirection === direction && field.id === currentSortedField.id;
      const value = `${field.id}-${direction}`;
      return (0,external_React_.createElement)(view_actions_DropdownMenuRadioItem, {
        key: value
        // All sorting radio items share the same name, so that
        // selecting a sorting option automatically deselects the
        // previously selected one, even if it is displayed in
        // another submenu. The field and direction are passed via
        // the `value` prop.
        ,
        name: "view-actions-sorting",
        value: value,
        checked: isChecked,
        onChange: () => {
          onChangeView({
            ...view,
            sort: {
              field: field.id,
              direction
            }
          });
        }
      }, (0,external_React_.createElement)(view_actions_DropdownMenuItemLabel, null, info.label));
    }));
  }));
}
const ViewActions = (0,external_wp_element_namespaceObject.memo)(function ViewActions({
  fields,
  view,
  onChangeView,
  supportedLayouts
}) {
  return (0,external_React_.createElement)(view_actions_DropdownMenu, {
    trigger: (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
      size: "compact",
      icon: library_settings,
      label: (0,external_wp_i18n_namespaceObject.__)('View options')
    })
  }, (0,external_React_.createElement)(view_actions_DropdownMenuGroup, null, (0,external_React_.createElement)(ViewTypeMenu, {
    view: view,
    onChangeView: onChangeView,
    supportedLayouts: supportedLayouts
  }), (0,external_React_.createElement)(SortMenu, {
    fields: fields,
    view: view,
    onChangeView: onChangeView
  }), (0,external_React_.createElement)(FieldsVisibilityMenu, {
    fields: fields,
    view: view,
    onChangeView: onChangeView
  }), (0,external_React_.createElement)(PageSizeMenu, {
    view: view,
    onChangeView: onChangeView
  })));
});
/* harmony default export */ const view_actions = (ViewActions);

;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/__chunks/4R3V3JGP.js
"use client";
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var _4R3V3JGP_spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var _4R3V3JGP_spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};



;// CONCATENATED MODULE: ./node_modules/@ariakit/core/esm/__chunks/4R3V3JGP.js
"use client";
var _4R3V3JGP_defProp = Object.defineProperty;
var _4R3V3JGP_defProps = Object.defineProperties;
var _4R3V3JGP_getOwnPropDescs = Object.getOwnPropertyDescriptors;
var _4R3V3JGP_getOwnPropSymbols = Object.getOwnPropertySymbols;
var _4R3V3JGP_hasOwnProp = Object.prototype.hasOwnProperty;
var _4R3V3JGP_propIsEnum = Object.prototype.propertyIsEnumerable;
var _4R3V3JGP_defNormalProp = (obj, key, value) => key in obj ? _4R3V3JGP_defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var _chunks_4R3V3JGP_spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (_4R3V3JGP_hasOwnProp.call(b, prop))
      _4R3V3JGP_defNormalProp(a, prop, b[prop]);
  if (_4R3V3JGP_getOwnPropSymbols)
    for (var prop of _4R3V3JGP_getOwnPropSymbols(b)) {
      if (_4R3V3JGP_propIsEnum.call(b, prop))
        _4R3V3JGP_defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var _chunks_4R3V3JGP_spreadProps = (a, b) => _4R3V3JGP_defProps(a, _4R3V3JGP_getOwnPropDescs(b));
var _4R3V3JGP_objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (_4R3V3JGP_hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && _4R3V3JGP_getOwnPropSymbols)
    for (var prop of _4R3V3JGP_getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && _4R3V3JGP_propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};



;// CONCATENATED MODULE: ./node_modules/@ariakit/core/esm/__chunks/Y3OOHFCN.js
"use client";


// src/utils/misc.ts
function Y3OOHFCN_noop(..._) {
}
function shallowEqual(a, b) {
  if (a === b)
    return true;
  if (!a)
    return false;
  if (!b)
    return false;
  if (typeof a !== "object")
    return false;
  if (typeof b !== "object")
    return false;
  const aKeys = Object.keys(a);
  const bKeys = Object.keys(b);
  const { length } = aKeys;
  if (bKeys.length !== length)
    return false;
  for (const key of aKeys) {
    if (a[key] !== b[key]) {
      return false;
    }
  }
  return true;
}
function Y3OOHFCN_applyState(argument, currentValue) {
  if (isUpdater(argument)) {
    const value = isLazyValue(currentValue) ? currentValue() : currentValue;
    return argument(value);
  }
  return argument;
}
function isUpdater(argument) {
  return typeof argument === "function";
}
function isLazyValue(value) {
  return typeof value === "function";
}
function Y3OOHFCN_isObject(arg) {
  return typeof arg === "object" && arg != null;
}
function isEmpty(arg) {
  if (Array.isArray(arg))
    return !arg.length;
  if (Y3OOHFCN_isObject(arg))
    return !Object.keys(arg).length;
  if (arg == null)
    return true;
  if (arg === "")
    return true;
  return false;
}
function isInteger(arg) {
  if (typeof arg === "number") {
    return Math.floor(arg) === arg;
  }
  return String(Math.floor(Number(arg))) === arg;
}
function Y3OOHFCN_hasOwnProperty(object, prop) {
  if (typeof Object.hasOwn === "function") {
    return Object.hasOwn(object, prop);
  }
  return Object.prototype.hasOwnProperty.call(object, prop);
}
function chain(...fns) {
  return (...args) => {
    for (const fn of fns) {
      if (typeof fn === "function") {
        fn(...args);
      }
    }
  };
}
function cx(...args) {
  return args.filter(Boolean).join(" ") || void 0;
}
function normalizeString(str) {
  return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
}
function omit(object, keys) {
  const result = _chunks_4R3V3JGP_spreadValues({}, object);
  for (const key of keys) {
    if (Y3OOHFCN_hasOwnProperty(result, key)) {
      delete result[key];
    }
  }
  return result;
}
function pick(object, paths) {
  const result = {};
  for (const key of paths) {
    if (Y3OOHFCN_hasOwnProperty(object, key)) {
      result[key] = object[key];
    }
  }
  return result;
}
function identity(value) {
  return value;
}
function beforePaint(cb = Y3OOHFCN_noop) {
  const raf = requestAnimationFrame(cb);
  return () => cancelAnimationFrame(raf);
}
function afterPaint(cb = Y3OOHFCN_noop) {
  let raf = requestAnimationFrame(() => {
    raf = requestAnimationFrame(cb);
  });
  return () => cancelAnimationFrame(raf);
}
function invariant(condition, message) {
  if (condition)
    return;
  if (typeof message !== "string")
    throw new Error("Invariant failed");
  throw new Error(message);
}
function getKeys(obj) {
  return Object.keys(obj);
}
function isFalsyBooleanCallback(booleanOrCallback, ...args) {
  const result = typeof booleanOrCallback === "function" ? booleanOrCallback(...args) : booleanOrCallback;
  if (result == null)
    return false;
  return !result;
}
function disabledFromProps(props) {
  return props.disabled || props["aria-disabled"] === true || props["aria-disabled"] === "true";
}
function defaultValue(...values) {
  for (const value of values) {
    if (value !== void 0)
      return value;
  }
  return void 0;
}



;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/__chunks/XM66DUTO.js
"use client";


// src/utils/misc.ts


function setRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
}
function isValidElementWithRef(element) {
  if (!element)
    return false;
  if (!(0,external_React_.isValidElement)(element))
    return false;
  if (!("ref" in element))
    return false;
  return true;
}
function getRefProperty(element) {
  if (!isValidElementWithRef(element))
    return null;
  return element.ref;
}
function mergeProps(base, overrides) {
  const props = _4R3V3JGP_spreadValues({}, base);
  for (const key in overrides) {
    if (!Y3OOHFCN_hasOwnProperty(overrides, key))
      continue;
    if (key === "className") {
      const prop = "className";
      props[prop] = base[prop] ? `${base[prop]} ${overrides[prop]}` : overrides[prop];
      continue;
    }
    if (key === "style") {
      const prop = "style";
      props[prop] = base[prop] ? _4R3V3JGP_spreadValues(_4R3V3JGP_spreadValues({}, base[prop]), overrides[prop]) : overrides[prop];
      continue;
    }
    const overrideValue = overrides[key];
    if (typeof overrideValue === "function" && key.startsWith("on")) {
      const baseValue = base[key];
      if (typeof baseValue === "function") {
        props[key] = (...args) => {
          overrideValue(...args);
          baseValue(...args);
        };
        continue;
      }
    }
    props[key] = overrideValue;
  }
  return props;
}



;// CONCATENATED MODULE: ./node_modules/@ariakit/core/esm/__chunks/DLOEKDPY.js
"use client";

// src/utils/dom.ts
var DLOEKDPY_canUseDOM = checkIsBrowser();
function checkIsBrowser() {
  var _a;
  return typeof window !== "undefined" && !!((_a = window.document) == null ? void 0 : _a.createElement);
}
function DLOEKDPY_getDocument(node) {
  return node ? node.ownerDocument || node : document;
}
function getWindow(node) {
  return DLOEKDPY_getDocument(node).defaultView || window;
}
function DLOEKDPY_getActiveElement(node, activeDescendant = false) {
  const { activeElement } = DLOEKDPY_getDocument(node);
  if (!(activeElement == null ? void 0 : activeElement.nodeName)) {
    return null;
  }
  if (DLOEKDPY_isFrame(activeElement) && activeElement.contentDocument) {
    return DLOEKDPY_getActiveElement(
      activeElement.contentDocument.body,
      activeDescendant
    );
  }
  if (activeDescendant) {
    const id = activeElement.getAttribute("aria-activedescendant");
    if (id) {
      const element = DLOEKDPY_getDocument(activeElement).getElementById(id);
      if (element) {
        return element;
      }
    }
  }
  return activeElement;
}
function contains(parent, child) {
  return parent === child || parent.contains(child);
}
function DLOEKDPY_isFrame(element) {
  return element.tagName === "IFRAME";
}
function isButton(element) {
  const tagName = element.tagName.toLowerCase();
  if (tagName === "button")
    return true;
  if (tagName === "input" && element.type) {
    return buttonInputTypes.indexOf(element.type) !== -1;
  }
  return false;
}
var buttonInputTypes = [
  "button",
  "color",
  "file",
  "image",
  "reset",
  "submit"
];
function matches(element, selectors) {
  if ("matches" in element) {
    return element.matches(selectors);
  }
  if ("msMatchesSelector" in element) {
    return element.msMatchesSelector(selectors);
  }
  return element.webkitMatchesSelector(selectors);
}
function isVisible(element) {
  const htmlElement = element;
  return htmlElement.offsetWidth > 0 || htmlElement.offsetHeight > 0 || element.getClientRects().length > 0;
}
function DLOEKDPY_closest(element, selectors) {
  if ("closest" in element)
    return element.closest(selectors);
  do {
    if (matches(element, selectors))
      return element;
    element = element.parentElement || element.parentNode;
  } while (element !== null && element.nodeType === 1);
  return null;
}
function DLOEKDPY_isTextField(element) {
  try {
    const isTextInput = element instanceof HTMLInputElement && element.selectionStart !== null;
    const isTextArea = element.tagName === "TEXTAREA";
    return isTextInput || isTextArea || false;
  } catch (error) {
    return false;
  }
}
function getPopupRole(element, fallback) {
  const allowedPopupRoles = ["dialog", "menu", "listbox", "tree", "grid"];
  const role = element == null ? void 0 : element.getAttribute("role");
  if (role && allowedPopupRoles.indexOf(role) !== -1) {
    return role;
  }
  return fallback;
}
function getPopupItemRole(element, fallback) {
  var _a;
  const itemRoleByPopupRole = {
    menu: "menuitem",
    listbox: "option",
    tree: "treeitem",
    grid: "gridcell"
  };
  const popupRole = getPopupRole(element);
  if (!popupRole)
    return fallback;
  const key = popupRole;
  return (_a = itemRoleByPopupRole[key]) != null ? _a : fallback;
}
function getTextboxSelection(element) {
  let start = 0;
  let end = 0;
  if (DLOEKDPY_isTextField(element)) {
    start = element.selectionStart || 0;
    end = element.selectionEnd || 0;
  } else if (element.isContentEditable) {
    const selection = DLOEKDPY_getDocument(element).getSelection();
    if ((selection == null ? void 0 : selection.rangeCount) && selection.anchorNode && contains(element, selection.anchorNode) && selection.focusNode && contains(element, selection.focusNode)) {
      const range = selection.getRangeAt(0);
      const nextRange = range.cloneRange();
      nextRange.selectNodeContents(element);
      nextRange.setEnd(range.startContainer, range.startOffset);
      start = nextRange.toString().length;
      nextRange.setEnd(range.endContainer, range.endOffset);
      end = nextRange.toString().length;
    }
  }
  return { start, end };
}
function scrollIntoViewIfNeeded(element, arg) {
  if (isPartiallyHidden(element) && "scrollIntoView" in element) {
    element.scrollIntoView(arg);
  }
}
function getScrollingElement(element) {
  if (!element)
    return null;
  if (element.clientHeight && element.scrollHeight > element.clientHeight) {
    const { overflowY } = getComputedStyle(element);
    const isScrollable = overflowY !== "visible" && overflowY !== "hidden";
    if (isScrollable)
      return element;
  } else if (element.clientWidth && element.scrollWidth > element.clientWidth) {
    const { overflowX } = getComputedStyle(element);
    const isScrollable = overflowX !== "visible" && overflowX !== "hidden";
    if (isScrollable)
      return element;
  }
  return getScrollingElement(element.parentElement) || document.scrollingElement || document.body;
}
function isPartiallyHidden(element) {
  const elementRect = element.getBoundingClientRect();
  const scroller = getScrollingElement(element);
  if (!scroller)
    return false;
  const scrollerRect = scroller.getBoundingClientRect();
  const isHTML = scroller.tagName === "HTML";
  const scrollerTop = isHTML ? scrollerRect.top + scroller.scrollTop : scrollerRect.top;
  const scrollerBottom = isHTML ? scroller.clientHeight : scrollerRect.bottom;
  const scrollerLeft = isHTML ? scrollerRect.left + scroller.scrollLeft : scrollerRect.left;
  const scrollerRight = isHTML ? scroller.clientWidth : scrollerRect.right;
  const top = elementRect.top < scrollerTop;
  const left = elementRect.left < scrollerLeft;
  const bottom = elementRect.bottom > scrollerBottom;
  const right = elementRect.right > scrollerRight;
  return top || left || bottom || right;
}
function setSelectionRange(element, ...args) {
  if (/text|search|password|tel|url/i.test(element.type)) {
    element.setSelectionRange(...args);
  }
}



;// CONCATENATED MODULE: ./node_modules/@ariakit/core/esm/__chunks/MHPO2BXA.js
"use client";


// src/utils/platform.ts
function isTouchDevice() {
  return DLOEKDPY_canUseDOM && !!navigator.maxTouchPoints;
}
function isApple() {
  if (!DLOEKDPY_canUseDOM)
    return false;
  return /mac|iphone|ipad|ipod/i.test(navigator.platform);
}
function isSafari() {
  return DLOEKDPY_canUseDOM && isApple() && /apple/i.test(navigator.vendor);
}
function isFirefox() {
  return DLOEKDPY_canUseDOM && /firefox\//i.test(navigator.userAgent);
}
function isMac() {
  return canUseDOM && navigator.platform.startsWith("Mac") && !isTouchDevice();
}



;// CONCATENATED MODULE: ./node_modules/@ariakit/core/esm/utils/events.js
"use client";




// src/utils/events.ts
function isPortalEvent(event) {
  return Boolean(
    event.currentTarget && !contains(event.currentTarget, event.target)
  );
}
function isSelfTarget(event) {
  return event.target === event.currentTarget;
}
function isOpeningInNewTab(event) {
  const element = event.currentTarget;
  if (!element)
    return false;
  const isAppleDevice = isApple();
  if (isAppleDevice && !event.metaKey)
    return false;
  if (!isAppleDevice && !event.ctrlKey)
    return false;
  const tagName = element.tagName.toLowerCase();
  if (tagName === "a")
    return true;
  if (tagName === "button" && element.type === "submit")
    return true;
  if (tagName === "input" && element.type === "submit")
    return true;
  return false;
}
function isDownloading(event) {
  const element = event.currentTarget;
  if (!element)
    return false;
  const tagName = element.tagName.toLowerCase();
  if (!event.altKey)
    return false;
  if (tagName === "a")
    return true;
  if (tagName === "button" && element.type === "submit")
    return true;
  if (tagName === "input" && element.type === "submit")
    return true;
  return false;
}
function fireEvent(element, type, eventInit) {
  const event = new Event(type, eventInit);
  return element.dispatchEvent(event);
}
function fireBlurEvent(element, eventInit) {
  const event = new FocusEvent("blur", eventInit);
  const defaultAllowed = element.dispatchEvent(event);
  const bubbleInit = _chunks_4R3V3JGP_spreadProps(_chunks_4R3V3JGP_spreadValues({}, eventInit), { bubbles: true });
  element.dispatchEvent(new FocusEvent("focusout", bubbleInit));
  return defaultAllowed;
}
function fireFocusEvent(element, eventInit) {
  const event = new FocusEvent("focus", eventInit);
  const defaultAllowed = element.dispatchEvent(event);
  const bubbleInit = __spreadProps(__spreadValues({}, eventInit), { bubbles: true });
  element.dispatchEvent(new FocusEvent("focusin", bubbleInit));
  return defaultAllowed;
}
function fireKeyboardEvent(element, type, eventInit) {
  const event = new KeyboardEvent(type, eventInit);
  return element.dispatchEvent(event);
}
function fireClickEvent(element, eventInit) {
  const event = new MouseEvent("click", eventInit);
  return element.dispatchEvent(event);
}
function isFocusEventOutside(event, container) {
  const containerElement = container || event.currentTarget;
  const relatedTarget = event.relatedTarget;
  return !relatedTarget || !contains(containerElement, relatedTarget);
}
function queueBeforeEvent(element, type, callback) {
  const raf = requestAnimationFrame(() => {
    element.removeEventListener(type, callImmediately, true);
    callback();
  });
  const callImmediately = () => {
    cancelAnimationFrame(raf);
    callback();
  };
  element.addEventListener(type, callImmediately, {
    once: true,
    capture: true
  });
  return raf;
}
function addGlobalEventListener(type, listener, options, scope = window) {
  const children = [];
  try {
    scope.document.addEventListener(type, listener, options);
    for (const frame of Array.from(scope.frames)) {
      children.push(addGlobalEventListener(type, listener, options, frame));
    }
  } catch (e) {
  }
  const removeEventListener = () => {
    try {
      scope.document.removeEventListener(type, listener, options);
    } catch (e) {
    }
    children.forEach((remove) => remove());
  };
  return removeEventListener;
}


;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/__chunks/6O5OEQGF.js
"use client";



// src/utils/hooks.ts





var _React = _4R3V3JGP_spreadValues({}, external_React_namespaceObject);
var useReactId = _React.useId;
var useReactDeferredValue = _React.useDeferredValue;
var useReactInsertionEffect = _React.useInsertionEffect;
var useSafeLayoutEffect = DLOEKDPY_canUseDOM ? external_React_.useLayoutEffect : external_React_.useEffect;
function useInitialValue(value) {
  const [initialValue] = useState(value);
  return initialValue;
}
function useLazyValue(init) {
  const ref = useRef();
  if (ref.current === void 0) {
    ref.current = init();
  }
  return ref.current;
}
function useLiveRef(value) {
  const ref = (0,external_React_.useRef)(value);
  useSafeLayoutEffect(() => {
    ref.current = value;
  });
  return ref;
}
function usePreviousValue(value) {
  const [previousValue, setPreviousValue] = useState(value);
  if (value !== previousValue) {
    setPreviousValue(value);
  }
  return previousValue;
}
function useEvent(callback) {
  const ref = (0,external_React_.useRef)(() => {
    throw new Error("Cannot call an event handler while rendering.");
  });
  if (useReactInsertionEffect) {
    useReactInsertionEffect(() => {
      ref.current = callback;
    });
  } else {
    ref.current = callback;
  }
  return (0,external_React_.useCallback)((...args) => {
    var _a;
    return (_a = ref.current) == null ? void 0 : _a.call(ref, ...args);
  }, []);
}
function useMergeRefs(...refs) {
  return (0,external_React_.useMemo)(() => {
    if (!refs.some(Boolean))
      return;
    return (value) => {
      refs.forEach((ref) => setRef(ref, value));
    };
  }, refs);
}
function useRefId(ref, deps) {
  const [id, setId] = useState(void 0);
  useSafeLayoutEffect(() => {
    var _a;
    setId((_a = ref == null ? void 0 : ref.current) == null ? void 0 : _a.id);
  }, deps);
  return id;
}
function useId(defaultId) {
  if (useReactId) {
    const reactId = useReactId();
    if (defaultId)
      return defaultId;
    return reactId;
  }
  const [id, setId] = (0,external_React_.useState)(defaultId);
  useSafeLayoutEffect(() => {
    if (defaultId || id)
      return;
    const random = Math.random().toString(36).substr(2, 6);
    setId(`id-${random}`);
  }, [defaultId, id]);
  return defaultId || id;
}
function useDeferredValue(value) {
  if (useReactDeferredValue) {
    return useReactDeferredValue(value);
  }
  const [deferredValue, setDeferredValue] = useState(value);
  useEffect(() => {
    const raf = requestAnimationFrame(() => setDeferredValue(value));
    return () => cancelAnimationFrame(raf);
  }, [value]);
  return deferredValue;
}
function useTagName(refOrElement, type) {
  const stringOrUndefined = (type2) => {
    if (typeof type2 !== "string")
      return;
    return type2;
  };
  const [tagName, setTagName] = (0,external_React_.useState)(() => stringOrUndefined(type));
  useSafeLayoutEffect(() => {
    const element = refOrElement && "current" in refOrElement ? refOrElement.current : refOrElement;
    setTagName((element == null ? void 0 : element.tagName.toLowerCase()) || stringOrUndefined(type));
  }, [refOrElement, type]);
  return tagName;
}
function useAttribute(refOrElement, attributeName, defaultValue) {
  const [attribute, setAttribute] = (0,external_React_.useState)(defaultValue);
  useSafeLayoutEffect(() => {
    const element = refOrElement && "current" in refOrElement ? refOrElement.current : refOrElement;
    const value = element == null ? void 0 : element.getAttribute(attributeName);
    if (value == null)
      return;
    setAttribute(value);
  }, [refOrElement, attributeName]);
  return attribute;
}
function useUpdateEffect(effect, deps) {
  const mounted = (0,external_React_.useRef)(false);
  (0,external_React_.useEffect)(() => {
    if (mounted.current) {
      return effect();
    }
    mounted.current = true;
  }, deps);
  (0,external_React_.useEffect)(
    () => () => {
      mounted.current = false;
    },
    []
  );
}
function useUpdateLayoutEffect(effect, deps) {
  const mounted = (0,external_React_.useRef)(false);
  useSafeLayoutEffect(() => {
    if (mounted.current) {
      return effect();
    }
    mounted.current = true;
  }, deps);
  useSafeLayoutEffect(
    () => () => {
      mounted.current = false;
    },
    []
  );
}
function useControlledState(defaultState, state, setState) {
  const [localState, setLocalState] = useState(defaultState);
  const nextState = state !== void 0 ? state : localState;
  const stateRef = useLiveRef(state);
  const setStateRef = useLiveRef(setState);
  const nextStateRef = useLiveRef(nextState);
  const setNextState = useCallback((prevValue) => {
    const setStateProp = setStateRef.current;
    if (setStateProp) {
      if (isSetNextState(setStateProp)) {
        setStateProp(prevValue);
      } else {
        const nextValue = applyState(prevValue, nextStateRef.current);
        nextStateRef.current = nextValue;
        setStateProp(nextValue);
      }
    }
    if (stateRef.current === void 0) {
      setLocalState(prevValue);
    }
  }, []);
  defineSetNextState(setNextState);
  return [nextState, setNextState];
}
var SET_NEXT_STATE = Symbol("setNextState");
function isSetNextState(arg) {
  return arg[SET_NEXT_STATE] === true;
}
function defineSetNextState(arg) {
  if (!isSetNextState(arg)) {
    Object.defineProperty(arg, SET_NEXT_STATE, { value: true });
  }
}
function useForceUpdate() {
  return (0,external_React_.useReducer)(() => [], []);
}
function useBooleanEvent(booleanOrCallback) {
  return useEvent(
    typeof booleanOrCallback === "function" ? booleanOrCallback : () => booleanOrCallback
  );
}
function useWrapElement(props, callback, deps = []) {
  const wrapElement = (0,external_React_.useCallback)(
    (element) => {
      if (props.wrapElement) {
        element = props.wrapElement(element);
      }
      return callback(element);
    },
    [...deps, props.wrapElement]
  );
  return _4R3V3JGP_spreadProps(_4R3V3JGP_spreadValues({}, props), { wrapElement });
}
function usePortalRef(portalProp = false, portalRefProp) {
  const [portalNode, setPortalNode] = useState(null);
  const portalRef = useMergeRefs(setPortalNode, portalRefProp);
  const domReady = !portalProp || portalNode;
  return { portalRef, portalNode, domReady };
}
function useMetadataProps(props, key, value) {
  const parent = props.onLoadedMetadataCapture;
  const onLoadedMetadataCapture = (0,external_React_.useMemo)(() => {
    return Object.assign(() => {
    }, _4R3V3JGP_spreadProps(_4R3V3JGP_spreadValues({}, parent), { [key]: value }));
  }, [parent, key, value]);
  return [parent == null ? void 0 : parent[key], { onLoadedMetadataCapture }];
}
function useIsMouseMoving() {
  (0,external_React_.useEffect)(() => {
    addGlobalEventListener("mousemove", setMouseMoving, true);
    addGlobalEventListener("mousedown", resetMouseMoving, true);
    addGlobalEventListener("mouseup", resetMouseMoving, true);
    addGlobalEventListener("keydown", resetMouseMoving, true);
    addGlobalEventListener("scroll", resetMouseMoving, true);
  }, []);
  const isMouseMoving = useEvent(() => mouseMoving);
  return isMouseMoving;
}
var mouseMoving = false;
var previousScreenX = 0;
var previousScreenY = 0;
function hasMouseMovement(event) {
  const movementX = event.movementX || event.screenX - previousScreenX;
  const movementY = event.movementY || event.screenY - previousScreenY;
  previousScreenX = event.screenX;
  previousScreenY = event.screenY;
  return movementX || movementY || "production" === "test";
}
function setMouseMoving(event) {
  if (!hasMouseMovement(event))
    return;
  mouseMoving = true;
}
function resetMouseMoving() {
  mouseMoving = false;
}



;// CONCATENATED MODULE: ./node_modules/@ariakit/core/esm/__chunks/EAHJFCU4.js
"use client";



// src/utils/store.ts
function getInternal(store, key) {
  const internals = store.__unstableInternals;
  invariant(internals, "Invalid store");
  return internals[key];
}
function createStore(initialState, ...stores) {
  let state = initialState;
  let prevStateBatch = state;
  let lastUpdate = Symbol();
  let destroy = Y3OOHFCN_noop;
  const instances = /* @__PURE__ */ new Set();
  const updatedKeys = /* @__PURE__ */ new Set();
  const setups = /* @__PURE__ */ new Set();
  const listeners = /* @__PURE__ */ new Set();
  const batchListeners = /* @__PURE__ */ new Set();
  const disposables = /* @__PURE__ */ new WeakMap();
  const listenerKeys = /* @__PURE__ */ new WeakMap();
  const storeSetup = (callback) => {
    setups.add(callback);
    return () => setups.delete(callback);
  };
  const storeInit = () => {
    const initialized = instances.size;
    const instance = Symbol();
    instances.add(instance);
    const maybeDestroy = () => {
      instances.delete(instance);
      if (instances.size)
        return;
      destroy();
    };
    if (initialized)
      return maybeDestroy;
    const desyncs = getKeys(state).map(
      (key) => chain(
        ...stores.map((store) => {
          var _a;
          const storeState = (_a = store == null ? void 0 : store.getState) == null ? void 0 : _a.call(store);
          if (!storeState)
            return;
          if (!Y3OOHFCN_hasOwnProperty(storeState, key))
            return;
          return sync(store, [key], (state2) => {
            setState(
              key,
              state2[key],
              // @ts-expect-error - Not public API. This is just to prevent
              // infinite loops.
              true
            );
          });
        })
      )
    );
    const teardowns = [];
    setups.forEach((setup2) => teardowns.push(setup2()));
    const cleanups = stores.map(init);
    destroy = chain(...desyncs, ...teardowns, ...cleanups);
    return maybeDestroy;
  };
  const sub = (keys, listener, set = listeners) => {
    set.add(listener);
    listenerKeys.set(listener, keys);
    return () => {
      var _a;
      (_a = disposables.get(listener)) == null ? void 0 : _a();
      disposables.delete(listener);
      listenerKeys.delete(listener);
      set.delete(listener);
    };
  };
  const storeSubscribe = (keys, listener) => sub(keys, listener);
  const storeSync = (keys, listener) => {
    disposables.set(listener, listener(state, state));
    return sub(keys, listener);
  };
  const storeBatch = (keys, listener) => {
    disposables.set(listener, listener(state, prevStateBatch));
    return sub(keys, listener, batchListeners);
  };
  const storePick = (keys) => createStore(pick(state, keys), finalStore);
  const storeOmit = (keys) => createStore(omit(state, keys), finalStore);
  const getState = () => state;
  const setState = (key, value, fromStores = false) => {
    if (!Y3OOHFCN_hasOwnProperty(state, key))
      return;
    const nextValue = Y3OOHFCN_applyState(value, state[key]);
    if (nextValue === state[key])
      return;
    if (!fromStores) {
      stores.forEach((store) => {
        var _a;
        (_a = store == null ? void 0 : store.setState) == null ? void 0 : _a.call(store, key, nextValue);
      });
    }
    const prevState = state;
    state = _chunks_4R3V3JGP_spreadProps(_chunks_4R3V3JGP_spreadValues({}, state), { [key]: nextValue });
    const thisUpdate = Symbol();
    lastUpdate = thisUpdate;
    updatedKeys.add(key);
    const run = (listener, prev, uKeys) => {
      var _a;
      const keys = listenerKeys.get(listener);
      const updated = (k) => uKeys ? uKeys.has(k) : k === key;
      if (!keys || keys.some(updated)) {
        (_a = disposables.get(listener)) == null ? void 0 : _a();
        disposables.set(listener, listener(state, prev));
      }
    };
    listeners.forEach((listener) => {
      run(listener, prevState);
    });
    queueMicrotask(() => {
      if (lastUpdate !== thisUpdate)
        return;
      const snapshot = state;
      batchListeners.forEach((listener) => {
        run(listener, prevStateBatch, updatedKeys);
      });
      prevStateBatch = snapshot;
      updatedKeys.clear();
    });
  };
  const finalStore = {
    getState,
    setState,
    __unstableInternals: {
      setup: storeSetup,
      init: storeInit,
      subscribe: storeSubscribe,
      sync: storeSync,
      batch: storeBatch,
      pick: storePick,
      omit: storeOmit
    }
  };
  return finalStore;
}
function setup(store, ...args) {
  if (!store)
    return;
  return getInternal(store, "setup")(...args);
}
function init(store, ...args) {
  if (!store)
    return;
  return getInternal(store, "init")(...args);
}
function subscribe(store, ...args) {
  if (!store)
    return;
  return getInternal(store, "subscribe")(...args);
}
function sync(store, ...args) {
  if (!store)
    return;
  return getInternal(store, "sync")(...args);
}
function batch(store, ...args) {
  if (!store)
    return;
  return getInternal(store, "batch")(...args);
}
function omit2(store, ...args) {
  if (!store)
    return;
  return getInternal(store, "omit")(...args);
}
function pick2(store, ...args) {
  if (!store)
    return;
  return getInternal(store, "pick")(...args);
}
function mergeStore(...stores) {
  const initialState = stores.reduce((state, store2) => {
    var _a;
    const nextState = (_a = store2 == null ? void 0 : store2.getState) == null ? void 0 : _a.call(store2);
    if (!nextState)
      return state;
    return _chunks_4R3V3JGP_spreadValues(_chunks_4R3V3JGP_spreadValues({}, state), nextState);
  }, {});
  const store = createStore(initialState, ...stores);
  return store;
}
function throwOnConflictingProps(props, store) {
  if (true)
    return;
  if (!store)
    return;
  const defaultKeys = Object.entries(props).filter(([key, value]) => key.startsWith("default") && value !== void 0).map(([key]) => {
    var _a;
    const stateKey = key.replace("default", "");
    return `${((_a = stateKey[0]) == null ? void 0 : _a.toLowerCase()) || ""}${stateKey.slice(1)}`;
  });
  if (!defaultKeys.length)
    return;
  const storeState = store.getState();
  const conflictingProps = defaultKeys.filter(
    (key) => Y3OOHFCN_hasOwnProperty(storeState, key)
  );
  if (!conflictingProps.length)
    return;
  throw new Error(
    `Passing a store prop in conjunction with a default state is not supported.

const store = useSelectStore();
<SelectProvider store={store} defaultValue="Apple" />
                ^             ^

Instead, pass the default state to the topmost store:

const store = useSelectStore({ defaultValue: "Apple" });
<SelectProvider store={store} />

See https://github.com/ariakit/ariakit/pull/2745 for more details.

If there's a particular need for this, please submit a feature request at https://github.com/ariakit/ariakit
`
  );
}



// EXTERNAL MODULE: ./node_modules/use-sync-external-store/shim/index.js
var shim = __webpack_require__(422);
;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/__chunks/EKQEJRUF.js
"use client";



// src/utils/store.tsx




var { useSyncExternalStore } = shim;
var noopSubscribe = () => () => {
};
function useStoreState(store, keyOrSelector = identity) {
  const storeSubscribe = external_React_.useCallback(
    (callback) => {
      if (!store)
        return noopSubscribe();
      return subscribe(store, null, callback);
    },
    [store]
  );
  const getSnapshot = () => {
    const key = typeof keyOrSelector === "string" ? keyOrSelector : null;
    const selector = typeof keyOrSelector === "function" ? keyOrSelector : null;
    const state = store == null ? void 0 : store.getState();
    if (selector)
      return selector(state);
    if (!state)
      return;
    if (!key)
      return;
    if (!Y3OOHFCN_hasOwnProperty(state, key))
      return;
    return state[key];
  };
  return useSyncExternalStore(storeSubscribe, getSnapshot, getSnapshot);
}
function useStoreProps(store, props, key, setKey) {
  const value = Y3OOHFCN_hasOwnProperty(props, key) ? props[key] : void 0;
  const setValue = setKey ? props[setKey] : void 0;
  const propsRef = useLiveRef({ value, setValue });
  useSafeLayoutEffect(() => {
    return sync(store, [key], (state, prev) => {
      const { value: value2, setValue: setValue2 } = propsRef.current;
      if (!setValue2)
        return;
      if (state[key] === prev[key])
        return;
      if (state[key] === value2)
        return;
      setValue2(state[key]);
    });
  }, [store, key]);
  useSafeLayoutEffect(() => {
    if (value === void 0)
      return;
    store.setState(key, value);
    return batch(store, [key], () => {
      if (value === void 0)
        return;
      store.setState(key, value);
    });
  });
}
function EKQEJRUF_useStore(createStore, props) {
  const [store, setStore] = external_React_.useState(() => createStore(props));
  useSafeLayoutEffect(() => init(store), [store]);
  const useState2 = external_React_.useCallback(
    (keyOrSelector) => useStoreState(store, keyOrSelector),
    [store]
  );
  const memoizedStore = external_React_.useMemo(
    () => _4R3V3JGP_spreadProps(_4R3V3JGP_spreadValues({}, store), { useState: useState2 }),
    [store, useState2]
  );
  const updateStore = useEvent(() => {
    setStore((store2) => createStore(_4R3V3JGP_spreadValues(_4R3V3JGP_spreadValues({}, props), store2.getState())));
  });
  return [memoizedStore, updateStore];
}



;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/__chunks/Y6GYTNQ2.js
"use client";



// src/collection/collection-store.ts

function useCollectionStoreProps(store, update, props) {
  useUpdateEffect(update, [props.store]);
  useStoreProps(store, props, "items", "setItems");
  return store;
}
function useCollectionStore(props = {}) {
  const [store, update] = useStore(Core.createCollectionStore, props);
  return useCollectionStoreProps(store, update, props);
}



;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/__chunks/7GBW5FLS.js
"use client";



// src/composite/composite-store.ts

function useCompositeStoreProps(store, update, props) {
  store = useCollectionStoreProps(store, update, props);
  useStoreProps(store, props, "activeId", "setActiveId");
  useStoreProps(store, props, "includesBaseElement");
  useStoreProps(store, props, "virtualFocus");
  useStoreProps(store, props, "orientation");
  useStoreProps(store, props, "rtl");
  useStoreProps(store, props, "focusLoop");
  useStoreProps(store, props, "focusWrap");
  useStoreProps(store, props, "focusShift");
  return store;
}
function _7GBW5FLS_useCompositeStore(props = {}) {
  const [store, update] = useStore(Core.createCompositeStore, props);
  return useCompositeStoreProps(store, update, props);
}



;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/__chunks/SFCBA2JZ.js
"use client";



// src/disclosure/disclosure-store.ts

function useDisclosureStoreProps(store, update, props) {
  useUpdateEffect(update, [props.store, props.disclosure]);
  useStoreProps(store, props, "open", "setOpen");
  useStoreProps(store, props, "mounted", "setMounted");
  useStoreProps(store, props, "animated");
  return store;
}
function useDisclosureStore(props = {}) {
  const [store, update] = useStore(Core.createDisclosureStore, props);
  return useDisclosureStoreProps(store, update, props);
}



;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/__chunks/ZSELSBRM.js
"use client";



// src/dialog/dialog-store.ts

function useDialogStoreProps(store, update, props) {
  return useDisclosureStoreProps(store, update, props);
}
function useDialogStore(props = {}) {
  const [store, update] = useStore(Core.createDialogStore, props);
  return useDialogStoreProps(store, update, props);
}



;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/__chunks/MG4P3223.js
"use client";




// src/popover/popover-store.ts

function usePopoverStoreProps(store, update, props) {
  useUpdateEffect(update, [props.popover]);
  store = useDialogStoreProps(store, update, props);
  useStoreProps(store, props, "placement");
  return store;
}
function usePopoverStore(props = {}) {
  const [store, update] = useStore(Core.createPopoverStore, props);
  return usePopoverStoreProps(store, update, props);
}



;// CONCATENATED MODULE: ./node_modules/@ariakit/core/esm/__chunks/Z5IGYIPT.js
"use client";




// src/disclosure/disclosure-store.ts
function createDisclosureStore(props = {}) {
  const store = mergeStore(
    props.store,
    omit2(props.disclosure, ["contentElement", "disclosureElement"])
  );
  throwOnConflictingProps(props, store);
  const syncState = store == null ? void 0 : store.getState();
  const open = defaultValue(
    props.open,
    syncState == null ? void 0 : syncState.open,
    props.defaultOpen,
    false
  );
  const animated = defaultValue(props.animated, syncState == null ? void 0 : syncState.animated, false);
  const initialState = {
    open,
    animated,
    animating: !!animated && open,
    mounted: open,
    contentElement: defaultValue(syncState == null ? void 0 : syncState.contentElement, null),
    disclosureElement: defaultValue(syncState == null ? void 0 : syncState.disclosureElement, null)
  };
  const disclosure = createStore(initialState, store);
  setup(
    disclosure,
    () => sync(disclosure, ["animated", "animating"], (state) => {
      if (state.animated)
        return;
      disclosure.setState("animating", false);
    })
  );
  setup(
    disclosure,
    () => subscribe(disclosure, ["open"], () => {
      if (!disclosure.getState().animated)
        return;
      disclosure.setState("animating", true);
    })
  );
  setup(
    disclosure,
    () => sync(disclosure, ["open", "animating"], (state) => {
      disclosure.setState("mounted", state.open || state.animating);
    })
  );
  return _chunks_4R3V3JGP_spreadProps(_chunks_4R3V3JGP_spreadValues({}, disclosure), {
    setOpen: (value) => disclosure.setState("open", value),
    show: () => disclosure.setState("open", true),
    hide: () => disclosure.setState("open", false),
    toggle: () => disclosure.setState("open", (open2) => !open2),
    stopAnimation: () => disclosure.setState("animating", false),
    setContentElement: (value) => disclosure.setState("contentElement", value),
    setDisclosureElement: (value) => disclosure.setState("disclosureElement", value)
  });
}



;// CONCATENATED MODULE: ./node_modules/@ariakit/core/esm/__chunks/SX2XFD6A.js
"use client";


// src/dialog/dialog-store.ts
function createDialogStore(props = {}) {
  return createDisclosureStore(props);
}



;// CONCATENATED MODULE: ./node_modules/@ariakit/core/esm/__chunks/AF6IUUFN.js
"use client";





// src/popover/popover-store.ts
function createPopoverStore(_a = {}) {
  var _b = _a, {
    popover: otherPopover
  } = _b, props = _4R3V3JGP_objRest(_b, [
    "popover"
  ]);
  const store = mergeStore(
    props.store,
    omit2(otherPopover, [
      "arrowElement",
      "anchorElement",
      "contentElement",
      "popoverElement",
      "disclosureElement"
    ])
  );
  throwOnConflictingProps(props, store);
  const syncState = store == null ? void 0 : store.getState();
  const dialog = createDialogStore(_chunks_4R3V3JGP_spreadProps(_chunks_4R3V3JGP_spreadValues({}, props), { store }));
  const placement = defaultValue(
    props.placement,
    syncState == null ? void 0 : syncState.placement,
    "bottom"
  );
  const initialState = _chunks_4R3V3JGP_spreadProps(_chunks_4R3V3JGP_spreadValues({}, dialog.getState()), {
    placement,
    currentPlacement: placement,
    anchorElement: defaultValue(syncState == null ? void 0 : syncState.anchorElement, null),
    popoverElement: defaultValue(syncState == null ? void 0 : syncState.popoverElement, null),
    arrowElement: defaultValue(syncState == null ? void 0 : syncState.arrowElement, null),
    rendered: Symbol("rendered")
  });
  const popover = createStore(initialState, dialog, store);
  return _chunks_4R3V3JGP_spreadProps(_chunks_4R3V3JGP_spreadValues(_chunks_4R3V3JGP_spreadValues({}, dialog), popover), {
    setAnchorElement: (element) => popover.setState("anchorElement", element),
    setPopoverElement: (element) => popover.setState("popoverElement", element),
    setArrowElement: (element) => popover.setState("arrowElement", element),
    render: () => popover.setState("rendered", Symbol("rendered"))
  });
}



;// CONCATENATED MODULE: ./node_modules/@ariakit/core/esm/__chunks/22K762VQ.js
"use client";





// src/collection/collection-store.ts
function isElementPreceding(a, b) {
  return Boolean(
    b.compareDocumentPosition(a) & Node.DOCUMENT_POSITION_PRECEDING
  );
}
function sortBasedOnDOMPosition(items) {
  const pairs = items.map((item, index) => [index, item]);
  let isOrderDifferent = false;
  pairs.sort(([indexA, a], [indexB, b]) => {
    const elementA = a.element;
    const elementB = b.element;
    if (elementA === elementB)
      return 0;
    if (!elementA || !elementB)
      return 0;
    if (isElementPreceding(elementA, elementB)) {
      if (indexA > indexB) {
        isOrderDifferent = true;
      }
      return -1;
    }
    if (indexA < indexB) {
      isOrderDifferent = true;
    }
    return 1;
  });
  if (isOrderDifferent) {
    return pairs.map(([_, item]) => item);
  }
  return items;
}
function getCommonParent(items) {
  var _a;
  const firstItem = items.find((item) => !!item.element);
  const lastItem = [...items].reverse().find((item) => !!item.element);
  let parentElement = (_a = firstItem == null ? void 0 : firstItem.element) == null ? void 0 : _a.parentElement;
  while (parentElement && (lastItem == null ? void 0 : lastItem.element)) {
    const parent = parentElement;
    if (lastItem && parent.contains(lastItem.element)) {
      return parentElement;
    }
    parentElement = parentElement.parentElement;
  }
  return DLOEKDPY_getDocument(parentElement).body;
}
function getPrivateStore(store) {
  return store == null ? void 0 : store.__unstablePrivateStore;
}
function createCollectionStore(props = {}) {
  var _a;
  throwOnConflictingProps(props, props.store);
  const syncState = (_a = props.store) == null ? void 0 : _a.getState();
  const items = defaultValue(
    props.items,
    syncState == null ? void 0 : syncState.items,
    props.defaultItems,
    []
  );
  const itemsMap = new Map(items.map((item) => [item.id, item]));
  const initialState = {
    items,
    renderedItems: defaultValue(syncState == null ? void 0 : syncState.renderedItems, [])
  };
  const syncPrivateStore = getPrivateStore(props.store);
  const privateStore = createStore(
    { items, renderedItems: initialState.renderedItems },
    syncPrivateStore
  );
  const collection = createStore(initialState, props.store);
  const sortItems = (renderedItems) => {
    const sortedItems = sortBasedOnDOMPosition(renderedItems);
    privateStore.setState("renderedItems", sortedItems);
    collection.setState("renderedItems", sortedItems);
  };
  setup(collection, () => init(privateStore));
  setup(privateStore, () => {
    return batch(privateStore, ["items"], (state) => {
      collection.setState("items", state.items);
    });
  });
  setup(privateStore, () => {
    return batch(privateStore, ["renderedItems"], (state) => {
      let firstRun = true;
      let raf = requestAnimationFrame(() => {
        const { renderedItems } = collection.getState();
        if (state.renderedItems === renderedItems)
          return;
        sortItems(state.renderedItems);
      });
      if (typeof IntersectionObserver !== "function") {
        return () => cancelAnimationFrame(raf);
      }
      const ioCallback = () => {
        if (firstRun) {
          firstRun = false;
          return;
        }
        cancelAnimationFrame(raf);
        raf = requestAnimationFrame(() => sortItems(state.renderedItems));
      };
      const root = getCommonParent(state.renderedItems);
      const observer = new IntersectionObserver(ioCallback, { root });
      for (const item of state.renderedItems) {
        if (!item.element)
          continue;
        observer.observe(item.element);
      }
      return () => {
        cancelAnimationFrame(raf);
        observer.disconnect();
      };
    });
  });
  const mergeItem = (item, setItems, canDeleteFromMap = false) => {
    let prevItem;
    setItems((items2) => {
      const index = items2.findIndex(({ id }) => id === item.id);
      const nextItems = items2.slice();
      if (index !== -1) {
        prevItem = items2[index];
        const nextItem = _chunks_4R3V3JGP_spreadValues(_chunks_4R3V3JGP_spreadValues({}, prevItem), item);
        nextItems[index] = nextItem;
        itemsMap.set(item.id, nextItem);
      } else {
        nextItems.push(item);
        itemsMap.set(item.id, item);
      }
      return nextItems;
    });
    const unmergeItem = () => {
      setItems((items2) => {
        if (!prevItem) {
          if (canDeleteFromMap) {
            itemsMap.delete(item.id);
          }
          return items2.filter(({ id }) => id !== item.id);
        }
        const index = items2.findIndex(({ id }) => id === item.id);
        if (index === -1)
          return items2;
        const nextItems = items2.slice();
        nextItems[index] = prevItem;
        itemsMap.set(item.id, prevItem);
        return nextItems;
      });
    };
    return unmergeItem;
  };
  const registerItem = (item) => mergeItem(
    item,
    (getItems) => privateStore.setState("items", getItems),
    true
  );
  return _chunks_4R3V3JGP_spreadProps(_chunks_4R3V3JGP_spreadValues({}, collection), {
    registerItem,
    renderItem: (item) => chain(
      registerItem(item),
      mergeItem(
        item,
        (getItems) => privateStore.setState("renderedItems", getItems)
      )
    ),
    item: (id) => {
      if (!id)
        return null;
      let item = itemsMap.get(id);
      if (!item) {
        const { items: items2 } = collection.getState();
        item = items2.find((item2) => item2.id === id);
        if (item) {
          itemsMap.set(id, item);
        }
      }
      return item || null;
    },
    // @ts-expect-error Internal
    __unstablePrivateStore: privateStore
  });
}



;// CONCATENATED MODULE: ./node_modules/@ariakit/core/esm/__chunks/7PRQYBBV.js
"use client";

// src/utils/array.ts
function toArray(arg) {
  if (Array.isArray(arg)) {
    return arg;
  }
  return typeof arg !== "undefined" ? [arg] : [];
}
function addItemToArray(array, item, index = -1) {
  if (!(index in array)) {
    return [...array, item];
  }
  return [...array.slice(0, index), item, ...array.slice(index)];
}
function flatten2DArray(array) {
  const flattened = [];
  for (const row of array) {
    flattened.push(...row);
  }
  return flattened;
}
function reverseArray(array) {
  return array.slice().reverse();
}



;// CONCATENATED MODULE: ./node_modules/@ariakit/core/esm/__chunks/IERTEJ3A.js
"use client";






// src/composite/composite-store.ts
var NULL_ITEM = { id: null };
function findFirstEnabledItem(items, excludeId) {
  return items.find((item) => {
    if (excludeId) {
      return !item.disabled && item.id !== excludeId;
    }
    return !item.disabled;
  });
}
function getEnabledItems(items, excludeId) {
  return items.filter((item) => {
    if (excludeId) {
      return !item.disabled && item.id !== excludeId;
    }
    return !item.disabled;
  });
}
function getOppositeOrientation(orientation) {
  if (orientation === "vertical")
    return "horizontal";
  if (orientation === "horizontal")
    return "vertical";
  return;
}
function getItemsInRow(items, rowId) {
  return items.filter((item) => item.rowId === rowId);
}
function flipItems(items, activeId, shouldInsertNullItem = false) {
  const index = items.findIndex((item) => item.id === activeId);
  return [
    ...items.slice(index + 1),
    ...shouldInsertNullItem ? [NULL_ITEM] : [],
    ...items.slice(0, index)
  ];
}
function groupItemsByRows(items) {
  const rows = [];
  for (const item of items) {
    const row = rows.find((currentRow) => {
      var _a;
      return ((_a = currentRow[0]) == null ? void 0 : _a.rowId) === item.rowId;
    });
    if (row) {
      row.push(item);
    } else {
      rows.push([item]);
    }
  }
  return rows;
}
function getMaxRowLength(array) {
  let maxLength = 0;
  for (const { length } of array) {
    if (length > maxLength) {
      maxLength = length;
    }
  }
  return maxLength;
}
function createEmptyItem(rowId) {
  return {
    id: "__EMPTY_ITEM__",
    disabled: true,
    rowId
  };
}
function normalizeRows(rows, activeId, focusShift) {
  const maxLength = getMaxRowLength(rows);
  for (const row of rows) {
    for (let i = 0; i < maxLength; i += 1) {
      const item = row[i];
      if (!item || focusShift && item.disabled) {
        const isFirst = i === 0;
        const previousItem = isFirst && focusShift ? findFirstEnabledItem(row) : row[i - 1];
        row[i] = previousItem && activeId !== previousItem.id && focusShift ? previousItem : createEmptyItem(previousItem == null ? void 0 : previousItem.rowId);
      }
    }
  }
  return rows;
}
function verticalizeItems(items) {
  const rows = groupItemsByRows(items);
  const maxLength = getMaxRowLength(rows);
  const verticalized = [];
  for (let i = 0; i < maxLength; i += 1) {
    for (const row of rows) {
      const item = row[i];
      if (item) {
        verticalized.push(_chunks_4R3V3JGP_spreadProps(_chunks_4R3V3JGP_spreadValues({}, item), {
          // If there's no rowId, it means that it's not a grid composite, but
          // a single row instead. So, instead of verticalizing it, that is,
          // assigning a different rowId based on the column index, we keep it
          // undefined so they will be part of the same row. This is useful
          // when using up/down on one-dimensional composites.
          rowId: item.rowId ? `${i}` : void 0
        }));
      }
    }
  }
  return verticalized;
}
function createCompositeStore(props = {}) {
  var _a;
  const syncState = (_a = props.store) == null ? void 0 : _a.getState();
  const collection = createCollectionStore(props);
  const activeId = defaultValue(
    props.activeId,
    syncState == null ? void 0 : syncState.activeId,
    props.defaultActiveId
  );
  const initialState = _chunks_4R3V3JGP_spreadProps(_chunks_4R3V3JGP_spreadValues({}, collection.getState()), {
    activeId,
    baseElement: defaultValue(syncState == null ? void 0 : syncState.baseElement, null),
    includesBaseElement: defaultValue(
      props.includesBaseElement,
      syncState == null ? void 0 : syncState.includesBaseElement,
      activeId === null
    ),
    moves: defaultValue(syncState == null ? void 0 : syncState.moves, 0),
    orientation: defaultValue(
      props.orientation,
      syncState == null ? void 0 : syncState.orientation,
      "both"
    ),
    rtl: defaultValue(props.rtl, syncState == null ? void 0 : syncState.rtl, false),
    virtualFocus: defaultValue(
      props.virtualFocus,
      syncState == null ? void 0 : syncState.virtualFocus,
      false
    ),
    focusLoop: defaultValue(props.focusLoop, syncState == null ? void 0 : syncState.focusLoop, false),
    focusWrap: defaultValue(props.focusWrap, syncState == null ? void 0 : syncState.focusWrap, false),
    focusShift: defaultValue(props.focusShift, syncState == null ? void 0 : syncState.focusShift, false)
  });
  const composite = createStore(initialState, collection, props.store);
  setup(
    composite,
    () => sync(composite, ["renderedItems", "activeId"], (state) => {
      composite.setState("activeId", (activeId2) => {
        var _a2;
        if (activeId2 !== void 0)
          return activeId2;
        return (_a2 = findFirstEnabledItem(state.renderedItems)) == null ? void 0 : _a2.id;
      });
    })
  );
  const getNextId = (items, orientation, hasNullItem, skip) => {
    var _a2, _b;
    const { activeId: activeId2, rtl, focusLoop, focusWrap, includesBaseElement } = composite.getState();
    const isHorizontal = orientation !== "vertical";
    const isRTL = rtl && isHorizontal;
    const allItems = isRTL ? reverseArray(items) : items;
    if (activeId2 == null) {
      return (_a2 = findFirstEnabledItem(allItems)) == null ? void 0 : _a2.id;
    }
    const activeItem = allItems.find((item) => item.id === activeId2);
    if (!activeItem) {
      return (_b = findFirstEnabledItem(allItems)) == null ? void 0 : _b.id;
    }
    const isGrid = !!activeItem.rowId;
    const activeIndex = allItems.indexOf(activeItem);
    const nextItems = allItems.slice(activeIndex + 1);
    const nextItemsInRow = getItemsInRow(nextItems, activeItem.rowId);
    if (skip !== void 0) {
      const nextEnabledItemsInRow = getEnabledItems(nextItemsInRow, activeId2);
      const nextItem2 = nextEnabledItemsInRow.slice(skip)[0] || // If we can't find an item, just return the last one.
      nextEnabledItemsInRow[nextEnabledItemsInRow.length - 1];
      return nextItem2 == null ? void 0 : nextItem2.id;
    }
    const oppositeOrientation = getOppositeOrientation(
      // If it's a grid and orientation is not set, it's a next/previous call,
      // which is inherently horizontal. up/down will call next with orientation
      // set to vertical by default (see below on up/down methods).
      isGrid ? orientation || "horizontal" : orientation
    );
    const canLoop = focusLoop && focusLoop !== oppositeOrientation;
    const canWrap = isGrid && focusWrap && focusWrap !== oppositeOrientation;
    hasNullItem = hasNullItem || !isGrid && canLoop && includesBaseElement;
    if (canLoop) {
      const loopItems = canWrap && !hasNullItem ? allItems : getItemsInRow(allItems, activeItem.rowId);
      const sortedItems = flipItems(loopItems, activeId2, hasNullItem);
      const nextItem2 = findFirstEnabledItem(sortedItems, activeId2);
      return nextItem2 == null ? void 0 : nextItem2.id;
    }
    if (canWrap) {
      const nextItem2 = findFirstEnabledItem(
        // We can use nextItems, which contains all the next items, including
        // items from other rows, to wrap between rows. However, if there is a
        // null item (the composite container), we'll only use the next items in
        // the row. So moving next from the last item will focus on the
        // composite container. On grid composites, horizontal navigation never
        // focuses on the composite container, only vertical.
        hasNullItem ? nextItemsInRow : nextItems,
        activeId2
      );
      const nextId = hasNullItem ? (nextItem2 == null ? void 0 : nextItem2.id) || null : nextItem2 == null ? void 0 : nextItem2.id;
      return nextId;
    }
    const nextItem = findFirstEnabledItem(nextItemsInRow, activeId2);
    if (!nextItem && hasNullItem) {
      return null;
    }
    return nextItem == null ? void 0 : nextItem.id;
  };
  return _chunks_4R3V3JGP_spreadProps(_chunks_4R3V3JGP_spreadValues(_chunks_4R3V3JGP_spreadValues({}, collection), composite), {
    setBaseElement: (element) => composite.setState("baseElement", element),
    setActiveId: (id) => composite.setState("activeId", id),
    move: (id) => {
      if (id === void 0)
        return;
      composite.setState("activeId", id);
      composite.setState("moves", (moves) => moves + 1);
    },
    first: () => {
      var _a2;
      return (_a2 = findFirstEnabledItem(composite.getState().renderedItems)) == null ? void 0 : _a2.id;
    },
    last: () => {
      var _a2;
      return (_a2 = findFirstEnabledItem(reverseArray(composite.getState().renderedItems))) == null ? void 0 : _a2.id;
    },
    next: (skip) => {
      const { renderedItems, orientation } = composite.getState();
      return getNextId(renderedItems, orientation, false, skip);
    },
    previous: (skip) => {
      var _a2;
      const { renderedItems, orientation, includesBaseElement } = composite.getState();
      const isGrid = !!((_a2 = findFirstEnabledItem(renderedItems)) == null ? void 0 : _a2.rowId);
      const hasNullItem = !isGrid && includesBaseElement;
      return getNextId(
        reverseArray(renderedItems),
        orientation,
        hasNullItem,
        skip
      );
    },
    down: (skip) => {
      const {
        activeId: activeId2,
        renderedItems,
        focusShift,
        focusLoop,
        includesBaseElement
      } = composite.getState();
      const shouldShift = focusShift && !skip;
      const verticalItems = verticalizeItems(
        flatten2DArray(
          normalizeRows(groupItemsByRows(renderedItems), activeId2, shouldShift)
        )
      );
      const canLoop = focusLoop && focusLoop !== "horizontal";
      const hasNullItem = canLoop && includesBaseElement;
      return getNextId(verticalItems, "vertical", hasNullItem, skip);
    },
    up: (skip) => {
      const { activeId: activeId2, renderedItems, focusShift, includesBaseElement } = composite.getState();
      const shouldShift = focusShift && !skip;
      const verticalItems = verticalizeItems(
        reverseArray(
          flatten2DArray(
            normalizeRows(
              groupItemsByRows(renderedItems),
              activeId2,
              shouldShift
            )
          )
        )
      );
      const hasNullItem = includesBaseElement;
      return getNextId(verticalItems, "vertical", hasNullItem, skip);
    }
  });
}



;// CONCATENATED MODULE: ./node_modules/@ariakit/core/esm/combobox/combobox-store.js
"use client";












// src/combobox/combobox-store.ts
var isSafariOnMobile = isSafari() && isTouchDevice();
function createComboboxStore(props = {}) {
  var _a;
  throwOnConflictingProps(props, props.store);
  const syncState = (_a = props.store) == null ? void 0 : _a.getState();
  const activeId = defaultValue(
    props.activeId,
    syncState == null ? void 0 : syncState.activeId,
    props.defaultActiveId,
    null
  );
  const composite = createCompositeStore(_chunks_4R3V3JGP_spreadProps(_chunks_4R3V3JGP_spreadValues({}, props), {
    activeId,
    includesBaseElement: defaultValue(
      props.includesBaseElement,
      syncState == null ? void 0 : syncState.includesBaseElement,
      true
    ),
    orientation: defaultValue(
      props.orientation,
      syncState == null ? void 0 : syncState.orientation,
      "vertical"
    ),
    focusLoop: defaultValue(props.focusLoop, syncState == null ? void 0 : syncState.focusLoop, true),
    focusWrap: defaultValue(props.focusWrap, syncState == null ? void 0 : syncState.focusWrap, true),
    virtualFocus: defaultValue(
      props.virtualFocus,
      syncState == null ? void 0 : syncState.virtualFocus,
      !isSafariOnMobile
    )
  }));
  const popover = createPopoverStore(_chunks_4R3V3JGP_spreadProps(_chunks_4R3V3JGP_spreadValues({}, props), {
    placement: defaultValue(
      props.placement,
      syncState == null ? void 0 : syncState.placement,
      "bottom-start"
    )
  }));
  const value = defaultValue(
    props.value,
    syncState == null ? void 0 : syncState.value,
    props.defaultValue,
    ""
  );
  const selectedValue = defaultValue(
    props.selectedValue,
    syncState == null ? void 0 : syncState.selectedValue,
    props.defaultSelectedValue,
    ""
  );
  const multiSelectable = Array.isArray(selectedValue);
  const initialState = _chunks_4R3V3JGP_spreadProps(_chunks_4R3V3JGP_spreadValues(_chunks_4R3V3JGP_spreadValues({}, composite.getState()), popover.getState()), {
    value,
    selectedValue,
    resetValueOnSelect: defaultValue(
      props.resetValueOnSelect,
      syncState == null ? void 0 : syncState.resetValueOnSelect,
      multiSelectable
    ),
    resetValueOnHide: defaultValue(
      props.resetValueOnHide,
      syncState == null ? void 0 : syncState.resetValueOnHide,
      multiSelectable
    ),
    activeValue: syncState == null ? void 0 : syncState.activeValue
  });
  const combobox = createStore(initialState, composite, popover, props.store);
  setup(
    combobox,
    () => sync(combobox, ["resetValueOnHide", "mounted"], (state) => {
      if (!state.resetValueOnHide)
        return;
      if (state.mounted)
        return;
      combobox.setState("value", value);
    })
  );
  setup(
    combobox,
    () => sync(combobox, ["resetValueOnSelect", "selectedValue"], (state) => {
      if (!state.resetValueOnSelect)
        return;
      combobox.setState("value", value);
    })
  );
  setup(
    combobox,
    () => batch(combobox, ["mounted"], (state) => {
      if (state.mounted)
        return;
      combobox.setState("activeId", activeId);
      combobox.setState("moves", 0);
    })
  );
  setup(
    combobox,
    () => sync(combobox, ["moves", "activeId"], (state, prevState) => {
      if (state.moves === prevState.moves) {
        combobox.setState("activeValue", void 0);
      }
    })
  );
  setup(
    combobox,
    () => batch(combobox, ["moves", "renderedItems"], (state, prev) => {
      if (state.moves === prev.moves)
        return;
      const { activeId: activeId2 } = combobox.getState();
      const activeItem = composite.item(activeId2);
      combobox.setState("activeValue", activeItem == null ? void 0 : activeItem.value);
    })
  );
  return _chunks_4R3V3JGP_spreadProps(_chunks_4R3V3JGP_spreadValues(_chunks_4R3V3JGP_spreadValues(_chunks_4R3V3JGP_spreadValues({}, popover), composite), combobox), {
    setValue: (value2) => combobox.setState("value", value2),
    setSelectedValue: (selectedValue2) => combobox.setState("selectedValue", selectedValue2)
  });
}


;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/__chunks/ZKJ2WLF7.js
"use client";




// src/combobox/combobox-store.ts

function useComboboxStoreProps(store, update, props) {
  store = usePopoverStoreProps(store, update, props);
  store = useCompositeStoreProps(store, update, props);
  useStoreProps(store, props, "value", "setValue");
  useStoreProps(store, props, "selectedValue", "setSelectedValue");
  useStoreProps(store, props, "resetValueOnHide");
  useStoreProps(store, props, "resetValueOnSelect");
  return store;
}
function useComboboxStore(props = {}) {
  const [store, update] = EKQEJRUF_useStore(createComboboxStore, props);
  return useComboboxStoreProps(store, update, props);
}



// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js
var jsx_runtime = __webpack_require__(4922);
;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/__chunks/3ORBWXWF.js
"use client";




// src/utils/system.tsx



function isRenderProp(children) {
  return typeof children === "function";
}
function forwardRef2(render) {
  const Role = React.forwardRef((props, ref) => render(__spreadProps(__spreadValues({}, props), { ref })));
  Role.displayName = render.displayName || render.name;
  return Role;
}
function memo2(Component, propsAreEqual) {
  const Role = React.memo(Component, propsAreEqual);
  Role.displayName = Component.displayName || Component.name;
  return Role;
}
function createComponent(render) {
  const Role = (props, ref) => render(_4R3V3JGP_spreadValues({ ref }, props));
  return external_React_.forwardRef(Role);
}
function createMemoComponent(render) {
  const Role = createComponent(render);
  return external_React_.memo(Role);
}
function _3ORBWXWF_createElement(Type, props) {
  const _a = props, { as: As, wrapElement, render } = _a, rest = __objRest(_a, ["as", "wrapElement", "render"]);
  let element;
  const mergedRef = useMergeRefs(props.ref, getRefProperty(render));
  if (false) {}
  if (As && typeof As !== "string") {
    element = /* @__PURE__ */ (0,jsx_runtime.jsx)(As, _4R3V3JGP_spreadProps(_4R3V3JGP_spreadValues({}, rest), { render }));
  } else if (external_React_.isValidElement(render)) {
    const renderProps = _4R3V3JGP_spreadProps(_4R3V3JGP_spreadValues({}, render.props), { ref: mergedRef });
    element = external_React_.cloneElement(render, mergeProps(rest, renderProps));
  } else if (render) {
    element = render(rest);
  } else if (isRenderProp(props.children)) {
    if (false) {}
    const _b = rest, { children } = _b, otherProps = __objRest(_b, ["children"]);
    element = props.children(otherProps);
  } else if (As) {
    element = /* @__PURE__ */ (0,jsx_runtime.jsx)(As, _4R3V3JGP_spreadValues({}, rest));
  } else {
    element = /* @__PURE__ */ (0,jsx_runtime.jsx)(Type, _4R3V3JGP_spreadValues({}, rest));
  }
  if (wrapElement) {
    return wrapElement(element);
  }
  return element;
}
function createHook(useProps) {
  const useRole = (props = {}) => {
    const htmlProps = useProps(props);
    const copy = {};
    for (const prop in htmlProps) {
      if (Y3OOHFCN_hasOwnProperty(htmlProps, prop) && htmlProps[prop] !== void 0) {
        copy[prop] = htmlProps[prop];
      }
    }
    return copy;
  };
  return useRole;
}
function createStoreContext(providers = [], scopedProviders = []) {
  const context = external_React_.createContext(void 0);
  const scopedContext = external_React_.createContext(void 0);
  const useContext2 = () => external_React_.useContext(context);
  const useScopedContext = (onlyScoped = false) => {
    const scoped = external_React_.useContext(scopedContext);
    const store = useContext2();
    if (onlyScoped)
      return scoped;
    return scoped || store;
  };
  const useProviderContext = () => {
    const scoped = external_React_.useContext(scopedContext);
    const store = useContext2();
    if (scoped && scoped === store)
      return;
    return store;
  };
  const ContextProvider = (props) => {
    return providers.reduceRight(
      (children, Provider) => /* @__PURE__ */ (0,jsx_runtime.jsx)(Provider, _4R3V3JGP_spreadProps(_4R3V3JGP_spreadValues({}, props), { children })),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(context.Provider, _4R3V3JGP_spreadValues({}, props))
    );
  };
  const ScopedContextProvider = (props) => {
    return /* @__PURE__ */ (0,jsx_runtime.jsx)(ContextProvider, _4R3V3JGP_spreadProps(_4R3V3JGP_spreadValues({}, props), { children: scopedProviders.reduceRight(
      (children, Provider) => /* @__PURE__ */ (0,jsx_runtime.jsx)(Provider, _4R3V3JGP_spreadProps(_4R3V3JGP_spreadValues({}, props), { children })),
      /* @__PURE__ */ (0,jsx_runtime.jsx)(scopedContext.Provider, _4R3V3JGP_spreadValues({}, props))
    ) }));
  };
  return {
    context,
    scopedContext,
    useContext: useContext2,
    useScopedContext,
    useProviderContext,
    ContextProvider,
    ScopedContextProvider
  };
}



;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/__chunks/4UUKJZ4V.js
"use client";


// src/collection/collection-context.tsx
var ctx = createStoreContext();
var useCollectionContext = ctx.useContext;
var useCollectionScopedContext = ctx.useScopedContext;
var useCollectionProviderContext = ctx.useProviderContext;
var CollectionContextProvider = ctx.ContextProvider;
var CollectionScopedContextProvider = ctx.ScopedContextProvider;



;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/__chunks/IB7YUKH5.js
"use client";



// src/composite/composite-context.tsx

var IB7YUKH5_ctx = createStoreContext(
  [CollectionContextProvider],
  [CollectionScopedContextProvider]
);
var useCompositeContext = IB7YUKH5_ctx.useContext;
var useCompositeScopedContext = IB7YUKH5_ctx.useScopedContext;
var useCompositeProviderContext = IB7YUKH5_ctx.useProviderContext;
var CompositeContextProvider = IB7YUKH5_ctx.ContextProvider;
var CompositeScopedContextProvider = IB7YUKH5_ctx.ScopedContextProvider;
var CompositeItemContext = (0,external_React_.createContext)(
  void 0
);
var CompositeRowContext = (0,external_React_.createContext)(
  void 0
);



;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/__chunks/OAYFXAQ2.js
"use client";


// src/disclosure/disclosure-context.tsx
var OAYFXAQ2_ctx = createStoreContext();
var useDisclosureContext = OAYFXAQ2_ctx.useContext;
var useDisclosureScopedContext = OAYFXAQ2_ctx.useScopedContext;
var useDisclosureProviderContext = OAYFXAQ2_ctx.useProviderContext;
var DisclosureContextProvider = OAYFXAQ2_ctx.ContextProvider;
var DisclosureScopedContextProvider = OAYFXAQ2_ctx.ScopedContextProvider;



;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/__chunks/G6BJYYBK.js
"use client";



// src/dialog/dialog-context.tsx

var G6BJYYBK_ctx = createStoreContext(
  [DisclosureContextProvider],
  [DisclosureScopedContextProvider]
);
var useDialogContext = G6BJYYBK_ctx.useContext;
var useDialogScopedContext = G6BJYYBK_ctx.useScopedContext;
var useDialogProviderContext = G6BJYYBK_ctx.useProviderContext;
var DialogContextProvider = G6BJYYBK_ctx.ContextProvider;
var DialogScopedContextProvider = G6BJYYBK_ctx.ScopedContextProvider;
var DialogHeadingContext = (0,external_React_.createContext)(void 0);
var DialogDescriptionContext = (0,external_React_.createContext)(void 0);



;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/__chunks/7H5KSHHF.js
"use client";



// src/popover/popover-context.tsx
var _7H5KSHHF_ctx = createStoreContext(
  [DialogContextProvider],
  [DialogScopedContextProvider]
);
var usePopoverContext = _7H5KSHHF_ctx.useContext;
var usePopoverScopedContext = _7H5KSHHF_ctx.useScopedContext;
var usePopoverProviderContext = _7H5KSHHF_ctx.useProviderContext;
var PopoverContextProvider = _7H5KSHHF_ctx.ContextProvider;
var PopoverScopedContextProvider = _7H5KSHHF_ctx.ScopedContextProvider;



;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/__chunks/W76OTZCC.js
"use client";




// src/combobox/combobox-context.tsx

var W76OTZCC_ctx = createStoreContext(
  [PopoverContextProvider, CompositeContextProvider],
  [PopoverScopedContextProvider, CompositeScopedContextProvider]
);
var useComboboxContext = W76OTZCC_ctx.useContext;
var useComboboxScopedContext = W76OTZCC_ctx.useScopedContext;
var useComboboxProviderContext = W76OTZCC_ctx.useProviderContext;
var ComboboxContextProvider = W76OTZCC_ctx.ContextProvider;
var ComboboxScopedContextProvider = W76OTZCC_ctx.ScopedContextProvider;
var ComboboxItemValueContext = (0,external_React_.createContext)(
  void 0
);
var ComboboxItemCheckedContext = (0,external_React_.createContext)(false);



;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/combobox/combobox-provider.js
"use client";


















// src/combobox/combobox-provider.tsx

function ComboboxProvider(props = {}) {
  const store = useComboboxStore(props);
  return /* @__PURE__ */ (0,jsx_runtime.jsx)(ComboboxContextProvider, { value: store, children: props.children });
}


;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/combobox/combobox-label.js
"use client";











// src/combobox/combobox-label.ts

var useComboboxLabel = createHook(
  (_a) => {
    var _b = _a, { store } = _b, props = __objRest(_b, ["store"]);
    const context = useComboboxProviderContext();
    store = store || context;
    invariant(
      store,
       false && 0
    );
    const comboboxId = store.useState((state) => {
      var _a2;
      return (_a2 = state.baseElement) == null ? void 0 : _a2.id;
    });
    props = _4R3V3JGP_spreadValues({
      htmlFor: comboboxId
    }, props);
    return props;
  }
);
var ComboboxLabel = createMemoComponent(
  (props) => {
    const htmlProps = useComboboxLabel(props);
    return _3ORBWXWF_createElement("label", htmlProps);
  }
);
if (false) {}


;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/__chunks/JCH6MLL2.js
"use client";





// src/popover/popover-anchor.ts
var usePopoverAnchor = createHook(
  (_a) => {
    var _b = _a, { store } = _b, props = __objRest(_b, ["store"]);
    const context = usePopoverProviderContext();
    store = store || context;
    props = _4R3V3JGP_spreadProps(_4R3V3JGP_spreadValues({}, props), {
      ref: useMergeRefs(store == null ? void 0 : store.setAnchorElement, props.ref)
    });
    return props;
  }
);
var PopoverAnchor = createComponent((props) => {
  const htmlProps = usePopoverAnchor(props);
  return _3ORBWXWF_createElement("div", htmlProps);
});
if (false) {}



;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/__chunks/3IEDWLST.js
"use client";

// src/composite/utils.ts

var _3IEDWLST_NULL_ITEM = { id: null };
function _3IEDWLST_flipItems(items, activeId, shouldInsertNullItem = false) {
  const index = items.findIndex((item) => item.id === activeId);
  return [
    ...items.slice(index + 1),
    ...shouldInsertNullItem ? [_3IEDWLST_NULL_ITEM] : [],
    ...items.slice(0, index)
  ];
}
function _3IEDWLST_findFirstEnabledItem(items, excludeId) {
  return items.find((item) => {
    if (excludeId) {
      return !item.disabled && item.id !== excludeId;
    }
    return !item.disabled;
  });
}
function getEnabledItem(store, id) {
  if (!id)
    return null;
  return store.item(id) || null;
}
function _3IEDWLST_groupItemsByRows(items) {
  const rows = [];
  for (const item of items) {
    const row = rows.find((currentRow) => {
      var _a;
      return ((_a = currentRow[0]) == null ? void 0 : _a.rowId) === item.rowId;
    });
    if (row) {
      row.push(item);
    } else {
      rows.push([item]);
    }
  }
  return rows;
}
function selectTextField(element, collapseToEnd = false) {
  if (isTextField(element)) {
    element.setSelectionRange(
      collapseToEnd ? element.value.length : 0,
      element.value.length
    );
  } else if (element.isContentEditable) {
    const selection = getDocument(element).getSelection();
    selection == null ? void 0 : selection.selectAllChildren(element);
    if (collapseToEnd) {
      selection == null ? void 0 : selection.collapseToEnd();
    }
  }
}
var FOCUS_SILENTLY = Symbol("FOCUS_SILENTLY");
function focusSilently(element) {
  element[FOCUS_SILENTLY] = true;
  element.focus({ preventScroll: true });
}
function silentlyFocused(element) {
  const isSilentlyFocused = element[FOCUS_SILENTLY];
  delete element[FOCUS_SILENTLY];
  return isSilentlyFocused;
}
function isItem(store, element, exclude) {
  if (!element)
    return false;
  if (element === exclude)
    return false;
  const item = store.item(element.id);
  if (!item)
    return false;
  if (exclude && item.element === exclude)
    return false;
  return true;
}



;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/__chunks/SHA3WOPI.js
"use client";

// src/focusable/focusable-context.ts

var FocusableContext = (0,external_React_.createContext)(true);



;// CONCATENATED MODULE: ./node_modules/@ariakit/core/esm/utils/focus.js
"use client";



// src/utils/focus.ts
var selector = "input:not([type='hidden']):not([disabled]), select:not([disabled]), textarea:not([disabled]), a[href], button:not([disabled]), [tabindex], iframe, object, embed, area[href], audio[controls], video[controls], [contenteditable]:not([contenteditable='false'])";
function hasNegativeTabIndex(element) {
  const tabIndex = parseInt(element.getAttribute("tabindex") || "0", 10);
  return tabIndex < 0;
}
function isFocusable(element) {
  if (!matches(element, selector))
    return false;
  if (!isVisible(element))
    return false;
  if (DLOEKDPY_closest(element, "[inert]"))
    return false;
  return true;
}
function isTabbable(element) {
  if (!isFocusable(element))
    return false;
  if (hasNegativeTabIndex(element))
    return false;
  if (!("form" in element))
    return true;
  if (!element.form)
    return true;
  if (element.checked)
    return true;
  if (element.type !== "radio")
    return true;
  const radioGroup = element.form.elements.namedItem(element.name);
  if (!radioGroup)
    return true;
  if (!("length" in radioGroup))
    return true;
  const activeElement = getActiveElement(element);
  if (!activeElement)
    return true;
  if (activeElement === element)
    return true;
  if (!("form" in activeElement))
    return true;
  if (activeElement.form !== element.form)
    return true;
  if (activeElement.name !== element.name)
    return true;
  return false;
}
function getAllFocusableIn(container, includeContainer) {
  const elements = Array.from(
    container.querySelectorAll(selector)
  );
  if (includeContainer) {
    elements.unshift(container);
  }
  const focusableElements = elements.filter(isFocusable);
  focusableElements.forEach((element, i) => {
    if (isFrame(element) && element.contentDocument) {
      const frameBody = element.contentDocument.body;
      focusableElements.splice(i, 1, ...getAllFocusableIn(frameBody));
    }
  });
  return focusableElements;
}
function getAllFocusable(includeBody) {
  return getAllFocusableIn(document.body, includeBody);
}
function getFirstFocusableIn(container, includeContainer) {
  const [first] = getAllFocusableIn(container, includeContainer);
  return first || null;
}
function getFirstFocusable(includeBody) {
  return getFirstFocusableIn(document.body, includeBody);
}
function getAllTabbableIn(container, includeContainer, fallbackToFocusable) {
  const elements = Array.from(
    container.querySelectorAll(selector)
  );
  const tabbableElements = elements.filter(isTabbable);
  if (includeContainer && isTabbable(container)) {
    tabbableElements.unshift(container);
  }
  tabbableElements.forEach((element, i) => {
    if (isFrame(element) && element.contentDocument) {
      const frameBody = element.contentDocument.body;
      const allFrameTabbable = getAllTabbableIn(
        frameBody,
        false,
        fallbackToFocusable
      );
      tabbableElements.splice(i, 1, ...allFrameTabbable);
    }
  });
  if (!tabbableElements.length && fallbackToFocusable) {
    return elements;
  }
  return tabbableElements;
}
function getAllTabbable(fallbackToFocusable) {
  return getAllTabbableIn(document.body, false, fallbackToFocusable);
}
function getFirstTabbableIn(container, includeContainer, fallbackToFocusable) {
  const [first] = getAllTabbableIn(
    container,
    includeContainer,
    fallbackToFocusable
  );
  return first || null;
}
function getFirstTabbable(fallbackToFocusable) {
  return getFirstTabbableIn(document.body, false, fallbackToFocusable);
}
function getLastTabbableIn(container, includeContainer, fallbackToFocusable) {
  const allTabbable = getAllTabbableIn(
    container,
    includeContainer,
    fallbackToFocusable
  );
  return allTabbable[allTabbable.length - 1] || null;
}
function getLastTabbable(fallbackToFocusable) {
  return getLastTabbableIn(document.body, false, fallbackToFocusable);
}
function getNextTabbableIn(container, includeContainer, fallbackToFirst, fallbackToFocusable) {
  const activeElement = getActiveElement(container);
  const allFocusable = getAllFocusableIn(container, includeContainer);
  const activeIndex = allFocusable.indexOf(activeElement);
  const nextFocusableElements = allFocusable.slice(activeIndex + 1);
  return nextFocusableElements.find(isTabbable) || (fallbackToFirst ? allFocusable.find(isTabbable) : null) || (fallbackToFocusable ? nextFocusableElements[0] : null) || null;
}
function getNextTabbable(fallbackToFirst, fallbackToFocusable) {
  return getNextTabbableIn(
    document.body,
    false,
    fallbackToFirst,
    fallbackToFocusable
  );
}
function getPreviousTabbableIn(container, includeContainer, fallbackToLast, fallbackToFocusable) {
  const activeElement = getActiveElement(container);
  const allFocusable = getAllFocusableIn(container, includeContainer).reverse();
  const activeIndex = allFocusable.indexOf(activeElement);
  const previousFocusableElements = allFocusable.slice(activeIndex + 1);
  return previousFocusableElements.find(isTabbable) || (fallbackToLast ? allFocusable.find(isTabbable) : null) || (fallbackToFocusable ? previousFocusableElements[0] : null) || null;
}
function getPreviousTabbable(fallbackToFirst, fallbackToFocusable) {
  return getPreviousTabbableIn(
    document.body,
    false,
    fallbackToFirst,
    fallbackToFocusable
  );
}
function getClosestFocusable(element) {
  while (element && !isFocusable(element)) {
    element = closest(element, selector);
  }
  return element || null;
}
function hasFocus(element) {
  const activeElement = DLOEKDPY_getActiveElement(element);
  if (!activeElement)
    return false;
  if (activeElement === element)
    return true;
  const activeDescendant = activeElement.getAttribute("aria-activedescendant");
  if (!activeDescendant)
    return false;
  return activeDescendant === element.id;
}
function hasFocusWithin(element) {
  const activeElement = DLOEKDPY_getActiveElement(element);
  if (!activeElement)
    return false;
  if (contains(element, activeElement))
    return true;
  const activeDescendant = activeElement.getAttribute("aria-activedescendant");
  if (!activeDescendant)
    return false;
  if (!("id" in element))
    return false;
  if (activeDescendant === element.id)
    return true;
  return !!element.querySelector(`#${CSS.escape(activeDescendant)}`);
}
function focusIfNeeded(element) {
  if (!hasFocusWithin(element) && isFocusable(element)) {
    element.focus();
  }
}
function disableFocus(element) {
  var _a;
  const currentTabindex = (_a = element.getAttribute("tabindex")) != null ? _a : "";
  element.setAttribute("data-tabindex", currentTabindex);
  element.setAttribute("tabindex", "-1");
}
function disableFocusIn(container, includeContainer) {
  const tabbableElements = getAllTabbableIn(container, includeContainer);
  tabbableElements.forEach(disableFocus);
}
function restoreFocusIn(container) {
  const elements = container.querySelectorAll("[data-tabindex]");
  const restoreTabIndex = (element) => {
    const tabindex = element.getAttribute("data-tabindex");
    element.removeAttribute("data-tabindex");
    if (tabindex) {
      element.setAttribute("tabindex", tabindex);
    } else {
      element.removeAttribute("tabindex");
    }
  };
  if (container.hasAttribute("data-tabindex")) {
    restoreTabIndex(container);
  }
  elements.forEach(restoreTabIndex);
}
function focusIntoView(element, options) {
  if (!("scrollIntoView" in element)) {
    element.focus();
  } else {
    element.focus({ preventScroll: true });
    element.scrollIntoView(_chunks_4R3V3JGP_spreadValues({ block: "nearest", inline: "nearest" }, options));
  }
}


;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/__chunks/KK7H3W2B.js
"use client";





// src/focusable/focusable.ts






var isSafariBrowser = isSafari();
var alwaysFocusVisibleInputTypes = [
  "text",
  "search",
  "url",
  "tel",
  "email",
  "password",
  "number",
  "date",
  "month",
  "week",
  "time",
  "datetime",
  "datetime-local"
];
function isAlwaysFocusVisible(element) {
  const { tagName, readOnly, type } = element;
  if (tagName === "TEXTAREA" && !readOnly)
    return true;
  if (tagName === "SELECT" && !readOnly)
    return true;
  if (tagName === "INPUT" && !readOnly) {
    return alwaysFocusVisibleInputTypes.includes(type);
  }
  if (element.isContentEditable)
    return true;
  return false;
}
function isAlwaysFocusVisibleDelayed(element) {
  const role = element.getAttribute("role");
  if (role !== "combobox")
    return false;
  return !!element.dataset.name;
}
function getLabels(element) {
  if ("labels" in element) {
    return element.labels;
  }
  return null;
}
function isNativeCheckboxOrRadio(element) {
  const tagName = element.tagName.toLowerCase();
  if (tagName === "input" && element.type) {
    return element.type === "radio" || element.type === "checkbox";
  }
  return false;
}
function isNativeTabbable(tagName) {
  if (!tagName)
    return true;
  return tagName === "button" || tagName === "input" || tagName === "select" || tagName === "textarea" || tagName === "a";
}
function supportsDisabledAttribute(tagName) {
  if (!tagName)
    return true;
  return tagName === "button" || tagName === "input" || tagName === "select" || tagName === "textarea";
}
function getTabIndex(focusable, trulyDisabled, nativeTabbable, supportsDisabled, tabIndexProp) {
  if (!focusable) {
    return tabIndexProp;
  }
  if (trulyDisabled) {
    if (nativeTabbable && !supportsDisabled) {
      return -1;
    }
    return;
  }
  if (nativeTabbable) {
    return tabIndexProp;
  }
  return tabIndexProp || 0;
}
function useDisableEvent(onEvent, disabled) {
  return useEvent((event) => {
    onEvent == null ? void 0 : onEvent(event);
    if (event.defaultPrevented)
      return;
    if (disabled) {
      event.stopPropagation();
      event.preventDefault();
    }
  });
}
var isKeyboardModality = true;
function onGlobalMouseDown(event) {
  const target = event.target;
  if (target && "hasAttribute" in target) {
    if (!target.hasAttribute("data-focus-visible")) {
      isKeyboardModality = false;
    }
  }
}
function onGlobalKeyDown(event) {
  if (event.metaKey)
    return;
  if (event.ctrlKey)
    return;
  if (event.altKey)
    return;
  isKeyboardModality = true;
}
var useFocusable = createHook(
  (_a) => {
    var _b = _a, {
      focusable = true,
      accessibleWhenDisabled,
      autoFocus,
      onFocusVisible
    } = _b, props = __objRest(_b, [
      "focusable",
      "accessibleWhenDisabled",
      "autoFocus",
      "onFocusVisible"
    ]);
    const ref = (0,external_React_.useRef)(null);
    (0,external_React_.useEffect)(() => {
      if (!focusable)
        return;
      addGlobalEventListener("mousedown", onGlobalMouseDown, true);
      addGlobalEventListener("keydown", onGlobalKeyDown, true);
    }, [focusable]);
    if (isSafariBrowser) {
      (0,external_React_.useEffect)(() => {
        if (!focusable)
          return;
        const element = ref.current;
        if (!element)
          return;
        if (!isNativeCheckboxOrRadio(element))
          return;
        const labels = getLabels(element);
        if (!labels)
          return;
        const onMouseUp = () => queueMicrotask(() => element.focus());
        labels.forEach((label) => label.addEventListener("mouseup", onMouseUp));
        return () => {
          labels.forEach(
            (label) => label.removeEventListener("mouseup", onMouseUp)
          );
        };
      }, [focusable]);
    }
    const disabled = focusable && disabledFromProps(props);
    const trulyDisabled = !!disabled && !accessibleWhenDisabled;
    const [focusVisible, setFocusVisible] = (0,external_React_.useState)(false);
    (0,external_React_.useEffect)(() => {
      if (!focusable)
        return;
      if (trulyDisabled && focusVisible) {
        setFocusVisible(false);
      }
    }, [focusable, trulyDisabled, focusVisible]);
    (0,external_React_.useEffect)(() => {
      if (!focusable)
        return;
      if (!focusVisible)
        return;
      const element = ref.current;
      if (!element)
        return;
      if (typeof IntersectionObserver === "undefined")
        return;
      const observer = new IntersectionObserver(() => {
        if (!isFocusable(element)) {
          setFocusVisible(false);
        }
      });
      observer.observe(element);
      return () => observer.disconnect();
    }, [focusable, focusVisible]);
    const onKeyPressCapture = useDisableEvent(
      props.onKeyPressCapture,
      disabled
    );
    const onMouseDownCapture = useDisableEvent(
      props.onMouseDownCapture,
      disabled
    );
    const onClickCapture = useDisableEvent(props.onClickCapture, disabled);
    const onMouseDownProp = props.onMouseDown;
    const onMouseDown = useEvent((event) => {
      onMouseDownProp == null ? void 0 : onMouseDownProp(event);
      if (event.defaultPrevented)
        return;
      if (!focusable)
        return;
      const element = event.currentTarget;
      if (!isSafariBrowser)
        return;
      if (isPortalEvent(event))
        return;
      if (!isButton(element) && !isNativeCheckboxOrRadio(element))
        return;
      let receivedFocus = false;
      const onFocus = () => {
        receivedFocus = true;
      };
      const options = { capture: true, once: true };
      element.addEventListener("focusin", onFocus, options);
      queueBeforeEvent(element, "mouseup", () => {
        element.removeEventListener("focusin", onFocus, true);
        if (receivedFocus)
          return;
        focusIfNeeded(element);
      });
    });
    const handleFocusVisible = (event, currentTarget) => {
      if (currentTarget) {
        event.currentTarget = currentTarget;
      }
      if (!focusable)
        return;
      const element = event.currentTarget;
      if (!element)
        return;
      if (!hasFocus(element))
        return;
      onFocusVisible == null ? void 0 : onFocusVisible(event);
      if (event.defaultPrevented)
        return;
      setFocusVisible(true);
    };
    const onKeyDownCaptureProp = props.onKeyDownCapture;
    const onKeyDownCapture = useEvent(
      (event) => {
        onKeyDownCaptureProp == null ? void 0 : onKeyDownCaptureProp(event);
        if (event.defaultPrevented)
          return;
        if (!focusable)
          return;
        if (focusVisible)
          return;
        if (event.metaKey)
          return;
        if (event.altKey)
          return;
        if (event.ctrlKey)
          return;
        if (!isSelfTarget(event))
          return;
        const element = event.currentTarget;
        queueMicrotask(() => handleFocusVisible(event, element));
      }
    );
    const onFocusCaptureProp = props.onFocusCapture;
    const onFocusCapture = useEvent((event) => {
      onFocusCaptureProp == null ? void 0 : onFocusCaptureProp(event);
      if (event.defaultPrevented)
        return;
      if (!focusable)
        return;
      if (!isSelfTarget(event)) {
        setFocusVisible(false);
        return;
      }
      const element = event.currentTarget;
      const applyFocusVisible = () => handleFocusVisible(event, element);
      if (isKeyboardModality || isAlwaysFocusVisible(event.target)) {
        queueMicrotask(applyFocusVisible);
      } else if (isAlwaysFocusVisibleDelayed(event.target)) {
        queueBeforeEvent(event.target, "focusout", applyFocusVisible);
      } else {
        setFocusVisible(false);
      }
    });
    const onBlurProp = props.onBlur;
    const onBlur = useEvent((event) => {
      onBlurProp == null ? void 0 : onBlurProp(event);
      if (!focusable)
        return;
      if (!isFocusEventOutside(event))
        return;
      setFocusVisible(false);
    });
    const autoFocusOnShow = (0,external_React_.useContext)(FocusableContext);
    const autoFocusRef = useEvent((element) => {
      if (!focusable)
        return;
      if (!autoFocus)
        return;
      if (!element)
        return;
      if (!autoFocusOnShow)
        return;
      queueMicrotask(() => {
        if (hasFocus(element))
          return;
        if (!isFocusable(element))
          return;
        element.focus();
      });
    });
    const tagName = useTagName(ref, props.as);
    const nativeTabbable = focusable && isNativeTabbable(tagName);
    const supportsDisabled = focusable && supportsDisabledAttribute(tagName);
    const style = trulyDisabled ? _4R3V3JGP_spreadValues({ pointerEvents: "none" }, props.style) : props.style;
    props = _4R3V3JGP_spreadProps(_4R3V3JGP_spreadValues({
      "data-focus-visible": focusable && focusVisible ? "" : void 0,
      "data-autofocus": autoFocus ? true : void 0,
      "aria-disabled": disabled ? true : void 0
    }, props), {
      ref: useMergeRefs(ref, autoFocusRef, props.ref),
      style,
      tabIndex: getTabIndex(
        focusable,
        trulyDisabled,
        nativeTabbable,
        supportsDisabled,
        props.tabIndex
      ),
      disabled: supportsDisabled && trulyDisabled ? true : void 0,
      // TODO: Test Focusable contentEditable.
      contentEditable: disabled ? void 0 : props.contentEditable,
      onKeyPressCapture,
      onClickCapture,
      onMouseDownCapture,
      onMouseDown,
      onKeyDownCapture,
      onFocusCapture,
      onBlur
    });
    return props;
  }
);
var Focusable = createComponent((props) => {
  props = useFocusable(props);
  return _3ORBWXWF_createElement("div", props);
});
if (false) {}



;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/__chunks/7QTPYGNZ.js
"use client";







// src/composite/composite.tsx







function isGrid(items) {
  return items.some((item) => !!item.rowId);
}
function isPrintableKey(event) {
  const target = event.target;
  if (target && !DLOEKDPY_isTextField(target))
    return false;
  return event.key.length === 1 && !event.ctrlKey && !event.metaKey;
}
function isModifierKey(event) {
  return event.key === "Shift" || event.key === "Control" || event.key === "Alt" || event.key === "Meta";
}
function useKeyboardEventProxy(store, onKeyboardEvent, previousElementRef) {
  return useEvent((event) => {
    var _a;
    onKeyboardEvent == null ? void 0 : onKeyboardEvent(event);
    if (event.defaultPrevented)
      return;
    if (event.isPropagationStopped())
      return;
    if (!isSelfTarget(event))
      return;
    if (isModifierKey(event))
      return;
    if (isPrintableKey(event))
      return;
    const state = store.getState();
    const activeElement = (_a = getEnabledItem(store, state.activeId)) == null ? void 0 : _a.element;
    if (!activeElement)
      return;
    const _b = event, { view } = _b, eventInit = __objRest(_b, ["view"]);
    const previousElement = previousElementRef == null ? void 0 : previousElementRef.current;
    if (activeElement !== previousElement) {
      activeElement.focus();
    }
    if (!fireKeyboardEvent(activeElement, event.type, eventInit)) {
      event.preventDefault();
    }
    if (event.currentTarget.contains(activeElement)) {
      event.stopPropagation();
    }
  });
}
function findFirstEnabledItemInTheLastRow(items) {
  return _3IEDWLST_findFirstEnabledItem(
    flatten2DArray(reverseArray(_3IEDWLST_groupItemsByRows(items)))
  );
}
function useScheduleFocus(store) {
  const [scheduled, setScheduled] = (0,external_React_.useState)(false);
  const schedule = (0,external_React_.useCallback)(() => setScheduled(true), []);
  const activeItem = store.useState(
    (state) => getEnabledItem(store, state.activeId)
  );
  (0,external_React_.useEffect)(() => {
    const activeElement = activeItem == null ? void 0 : activeItem.element;
    if (!scheduled)
      return;
    if (!activeElement)
      return;
    setScheduled(false);
    activeElement.focus({ preventScroll: true });
  }, [activeItem, scheduled]);
  return schedule;
}
var useComposite = createHook(
  (_a) => {
    var _b = _a, {
      store,
      composite = true,
      focusOnMove = composite,
      moveOnKeyPress = true
    } = _b, props = __objRest(_b, [
      "store",
      "composite",
      "focusOnMove",
      "moveOnKeyPress"
    ]);
    const context = useCompositeProviderContext();
    store = store || context;
    invariant(
      store,
       false && 0
    );
    const previousElementRef = (0,external_React_.useRef)(null);
    const scheduleFocus = useScheduleFocus(store);
    const moves = store.useState("moves");
    (0,external_React_.useEffect)(() => {
      var _a2;
      if (!store)
        return;
      if (!moves)
        return;
      if (!composite)
        return;
      if (!focusOnMove)
        return;
      const { activeId: activeId2 } = store.getState();
      const itemElement = (_a2 = getEnabledItem(store, activeId2)) == null ? void 0 : _a2.element;
      if (!itemElement)
        return;
      focusIntoView(itemElement);
    }, [store, moves, composite, focusOnMove]);
    useSafeLayoutEffect(() => {
      if (!store)
        return;
      if (!moves)
        return;
      if (!composite)
        return;
      const { baseElement, activeId: activeId2 } = store.getState();
      const isSelfAcive = activeId2 === null;
      if (!isSelfAcive)
        return;
      if (!baseElement)
        return;
      const previousElement = previousElementRef.current;
      previousElementRef.current = null;
      if (previousElement) {
        fireBlurEvent(previousElement, { relatedTarget: baseElement });
      }
      if (!hasFocus(baseElement)) {
        baseElement.focus();
      }
    }, [store, moves, composite]);
    const activeId = store.useState("activeId");
    const virtualFocus = store.useState("virtualFocus");
    useSafeLayoutEffect(() => {
      var _a2;
      if (!store)
        return;
      if (!composite)
        return;
      if (!virtualFocus)
        return;
      const previousElement = previousElementRef.current;
      previousElementRef.current = null;
      if (!previousElement)
        return;
      const activeElement = (_a2 = getEnabledItem(store, activeId)) == null ? void 0 : _a2.element;
      const relatedTarget = activeElement || DLOEKDPY_getActiveElement(previousElement);
      if (relatedTarget === previousElement)
        return;
      fireBlurEvent(previousElement, { relatedTarget });
    }, [store, activeId, virtualFocus, composite]);
    const onKeyDownCapture = useKeyboardEventProxy(
      store,
      props.onKeyDownCapture,
      previousElementRef
    );
    const onKeyUpCapture = useKeyboardEventProxy(
      store,
      props.onKeyUpCapture,
      previousElementRef
    );
    const onFocusCaptureProp = props.onFocusCapture;
    const onFocusCapture = useEvent((event) => {
      onFocusCaptureProp == null ? void 0 : onFocusCaptureProp(event);
      if (event.defaultPrevented)
        return;
      if (!store)
        return;
      const { virtualFocus: virtualFocus2 } = store.getState();
      if (!virtualFocus2)
        return;
      const previousActiveElement = event.relatedTarget;
      const isSilentlyFocused = silentlyFocused(event.currentTarget);
      if (isSelfTarget(event) && isSilentlyFocused) {
        event.stopPropagation();
        previousElementRef.current = previousActiveElement;
      }
    });
    const onFocusProp = props.onFocus;
    const onFocus = useEvent((event) => {
      onFocusProp == null ? void 0 : onFocusProp(event);
      if (event.defaultPrevented)
        return;
      if (!composite)
        return;
      if (!store)
        return;
      const { relatedTarget } = event;
      const { virtualFocus: virtualFocus2 } = store.getState();
      if (virtualFocus2) {
        if (isSelfTarget(event) && !isItem(store, relatedTarget)) {
          queueMicrotask(scheduleFocus);
        }
      } else if (isSelfTarget(event)) {
        store.setActiveId(null);
      }
    });
    const onBlurCaptureProp = props.onBlurCapture;
    const onBlurCapture = useEvent((event) => {
      var _a2;
      onBlurCaptureProp == null ? void 0 : onBlurCaptureProp(event);
      if (event.defaultPrevented)
        return;
      if (!store)
        return;
      const { virtualFocus: virtualFocus2, activeId: activeId2 } = store.getState();
      if (!virtualFocus2)
        return;
      const activeElement = (_a2 = getEnabledItem(store, activeId2)) == null ? void 0 : _a2.element;
      const nextActiveElement = event.relatedTarget;
      const nextActiveElementIsItem = isItem(store, nextActiveElement);
      const previousElement = previousElementRef.current;
      previousElementRef.current = null;
      if (isSelfTarget(event) && nextActiveElementIsItem) {
        if (nextActiveElement === activeElement) {
          if (previousElement && previousElement !== nextActiveElement) {
            fireBlurEvent(previousElement, event);
          }
        } else if (activeElement) {
          fireBlurEvent(activeElement, event);
        } else if (previousElement) {
          fireBlurEvent(previousElement, event);
        }
        event.stopPropagation();
      } else {
        const targetIsItem = isItem(store, event.target);
        if (!targetIsItem && activeElement) {
          fireBlurEvent(activeElement, event);
        }
      }
    });
    const onKeyDownProp = props.onKeyDown;
    const moveOnKeyPressProp = useBooleanEvent(moveOnKeyPress);
    const onKeyDown = useEvent((event) => {
      var _a2;
      onKeyDownProp == null ? void 0 : onKeyDownProp(event);
      if (event.defaultPrevented)
        return;
      if (!store)
        return;
      if (!isSelfTarget(event))
        return;
      const { orientation, items, renderedItems, activeId: activeId2 } = store.getState();
      const activeItem = getEnabledItem(store, activeId2);
      if ((_a2 = activeItem == null ? void 0 : activeItem.element) == null ? void 0 : _a2.isConnected)
        return;
      const isVertical = orientation !== "horizontal";
      const isHorizontal = orientation !== "vertical";
      const grid = isGrid(renderedItems);
      const isHorizontalKey = event.key === "ArrowLeft" || event.key === "ArrowRight" || event.key === "Home" || event.key === "End";
      if (isHorizontalKey && DLOEKDPY_isTextField(event.currentTarget))
        return;
      const up = () => {
        if (grid) {
          const item = items && findFirstEnabledItemInTheLastRow(items);
          return item == null ? void 0 : item.id;
        }
        return store == null ? void 0 : store.last();
      };
      const keyMap = {
        ArrowUp: (grid || isVertical) && up,
        ArrowRight: (grid || isHorizontal) && store.first,
        ArrowDown: (grid || isVertical) && store.first,
        ArrowLeft: (grid || isHorizontal) && store.last,
        Home: store.first,
        End: store.last,
        PageUp: store.first,
        PageDown: store.last
      };
      const action = keyMap[event.key];
      if (action) {
        const id = action();
        if (id !== void 0) {
          if (!moveOnKeyPressProp(event))
            return;
          event.preventDefault();
          store.move(id);
        }
      }
    });
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ (0,jsx_runtime.jsx)(CompositeContextProvider, { value: store, children: element }),
      [store]
    );
    const activeDescendant = store.useState((state) => {
      var _a2;
      if (!store)
        return;
      if (!composite)
        return;
      if (!state.virtualFocus)
        return;
      return (_a2 = getEnabledItem(store, state.activeId)) == null ? void 0 : _a2.id;
    });
    props = _4R3V3JGP_spreadProps(_4R3V3JGP_spreadValues({
      "aria-activedescendant": activeDescendant
    }, props), {
      ref: useMergeRefs(composite ? store.setBaseElement : null, props.ref),
      onKeyDownCapture,
      onKeyUpCapture,
      onFocusCapture,
      onFocus,
      onBlurCapture,
      onKeyDown
    });
    const focusable = store.useState(
      (state) => composite && (state.virtualFocus || state.activeId === null)
    );
    props = useFocusable(_4R3V3JGP_spreadValues({ focusable }, props));
    return props;
  }
);
var _7QTPYGNZ_Composite = createComponent((props) => {
  const htmlProps = useComposite(props);
  return _3ORBWXWF_createElement("div", htmlProps);
});
if (false) {}



;// CONCATENATED MODULE: external "ReactDOM"
const external_ReactDOM_namespaceObject = window["ReactDOM"];
;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/combobox/combobox.js
"use client";
















// src/combobox/combobox.ts






function isFirstItemAutoSelected(items, activeValue, autoSelect) {
  if (!autoSelect)
    return false;
  const firstItem = items.find((item) => !item.disabled && item.value);
  return (firstItem == null ? void 0 : firstItem.value) === activeValue;
}
function hasCompletionString(value, activeValue) {
  if (!activeValue)
    return false;
  if (value == null)
    return false;
  value = normalizeString(value);
  return activeValue.length > value.length && activeValue.toLowerCase().indexOf(value.toLowerCase()) === 0;
}
function isInputEvent(event) {
  return event.type === "input";
}
function isAriaAutoCompleteValue(value) {
  return value === "inline" || value === "list" || value === "both" || value === "none";
}
var useCombobox = createHook(
  (_a) => {
    var _b = _a, {
      store,
      focusable = true,
      autoSelect: autoSelectProp = false,
      getAutoSelectId,
      showOnChange = true,
      setValueOnChange = true,
      showOnMouseDown = true,
      setValueOnClick = true,
      showOnKeyDown = true,
      moveOnKeyPress = true,
      autoComplete = "list"
    } = _b, props = __objRest(_b, [
      "store",
      "focusable",
      "autoSelect",
      "getAutoSelectId",
      "showOnChange",
      "setValueOnChange",
      "showOnMouseDown",
      "setValueOnClick",
      "showOnKeyDown",
      "moveOnKeyPress",
      "autoComplete"
    ]);
    const context = useComboboxProviderContext();
    store = store || context;
    invariant(
      store,
       false && 0
    );
    const ref = (0,external_React_.useRef)(null);
    const [valueUpdated, forceValueUpdate] = useForceUpdate();
    const canAutoSelectRef = (0,external_React_.useRef)(false);
    const composingRef = (0,external_React_.useRef)(false);
    const autoSelect = store.useState(
      (state) => !!autoSelectProp && state.virtualFocus
    );
    const inline = autoComplete === "inline" || autoComplete === "both";
    const [canInline, setCanInline] = (0,external_React_.useState)(inline);
    useUpdateLayoutEffect(() => {
      if (!inline)
        return;
      setCanInline(true);
    }, [inline]);
    const storeValue = store.useState("value");
    const activeValue = store.useState(
      (state) => inline && canInline ? state.activeValue : void 0
    );
    const items = store.useState("renderedItems");
    const open = store.useState("open");
    const contentElement = store.useState("contentElement");
    const value = (0,external_React_.useMemo)(() => {
      if (!inline)
        return storeValue;
      if (!canInline)
        return storeValue;
      const firstItemAutoSelected = isFirstItemAutoSelected(
        items,
        activeValue,
        autoSelect
      );
      if (firstItemAutoSelected) {
        if (hasCompletionString(storeValue, activeValue)) {
          const slice = (activeValue == null ? void 0 : activeValue.slice(storeValue.length)) || "";
          return storeValue + slice;
        }
        return storeValue;
      }
      return activeValue || storeValue;
    }, [inline, canInline, items, activeValue, autoSelect, storeValue]);
    (0,external_React_.useEffect)(() => {
      const element = ref.current;
      if (!element)
        return;
      const onCompositeItemMove = () => setCanInline(true);
      element.addEventListener("combobox-item-move", onCompositeItemMove);
      return () => {
        element.removeEventListener("combobox-item-move", onCompositeItemMove);
      };
    }, []);
    (0,external_React_.useEffect)(() => {
      if (!inline)
        return;
      if (!canInline)
        return;
      if (!activeValue)
        return;
      const firstItemAutoSelected = isFirstItemAutoSelected(
        items,
        activeValue,
        autoSelect
      );
      if (!firstItemAutoSelected)
        return;
      if (!hasCompletionString(storeValue, activeValue))
        return;
      queueMicrotask(() => {
        const element = ref.current;
        if (!element)
          return;
        setSelectionRange(element, storeValue.length, activeValue.length);
      });
    }, [
      valueUpdated,
      inline,
      canInline,
      activeValue,
      items,
      autoSelect,
      storeValue
    ]);
    const scrollingElementRef = (0,external_React_.useRef)(null);
    const getAutoSelectIdProp = useEvent(getAutoSelectId);
    const autoSelectIdRef = (0,external_React_.useRef)(null);
    (0,external_React_.useEffect)(() => {
      if (!open)
        return;
      if (!contentElement)
        return;
      const scrollingElement = getScrollingElement(contentElement);
      if (!scrollingElement)
        return;
      scrollingElementRef.current = scrollingElement;
      const onWheel = () => {
        canAutoSelectRef.current = false;
      };
      const onScroll = () => {
        if (!store)
          return;
        if (!canAutoSelectRef.current)
          return;
        const { activeId } = store.getState();
        if (activeId === null)
          return;
        if (activeId === autoSelectIdRef.current)
          return;
        canAutoSelectRef.current = false;
      };
      const options = { passive: true, capture: true };
      scrollingElement.addEventListener("wheel", onWheel, options);
      scrollingElement.addEventListener("scroll", onScroll, options);
      return () => {
        scrollingElement.removeEventListener("wheel", onWheel, true);
        scrollingElement.removeEventListener("scroll", onScroll, true);
      };
    }, [open, contentElement, store]);
    useSafeLayoutEffect(() => {
      if (!storeValue)
        return;
      if (composingRef.current)
        return;
      canAutoSelectRef.current = true;
    }, [storeValue]);
    useSafeLayoutEffect(() => {
      if (open)
        return;
      canAutoSelectRef.current = false;
    }, [open]);
    const resetValueOnSelect = store.useState("resetValueOnSelect");
    useUpdateEffect(() => {
      var _a2;
      const canAutoSelect = canAutoSelectRef.current;
      if (!store)
        return;
      if ((!autoSelect || !canAutoSelect) && !resetValueOnSelect)
        return;
      const { baseElement, contentElement: contentElement2, activeId } = store.getState();
      if (baseElement && !hasFocus(baseElement))
        return;
      if (contentElement2 == null ? void 0 : contentElement2.hasAttribute("data-placing")) {
        const observer = new MutationObserver(forceValueUpdate);
        observer.observe(contentElement2, { attributeFilter: ["data-placing"] });
        return () => observer.disconnect();
      }
      if (autoSelect && canAutoSelect) {
        const userAutoSelectId = getAutoSelectIdProp(items);
        const autoSelectId = userAutoSelectId !== void 0 ? userAutoSelectId : store.first();
        autoSelectIdRef.current = autoSelectId;
        store.move(autoSelectId != null ? autoSelectId : null);
      } else {
        const element = (_a2 = store.item(activeId)) == null ? void 0 : _a2.element;
        if (element && "scrollIntoView" in element) {
          element.scrollIntoView({ block: "nearest", inline: "nearest" });
        }
      }
      return;
    }, [
      store,
      valueUpdated,
      storeValue,
      autoSelect,
      resetValueOnSelect,
      getAutoSelectIdProp,
      items
    ]);
    (0,external_React_.useEffect)(() => {
      if (!inline)
        return;
      const combobox = ref.current;
      if (!combobox)
        return;
      const elements = [combobox, contentElement].filter(
        (value2) => !!value2
      );
      const onBlur2 = (event) => {
        if (elements.every((el) => isFocusEventOutside(event, el))) {
          store == null ? void 0 : store.setValue(value);
        }
      };
      elements.forEach((el) => el.addEventListener("focusout", onBlur2));
      return () => {
        elements.forEach((el) => el.removeEventListener("focusout", onBlur2));
      };
    }, [inline, contentElement, store, value]);
    const onChangeProp = props.onChange;
    const showOnChangeProp = useBooleanEvent(showOnChange);
    const setValueOnChangeProp = useBooleanEvent(setValueOnChange);
    const onChange = useEvent((event) => {
      onChangeProp == null ? void 0 : onChangeProp(event);
      if (event.defaultPrevented)
        return;
      if (!store)
        return;
      const { value: value2, selectionStart, selectionEnd } = event.target;
      const nativeEvent = event.nativeEvent;
      canAutoSelectRef.current = true;
      if (isInputEvent(nativeEvent)) {
        if (nativeEvent.isComposing) {
          canAutoSelectRef.current = false;
          composingRef.current = true;
        }
        if (inline) {
          const textInserted = nativeEvent.inputType === "insertText" || nativeEvent.inputType === "insertCompositionText";
          const caretAtEnd = selectionStart === value2.length;
          setCanInline(textInserted && caretAtEnd);
        }
      }
      if (setValueOnChangeProp(event)) {
        const isSameValue = value2 === store.getState().value;
        (0,external_ReactDOM_namespaceObject.flushSync)(() => store == null ? void 0 : store.setValue(value2));
        setSelectionRange(event.currentTarget, selectionStart, selectionEnd);
        if (inline && autoSelect && isSameValue) {
          forceValueUpdate();
        }
      }
      if (showOnChangeProp(event)) {
        store.show();
      }
      if (!autoSelect || !canAutoSelectRef.current) {
        store.setActiveId(null);
      }
    });
    const onCompositionEndProp = props.onCompositionEnd;
    const onCompositionEnd = useEvent(
      (event) => {
        canAutoSelectRef.current = true;
        composingRef.current = false;
        onCompositionEndProp == null ? void 0 : onCompositionEndProp(event);
        if (event.defaultPrevented)
          return;
        if (!autoSelect)
          return;
        forceValueUpdate();
      }
    );
    const onMouseDownProp = props.onMouseDown;
    const setValueOnClickProp = useBooleanEvent(setValueOnClick);
    const showOnMouseDownProp = useBooleanEvent(showOnMouseDown);
    const onMouseDown = useEvent((event) => {
      onMouseDownProp == null ? void 0 : onMouseDownProp(event);
      if (event.defaultPrevented)
        return;
      if (event.button)
        return;
      if (event.ctrlKey)
        return;
      if (!store)
        return;
      store.setActiveId(null);
      if (setValueOnClickProp(event)) {
        store.setValue(value);
      }
      if (showOnMouseDownProp(event)) {
        queueBeforeEvent(event.currentTarget, "mouseup", store.show);
      }
    });
    const onKeyDownProp = props.onKeyDown;
    const showOnKeyDownProp = useBooleanEvent(showOnKeyDown);
    const onKeyDown = useEvent(
      (event) => {
        onKeyDownProp == null ? void 0 : onKeyDownProp(event);
        if (!event.repeat) {
          canAutoSelectRef.current = false;
        }
        if (event.defaultPrevented)
          return;
        if (event.ctrlKey)
          return;
        if (event.altKey)
          return;
        if (event.shiftKey)
          return;
        if (event.metaKey)
          return;
        if (!store)
          return;
        const { open: open2, activeId } = store.getState();
        if (open2)
          return;
        if (activeId !== null)
          return;
        if (event.key === "ArrowUp" || event.key === "ArrowDown") {
          if (showOnKeyDownProp(event)) {
            event.preventDefault();
            store.show();
          }
        }
      }
    );
    const onBlurProp = props.onBlur;
    const onBlur = useEvent((event) => {
      canAutoSelectRef.current = false;
      onBlurProp == null ? void 0 : onBlurProp(event);
      if (event.defaultPrevented)
        return;
    });
    const id = useId(props.id);
    const ariaAutoComplete = isAriaAutoCompleteValue(autoComplete) ? autoComplete : void 0;
    const isActiveItem = store.useState((state) => state.activeId === null);
    props = _4R3V3JGP_spreadProps(_4R3V3JGP_spreadValues({
      id,
      role: "combobox",
      "aria-autocomplete": ariaAutoComplete,
      "aria-haspopup": getPopupRole(contentElement, "listbox"),
      "aria-expanded": open,
      "aria-controls": contentElement == null ? void 0 : contentElement.id,
      "data-active-item": isActiveItem || void 0,
      value
    }, props), {
      ref: useMergeRefs(ref, props.ref),
      onChange,
      onCompositionEnd,
      onMouseDown,
      onKeyDown,
      onBlur
    });
    props = useComposite(_4R3V3JGP_spreadProps(_4R3V3JGP_spreadValues({
      store,
      focusable
    }, props), {
      // Enable inline autocomplete when the user moves from the combobox input
      // to an item.
      moveOnKeyPress: (event) => {
        if (isFalsyBooleanCallback(moveOnKeyPress, event))
          return false;
        if (inline)
          setCanInline(true);
        return true;
      }
    }));
    props = usePopoverAnchor(_4R3V3JGP_spreadValues({ store }, props));
    return _4R3V3JGP_spreadValues({ autoComplete: "off" }, props);
  }
);
var Combobox = createComponent((props) => {
  const htmlProps = useCombobox(props);
  return _3ORBWXWF_createElement("input", htmlProps);
});
if (false) {}


;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/__chunks/CLE7NTOY.js
"use client";







// src/disclosure/disclosure-content.tsx



function afterTimeout(timeoutMs, cb) {
  const timeoutId = setTimeout(cb, timeoutMs);
  return () => clearTimeout(timeoutId);
}
function CLE7NTOY_afterPaint(cb) {
  let raf = requestAnimationFrame(() => {
    raf = requestAnimationFrame(cb);
  });
  return () => cancelAnimationFrame(raf);
}
function parseCSSTime(...times) {
  return times.join(", ").split(", ").reduce((longestTime, currentTimeString) => {
    const currentTime = parseFloat(currentTimeString || "0s") * 1e3;
    if (currentTime > longestTime)
      return currentTime;
    return longestTime;
  }, 0);
}
function isHidden(mounted, hidden, alwaysVisible) {
  return !alwaysVisible && hidden !== false && (!mounted || !!hidden);
}
var useDisclosureContent = createHook(
  (_a) => {
    var _b = _a, { store, alwaysVisible } = _b, props = __objRest(_b, ["store", "alwaysVisible"]);
    const context = useDisclosureProviderContext();
    store = store || context;
    invariant(
      store,
       false && 0
    );
    const id = useId(props.id);
    const [transition, setTransition] = (0,external_React_.useState)(null);
    const open = store.useState("open");
    const mounted = store.useState("mounted");
    const animated = store.useState("animated");
    const contentElement = store.useState("contentElement");
    useSafeLayoutEffect(() => {
      if (!animated)
        return;
      if (!(contentElement == null ? void 0 : contentElement.isConnected)) {
        setTransition(null);
        return;
      }
      return CLE7NTOY_afterPaint(() => {
        setTransition(open ? "enter" : "leave");
      });
    }, [animated, contentElement, open]);
    useSafeLayoutEffect(() => {
      if (!store)
        return;
      if (!animated)
        return;
      if (!contentElement)
        return;
      if (!transition)
        return;
      if (transition === "enter" && !open)
        return;
      if (transition === "leave" && open)
        return;
      if (typeof animated === "number") {
        const timeoutMs2 = animated;
        return afterTimeout(timeoutMs2, store.stopAnimation);
      }
      const {
        transitionDuration,
        animationDuration,
        transitionDelay,
        animationDelay
      } = getComputedStyle(contentElement);
      const delay = parseCSSTime(transitionDelay, animationDelay);
      const duration = parseCSSTime(transitionDuration, animationDuration);
      const timeoutMs = delay + duration;
      if (!timeoutMs)
        return;
      return afterTimeout(timeoutMs, store.stopAnimation);
    }, [store, animated, contentElement, open, transition]);
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ (0,jsx_runtime.jsx)(DialogScopedContextProvider, { value: store, children: element }),
      [store]
    );
    const hidden = isHidden(mounted, props.hidden, alwaysVisible);
    const style = hidden ? _4R3V3JGP_spreadProps(_4R3V3JGP_spreadValues({}, props.style), { display: "none" }) : props.style;
    props = _4R3V3JGP_spreadProps(_4R3V3JGP_spreadValues({
      id,
      "data-enter": transition === "enter" ? "" : void 0,
      "data-leave": transition === "leave" ? "" : void 0,
      hidden
    }, props), {
      ref: useMergeRefs(id ? store.setContentElement : null, props.ref),
      style
    });
    return props;
  }
);
var DisclosureContentImpl = createComponent(
  (props) => {
    const htmlProps = useDisclosureContent(props);
    return _3ORBWXWF_createElement("div", htmlProps);
  }
);
var DisclosureContent = createComponent(
  (_a) => {
    var _b = _a, { unmountOnHide } = _b, props = __objRest(_b, ["unmountOnHide"]);
    const context = useDisclosureProviderContext();
    const store = props.store || context;
    const mounted = useStoreState(
      store,
      (state) => !unmountOnHide || (state == null ? void 0 : state.mounted)
    );
    if (mounted === false)
      return null;
    return /* @__PURE__ */ (0,jsx_runtime.jsx)(DisclosureContentImpl, _4R3V3JGP_spreadValues({}, props));
  }
);
if (false) {}



;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/__chunks/ZEXNX5JH.js
"use client";







// src/combobox/combobox-list.tsx




var useComboboxList = createHook(
  (_a) => {
    var _b = _a, { store, focusable = true, alwaysVisible } = _b, props = __objRest(_b, ["store", "focusable", "alwaysVisible"]);
    const context = useComboboxProviderContext();
    store = store || context;
    invariant(
      store,
       false && 0
    );
    const ref = (0,external_React_.useRef)(null);
    const id = useId(props.id);
    const onKeyDownProp = props.onKeyDown;
    const onKeyDown = useEvent((event) => {
      onKeyDownProp == null ? void 0 : onKeyDownProp(event);
      if (event.defaultPrevented)
        return;
      if (event.key === "Escape") {
        store == null ? void 0 : store.move(null);
      }
    });
    const restoreVirtualFocus = (0,external_React_.useRef)(false);
    const onFocusVisibleProp = props.onFocusVisible;
    const onFocusVisible = useEvent((event) => {
      onFocusVisibleProp == null ? void 0 : onFocusVisibleProp(event);
      if (event.defaultPrevented)
        return;
      if (event.type !== "focus")
        return;
      if (!store)
        return;
      const { virtualFocus } = store.getState();
      if (!virtualFocus)
        return;
      const { relatedTarget, currentTarget } = event;
      if (relatedTarget && currentTarget.contains(relatedTarget))
        return;
      restoreVirtualFocus.current = true;
      store.setState("virtualFocus", false);
    });
    const onBlurProp = props.onBlur;
    const onBlur = useEvent((event) => {
      onBlurProp == null ? void 0 : onBlurProp(event);
      if (event.defaultPrevented)
        return;
      if (!restoreVirtualFocus.current)
        return;
      if (!isFocusEventOutside(event))
        return;
      restoreVirtualFocus.current = false;
      store == null ? void 0 : store.setState("virtualFocus", true);
    });
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ (0,jsx_runtime.jsx)(ComboboxScopedContextProvider, { value: store, children: element }),
      [store]
    );
    const mounted = store.useState("mounted");
    const hidden = isHidden(mounted, props.hidden, alwaysVisible);
    const style = hidden ? _4R3V3JGP_spreadProps(_4R3V3JGP_spreadValues({}, props.style), { display: "none" }) : props.style;
    const multiSelectable = store.useState(
      (state) => Array.isArray(state.selectedValue)
    );
    const role = useAttribute(ref, "role", props.role);
    const isCompositeRole = role === "listbox" || role === "tree" || role === "grid";
    const ariaMultiSelectable = isCompositeRole ? multiSelectable || void 0 : void 0;
    props = _4R3V3JGP_spreadProps(_4R3V3JGP_spreadValues({
      id,
      hidden,
      role: "listbox",
      tabIndex: focusable ? -1 : void 0,
      "aria-multiselectable": ariaMultiSelectable
    }, props), {
      ref: useMergeRefs(id ? store.setContentElement : null, ref, props.ref),
      style,
      onKeyDown,
      onFocusVisible,
      onBlur
    });
    props = useFocusable(_4R3V3JGP_spreadValues({ focusable }, props));
    return props;
  }
);
var ComboboxList = createComponent((props) => {
  const htmlProps = useComboboxList(props);
  return _3ORBWXWF_createElement("div", htmlProps);
});
if (false) {}



;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/__chunks/G6ONQ5EH.js
"use client";





// src/composite/composite-hover.ts




function getMouseDestination(event) {
  const relatedTarget = event.relatedTarget;
  if ((relatedTarget == null ? void 0 : relatedTarget.nodeType) === Node.ELEMENT_NODE) {
    return relatedTarget;
  }
  return null;
}
function hoveringInside(event) {
  const nextElement = getMouseDestination(event);
  if (!nextElement)
    return false;
  return contains(event.currentTarget, nextElement);
}
var G6ONQ5EH_symbol = Symbol("composite-hover");
function movingToAnotherItem(event) {
  let dest = getMouseDestination(event);
  if (!dest)
    return false;
  do {
    if (Y3OOHFCN_hasOwnProperty(dest, G6ONQ5EH_symbol) && dest[G6ONQ5EH_symbol])
      return true;
    dest = dest.parentElement;
  } while (dest);
  return false;
}
var useCompositeHover = createHook(
  (_a) => {
    var _b = _a, {
      store,
      focusOnHover = true,
      blurOnHoverEnd = !!focusOnHover
    } = _b, props = __objRest(_b, [
      "store",
      "focusOnHover",
      "blurOnHoverEnd"
    ]);
    const context = useCompositeContext();
    store = store || context;
    invariant(
      store,
       false && 0
    );
    const isMouseMoving = useIsMouseMoving();
    const onMouseMoveProp = props.onMouseMove;
    const focusOnHoverProp = useBooleanEvent(focusOnHover);
    const onMouseMove = useEvent((event) => {
      onMouseMoveProp == null ? void 0 : onMouseMoveProp(event);
      if (event.defaultPrevented)
        return;
      if (!isMouseMoving())
        return;
      if (!focusOnHoverProp(event))
        return;
      if (!hasFocusWithin(event.currentTarget)) {
        const baseElement = store == null ? void 0 : store.getState().baseElement;
        if (baseElement && !hasFocus(baseElement)) {
          baseElement.focus();
        }
      }
      store == null ? void 0 : store.setActiveId(event.currentTarget.id);
    });
    const onMouseLeaveProp = props.onMouseLeave;
    const blurOnHoverEndProp = useBooleanEvent(blurOnHoverEnd);
    const onMouseLeave = useEvent((event) => {
      var _a2;
      onMouseLeaveProp == null ? void 0 : onMouseLeaveProp(event);
      if (event.defaultPrevented)
        return;
      if (!isMouseMoving())
        return;
      if (hoveringInside(event))
        return;
      if (movingToAnotherItem(event))
        return;
      if (!focusOnHoverProp(event))
        return;
      if (!blurOnHoverEndProp(event))
        return;
      store == null ? void 0 : store.setActiveId(null);
      (_a2 = store == null ? void 0 : store.getState().baseElement) == null ? void 0 : _a2.focus();
    });
    const ref = (0,external_React_.useCallback)((element) => {
      if (!element)
        return;
      element[G6ONQ5EH_symbol] = true;
    }, []);
    props = _4R3V3JGP_spreadProps(_4R3V3JGP_spreadValues({}, props), {
      ref: useMergeRefs(ref, props.ref),
      onMouseMove,
      onMouseLeave
    });
    return props;
  }
);
var CompositeHover = createMemoComponent(
  (props) => {
    const htmlProps = useCompositeHover(props);
    return _3ORBWXWF_createElement("div", htmlProps);
  }
);
if (false) {}



;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/__chunks/NWCBQ4CV.js
"use client";





// src/command/command.ts





function isNativeClick(event) {
  if (!event.isTrusted)
    return false;
  const element = event.currentTarget;
  if (event.key === "Enter") {
    return isButton(element) || element.tagName === "SUMMARY" || element.tagName === "A";
  }
  if (event.key === " ") {
    return isButton(element) || element.tagName === "SUMMARY" || element.tagName === "INPUT" || element.tagName === "SELECT";
  }
  return false;
}
var NWCBQ4CV_symbol = Symbol("command");
var useCommand = createHook(
  (_a) => {
    var _b = _a, { clickOnEnter = true, clickOnSpace = true } = _b, props = __objRest(_b, ["clickOnEnter", "clickOnSpace"]);
    const ref = (0,external_React_.useRef)(null);
    const tagName = useTagName(ref, props.as);
    const type = props.type;
    const [isNativeButton, setIsNativeButton] = (0,external_React_.useState)(
      () => !!tagName && isButton({ tagName, type })
    );
    (0,external_React_.useEffect)(() => {
      if (!ref.current)
        return;
      setIsNativeButton(isButton(ref.current));
    }, []);
    const [active, setActive] = (0,external_React_.useState)(false);
    const activeRef = (0,external_React_.useRef)(false);
    const disabled = disabledFromProps(props);
    const [isDuplicate, metadataProps] = useMetadataProps(props, NWCBQ4CV_symbol, true);
    const onKeyDownProp = props.onKeyDown;
    const onKeyDown = useEvent((event) => {
      onKeyDownProp == null ? void 0 : onKeyDownProp(event);
      const element = event.currentTarget;
      if (event.defaultPrevented)
        return;
      if (isDuplicate)
        return;
      if (disabled)
        return;
      if (!isSelfTarget(event))
        return;
      if (DLOEKDPY_isTextField(element))
        return;
      if (element.isContentEditable)
        return;
      const isEnter = clickOnEnter && event.key === "Enter";
      const isSpace = clickOnSpace && event.key === " ";
      const shouldPreventEnter = event.key === "Enter" && !clickOnEnter;
      const shouldPreventSpace = event.key === " " && !clickOnSpace;
      if (shouldPreventEnter || shouldPreventSpace) {
        event.preventDefault();
        return;
      }
      if (isEnter || isSpace) {
        const nativeClick = isNativeClick(event);
        if (isEnter) {
          if (!nativeClick) {
            event.preventDefault();
            const _a2 = event, { view } = _a2, eventInit = __objRest(_a2, ["view"]);
            const click = () => fireClickEvent(element, eventInit);
            if (isFirefox()) {
              queueBeforeEvent(element, "keyup", click);
            } else {
              queueMicrotask(click);
            }
          }
        } else if (isSpace) {
          activeRef.current = true;
          if (!nativeClick) {
            event.preventDefault();
            setActive(true);
          }
        }
      }
    });
    const onKeyUpProp = props.onKeyUp;
    const onKeyUp = useEvent((event) => {
      onKeyUpProp == null ? void 0 : onKeyUpProp(event);
      if (event.defaultPrevented)
        return;
      if (isDuplicate)
        return;
      if (disabled)
        return;
      if (event.metaKey)
        return;
      const isSpace = clickOnSpace && event.key === " ";
      if (activeRef.current && isSpace) {
        activeRef.current = false;
        if (!isNativeClick(event)) {
          event.preventDefault();
          setActive(false);
          const element = event.currentTarget;
          const _a2 = event, { view } = _a2, eventInit = __objRest(_a2, ["view"]);
          queueMicrotask(() => fireClickEvent(element, eventInit));
        }
      }
    });
    props = _4R3V3JGP_spreadProps(_4R3V3JGP_spreadValues(_4R3V3JGP_spreadValues({
      "data-active": active ? "" : void 0,
      type: isNativeButton ? "button" : void 0
    }, metadataProps), props), {
      ref: useMergeRefs(ref, props.ref),
      onKeyDown,
      onKeyUp
    });
    props = useFocusable(props);
    return props;
  }
);
var Command = createComponent((props) => {
  props = useCommand(props);
  return _3ORBWXWF_createElement("button", props);
});
if (false) {}



;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/__chunks/UH3I23HL.js
"use client";





// src/collection/collection-item.ts


var useCollectionItem = createHook(
  (_a) => {
    var _b = _a, {
      store,
      shouldRegisterItem = true,
      getItem = identity,
      element: element
    } = _b, props = __objRest(_b, [
      "store",
      "shouldRegisterItem",
      "getItem",
      // @ts-expect-error This prop may come from a collection renderer.
      "element"
    ]);
    const context = useCollectionContext();
    store = store || context;
    const id = useId(props.id);
    const ref = (0,external_React_.useRef)(element);
    (0,external_React_.useEffect)(() => {
      const element2 = ref.current;
      if (!id)
        return;
      if (!element2)
        return;
      if (!shouldRegisterItem)
        return;
      const item = getItem({ id, element: element2 });
      return store == null ? void 0 : store.renderItem(item);
    }, [id, shouldRegisterItem, getItem, store]);
    props = _4R3V3JGP_spreadProps(_4R3V3JGP_spreadValues({}, props), {
      ref: useMergeRefs(ref, props.ref)
    });
    return props;
  }
);
var CollectionItem = createComponent(
  (props) => {
    const htmlProps = useCollectionItem(props);
    return _3ORBWXWF_createElement("div", htmlProps);
  }
);
if (false) {}



;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/__chunks/QZLXIDNP.js
"use client";









// src/composite/composite-item.tsx





function isEditableElement(element) {
  if (element.isContentEditable)
    return true;
  if (DLOEKDPY_isTextField(element))
    return true;
  return element.tagName === "INPUT" && !isButton(element);
}
function getNextPageOffset(scrollingElement, pageUp = false) {
  const height = scrollingElement.clientHeight;
  const { top } = scrollingElement.getBoundingClientRect();
  const pageSize = Math.max(height * 0.875, height - 40) * 1.5;
  const pageOffset = pageUp ? height - pageSize + top : pageSize + top;
  if (scrollingElement.tagName === "HTML") {
    return pageOffset + scrollingElement.scrollTop;
  }
  return pageOffset;
}
function getItemOffset(itemElement, pageUp = false) {
  const { top } = itemElement.getBoundingClientRect();
  if (pageUp) {
    return top + itemElement.clientHeight;
  }
  return top;
}
function findNextPageItemId(element, store, next, pageUp = false) {
  var _a;
  if (!store)
    return;
  if (!next)
    return;
  const { renderedItems } = store.getState();
  const scrollingElement = getScrollingElement(element);
  if (!scrollingElement)
    return;
  const nextPageOffset = getNextPageOffset(scrollingElement, pageUp);
  let id;
  let prevDifference;
  for (let i = 0; i < renderedItems.length; i += 1) {
    const previousId = id;
    id = next(i);
    if (!id)
      break;
    if (id === previousId)
      continue;
    const itemElement = (_a = getEnabledItem(store, id)) == null ? void 0 : _a.element;
    if (!itemElement)
      continue;
    const itemOffset = getItemOffset(itemElement, pageUp);
    const difference = itemOffset - nextPageOffset;
    const absDifference = Math.abs(difference);
    if (pageUp && difference <= 0 || !pageUp && difference >= 0) {
      if (prevDifference !== void 0 && prevDifference < absDifference) {
        id = previousId;
      }
      break;
    }
    prevDifference = absDifference;
  }
  return id;
}
function targetIsAnotherItem(event, store) {
  if (isSelfTarget(event))
    return false;
  return isItem(store, event.target);
}
function useRole(ref, props) {
  const roleProp = props.role;
  const [role, setRole] = (0,external_React_.useState)(roleProp);
  useSafeLayoutEffect(() => {
    const element = ref.current;
    if (!element)
      return;
    setRole(element.getAttribute("role") || roleProp);
  }, [roleProp]);
  return role;
}
function requiresAriaSelected(role) {
  return role === "option" || role === "treeitem";
}
function supportsAriaSelected(role) {
  if (role === "option")
    return true;
  if (role === "tab")
    return true;
  if (role === "treeitem")
    return true;
  if (role === "gridcell")
    return true;
  if (role === "row")
    return true;
  if (role === "columnheader")
    return true;
  if (role === "rowheader")
    return true;
  return false;
}
var useCompositeItem = createHook(
  (_a) => {
    var _b = _a, {
      store,
      rowId: rowIdProp,
      preventScrollOnKeyDown = false,
      moveOnKeyPress = true,
      tabbable = false,
      getItem: getItemProp,
      "aria-setsize": ariaSetSizeProp,
      "aria-posinset": ariaPosInSetProp
    } = _b, props = __objRest(_b, [
      "store",
      "rowId",
      "preventScrollOnKeyDown",
      "moveOnKeyPress",
      "tabbable",
      "getItem",
      "aria-setsize",
      "aria-posinset"
    ]);
    const context = useCompositeContext();
    store = store || context;
    const id = useId(props.id);
    const ref = (0,external_React_.useRef)(null);
    const row = (0,external_React_.useContext)(CompositeRowContext);
    const rowId = useStoreState(store, (state) => {
      if (rowIdProp)
        return rowIdProp;
      if (!state)
        return;
      if (!(row == null ? void 0 : row.baseElement))
        return;
      if (row.baseElement !== state.baseElement)
        return;
      return row.id;
    });
    const disabled = disabledFromProps(props);
    const trulyDisabled = disabled && !props.accessibleWhenDisabled;
    const getItem = (0,external_React_.useCallback)(
      (item) => {
        const nextItem = _4R3V3JGP_spreadProps(_4R3V3JGP_spreadValues({}, item), {
          id: id || item.id,
          rowId,
          disabled: !!trulyDisabled
        });
        if (getItemProp) {
          return getItemProp(nextItem);
        }
        return nextItem;
      },
      [id, rowId, trulyDisabled, getItemProp]
    );
    const onFocusProp = props.onFocus;
    const hasFocusedComposite = (0,external_React_.useRef)(false);
    const onFocus = useEvent((event) => {
      onFocusProp == null ? void 0 : onFocusProp(event);
      if (event.defaultPrevented)
        return;
      if (isPortalEvent(event))
        return;
      if (!id)
        return;
      if (!store)
        return;
      const { activeId, virtualFocus: virtualFocus2, baseElement: baseElement2 } = store.getState();
      if (targetIsAnotherItem(event, store))
        return;
      if (activeId !== id) {
        store.setActiveId(id);
      }
      if (!virtualFocus2)
        return;
      if (!isSelfTarget(event))
        return;
      if (isEditableElement(event.currentTarget))
        return;
      if (!(baseElement2 == null ? void 0 : baseElement2.isConnected))
        return;
      hasFocusedComposite.current = true;
      const fromComposite = event.relatedTarget === baseElement2 || isItem(store, event.relatedTarget);
      if (fromComposite) {
        focusSilently(baseElement2);
      } else {
        baseElement2.focus();
      }
    });
    const onBlurCaptureProp = props.onBlurCapture;
    const onBlurCapture = useEvent((event) => {
      onBlurCaptureProp == null ? void 0 : onBlurCaptureProp(event);
      if (event.defaultPrevented)
        return;
      const state = store == null ? void 0 : store.getState();
      if ((state == null ? void 0 : state.virtualFocus) && hasFocusedComposite.current) {
        hasFocusedComposite.current = false;
        event.preventDefault();
        event.stopPropagation();
      }
    });
    const onKeyDownProp = props.onKeyDown;
    const preventScrollOnKeyDownProp = useBooleanEvent(preventScrollOnKeyDown);
    const moveOnKeyPressProp = useBooleanEvent(moveOnKeyPress);
    const onKeyDown = useEvent((event) => {
      onKeyDownProp == null ? void 0 : onKeyDownProp(event);
      if (event.defaultPrevented)
        return;
      if (!isSelfTarget(event))
        return;
      if (!store)
        return;
      const { currentTarget } = event;
      const state = store.getState();
      const item = store.item(id);
      const isGrid = !!(item == null ? void 0 : item.rowId);
      const isVertical = state.orientation !== "horizontal";
      const isHorizontal = state.orientation !== "vertical";
      const canHomeEnd = () => {
        if (isGrid)
          return true;
        if (isHorizontal)
          return true;
        if (!state.baseElement)
          return true;
        if (!DLOEKDPY_isTextField(state.baseElement))
          return true;
        return false;
      };
      const keyMap = {
        ArrowUp: (isGrid || isVertical) && store.up,
        ArrowRight: (isGrid || isHorizontal) && store.next,
        ArrowDown: (isGrid || isVertical) && store.down,
        ArrowLeft: (isGrid || isHorizontal) && store.previous,
        Home: () => {
          if (!canHomeEnd())
            return;
          if (!isGrid || event.ctrlKey) {
            return store == null ? void 0 : store.first();
          }
          return store == null ? void 0 : store.previous(-1);
        },
        End: () => {
          if (!canHomeEnd())
            return;
          if (!isGrid || event.ctrlKey) {
            return store == null ? void 0 : store.last();
          }
          return store == null ? void 0 : store.next(-1);
        },
        PageUp: () => {
          return findNextPageItemId(currentTarget, store, store == null ? void 0 : store.up, true);
        },
        PageDown: () => {
          return findNextPageItemId(currentTarget, store, store == null ? void 0 : store.down);
        }
      };
      const action = keyMap[event.key];
      if (action) {
        const nextId = action();
        if (preventScrollOnKeyDownProp(event) || nextId !== void 0) {
          if (!moveOnKeyPressProp(event))
            return;
          event.preventDefault();
          store.move(nextId);
        }
      }
    });
    const baseElement = useStoreState(
      store,
      (state) => (state == null ? void 0 : state.baseElement) || void 0
    );
    const providerValue = (0,external_React_.useMemo)(
      () => ({ id, baseElement }),
      [id, baseElement]
    );
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ (0,jsx_runtime.jsx)(CompositeItemContext.Provider, { value: providerValue, children: element }),
      [providerValue]
    );
    const isActiveItem = useStoreState(
      store,
      (state) => !!state && state.activeId === id
    );
    const virtualFocus = useStoreState(store, "virtualFocus");
    const role = useRole(ref, props);
    let ariaSelected;
    if (isActiveItem) {
      if (requiresAriaSelected(role)) {
        ariaSelected = true;
      } else if (virtualFocus && supportsAriaSelected(role)) {
        ariaSelected = true;
      }
    }
    const ariaSetSize = useStoreState(store, (state) => {
      if (ariaSetSizeProp != null)
        return ariaSetSizeProp;
      if (!state)
        return;
      if (!(row == null ? void 0 : row.ariaSetSize))
        return;
      if (row.baseElement !== state.baseElement)
        return;
      return row.ariaSetSize;
    });
    const ariaPosInSet = useStoreState(store, (state) => {
      if (ariaPosInSetProp != null)
        return ariaPosInSetProp;
      if (!state)
        return;
      if (!(row == null ? void 0 : row.ariaPosInSet))
        return;
      if (row.baseElement !== state.baseElement)
        return;
      const itemsInRow = state.renderedItems.filter(
        (item) => item.rowId === rowId
      );
      return row.ariaPosInSet + itemsInRow.findIndex((item) => item.id === id);
    });
    const isTabbable = useStoreState(store, (state) => {
      if (!(state == null ? void 0 : state.renderedItems.length))
        return true;
      if (state.virtualFocus)
        return false;
      if (tabbable)
        return true;
      return state.activeId === id;
    });
    props = _4R3V3JGP_spreadProps(_4R3V3JGP_spreadValues({
      id,
      "aria-selected": ariaSelected,
      "data-active-item": isActiveItem ? "" : void 0
    }, props), {
      ref: useMergeRefs(ref, props.ref),
      tabIndex: isTabbable ? props.tabIndex : -1,
      onFocus,
      onBlurCapture,
      onKeyDown
    });
    props = useCommand(props);
    props = useCollectionItem(_4R3V3JGP_spreadProps(_4R3V3JGP_spreadValues({
      store
    }, props), {
      getItem,
      shouldRegisterItem: !!id ? props.shouldRegisterItem : false
    }));
    return _4R3V3JGP_spreadProps(_4R3V3JGP_spreadValues({}, props), {
      "aria-setsize": ariaSetSize,
      "aria-posinset": ariaPosInSet
    });
  }
);
var QZLXIDNP_CompositeItem = createMemoComponent(
  (props) => {
    const htmlProps = useCompositeItem(props);
    return _3ORBWXWF_createElement("button", htmlProps);
  }
);
if (false) {}



;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/combobox/combobox-item.js
"use client";



















// src/combobox/combobox-item.tsx






function isSelected(storeValue, itemValue) {
  if (itemValue == null)
    return;
  if (storeValue == null)
    return false;
  if (Array.isArray(storeValue)) {
    return storeValue.includes(itemValue);
  }
  return storeValue === itemValue;
}
var useComboboxItem = createHook(
  (_a) => {
    var _b = _a, {
      store,
      value,
      hideOnClick,
      selectValueOnClick = true,
      setValueOnClick,
      focusOnHover = false,
      moveOnKeyPress = true,
      getItem: getItemProp
    } = _b, props = __objRest(_b, [
      "store",
      "value",
      "hideOnClick",
      "selectValueOnClick",
      "setValueOnClick",
      "focusOnHover",
      "moveOnKeyPress",
      "getItem"
    ]);
    const context = useComboboxScopedContext();
    store = store || context;
    invariant(
      store,
       false && 0
    );
    const getItem = (0,external_React_.useCallback)(
      (item) => {
        const nextItem = _4R3V3JGP_spreadProps(_4R3V3JGP_spreadValues({}, item), { value });
        if (getItemProp) {
          return getItemProp(nextItem);
        }
        return nextItem;
      },
      [value, getItemProp]
    );
    const multiSelectable = store.useState(
      (state) => Array.isArray(state.selectedValue)
    );
    setValueOnClick = setValueOnClick != null ? setValueOnClick : !multiSelectable;
    hideOnClick = hideOnClick != null ? hideOnClick : value != null && !multiSelectable;
    const onClickProp = props.onClick;
    const setValueOnClickProp = useBooleanEvent(setValueOnClick);
    const selectValueOnClickProp = useBooleanEvent(selectValueOnClick);
    const hideOnClickProp = useBooleanEvent(hideOnClick);
    const onClick = useEvent((event) => {
      onClickProp == null ? void 0 : onClickProp(event);
      if (event.defaultPrevented)
        return;
      if (isDownloading(event))
        return;
      if (isOpeningInNewTab(event))
        return;
      if (value != null) {
        if (selectValueOnClickProp(event)) {
          store == null ? void 0 : store.setSelectedValue((prevValue) => {
            if (!Array.isArray(prevValue))
              return value;
            if (prevValue.includes(value)) {
              return prevValue.filter((v) => v !== value);
            }
            return [...prevValue, value];
          });
        }
        if (setValueOnClickProp(event)) {
          store == null ? void 0 : store.setValue(value);
        }
      }
      if (hideOnClickProp(event)) {
        store == null ? void 0 : store.move(null);
        store == null ? void 0 : store.hide();
      }
    });
    const onKeyDownProp = props.onKeyDown;
    const onKeyDown = useEvent((event) => {
      onKeyDownProp == null ? void 0 : onKeyDownProp(event);
      if (event.defaultPrevented)
        return;
      const baseElement = store == null ? void 0 : store.getState().baseElement;
      if (!baseElement)
        return;
      if (hasFocus(baseElement))
        return;
      const printable = event.key.length === 1;
      if (printable || event.key === "Backspace" || event.key === "Delete") {
        queueMicrotask(() => baseElement.focus());
        if (DLOEKDPY_isTextField(baseElement)) {
          store == null ? void 0 : store.setValue(baseElement.value);
        }
      }
    });
    const selected = store.useState(
      (state) => isSelected(state.selectedValue, value)
    );
    if (multiSelectable && selected != null) {
      props = _4R3V3JGP_spreadValues({
        "aria-selected": selected
      }, props);
    }
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ (0,jsx_runtime.jsx)(ComboboxItemValueContext.Provider, { value, children: /* @__PURE__ */ (0,jsx_runtime.jsx)(ComboboxItemCheckedContext.Provider, { value: selected != null ? selected : false, children: element }) }),
      [value, selected]
    );
    const contentElement = store.useState("contentElement");
    props = _4R3V3JGP_spreadProps(_4R3V3JGP_spreadValues({
      role: getPopupItemRole(contentElement),
      children: value
    }, props), {
      onClick,
      onKeyDown
    });
    const moveOnKeyPressProp = useBooleanEvent(moveOnKeyPress);
    props = useCompositeItem(_4R3V3JGP_spreadProps(_4R3V3JGP_spreadValues({
      store
    }, props), {
      getItem,
      // Dispatch a custom event on the combobox input when moving to an item
      // with the keyboard so the Combobox component can enable inline
      // autocompletion.
      moveOnKeyPress: (event) => {
        if (!moveOnKeyPressProp(event))
          return false;
        const moveEvent = new Event("combobox-item-move");
        const baseElement = store == null ? void 0 : store.getState().baseElement;
        baseElement == null ? void 0 : baseElement.dispatchEvent(moveEvent);
        return true;
      }
    }));
    props = useCompositeHover(_4R3V3JGP_spreadValues({ store, focusOnHover }, props));
    return props;
  }
);
var ComboboxItem = createMemoComponent(
  (props) => {
    const htmlProps = useComboboxItem(props);
    return _3ORBWXWF_createElement("div", htmlProps);
  }
);
if (false) {}


;// CONCATENATED MODULE: ./node_modules/@ariakit/react-core/esm/combobox/combobox-item-value.js
"use client";











// src/combobox/combobox-item-value.tsx



function normalizeValue(value) {
  return normalizeString(value).toLowerCase();
}
function splitValue(itemValue, userValue) {
  userValue = normalizeValue(userValue);
  let index = normalizeValue(itemValue).indexOf(userValue);
  const parts = [];
  while (index !== -1) {
    if (index !== 0) {
      parts.push(
        /* @__PURE__ */ (0,jsx_runtime.jsx)("span", { "data-autocomplete-value": "", children: itemValue.substr(0, index) }, parts.length)
      );
    }
    parts.push(
      /* @__PURE__ */ (0,jsx_runtime.jsx)("span", { "data-user-value": "", children: itemValue.substr(index, userValue.length) }, parts.length)
    );
    itemValue = itemValue.substr(index + userValue.length);
    index = normalizeValue(itemValue).indexOf(userValue);
  }
  if (itemValue) {
    parts.push(
      /* @__PURE__ */ (0,jsx_runtime.jsx)("span", { "data-autocomplete-value": "", children: itemValue }, parts.length)
    );
  }
  return parts;
}
var useComboboxItemValue = createHook(
  (_a) => {
    var _b = _a, { store, value } = _b, props = __objRest(_b, ["store", "value"]);
    const context = useComboboxScopedContext();
    store = store || context;
    const itemContext = (0,external_React_.useContext)(ComboboxItemValueContext);
    const itemValue = value != null ? value : itemContext;
    invariant(
      store,
       false && 0
    );
    const stateValue = store.useState(
      (state) => itemValue && state.value ? state.value : void 0
    );
    const children = (0,external_React_.useMemo)(
      () => itemValue && stateValue ? splitValue(itemValue, stateValue) : itemValue,
      [itemValue, stateValue]
    );
    props = _4R3V3JGP_spreadValues({
      children
    }, props);
    return props;
  }
);
var ComboboxItemValue = createComponent(
  (props) => {
    const htmlProps = useComboboxItemValue(props);
    return _3ORBWXWF_createElement("span", htmlProps);
  }
);
if (false) {}


;// CONCATENATED MODULE: ./node_modules/@wordpress/dataviews/build-module/search-widget.js

/**
 * External dependencies
 */
// eslint-disable-next-line no-restricted-imports



/**
 * WordPress dependencies
 */





const radioCheck = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Circle, {
  cx: 12,
  cy: 12,
  r: 3
}));
function search_widget_normalizeSearchInput(input = '') {
  return remove_accents_default()(input.trim().toLowerCase());
}
function SearchWidget({
  filter,
  view,
  onChangeView
}) {
  const [searchValue, setSearchValue] = (0,external_wp_element_namespaceObject.useState)('');
  const deferredSearchValue = (0,external_wp_element_namespaceObject.useDeferredValue)(searchValue);
  const selectedFilter = view.filters.find(_filter => _filter.field === filter.field);
  const selectedValues = selectedFilter?.value;
  const matches = (0,external_wp_element_namespaceObject.useMemo)(() => {
    const normalizedSearch = search_widget_normalizeSearchInput(deferredSearchValue);
    return filter.elements.filter(item => search_widget_normalizeSearchInput(item.label).includes(normalizedSearch));
  }, [filter.elements, deferredSearchValue]);
  return (0,external_React_.createElement)(ComboboxProvider, {
    value: searchValue,
    setSelectedValue: value => {
      const currentFilter = view.filters.find(_filter => _filter.field === filter.field);
      const newFilters = currentFilter ? [...view.filters.map(_filter => {
        if (_filter.field === filter.field) {
          return {
            ..._filter,
            operator: currentFilter.operator || filter.operators[0],
            value
          };
        }
        return _filter;
      })] : [...view.filters, {
        field: filter.field,
        operator: filter.operators[0],
        value
      }];
      onChangeView({
        ...view,
        page: 1,
        filters: newFilters
      });
    },
    setValue: setSearchValue
  }, (0,external_React_.createElement)("div", {
    className: "dataviews-search-widget-filter-combobox__wrapper"
  }, (0,external_React_.createElement)(ComboboxLabel, {
    render: (0,external_React_.createElement)(external_wp_components_namespaceObject.VisuallyHidden, null)
  }, (0,external_wp_i18n_namespaceObject.__)('Search items')), (0,external_React_.createElement)(Combobox, {
    autoSelect: "always",
    placeholder: (0,external_wp_i18n_namespaceObject.__)('Search'),
    className: "dataviews-search-widget-filter-combobox__input"
  }), (0,external_React_.createElement)("div", {
    className: "dataviews-search-widget-filter-combobox__icon"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Icon, {
    icon: library_search
  }))), (0,external_React_.createElement)(ComboboxList, {
    className: "dataviews-search-widget-filter-combobox-list",
    alwaysVisible: true
  }, matches.map(element => {
    return (0,external_React_.createElement)(ComboboxItem, {
      key: element.value,
      value: element.value,
      className: "dataviews-search-widget-filter-combobox-item",
      hideOnClick: false,
      setValueOnClick: false,
      focusOnHover: true
    }, (0,external_React_.createElement)("span", {
      className: "dataviews-search-widget-filter-combobox-item-check"
    }, selectedValues === element.value && (0,external_React_.createElement)(external_wp_components_namespaceObject.Icon, {
      icon: radioCheck
    })), (0,external_React_.createElement)("span", null, (0,external_React_.createElement)(ComboboxItemValue, {
      className: "dataviews-search-widget-filter-combobox-item-value",
      value: element.label
    }), !!element.description && (0,external_React_.createElement)("span", {
      className: "dataviews-search-widget-filter-combobox-item-description"
    }, element.description)));
  }), !matches.length && (0,external_React_.createElement)("p", null, (0,external_wp_i18n_namespaceObject.__)('No results found'))));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/dataviews/build-module/filter-summary.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */


const FilterText = ({
  activeElement,
  filterInView,
  filter
}) => {
  if (activeElement === undefined) {
    return filter.name;
  }
  const filterTextWrappers = {
    Span1: (0,external_React_.createElement)("span", {
      className: "dataviews-filter-summary__filter-text-name"
    }),
    Span2: (0,external_React_.createElement)("span", {
      className: "dataviews-filter-summary__filter-text-value"
    })
  };
  if (activeElement !== undefined && filterInView?.operator === constants_OPERATOR_IN) {
    return (0,external_wp_element_namespaceObject.createInterpolateElement)((0,external_wp_i18n_namespaceObject.sprintf)( /* translators: 1: Filter name. 2: Filter value. e.g.: "Author is Admin". */
    (0,external_wp_i18n_namespaceObject.__)('<Span1>%1$s </Span1><Span2>is %2$s</Span2>'), filter.name, activeElement.label), filterTextWrappers);
  }
  if (activeElement !== undefined && filterInView?.operator === constants_OPERATOR_NOT_IN) {
    return (0,external_wp_element_namespaceObject.createInterpolateElement)((0,external_wp_i18n_namespaceObject.sprintf)( /* translators: 1: Filter name. 2: Filter value. e.g.: "Author is not Admin". */
    (0,external_wp_i18n_namespaceObject.__)('<Span1>%1$s </Span1><Span2>is not %2$s</Span2>'), filter.name, activeElement.label), filterTextWrappers);
  }
  return (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: 1: Filter name e.g.: "Unknown status for Author". */
  (0,external_wp_i18n_namespaceObject.__)('Unknown status for %1$s'), filter.name);
};
function OperatorSelector({
  filter,
  view,
  onChangeView
}) {
  const operatorOptions = filter.operators?.map(operator => ({
    value: operator,
    label: OPERATORS[operator]?.label
  }));
  const currentFilter = view.filters.find(_filter => _filter.field === filter.field);
  const value = currentFilter?.operator || filter.operators[0];
  return operatorOptions.length > 1 && (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    spacing: 2,
    justify: "flex-start",
    className: "dataviews-filter-summary__operators-container"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.FlexItem, {
    className: "dataviews-filter-summary__operators-filter-name"
  }, filter.name), (0,external_React_.createElement)(external_wp_components_namespaceObject.SelectControl, {
    label: (0,external_wp_i18n_namespaceObject.__)('Conditions'),
    value: value,
    options: operatorOptions,
    onChange: newValue => {
      const newFilters = currentFilter ? [...view.filters.map(_filter => {
        if (_filter.field === filter.field) {
          return {
            ..._filter,
            operator: newValue
          };
        }
        return _filter;
      })] : [...view.filters, {
        field: filter.field,
        operator: newValue
      }];
      onChangeView({
        ...view,
        page: 1,
        filters: newFilters
      });
    },
    size: "small",
    __nextHasNoMarginBottom: true,
    hideLabelFromVision: true
  }));
}
function FilterSummary({
  addFilterRef,
  openedFilter,
  ...commonProps
}) {
  const toggleRef = (0,external_wp_element_namespaceObject.useRef)();
  const {
    filter,
    view,
    onChangeView
  } = commonProps;
  const filterInView = view.filters.find(f => f.field === filter.field);
  const activeElement = filter.elements.find(element => element.value === filterInView?.value);
  const isPrimary = filter.isPrimary;
  const hasValues = filterInView?.value !== undefined;
  const canResetOrRemove = !isPrimary || hasValues;
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Dropdown, {
    defaultOpen: openedFilter === filter.field,
    contentClassName: "dataviews-filter-summary__popover",
    popoverProps: {
      placement: 'bottom-start',
      role: 'dialog'
    },
    onClose: () => {
      toggleRef.current?.focus();
    },
    renderToggle: ({
      isOpen,
      onToggle
    }) => (0,external_React_.createElement)("div", {
      className: "dataviews-filter-summary__chip-container"
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Tooltip, {
      text: (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: 1: Filter name. */
      (0,external_wp_i18n_namespaceObject.__)('Filter by: %1$s'), filter.name.toLowerCase()),
      placement: "top"
    }, (0,external_React_.createElement)("div", {
      className: classnames_default()('dataviews-filter-summary__chip', {
        'has-reset': canResetOrRemove,
        'has-values': hasValues
      }),
      role: "button",
      tabIndex: 0,
      onClick: onToggle,
      onKeyDown: event => {
        if ([external_wp_keycodes_namespaceObject.ENTER, external_wp_keycodes_namespaceObject.SPACE].includes(event.keyCode)) {
          onToggle();
          event.preventDefault();
        }
      },
      "aria-pressed": isOpen,
      "aria-expanded": isOpen,
      ref: toggleRef
    }, (0,external_React_.createElement)(FilterText, {
      activeElement: activeElement,
      filterInView: filterInView,
      filter: filter
    }))), canResetOrRemove && (0,external_React_.createElement)(external_wp_components_namespaceObject.Tooltip, {
      text: isPrimary ? (0,external_wp_i18n_namespaceObject.__)('Reset') : (0,external_wp_i18n_namespaceObject.__)('Remove'),
      placement: "top"
    }, (0,external_React_.createElement)("button", {
      className: classnames_default()('dataviews-filter-summary__chip-remove', {
        'has-values': hasValues
      }),
      onClick: () => {
        onChangeView({
          ...view,
          page: 1,
          filters: view.filters.filter(_filter => _filter.field !== filter.field)
        });
        // If the filter is not primary and can be removed, it will be added
        // back to the available filters from `Add filter` component.
        if (!isPrimary) {
          addFilterRef.current?.focus();
        } else {
          // If is primary, focus the toggle button.
          toggleRef.current?.focus();
        }
      }
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Icon, {
      icon: close_small
    })))),
    renderContent: () => {
      return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
        spacing: 0,
        justify: "flex-start"
      }, (0,external_React_.createElement)(OperatorSelector, {
        ...commonProps
      }), (0,external_React_.createElement)(SearchWidget, {
        ...commonProps
      }));
    }
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/dataviews/build-module/add-filter.js

/**
 * WordPress dependencies
 */





/**
 * Internal dependencies
 */

const {
  DropdownMenuV2: add_filter_DropdownMenu,
  DropdownMenuItemV2: add_filter_DropdownMenuItem,
  DropdownMenuItemLabelV2: add_filter_DropdownMenuItemLabel
} = lock_unlock_unlock(external_wp_components_namespaceObject.privateApis);
function AddFilter({
  filters,
  view,
  onChangeView,
  setOpenedFilter
}, ref) {
  if (!filters.length || filters.every(({
    isPrimary
  }) => isPrimary)) {
    return null;
  }
  const inactiveFilters = filters.filter(filter => !filter.isVisible);
  return (0,external_React_.createElement)(add_filter_DropdownMenu, {
    trigger: (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
      __experimentalIsFocusable: true,
      size: "compact",
      icon: library_plus,
      className: "dataviews-filters-button",
      variant: "tertiary",
      disabled: !inactiveFilters.length,
      ref: ref
    }, (0,external_wp_i18n_namespaceObject.__)('Add filter'))
  }, inactiveFilters.map(filter => {
    return (0,external_React_.createElement)(add_filter_DropdownMenuItem, {
      key: filter.field,
      onClick: () => {
        setOpenedFilter(filter.field);
        onChangeView({
          ...view,
          page: 1,
          filters: [...(view.filters || []), {
            field: filter.field,
            value: undefined,
            operator: filter.operators[0]
          }]
        });
      }
    }, (0,external_React_.createElement)(add_filter_DropdownMenuItemLabel, null, filter.name));
  }));
}
/* harmony default export */ const add_filter = ((0,external_wp_element_namespaceObject.forwardRef)(AddFilter));

;// CONCATENATED MODULE: ./node_modules/@wordpress/dataviews/build-module/reset-filters.js

/**
 * WordPress dependencies
 */


function ResetFilter({
  filters,
  view,
  onChangeView
}) {
  const isPrimary = field => filters.some(_filter => _filter.field === field && _filter.isPrimary);
  const isDisabled = !view.search && !view.filters?.some(_filter => _filter.value !== undefined || !isPrimary(_filter.field));
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    disabled: isDisabled,
    __experimentalIsFocusable: true,
    size: "compact",
    variant: "tertiary",
    onClick: () => {
      onChangeView({
        ...view,
        page: 1,
        search: '',
        filters: []
      });
    }
  }, (0,external_wp_i18n_namespaceObject.__)('Reset filters'));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/dataviews/build-module/filters.js

/**
 * WordPress dependencies
 */


/**
 * Internal dependencies
 */






const Filters = (0,external_wp_element_namespaceObject.memo)(function Filters({
  fields,
  view,
  onChangeView,
  openedFilter,
  setOpenedFilter
}) {
  const addFilterRef = (0,external_wp_element_namespaceObject.useRef)();
  const filters = [];
  fields.forEach(field => {
    if (!field.type) {
      return;
    }
    const operators = sanitizeOperators(field);
    if (operators.length === 0) {
      return;
    }
    switch (field.type) {
      case constants_ENUMERATION_TYPE:
        if (!field.elements?.length) {
          return;
        }
        const isPrimary = !!field.filterBy?.isPrimary;
        filters.push({
          field: field.id,
          name: field.header,
          elements: field.elements,
          operators,
          isVisible: isPrimary || view.filters.some(f => f.field === field.id && [constants_OPERATOR_IN, constants_OPERATOR_NOT_IN].includes(f.operator)),
          isPrimary
        });
    }
  });
  // Sort filters by primary property. We need the primary filters to be first.
  // Then we sort by name.
  filters.sort((a, b) => {
    if (a.isPrimary && !b.isPrimary) {
      return -1;
    }
    if (!a.isPrimary && b.isPrimary) {
      return 1;
    }
    return a.name.localeCompare(b.name);
  });
  const addFilter = (0,external_React_.createElement)(add_filter, {
    key: "add-filter",
    filters: filters,
    view: view,
    onChangeView: onChangeView,
    ref: addFilterRef,
    setOpenedFilter: setOpenedFilter
  });
  const filterComponents = [...filters.map(filter => {
    if (!filter.isVisible) {
      return null;
    }
    return (0,external_React_.createElement)(FilterSummary, {
      key: filter.field,
      filter: filter,
      view: view,
      onChangeView: onChangeView,
      addFilterRef: addFilterRef,
      openedFilter: openedFilter
    });
  }), addFilter];
  if (filterComponents.length > 1) {
    filterComponents.push((0,external_React_.createElement)(ResetFilter, {
      key: "reset-filters",
      filters: filters,
      view: view,
      onChangeView: onChangeView
    }));
  }
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    justify: "flex-start",
    style: {
      width: 'fit-content'
    },
    wrap: true
  }, filterComponents);
});
/* harmony default export */ const filters = (Filters);

;// CONCATENATED MODULE: ./node_modules/@wordpress/dataviews/build-module/search.js

/**
 * WordPress dependencies
 */




const Search = (0,external_wp_element_namespaceObject.memo)(function Search({
  label,
  view,
  onChangeView
}) {
  const [search, setSearch, debouncedSearch] = (0,external_wp_compose_namespaceObject.useDebouncedInput)(view.search);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    setSearch(view.search);
  }, [view]);
  const onChangeViewRef = (0,external_wp_element_namespaceObject.useRef)(onChangeView);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    onChangeViewRef.current = onChangeView;
  }, [onChangeView]);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    onChangeViewRef.current({
      ...view,
      page: 1,
      search: debouncedSearch
    });
  }, [debouncedSearch]);
  const searchLabel = label || (0,external_wp_i18n_namespaceObject.__)('Search');
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.SearchControl, {
    __nextHasNoMarginBottom: true,
    onChange: setSearch,
    value: search,
    label: searchLabel,
    placeholder: searchLabel,
    size: "compact"
  });
});
/* harmony default export */ const build_module_search = (Search);

;// CONCATENATED MODULE: ./node_modules/@wordpress/dataviews/build-module/dataviews.js

/**
 * WordPress dependencies
 */



/**
 * Internal dependencies
 */






const defaultGetItemId = item => item.id;
const defaultOnSelectionChange = () => {};
function dataviews_useSomeItemHasAPossibleBulkAction(actions, data) {
  return (0,external_wp_element_namespaceObject.useMemo)(() => {
    return data.some(item => {
      return actions.some(action => {
        return action.supportsBulk && action.isEligible(item);
      });
    });
  }, [actions, data]);
}
function DataViews({
  view,
  onChangeView,
  fields,
  search = true,
  searchLabel = undefined,
  actions,
  data,
  getItemId = defaultGetItemId,
  isLoading = false,
  paginationInfo,
  supportedLayouts,
  onSelectionChange = defaultOnSelectionChange,
  onDetailsChange = null,
  deferredRendering = false
}) {
  const [selection, setSelection] = (0,external_wp_element_namespaceObject.useState)([]);
  const [openedFilter, setOpenedFilter] = (0,external_wp_element_namespaceObject.useState)(null);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    if (selection.length > 0 && selection.some(id => !data.some(item => getItemId(item) === id))) {
      const newSelection = selection.filter(id => data.some(item => getItemId(item) === id));
      setSelection(newSelection);
      onSelectionChange(data.filter(item => newSelection.includes(getItemId(item))));
    }
  }, [selection, data, getItemId, onSelectionChange]);
  const onSetSelection = (0,external_wp_element_namespaceObject.useCallback)(items => {
    setSelection(items.map(item => getItemId(item)));
    onSelectionChange(items);
  }, [setSelection, getItemId, onSelectionChange]);
  const ViewComponent = VIEW_LAYOUTS.find(v => v.type === view.type).component;
  const _fields = (0,external_wp_element_namespaceObject.useMemo)(() => {
    return fields.map(field => ({
      ...field,
      render: field.render || field.getValue
    }));
  }, [fields]);
  const hasPossibleBulkAction = dataviews_useSomeItemHasAPossibleBulkAction(actions, data);
  return (0,external_React_.createElement)("div", {
    className: "dataviews-wrapper"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    alignment: "top",
    justify: "start",
    className: "dataviews-filters__view-actions"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    justify: "start",
    className: "dataviews-filters__container",
    wrap: true
  }, search && (0,external_React_.createElement)(build_module_search, {
    label: searchLabel,
    view: view,
    onChangeView: onChangeView
  }), (0,external_React_.createElement)(filters, {
    fields: _fields,
    view: view,
    onChangeView: onChangeView,
    openedFilter: openedFilter,
    setOpenedFilter: setOpenedFilter
  })), [constants_LAYOUT_TABLE, constants_LAYOUT_GRID].includes(view.type) && hasPossibleBulkAction && (0,external_React_.createElement)(BulkActions, {
    actions: actions,
    data: data,
    onSelectionChange: onSetSelection,
    selection: selection,
    getItemId: getItemId
  }), (0,external_React_.createElement)(view_actions, {
    fields: _fields,
    view: view,
    onChangeView: onChangeView,
    supportedLayouts: supportedLayouts
  })), (0,external_React_.createElement)(ViewComponent, {
    fields: _fields,
    view: view,
    onChangeView: onChangeView,
    actions: actions,
    data: data,
    getItemId: getItemId,
    isLoading: isLoading,
    onSelectionChange: onSetSelection,
    onDetailsChange: onDetailsChange,
    selection: selection,
    deferredRendering: deferredRendering,
    setOpenedFilter: setOpenedFilter
  }), (0,external_React_.createElement)(pagination, {
    view: view,
    onChangeView: onChangeView,
    paginationInfo: paginationInfo
  }));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/page/header.js

/**
 * WordPress dependencies
 */


/**
 * Internal dependencies
 */

function Header({
  title,
  subTitle,
  actions
}) {
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    as: "header",
    alignment: "left",
    className: "edit-site-page-header"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.FlexBlock, {
    className: "edit-site-page-header__page-title"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHeading, {
    as: "h2",
    level: 3,
    weight: 500,
    className: "edit-site-page-header__title"
  }, title), subTitle && (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    as: "p",
    className: "edit-site-page-header__sub-title"
  }, subTitle)), (0,external_React_.createElement)(external_wp_components_namespaceObject.FlexItem, {
    className: "edit-site-page-header__actions"
  }, actions));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/page/index.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */



/**
 * Internal dependencies
 */

function Page({
  title,
  subTitle,
  actions,
  children,
  className,
  hideTitleFromUI = false
}) {
  const classes = classnames_default()('edit-site-page', className);
  return (0,external_React_.createElement)(NavigableRegion, {
    className: classes,
    ariaLabel: title
  }, (0,external_React_.createElement)("div", {
    className: "edit-site-page-content"
  }, !hideTitleFromUI && title && (0,external_React_.createElement)(Header, {
    title: title,
    subTitle: subTitle,
    actions: actions
  }), children), (0,external_React_.createElement)(external_wp_editor_namespaceObject.EditorSnackbars, null));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/actions/index.js

/**
 * WordPress dependencies
 */











/**
 * Internal dependencies
 */

const {
  useHistory: actions_useHistory
} = unlock(external_wp_router_namespaceObject.privateApis);
const trashPostAction = {
  id: 'move-to-trash',
  label: (0,external_wp_i18n_namespaceObject.__)('Move to Trash'),
  isPrimary: true,
  icon: library_trash,
  isEligible({
    status
  }) {
    return status !== 'trash';
  },
  supportsBulk: true,
  hideModalHeader: true,
  RenderModal: ({
    items: posts,
    closeModal,
    onPerform
  }) => {
    const {
      createSuccessNotice,
      createErrorNotice
    } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_notices_namespaceObject.store);
    const {
      deleteEntityRecord
    } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_coreData_namespaceObject.store);
    return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
      spacing: "5"
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, null, posts.length === 1 ? (0,external_wp_i18n_namespaceObject.sprintf)(
    // translators: %s: The page's title.
    (0,external_wp_i18n_namespaceObject.__)('Are you sure you want to delete "%s"?'), (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(posts[0].title.rendered)) : (0,external_wp_i18n_namespaceObject.sprintf)(
    // translators: %d: The number of pages (2 or more).
    (0,external_wp_i18n_namespaceObject.__)('Are you sure you want to delete %d pages?'), posts.length)), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
      justify: "right"
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
      variant: "tertiary",
      onClick: closeModal
    }, (0,external_wp_i18n_namespaceObject.__)('Cancel')), (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
      variant: "primary",
      onClick: async () => {
        const promiseResult = await Promise.allSettled(posts.map(post => {
          return deleteEntityRecord('postType', post.type, post.id, {}, {
            throwOnError: true
          });
        }));
        // If all the promises were fulfilled with success.
        if (promiseResult.every(({
          status
        }) => status === 'fulfilled')) {
          let successMessage;
          if (promiseResult.length === 1) {
            successMessage = (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: The posts's title. */
            (0,external_wp_i18n_namespaceObject.__)('"%s" moved to the Trash.'), (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(posts[0].title.rendered));
          } else {
            successMessage = (0,external_wp_i18n_namespaceObject.__)('Pages moved to the Trash.');
          }
          createSuccessNotice(successMessage, {
            type: 'snackbar',
            id: 'edit-site-page-trashed'
          });
        } else {
          // If there was at lease one failure.
          let errorMessage;
          // If we were trying to move a single post to the trash.
          if (promiseResult.length === 1) {
            if (promiseResult[0].reason?.message) {
              errorMessage = promiseResult[0].reason.message;
            } else {
              errorMessage = (0,external_wp_i18n_namespaceObject.__)('An error occurred while moving the post to the trash.');
            }
            // If we were trying to move multiple posts to the trash
          } else {
            const errorMessages = new Set();
            const failedPromises = promiseResult.filter(({
              status
            }) => status === 'rejected');
            for (const failedPromise of failedPromises) {
              if (failedPromise.reason?.message) {
                errorMessages.add(failedPromise.reason.message);
              }
            }
            if (errorMessages.size === 0) {
              errorMessage = (0,external_wp_i18n_namespaceObject.__)('An error occurred while moving the posts to the trash.');
            } else if (errorMessages.size === 1) {
              errorMessage = (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: an error message */
              (0,external_wp_i18n_namespaceObject.__)('An error occurred while moving the posts to the trash: %s'), [...errorMessages][0]);
            } else {
              errorMessage = (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: a list of comma separated error messages */
              (0,external_wp_i18n_namespaceObject.__)('Some errors occurred while moving the pages to the trash: %s'), [...errorMessages].join(','));
            }
            createErrorNotice(errorMessage, {
              type: 'snackbar'
            });
          }
        }
        if (onPerform) {
          onPerform();
        }
        closeModal();
      }
    }, (0,external_wp_i18n_namespaceObject.__)('Delete'))));
  }
};
function usePermanentlyDeletePostAction() {
  const {
    createSuccessNotice,
    createErrorNotice
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_notices_namespaceObject.store);
  const {
    deleteEntityRecord
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_coreData_namespaceObject.store);
  return (0,external_wp_element_namespaceObject.useMemo)(() => ({
    id: 'permanently-delete',
    label: (0,external_wp_i18n_namespaceObject.__)('Permanently delete'),
    isPrimary: true,
    icon: library_trash,
    supportsBulk: true,
    isEligible({
      status
    }) {
      return status === 'trash';
    },
    async callback(posts) {
      const promiseResult = await Promise.allSettled(posts.map(post => {
        return deleteEntityRecord('postType', post.type, post.id, {
          force: true
        }, {
          throwOnError: true
        });
      }));
      // If all the promises were fulfilled with success.
      if (promiseResult.every(({
        status
      }) => status === 'fulfilled')) {
        let successMessage;
        if (promiseResult.length === 1) {
          successMessage = (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: The posts's title. */
          (0,external_wp_i18n_namespaceObject.__)('"%s" permanently deleted.'), (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(posts[0].title.rendered));
        } else {
          successMessage = (0,external_wp_i18n_namespaceObject.__)('The posts were permanently deleted.');
        }
        createSuccessNotice(successMessage, {
          type: 'snackbar',
          id: 'edit-site-post-permanently-deleted'
        });
      } else {
        // If there was at lease one failure.
        let errorMessage;
        // If we were trying to permanently delete a single post.
        if (promiseResult.length === 1) {
          if (promiseResult[0].reason?.message) {
            errorMessage = promiseResult[0].reason.message;
          } else {
            errorMessage = (0,external_wp_i18n_namespaceObject.__)('An error occurred while permanently deleting the post.');
          }
          // If we were trying to permanently delete multiple posts
        } else {
          const errorMessages = new Set();
          const failedPromises = promiseResult.filter(({
            status
          }) => status === 'rejected');
          for (const failedPromise of failedPromises) {
            if (failedPromise.reason?.message) {
              errorMessages.add(failedPromise.reason.message);
            }
          }
          if (errorMessages.size === 0) {
            errorMessage = (0,external_wp_i18n_namespaceObject.__)('An error occurred while permanently deleting the posts.');
          } else if (errorMessages.size === 1) {
            errorMessage = (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: an error message */
            (0,external_wp_i18n_namespaceObject.__)('An error occurred while permanently deleting the posts: %s'), [...errorMessages][0]);
          } else {
            errorMessage = (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: a list of comma separated error messages */
            (0,external_wp_i18n_namespaceObject.__)('Some errors occurred while permanently deleting the posts: %s'), [...errorMessages].join(','));
          }
          createErrorNotice(errorMessage, {
            type: 'snackbar'
          });
        }
      }
    }
  }), [createSuccessNotice, createErrorNotice, deleteEntityRecord]);
}
function useRestorePostAction() {
  const {
    createSuccessNotice,
    createErrorNotice
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_notices_namespaceObject.store);
  const {
    editEntityRecord,
    saveEditedEntityRecord
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_coreData_namespaceObject.store);
  return (0,external_wp_element_namespaceObject.useMemo)(() => ({
    id: 'restore',
    label: (0,external_wp_i18n_namespaceObject.__)('Restore'),
    isPrimary: true,
    icon: library_backup,
    supportsBulk: true,
    isEligible({
      status
    }) {
      return status === 'trash';
    },
    async callback(posts) {
      try {
        for (const post of posts) {
          await editEntityRecord('postType', post.type, post.id, {
            status: 'draft'
          });
          await saveEditedEntityRecord('postType', post.type, post.id, {
            throwOnError: true
          });
        }
        createSuccessNotice(posts.length > 1 ? (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: The number of posts. */
        (0,external_wp_i18n_namespaceObject.__)('%d posts have been restored.'), posts.length) : (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: The number of posts. */
        (0,external_wp_i18n_namespaceObject.__)('"%s" has been restored.'), (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(posts[0].title.rendered)), {
          type: 'snackbar',
          id: 'edit-site-post-restored'
        });
      } catch (error) {
        let errorMessage;
        if (error.message && error.code !== 'unknown_error' && error.message) {
          errorMessage = error.message;
        } else if (posts.length > 1) {
          errorMessage = (0,external_wp_i18n_namespaceObject.__)('An error occurred while restoring the posts.');
        } else {
          errorMessage = (0,external_wp_i18n_namespaceObject.__)('An error occurred while restoring the post.');
        }
        createErrorNotice(errorMessage, {
          type: 'snackbar'
        });
      }
    }
  }), [createSuccessNotice, createErrorNotice, editEntityRecord, saveEditedEntityRecord]);
}
const viewPostAction = {
  id: 'view-post',
  label: (0,external_wp_i18n_namespaceObject.__)('View'),
  isPrimary: true,
  icon: library_external,
  isEligible(post) {
    return post.status !== 'trash';
  },
  callback(posts) {
    const post = posts[0];
    document.location.href = post.link;
  }
};
function useEditPostAction() {
  const history = actions_useHistory();
  return (0,external_wp_element_namespaceObject.useMemo)(() => ({
    id: 'edit-post',
    label: (0,external_wp_i18n_namespaceObject.__)('Edit'),
    isEligible({
      status
    }) {
      return status !== 'trash';
    },
    callback(posts) {
      const post = posts[0];
      history.push({
        postId: post.id,
        postType: post.type,
        canvas: 'edit'
      });
    }
  }), [history]);
}
const postRevisionsAction = {
  id: 'view-post-revisions',
  label: (0,external_wp_i18n_namespaceObject.__)('View revisions'),
  isPrimary: false,
  isEligible: post => {
    var _post$_links$predeces, _post$_links$version;
    if (post.status === 'trash') {
      return false;
    }
    const lastRevisionId = (_post$_links$predeces = post?._links?.['predecessor-version']?.[0]?.id) !== null && _post$_links$predeces !== void 0 ? _post$_links$predeces : null;
    const revisionsCount = (_post$_links$version = post?._links?.['version-history']?.[0]?.count) !== null && _post$_links$version !== void 0 ? _post$_links$version : 0;
    return lastRevisionId && revisionsCount > 1;
  },
  callback(posts) {
    const post = posts[0];
    const href = (0,external_wp_url_namespaceObject.addQueryArgs)('revision.php', {
      revision: post?._links?.['predecessor-version']?.[0]?.id
    });
    document.location.href = href;
  }
};

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/media/index.js

/**
 * WordPress dependencies
 */

function Media({
  id,
  size = ['large', 'medium', 'thumbnail'],
  ...props
}) {
  const {
    record: media
  } = (0,external_wp_coreData_namespaceObject.useEntityRecord)('root', 'media', id);
  const currentSize = size.find(s => !!media?.media_details?.sizes[s]);
  const mediaUrl = media?.media_details?.sizes[currentSize]?.source_url || media?.source_url;
  if (!mediaUrl) {
    return null;
  }
  return (0,external_React_.createElement)("img", {
    ...props,
    src: mediaUrl,
    alt: media.alt_text
  });
}
/* harmony default export */ const components_media = (Media);

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/page-pages/index.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */










/**
 * Internal dependencies
 */








const {
  useLocation: page_pages_useLocation,
  useHistory: page_pages_useHistory
} = unlock(external_wp_router_namespaceObject.privateApis);
const page_pages_EMPTY_ARRAY = [];
const SUPPORTED_LAYOUTS = window?.__experimentalAdminViews ? [LAYOUT_GRID, LAYOUT_TABLE, LAYOUT_LIST] : [LAYOUT_GRID, LAYOUT_TABLE];
function useView(postType) {
  const {
    params
  } = page_pages_useLocation();
  const {
    activeView = 'all',
    isCustom = 'false',
    layout
  } = params;
  const history = page_pages_useHistory();
  const selectedDefaultView = (0,external_wp_element_namespaceObject.useMemo)(() => {
    const defaultView = isCustom === 'false' && DEFAULT_VIEWS[postType].find(({
      slug
    }) => slug === activeView)?.view;
    if (isCustom === 'false' && layout) {
      return {
        ...defaultView,
        type: layout,
        layout: {
          ...(DEFAULT_CONFIG_PER_VIEW_TYPE[layout] || {})
        }
      };
    }
    return defaultView;
  }, [isCustom, activeView, layout, postType]);
  const [view, setView] = (0,external_wp_element_namespaceObject.useState)(selectedDefaultView);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    if (selectedDefaultView) {
      setView(selectedDefaultView);
    }
  }, [selectedDefaultView]);
  const editedViewRecord = (0,external_wp_data_namespaceObject.useSelect)(select => {
    if (isCustom !== 'true') {
      return;
    }
    const {
      getEditedEntityRecord
    } = select(external_wp_coreData_namespaceObject.store);
    const dataviewRecord = getEditedEntityRecord('postType', 'wp_dataviews', Number(activeView));
    return dataviewRecord;
  }, [activeView, isCustom]);
  const {
    editEntityRecord
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_coreData_namespaceObject.store);
  const customView = (0,external_wp_element_namespaceObject.useMemo)(() => {
    const storedView = editedViewRecord?.content && JSON.parse(editedViewRecord?.content);
    if (!storedView) {
      return storedView;
    }
    return {
      ...storedView,
      layout: {
        ...(DEFAULT_CONFIG_PER_VIEW_TYPE[storedView?.type] || {})
      }
    };
  }, [editedViewRecord?.content]);
  const setCustomView = (0,external_wp_element_namespaceObject.useCallback)(viewToSet => {
    editEntityRecord('postType', 'wp_dataviews', editedViewRecord?.id, {
      content: JSON.stringify(viewToSet)
    });
  }, [editEntityRecord, editedViewRecord?.id]);
  const setDefaultViewAndUpdateUrl = (0,external_wp_element_namespaceObject.useCallback)(viewToSet => {
    if (viewToSet.type !== view?.type) {
      history.push({
        ...params,
        layout: viewToSet.type
      });
    }
    setView(viewToSet);
  }, [params, view?.type, history]);
  if (isCustom === 'false') {
    return [view, setDefaultViewAndUpdateUrl];
  } else if (isCustom === 'true' && customView) {
    return [customView, setCustomView];
  }
  // Loading state where no the view was not found on custom views or default views.
  return [DEFAULT_VIEWS[postType][0].view, setDefaultViewAndUpdateUrl];
}

// See https://github.com/WordPress/gutenberg/issues/55886
// We do not support custom statutes at the moment.
const STATUSES = [{
  value: 'draft',
  label: (0,external_wp_i18n_namespaceObject.__)('Draft')
}, {
  value: 'future',
  label: (0,external_wp_i18n_namespaceObject.__)('Scheduled')
}, {
  value: 'pending',
  label: (0,external_wp_i18n_namespaceObject.__)('Pending Review')
}, {
  value: 'private',
  label: (0,external_wp_i18n_namespaceObject.__)('Private')
}, {
  value: 'publish',
  label: (0,external_wp_i18n_namespaceObject.__)('Published')
}, {
  value: 'trash',
  label: (0,external_wp_i18n_namespaceObject.__)('Trash')
}];
const DEFAULT_STATUSES = 'draft,future,pending,private,publish'; // All but 'trash'.

function FeaturedImage({
  item,
  viewType
}) {
  const {
    onClick
  } = useLink({
    postId: item.id,
    postType: item.type,
    canvas: 'edit'
  });
  const hasMedia = !!item.featured_media;
  const size = viewType === LAYOUT_GRID ? ['large', 'full', 'medium', 'thumbnail'] : ['thumbnail', 'medium', 'large', 'full'];
  const media = hasMedia ? (0,external_React_.createElement)(components_media, {
    className: "edit-site-page-pages__featured-image",
    id: item.featured_media,
    size: size
  }) : null;
  if (viewType === LAYOUT_LIST) {
    return media;
  }
  return (0,external_React_.createElement)("button", {
    className: classnames_default()('page-pages-preview-field__button', {
      'edit-site-page-pages__media-wrapper': viewType === LAYOUT_TABLE
    }),
    type: "button",
    onClick: onClick,
    "aria-label": item.title?.rendered || (0,external_wp_i18n_namespaceObject.__)('(no title)')
  }, media);
}
function PagePages() {
  const postType = 'page';
  const [view, setView] = useView(postType);
  const history = page_pages_useHistory();
  const {
    params
  } = page_pages_useLocation();
  const {
    isCustom = 'false'
  } = params;
  const onSelectionChange = (0,external_wp_element_namespaceObject.useCallback)(items => {
    if (isCustom === 'false' && view?.type === LAYOUT_LIST) {
      history.push({
        ...params,
        postId: items.length === 1 ? items[0].id : undefined
      });
    }
  }, [history, params, view?.type, isCustom]);
  const queryArgs = (0,external_wp_element_namespaceObject.useMemo)(() => {
    const filters = {};
    view.filters.forEach(filter => {
      if (filter.field === 'status' && filter.operator === OPERATOR_IN) {
        filters.status = filter.value;
      }
      if (filter.field === 'author' && filter.operator === OPERATOR_IN) {
        filters.author = filter.value;
      } else if (filter.field === 'author' && filter.operator === OPERATOR_NOT_IN) {
        filters.author_exclude = filter.value;
      }
    });
    // We want to provide a different default item for the status filter
    // than the REST API provides.
    if (!filters.status || filters.status === '') {
      filters.status = DEFAULT_STATUSES;
    }
    return {
      per_page: view.perPage,
      page: view.page,
      _embed: 'author',
      order: view.sort?.direction,
      orderby: view.sort?.field,
      search: view.search,
      ...filters
    };
  }, [view]);
  const {
    records: pages,
    isResolving: isLoadingPages,
    totalItems,
    totalPages
  } = (0,external_wp_coreData_namespaceObject.useEntityRecords)('postType', postType, queryArgs);
  const {
    records: authors,
    isResolving: isLoadingAuthors
  } = (0,external_wp_coreData_namespaceObject.useEntityRecords)('root', 'user');
  const paginationInfo = (0,external_wp_element_namespaceObject.useMemo)(() => ({
    totalItems,
    totalPages
  }), [totalItems, totalPages]);
  const fields = (0,external_wp_element_namespaceObject.useMemo)(() => [{
    id: 'featured-image',
    header: (0,external_wp_i18n_namespaceObject.__)('Featured Image'),
    getValue: ({
      item
    }) => item.featured_media,
    render: ({
      item
    }) => (0,external_React_.createElement)(FeaturedImage, {
      item: item,
      viewType: view.type
    }),
    enableSorting: false,
    width: '1%'
  }, {
    header: (0,external_wp_i18n_namespaceObject.__)('Title'),
    id: 'title',
    getValue: ({
      item
    }) => item.title?.rendered,
    render: ({
      item
    }) => {
      return [LAYOUT_TABLE, LAYOUT_GRID].includes(view.type) ? (0,external_React_.createElement)(Link, {
        params: {
          postId: item.id,
          postType: item.type,
          canvas: 'edit'
        }
      }, (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(item.title?.rendered) || (0,external_wp_i18n_namespaceObject.__)('(no title)')) : (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(item.title?.rendered) || (0,external_wp_i18n_namespaceObject.__)('(no title)');
    },
    maxWidth: 300,
    enableHiding: false
  }, {
    header: (0,external_wp_i18n_namespaceObject.__)('Author'),
    id: 'author',
    getValue: ({
      item
    }) => item._embedded?.author[0]?.name,
    type: ENUMERATION_TYPE,
    elements: authors?.map(({
      id,
      name
    }) => ({
      value: id,
      label: name
    })) || []
  }, {
    header: (0,external_wp_i18n_namespaceObject.__)('Status'),
    id: 'status',
    getValue: ({
      item
    }) => {
      var _STATUSES$find$label;
      return (_STATUSES$find$label = STATUSES.find(({
        value
      }) => value === item.status)?.label) !== null && _STATUSES$find$label !== void 0 ? _STATUSES$find$label : item.status;
    },
    type: ENUMERATION_TYPE,
    elements: STATUSES,
    enableSorting: false,
    filterBy: {
      operators: [OPERATOR_IN]
    }
  }, {
    header: (0,external_wp_i18n_namespaceObject.__)('Date'),
    id: 'date',
    getValue: ({
      item
    }) => item.date,
    render: ({
      item
    }) => {
      const formattedDate = (0,external_wp_date_namespaceObject.dateI18n)((0,external_wp_date_namespaceObject.getSettings)().formats.datetimeAbbreviated, (0,external_wp_date_namespaceObject.getDate)(item.date));
      return (0,external_React_.createElement)("time", null, formattedDate);
    }
  }], [authors, view.type]);
  const permanentlyDeletePostAction = usePermanentlyDeletePostAction();
  const restorePostAction = useRestorePostAction();
  const editPostAction = useEditPostAction();
  const actions = (0,external_wp_element_namespaceObject.useMemo)(() => [viewPostAction, trashPostAction, restorePostAction, permanentlyDeletePostAction, editPostAction, postRevisionsAction], [permanentlyDeletePostAction, restorePostAction, editPostAction]);
  const onChangeView = (0,external_wp_element_namespaceObject.useCallback)(newView => {
    if (newView.type !== view.type) {
      newView = {
        ...newView,
        layout: {
          ...DEFAULT_CONFIG_PER_VIEW_TYPE[newView.type]
        }
      };
    }
    setView(newView);
  }, [view.type, setView]);
  const [showAddPageModal, setShowAddPageModal] = (0,external_wp_element_namespaceObject.useState)(false);
  const openModal = (0,external_wp_element_namespaceObject.useCallback)(() => {
    if (!showAddPageModal) {
      setShowAddPageModal(true);
    }
  }, [showAddPageModal]);
  const closeModal = (0,external_wp_element_namespaceObject.useCallback)(() => {
    if (showAddPageModal) {
      setShowAddPageModal(false);
    }
  }, [showAddPageModal]);
  const handleNewPage = (0,external_wp_element_namespaceObject.useCallback)(({
    type,
    id
  }) => {
    history.push({
      postId: id,
      postType: type,
      canvas: 'edit'
    });
    closeModal();
  }, [history]);

  // TODO: we need to handle properly `data={ data || EMPTY_ARRAY }` for when `isLoading`.
  return (0,external_React_.createElement)(Page, {
    title: (0,external_wp_i18n_namespaceObject.__)('Pages'),
    actions: (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
      variant: "primary",
      onClick: openModal
    }, (0,external_wp_i18n_namespaceObject.__)('Add new page')), showAddPageModal && (0,external_React_.createElement)(AddNewPageModal, {
      onSave: handleNewPage,
      onClose: closeModal
    }))
  }, (0,external_React_.createElement)(DataViews, {
    paginationInfo: paginationInfo,
    fields: fields,
    actions: actions,
    data: pages || page_pages_EMPTY_ARRAY,
    isLoading: isLoadingPages || isLoadingAuthors,
    view: view,
    onChangeView: onChangeView,
    onSelectionChange: onSelectionChange,
    supportedLayouts: SUPPORTED_LAYOUTS
  }));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/header.js

/**
 * WordPress dependencies
 */

const header_header = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  d: "M18.5 10.5H10v8h8a.5.5 0 00.5-.5v-7.5zm-10 0h-3V18a.5.5 0 00.5.5h2.5v-8zM6 4h12a2 2 0 012 2v12a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2z"
}));
/* harmony default export */ const library_header = (header_header);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/footer.js

/**
 * WordPress dependencies
 */

const footer = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  fillRule: "evenodd",
  d: "M18 5.5h-8v8h8.5V6a.5.5 0 00-.5-.5zm-9.5 8h-3V6a.5.5 0 01.5-.5h2.5v8zM6 4h12a2 2 0 012 2v12a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2z"
}));
/* harmony default export */ const library_footer = (footer);

;// CONCATENATED MODULE: ./node_modules/@wordpress/icons/build-module/library/lock-small.js

/**
 * WordPress dependencies
 */

const lockSmall = (0,external_React_.createElement)(external_wp_primitives_namespaceObject.SVG, {
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, (0,external_React_.createElement)(external_wp_primitives_namespaceObject.Path, {
  fillRule: "evenodd",
  clipRule: "evenodd",
  d: "M15 11h-.2V9c0-1.5-1.2-2.8-2.8-2.8S9.2 7.5 9.2 9v2H9c-.6 0-1 .4-1 1v4c0 .6.4 1 1 1h6c.6 0 1-.4 1-1v-4c0-.6-.4-1-1-1zm-1.8 0h-2.5V9c0-.7.6-1.2 1.2-1.2s1.2.6 1.2 1.2v2z"
}));
/* harmony default export */ const lock_small = (lockSmall);

;// CONCATENATED MODULE: external ["wp","reusableBlocks"]
const external_wp_reusableBlocks_namespaceObject = window["wp"]["reusableBlocks"];
;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/page-patterns/dataviews-pattern-actions.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */













/**
 * Internal dependencies
 */




const {
  useHistory: dataviews_pattern_actions_useHistory
} = unlock(external_wp_router_namespaceObject.privateApis);
const {
  CreatePatternModalContents,
  useDuplicatePatternProps
} = unlock(external_wp_patterns_namespaceObject.privateApis);
const exportJSONaction = {
  id: 'export-pattern',
  label: (0,external_wp_i18n_namespaceObject.__)('Export as JSON'),
  isEligible: item => item.type === PATTERN_TYPES.user,
  callback: ([item]) => {
    const json = {
      __file: item.type,
      title: item.title || item.name,
      content: item.patternPost.content.raw,
      syncStatus: item.patternPost.wp_pattern_sync_status
    };
    return (0,external_wp_blob_namespaceObject.downloadBlob)(`${paramCase(item.title || item.name)}.json`, JSON.stringify(json, null, 2), 'application/json');
  }
};
const renameAction = {
  id: 'rename-pattern',
  label: (0,external_wp_i18n_namespaceObject.__)('Rename'),
  isEligible: item => {
    const isTemplatePart = item.type === TEMPLATE_PART_POST_TYPE;
    const isUserPattern = item.type === PATTERN_TYPES.user;
    const isCustomPattern = isUserPattern || isTemplatePart && item.isCustom;
    const hasThemeFile = isTemplatePart && item.templatePart.has_theme_file;
    return isCustomPattern && !hasThemeFile;
  },
  RenderModal: ({
    items,
    closeModal
  }) => {
    const [item] = items;
    const [title, setTitle] = (0,external_wp_element_namespaceObject.useState)(() => item.title);
    const {
      editEntityRecord,
      saveEditedEntityRecord
    } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_coreData_namespaceObject.store);
    const {
      createSuccessNotice,
      createErrorNotice
    } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_notices_namespaceObject.store);
    async function onRename(event) {
      event.preventDefault();
      try {
        await editEntityRecord('postType', item.type, item.id, {
          title
        });
        // Update state before saving rerenders the list.
        setTitle('');
        closeModal();
        // Persist edited entity.
        await saveEditedEntityRecord('postType', item.type, item.id, {
          throwOnError: true
        });
        createSuccessNotice(item.type === TEMPLATE_PART_POST_TYPE ? (0,external_wp_i18n_namespaceObject.__)('Template part renamed.') : (0,external_wp_i18n_namespaceObject.__)('Pattern renamed.'), {
          type: 'snackbar'
        });
      } catch (error) {
        const fallbackErrorMessage = item.type === TEMPLATE_PART_POST_TYPE ? (0,external_wp_i18n_namespaceObject.__)('An error occurred while renaming the template part.') : (0,external_wp_i18n_namespaceObject.__)('An error occurred while renaming the pattern.');
        const errorMessage = error.message && error.code !== 'unknown_error' ? error.message : fallbackErrorMessage;
        createErrorNotice(errorMessage, {
          type: 'snackbar'
        });
      }
    }
    return (0,external_React_.createElement)("form", {
      onSubmit: onRename
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
      spacing: "5"
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.TextControl, {
      __nextHasNoMarginBottom: true,
      __next40pxDefaultSize: true,
      label: (0,external_wp_i18n_namespaceObject.__)('Name'),
      value: title,
      onChange: setTitle,
      required: true
    }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
      justify: "right"
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
      __next40pxDefaultSize: true,
      variant: "tertiary",
      onClick: () => {
        closeModal();
      }
    }, (0,external_wp_i18n_namespaceObject.__)('Cancel')), (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
      __next40pxDefaultSize: true,
      variant: "primary",
      type: "submit"
    }, (0,external_wp_i18n_namespaceObject.__)('Save')))));
  }
};
const canDeleteOrReset = item => {
  const isTemplatePart = item.type === TEMPLATE_PART_POST_TYPE;
  const isUserPattern = item.type === PATTERN_TYPES.user;
  return isUserPattern || isTemplatePart && item.isCustom;
};
const deleteAction = {
  id: 'delete-pattern',
  label: (0,external_wp_i18n_namespaceObject.__)('Delete'),
  isEligible: item => {
    const isTemplatePart = item.type === TEMPLATE_PART_POST_TYPE;
    const hasThemeFile = isTemplatePart && item.templatePart.has_theme_file;
    return canDeleteOrReset(item) && !hasThemeFile;
  },
  hideModalHeader: true,
  supportsBulk: true,
  RenderModal: ({
    items,
    closeModal,
    onPerform
  }) => {
    const {
      __experimentalDeleteReusableBlock
    } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_reusableBlocks_namespaceObject.store);
    const {
      createErrorNotice,
      createSuccessNotice
    } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_notices_namespaceObject.store);
    const {
      removeTemplates
    } = unlock((0,external_wp_data_namespaceObject.useDispatch)(store_store));
    const deletePattern = async () => {
      const promiseResult = await Promise.allSettled(items.map(item => {
        return __experimentalDeleteReusableBlock(item.id);
      }));
      // If all the promises were fulfilled with success.
      if (promiseResult.every(({
        status
      }) => status === 'fulfilled')) {
        let successMessage;
        if (promiseResult.length === 1) {
          successMessage = (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: The posts's title. */
          (0,external_wp_i18n_namespaceObject.__)('"%s" deleted.'), items[0].title);
        } else {
          successMessage = (0,external_wp_i18n_namespaceObject.__)('The patterns were deleted.');
        }
        createSuccessNotice(successMessage, {
          type: 'snackbar',
          id: 'edit-site-page-trashed'
        });
      } else {
        // If there was at lease one failure.
        let errorMessage;
        // If we were trying to delete a single pattern.
        if (promiseResult.length === 1) {
          if (promiseResult[0].reason?.message) {
            errorMessage = promiseResult[0].reason.message;
          } else {
            errorMessage = (0,external_wp_i18n_namespaceObject.__)('An error occurred while deleting the pattern.');
          }
          // If we were trying to delete multiple patterns.
        } else {
          const errorMessages = new Set();
          const failedPromises = promiseResult.filter(({
            status
          }) => status === 'rejected');
          for (const failedPromise of failedPromises) {
            if (failedPromise.reason?.message) {
              errorMessages.add(failedPromise.reason.message);
            }
          }
          if (errorMessages.size === 0) {
            errorMessage = (0,external_wp_i18n_namespaceObject.__)('An error occurred while deleting the patterns.');
          } else if (errorMessages.size === 1) {
            errorMessage = (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: an error message */
            (0,external_wp_i18n_namespaceObject.__)('An error occurred while deleting the patterns: %s'), [...errorMessages][0]);
          } else {
            errorMessage = (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: a list of comma separated error messages */
            (0,external_wp_i18n_namespaceObject.__)('Some errors occurred while deleting the patterns: %s'), [...errorMessages].join(','));
          }
          createErrorNotice(errorMessage, {
            type: 'snackbar'
          });
        }
      }
    };
    const deleteItem = () => {
      if (items[0].type === TEMPLATE_PART_POST_TYPE) {
        removeTemplates(items);
      } else {
        deletePattern();
      }
      if (onPerform) {
        onPerform();
      }
      closeModal();
    };
    let questionMessage;
    if (items.length === 1) {
      questionMessage = (0,external_wp_i18n_namespaceObject.sprintf)(
      // translators: %s: The page's title.
      (0,external_wp_i18n_namespaceObject.__)('Are you sure you want to delete "%s"?'), (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(items[0].title || items[0].name));
    } else if (items.length > 1 && items[0].type === TEMPLATE_PART_POST_TYPE) {
      questionMessage = (0,external_wp_i18n_namespaceObject.sprintf)(
      // translators: %d: The number of template parts (2 or more).
      (0,external_wp_i18n_namespaceObject.__)('Are you sure you want to delete %d template parts?'), items.length);
    } else {
      questionMessage = (0,external_wp_i18n_namespaceObject.sprintf)(
      // translators: %d: The number of patterns (2 or more).
      (0,external_wp_i18n_namespaceObject.__)('Are you sure you want to delete %d patterns?'), items.length);
    }
    return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
      spacing: "5"
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, null, questionMessage), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
      justify: "right"
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
      variant: "tertiary",
      onClick: closeModal
    }, (0,external_wp_i18n_namespaceObject.__)('Cancel')), (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
      variant: "primary",
      onClick: deleteItem
    }, (0,external_wp_i18n_namespaceObject.__)('Delete'))));
  }
};
const resetAction = {
  id: 'reset-action',
  label: (0,external_wp_i18n_namespaceObject.__)('Clear customizations'),
  isEligible: item => {
    const isTemplatePart = item.type === TEMPLATE_PART_POST_TYPE;
    const hasThemeFile = isTemplatePart && item.templatePart.has_theme_file;
    return canDeleteOrReset(item) && hasThemeFile;
  },
  hideModalHeader: true,
  RenderModal: ({
    items,
    closeModal
  }) => {
    const [item] = items;
    const {
      removeTemplate
    } = (0,external_wp_data_namespaceObject.useDispatch)(store_store);
    return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
      spacing: "5"
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, null, (0,external_wp_i18n_namespaceObject.__)('Are you sure you want to clear these customizations?')), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
      justify: "right"
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
      variant: "tertiary",
      onClick: closeModal
    }, (0,external_wp_i18n_namespaceObject.__)('Cancel')), (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
      variant: "primary",
      onClick: () => removeTemplate(item)
    }, (0,external_wp_i18n_namespaceObject.__)('Clear'))));
  }
};
const duplicatePatternAction = {
  id: 'duplicate-pattern',
  label: (0,external_wp_i18n_namespaceObject._x)('Duplicate', 'action label'),
  isEligible: item => item.type !== TEMPLATE_PART_POST_TYPE,
  modalHeader: (0,external_wp_i18n_namespaceObject._x)('Duplicate pattern', 'action label'),
  RenderModal: ({
    items,
    closeModal
  }) => {
    const [item] = items;
    const {
      categoryId = PATTERN_DEFAULT_CATEGORY
    } = (0,external_wp_url_namespaceObject.getQueryArgs)(window.location.href);
    const isThemePattern = item.type === PATTERN_TYPES.theme;
    const history = dataviews_pattern_actions_useHistory();
    function onPatternSuccess({
      pattern
    }) {
      history.push({
        categoryType: PATTERN_TYPES.theme,
        categoryId,
        postType: PATTERN_TYPES.user,
        postId: pattern.id
      });
      closeModal();
    }
    const duplicatedProps = useDuplicatePatternProps({
      pattern: isThemePattern ? item : item.patternPost,
      onSuccess: onPatternSuccess
    });
    return (0,external_React_.createElement)(CreatePatternModalContents, {
      onClose: closeModal,
      confirmLabel: (0,external_wp_i18n_namespaceObject._x)('Duplicate', 'action label'),
      ...duplicatedProps
    });
  }
};
const duplicateTemplatePartAction = {
  id: 'duplicate-template-part',
  label: (0,external_wp_i18n_namespaceObject._x)('Duplicate', 'action label'),
  isEligible: item => item.type === TEMPLATE_PART_POST_TYPE,
  modalHeader: (0,external_wp_i18n_namespaceObject._x)('Duplicate template part', 'action label'),
  RenderModal: ({
    items,
    closeModal
  }) => {
    const [item] = items;
    const {
      createSuccessNotice
    } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_notices_namespaceObject.store);
    const {
      categoryId = PATTERN_DEFAULT_CATEGORY
    } = (0,external_wp_url_namespaceObject.getQueryArgs)(window.location.href);
    const history = dataviews_pattern_actions_useHistory();
    async function onTemplatePartSuccess(templatePart) {
      createSuccessNotice((0,external_wp_i18n_namespaceObject.sprintf)(
      // translators: %s: The new template part's title e.g. 'Call to action (copy)'.
      (0,external_wp_i18n_namespaceObject.__)('"%s" duplicated.'), item.title), {
        type: 'snackbar',
        id: 'edit-site-patterns-success'
      });
      history.push({
        postType: TEMPLATE_PART_POST_TYPE,
        postId: templatePart?.id,
        categoryType: TEMPLATE_PART_POST_TYPE,
        categoryId
      });
      closeModal();
    }
    return (0,external_React_.createElement)(CreateTemplatePartModalContents, {
      blocks: item.blocks,
      defaultArea: item.templatePart.area,
      defaultTitle: (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: Existing template part title */
      (0,external_wp_i18n_namespaceObject.__)('%s (Copy)'), item.title),
      onCreate: onTemplatePartSuccess,
      onError: closeModal,
      confirmLabel: (0,external_wp_i18n_namespaceObject._x)('Duplicate', 'action label')
    });
  }
};

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/page-patterns/use-pattern-settings.js
/**
 * WordPress dependencies
 */




/**
 * Internal dependencies
 */



function usePatternSettings() {
  var _storedSettings$__exp;
  const storedSettings = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getSettings
    } = unlock(select(store_store));
    return getSettings();
  }, []);
  const settingsBlockPatterns = (_storedSettings$__exp = storedSettings.__experimentalAdditionalBlockPatterns) !== null && _storedSettings$__exp !== void 0 ? _storedSettings$__exp :
  // WP 6.0
  storedSettings.__experimentalBlockPatterns; // WP 5.9

  const restBlockPatterns = (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_coreData_namespaceObject.store).getBlockPatterns(), []);
  const blockPatterns = (0,external_wp_element_namespaceObject.useMemo)(() => [...(settingsBlockPatterns || []), ...(restBlockPatterns || [])].filter(filterOutDuplicatesByName), [settingsBlockPatterns, restBlockPatterns]);
  const settings = (0,external_wp_element_namespaceObject.useMemo)(() => {
    const {
      __experimentalAdditionalBlockPatterns,
      ...restStoredSettings
    } = storedSettings;
    return {
      ...restStoredSettings,
      __experimentalBlockPatterns: blockPatterns,
      __unstableIsPreviewMode: true
    };
  }, [storedSettings, blockPatterns]);
  return settings;
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/page-patterns/rename-category-menu-item.js

/**
 * WordPress dependencies
 */




/**
 * Internal dependencies
 */


/**
 * Internal dependencies
 */

const {
  RenamePatternCategoryModal
} = unlock(external_wp_patterns_namespaceObject.privateApis);
function RenameCategoryMenuItem({
  category,
  onClose
}) {
  const [isModalOpen, setIsModalOpen] = (0,external_wp_element_namespaceObject.useState)(false);
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
    onClick: () => setIsModalOpen(true)
  }, (0,external_wp_i18n_namespaceObject.__)('Rename')), isModalOpen && (0,external_React_.createElement)(rename_category_menu_item_RenameModal, {
    category: category,
    onClose: () => {
      setIsModalOpen(false);
      onClose();
    }
  }));
}
function rename_category_menu_item_RenameModal({
  category,
  onClose
}) {
  // User created pattern categories have their properties updated when
  // retrieved via `getUserPatternCategories`. The rename modal expects an
  // object that will match the pattern category entity.
  const normalizedCategory = {
    id: category.id,
    slug: category.slug,
    name: category.label
  };

  // Optimization - only use pattern categories when the modal is open.
  const existingCategories = usePatternCategories();
  return (0,external_React_.createElement)(RenamePatternCategoryModal, {
    category: normalizedCategory,
    existingCategories: existingCategories,
    onClose: onClose,
    overlayClassName: "edit-site-list__rename-modal"
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/page-patterns/delete-category-menu-item.js

/**
 * WordPress dependencies
 */









/**
 * Internal dependencies
 */


const {
  useHistory: delete_category_menu_item_useHistory
} = unlock(external_wp_router_namespaceObject.privateApis);
function DeleteCategoryMenuItem({
  category,
  onClose
}) {
  const [isModalOpen, setIsModalOpen] = (0,external_wp_element_namespaceObject.useState)(false);
  const history = delete_category_menu_item_useHistory();
  const {
    createSuccessNotice,
    createErrorNotice
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_notices_namespaceObject.store);
  const {
    deleteEntityRecord,
    invalidateResolution
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_coreData_namespaceObject.store);
  const onDelete = async () => {
    try {
      await deleteEntityRecord('taxonomy', 'wp_pattern_category', category.id, {
        force: true
      }, {
        throwOnError: true
      });

      // Prevent the need to refresh the page to get up-to-date categories
      // and pattern categorization.
      invalidateResolution('getUserPatternCategories');
      invalidateResolution('getEntityRecords', ['postType', PATTERN_TYPES.user, {
        per_page: -1
      }]);
      createSuccessNotice((0,external_wp_i18n_namespaceObject.sprintf)( /* translators: The pattern category's name */
      (0,external_wp_i18n_namespaceObject.__)('"%s" deleted.'), category.label), {
        type: 'snackbar',
        id: 'pattern-category-delete'
      });
      onClose?.();
      history.push({
        path: `/patterns`,
        categoryType: PATTERN_TYPES.theme,
        categoryId: PATTERN_DEFAULT_CATEGORY
      });
    } catch (error) {
      const errorMessage = error.message && error.code !== 'unknown_error' ? error.message : (0,external_wp_i18n_namespaceObject.__)('An error occurred while deleting the pattern category.');
      createErrorNotice(errorMessage, {
        type: 'snackbar',
        id: 'pattern-category-delete'
      });
    }
  };
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuItem, {
    isDestructive: true,
    onClick: () => setIsModalOpen(true)
  }, (0,external_wp_i18n_namespaceObject.__)('Delete')), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalConfirmDialog, {
    isOpen: isModalOpen,
    onConfirm: onDelete,
    onCancel: () => setIsModalOpen(false),
    confirmButtonText: (0,external_wp_i18n_namespaceObject.__)('Delete'),
    className: "edit-site-patterns__delete-modal"
  }, (0,external_wp_i18n_namespaceObject.sprintf)(
  // translators: %s: The pattern category's name.
  (0,external_wp_i18n_namespaceObject.__)('Are you sure you want to delete the category "%s"? The patterns will not be deleted.'), (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(category.label))));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/page-patterns/header.js

/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */




function PatternsHeader({
  categoryId,
  type,
  titleId,
  descriptionId
}) {
  const {
    patternCategories
  } = usePatternCategories();
  const templatePartAreas = (0,external_wp_data_namespaceObject.useSelect)(select => select(external_wp_editor_namespaceObject.store).__experimentalGetDefaultTemplatePartAreas(), []);
  let title, description, patternCategory;
  if (type === TEMPLATE_PART_POST_TYPE) {
    const templatePartArea = templatePartAreas.find(area => area.area === categoryId);
    title = templatePartArea?.label;
    description = templatePartArea?.description;
  } else if (type === PATTERN_TYPES.theme) {
    patternCategory = patternCategories.find(category => category.name === categoryId);
    title = patternCategory?.label;
    description = patternCategory?.description;
  }
  if (!title) return null;
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
    className: "edit-site-patterns__section-header"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    justify: "space-between"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHeading, {
    as: "h2",
    level: 4,
    id: titleId
  }, title), !!patternCategory?.id && (0,external_React_.createElement)(external_wp_components_namespaceObject.DropdownMenu, {
    icon: more_vertical,
    label: (0,external_wp_i18n_namespaceObject.__)('Actions'),
    toggleProps: {
      className: 'edit-site-patterns__button',
      describedBy: (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: pattern category name */
      (0,external_wp_i18n_namespaceObject.__)('Action menu for %s pattern category'), title)
    }
  }, ({
    onClose
  }) => (0,external_React_.createElement)(external_wp_components_namespaceObject.MenuGroup, null, (0,external_React_.createElement)(RenameCategoryMenuItem, {
    category: patternCategory,
    onClose: onClose
  }), (0,external_React_.createElement)(DeleteCategoryMenuItem, {
    category: patternCategory,
    onClose: onClose
  })))), description ? (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
    variant: "muted",
    as: "p",
    id: descriptionId
  }, description) : null);
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/page-patterns/index.js

/**
 * WordPress dependencies
 */









/**
 * Internal dependencies
 */








const {
  ExperimentalBlockEditorProvider: page_patterns_ExperimentalBlockEditorProvider,
  useGlobalStyle: page_patterns_useGlobalStyle
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
const templatePartIcons = {
  header: library_header,
  footer: library_footer,
  uncategorized: symbol_filled
};
const page_patterns_EMPTY_ARRAY = [];
const defaultConfigPerViewType = {
  [LAYOUT_GRID]: {
    mediaField: 'preview',
    primaryField: 'title'
  }
};
const DEFAULT_VIEW = {
  type: LAYOUT_GRID,
  search: '',
  page: 1,
  perPage: 20,
  hiddenFields: ['sync-status'],
  layout: {
    ...defaultConfigPerViewType[LAYOUT_GRID]
  },
  filters: []
};
const SYNC_FILTERS = [{
  value: PATTERN_SYNC_TYPES.full,
  label: (0,external_wp_i18n_namespaceObject._x)('Synced', 'Option that shows all synchronized patterns'),
  description: (0,external_wp_i18n_namespaceObject.__)('Patterns that are kept in sync across the site.')
}, {
  value: PATTERN_SYNC_TYPES.unsynced,
  label: (0,external_wp_i18n_namespaceObject._x)('Not synced', 'Option that shows all patterns that are not synchronized'),
  description: (0,external_wp_i18n_namespaceObject.__)('Patterns that can be changed freely without affecting the site.')
}];
function PreviewWrapper({
  item,
  onClick,
  ariaDescribedBy,
  children
}) {
  if (item.type === PATTERN_TYPES.theme) {
    return children;
  }
  return (0,external_React_.createElement)("button", {
    className: "page-patterns-preview-field__button",
    type: "button",
    onClick: onClick,
    "aria-label": item.title,
    "aria-describedby": ariaDescribedBy
  }, children);
}
function Preview({
  item,
  categoryId,
  viewType
}) {
  const descriptionId = (0,external_wp_element_namespaceObject.useId)();
  const isUserPattern = item.type === PATTERN_TYPES.user;
  const isNonUserPattern = item.type === PATTERN_TYPES.theme;
  const isTemplatePart = item.type === TEMPLATE_PART_POST_TYPE;
  const isEmpty = !item.blocks?.length;
  // Only custom patterns or custom template parts can be renamed or deleted.
  const isCustomPattern = isUserPattern || isTemplatePart && item.isCustom;
  const ariaDescriptions = [];
  if (isCustomPattern) {
    // User patterns don't have descriptions, but can be edited and deleted, so include some help text.
    ariaDescriptions.push((0,external_wp_i18n_namespaceObject.__)('Press Enter to edit, or Delete to delete the pattern.'));
  } else if (item.description) {
    ariaDescriptions.push(item.description);
  }
  if (isNonUserPattern) {
    ariaDescriptions.push((0,external_wp_i18n_namespaceObject.__)('Theme & plugin patterns cannot be edited.'));
  }
  const [backgroundColor] = page_patterns_useGlobalStyle('color.background');
  const {
    onClick
  } = useLink({
    postType: item.type,
    postId: isUserPattern ? item.id : item.name,
    categoryId,
    categoryType: isTemplatePart ? item.type : PATTERN_TYPES.theme
  });
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)("div", {
    className: `page-patterns-preview-field is-viewtype-${viewType}`,
    style: {
      backgroundColor
    }
  }, (0,external_React_.createElement)(PreviewWrapper, {
    item: item,
    onClick: onClick,
    ariaDescribedBy: ariaDescriptions.length ? ariaDescriptions.map((_, index) => `${descriptionId}-${index}`).join(' ') : undefined
  }, isEmpty && isTemplatePart && (0,external_wp_i18n_namespaceObject.__)('Empty template part'), isEmpty && !isTemplatePart && (0,external_wp_i18n_namespaceObject.__)('Empty pattern'), !isEmpty && (0,external_React_.createElement)(external_wp_blockEditor_namespaceObject.BlockPreview, {
    blocks: item.blocks
  }))), ariaDescriptions.map((ariaDescription, index) => (0,external_React_.createElement)("div", {
    key: index,
    hidden: true,
    id: `${descriptionId}-${index}`
  }, ariaDescription)));
}
function Title({
  item,
  categoryId
}) {
  const isUserPattern = item.type === PATTERN_TYPES.user;
  const isNonUserPattern = item.type === PATTERN_TYPES.theme;
  const isTemplatePart = item.type === TEMPLATE_PART_POST_TYPE;
  let itemIcon;
  const {
    onClick
  } = useLink({
    postType: item.type,
    postId: isUserPattern ? item.id : item.name,
    categoryId,
    categoryType: isTemplatePart ? item.type : PATTERN_TYPES.theme
  });
  if (!isUserPattern && templatePartIcons[categoryId]) {
    itemIcon = templatePartIcons[categoryId];
  } else {
    itemIcon = item.syncStatus === PATTERN_SYNC_TYPES.full ? library_symbol : undefined;
  }
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    alignment: "center",
    justify: "flex-start",
    spacing: 2
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Flex, {
    as: "div",
    gap: 0,
    justify: "left",
    className: "edit-site-patterns__pattern-title"
  }, item.type === PATTERN_TYPES.theme ? item.title : (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    variant: "link",
    onClick: onClick
    // Required for the grid's roving tab index system.
    // See https://github.com/WordPress/gutenberg/pull/51898#discussion_r1243399243.
    ,
    tabIndex: "-1"
  }, item.title || item.name)), itemIcon && !isNonUserPattern && (0,external_React_.createElement)(external_wp_components_namespaceObject.Tooltip, {
    placement: "top",
    text: (0,external_wp_i18n_namespaceObject.__)('Editing this pattern will also update anywhere it is used')
  }, (0,external_React_.createElement)(build_module_icon, {
    className: "edit-site-patterns__pattern-icon",
    icon: itemIcon
  })), item.type === PATTERN_TYPES.theme && (0,external_React_.createElement)(external_wp_components_namespaceObject.Tooltip, {
    placement: "top",
    text: (0,external_wp_i18n_namespaceObject.__)('This pattern cannot be edited.')
  }, (0,external_React_.createElement)(build_module_icon, {
    className: "edit-site-patterns__pattern-lock-icon",
    icon: lock_small,
    size: 24
  })));
}
function DataviewsPatterns() {
  const {
    categoryType,
    categoryId = PATTERN_DEFAULT_CATEGORY
  } = (0,external_wp_url_namespaceObject.getQueryArgs)(window.location.href);
  const type = categoryType || PATTERN_TYPES.theme;
  const [view, setView] = (0,external_wp_element_namespaceObject.useState)(DEFAULT_VIEW);
  const isUncategorizedThemePatterns = type === PATTERN_TYPES.theme && categoryId === 'uncategorized';
  const previousCategoryId = (0,external_wp_compose_namespaceObject.usePrevious)(categoryId);
  const viewSyncStatus = view.filters?.find(({
    field
  }) => field === 'sync-status')?.value;
  const {
    patterns,
    isResolving
  } = use_patterns(type, isUncategorizedThemePatterns ? '' : categoryId, {
    search: view.search,
    syncStatus: viewSyncStatus
  });
  const fields = (0,external_wp_element_namespaceObject.useMemo)(() => {
    const _fields = [{
      header: (0,external_wp_i18n_namespaceObject.__)('Preview'),
      id: 'preview',
      render: ({
        item
      }) => (0,external_React_.createElement)(Preview, {
        item: item,
        categoryId: categoryId,
        viewType: view.type
      }),
      enableSorting: false,
      enableHiding: false
    }, {
      header: (0,external_wp_i18n_namespaceObject.__)('Title'),
      id: 'title',
      getValue: ({
        item
      }) => item.title,
      render: ({
        item
      }) => (0,external_React_.createElement)(Title, {
        item: item,
        categoryId: categoryId
      }),
      enableHiding: false
    }];
    if (type === PATTERN_TYPES.theme) {
      _fields.push({
        header: (0,external_wp_i18n_namespaceObject.__)('Sync Status'),
        id: 'sync-status',
        render: ({
          item
        }) => {
          // User patterns can have their sync statuses checked directly.
          // Non-user patterns are all unsynced for the time being.
          return SYNC_FILTERS.find(({
            value
          }) => value === item.syncStatus)?.label || SYNC_FILTERS.find(({
            value
          }) => value === PATTERN_SYNC_TYPES.unsynced).label;
        },
        type: ENUMERATION_TYPE,
        elements: SYNC_FILTERS,
        filterBy: {
          operators: [OPERATOR_IN],
          isPrimary: true
        },
        enableSorting: false
      });
    }
    return _fields;
  }, [view.type, categoryId, type]);
  // Reset the page number when the category changes.
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    if (previousCategoryId !== categoryId) {
      setView(DEFAULT_VIEW);
    }
  }, [categoryId, previousCategoryId]);
  const {
    data,
    paginationInfo
  } = (0,external_wp_element_namespaceObject.useMemo)(() => {
    if (!patterns) {
      return {
        data: page_patterns_EMPTY_ARRAY,
        paginationInfo: {
          totalItems: 0,
          totalPages: 0
        }
      };
    }
    let filteredData = [...patterns];
    // Handle sorting.
    if (view.sort) {
      filteredData = sortByTextFields({
        data: filteredData,
        view,
        fields,
        textFields: ['title', 'author']
      });
    }
    // Handle pagination.
    return getPaginationResults({
      data: filteredData,
      view
    });
  }, [patterns, view, fields]);
  const actions = (0,external_wp_element_namespaceObject.useMemo)(() => [renameAction, duplicatePatternAction, duplicateTemplatePartAction, exportJSONaction, resetAction, deleteAction], []);
  const onChangeView = (0,external_wp_element_namespaceObject.useCallback)(newView => {
    if (newView.type !== view.type) {
      newView = {
        ...newView,
        layout: {
          ...defaultConfigPerViewType[newView.type]
        }
      };
    }
    setView(newView);
  }, [view.type, setView]);
  const id = (0,external_wp_element_namespaceObject.useId)();
  const settings = usePatternSettings();
  // Wrap everything in a block editor provider.
  // This ensures 'styles' that are needed for the previews are synced
  // from the site editor store to the block editor store.
  // TODO: check if I add the provider in every preview like in templates...
  return (0,external_React_.createElement)(page_patterns_ExperimentalBlockEditorProvider, {
    settings: settings
  }, (0,external_React_.createElement)(Page, {
    title: (0,external_wp_i18n_namespaceObject.__)('Patterns content'),
    className: "edit-site-page-patterns-dataviews",
    hideTitleFromUI: true
  }, (0,external_React_.createElement)(PatternsHeader, {
    categoryId: categoryId,
    type: type,
    titleId: `${id}-title`,
    descriptionId: `${id}-description`
  }), (0,external_React_.createElement)(DataViews, {
    paginationInfo: paginationInfo,
    fields: fields,
    actions: actions,
    data: data || page_patterns_EMPTY_ARRAY,
    getItemId: item => item.name,
    isLoading: isResolving,
    view: view,
    onChangeView: onChangeView,
    deferredRendering: true,
    supportedLayouts: [LAYOUT_GRID]
  })));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/page-templates-template-parts/actions.js

/**
 * WordPress dependencies
 */









/**
 * Internal dependencies
 */





function useResetTemplateAction() {
  const {
    revertTemplate
  } = (0,external_wp_data_namespaceObject.useDispatch)(store_store);
  const {
    saveEditedEntityRecord
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_coreData_namespaceObject.store);
  const {
    createSuccessNotice,
    createErrorNotice
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_notices_namespaceObject.store);
  return (0,external_wp_element_namespaceObject.useMemo)(() => ({
    id: 'reset-template',
    label: (0,external_wp_i18n_namespaceObject.__)('Reset'),
    isPrimary: true,
    icon: library_backup,
    isEligible: isTemplateRevertable,
    supportsBulk: true,
    async callback(templates) {
      try {
        for (const template of templates) {
          await revertTemplate(template, {
            allowUndo: false
          });
          await saveEditedEntityRecord('postType', template.type, template.id);
        }
        createSuccessNotice(templates.length > 1 ? (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: The number of items. */
        (0,external_wp_i18n_namespaceObject.__)('%s items reverted.'), templates.length) : (0,external_wp_i18n_namespaceObject.sprintf)( /* translators: The template/part's name. */
        (0,external_wp_i18n_namespaceObject.__)('"%s" reverted.'), (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(templates[0].title.rendered)), {
          type: 'snackbar',
          id: 'edit-site-template-reverted'
        });
      } catch (error) {
        let fallbackErrorMessage;
        if (templates[0].type === constants_TEMPLATE_POST_TYPE) {
          fallbackErrorMessage = templates.length === 1 ? (0,external_wp_i18n_namespaceObject.__)('An error occurred while reverting the template.') : (0,external_wp_i18n_namespaceObject.__)('An error occurred while reverting the templates.');
        } else {
          fallbackErrorMessage = templates.length === 1 ? (0,external_wp_i18n_namespaceObject.__)('An error occurred while reverting the template part.') : (0,external_wp_i18n_namespaceObject.__)('An error occurred while reverting the template parts.');
        }
        const errorMessage = error.message && error.code !== 'unknown_error' ? error.message : fallbackErrorMessage;
        createErrorNotice(errorMessage, {
          type: 'snackbar'
        });
      }
    }
  }), [createErrorNotice, createSuccessNotice, revertTemplate, saveEditedEntityRecord]);
}
const deleteTemplateAction = {
  id: 'delete-template',
  label: (0,external_wp_i18n_namespaceObject.__)('Delete'),
  isPrimary: true,
  icon: library_trash,
  isEligible: isTemplateRemovable,
  supportsBulk: true,
  hideModalHeader: true,
  RenderModal: ({
    items: templates,
    closeModal,
    onPerform
  }) => {
    const {
      removeTemplates
    } = unlock((0,external_wp_data_namespaceObject.useDispatch)(store_store));
    return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
      spacing: "5"
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, null, templates.length > 1 ? (0,external_wp_i18n_namespaceObject.sprintf)(
    // translators: %d: number of items to delete.
    (0,external_wp_i18n_namespaceObject._n)('Delete %d item?', 'Delete %d items?', templates.length), templates.length) : (0,external_wp_i18n_namespaceObject.sprintf)(
    // translators: %s: The template or template part's titles
    (0,external_wp_i18n_namespaceObject.__)('Delete "%s"?'), (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(templates?.[0]?.title?.rendered))), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
      justify: "right"
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
      variant: "tertiary",
      onClick: closeModal
    }, (0,external_wp_i18n_namespaceObject.__)('Cancel')), (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
      variant: "primary",
      onClick: async () => {
        await removeTemplates(templates, {
          allowUndo: false
        });
        if (onPerform) {
          onPerform();
        }
        closeModal();
      }
    }, (0,external_wp_i18n_namespaceObject.__)('Delete'))));
  }
};
const renameTemplateAction = {
  id: 'rename-template',
  label: (0,external_wp_i18n_namespaceObject.__)('Rename'),
  isEligible: template => {
    // We can only remove templates or template parts that can be removed.
    // Additionally in the case of templates, we can only remove custom templates.
    if (!isTemplateRemovable(template) || template.type === constants_TEMPLATE_POST_TYPE && !template.is_custom) {
      return false;
    }
    return true;
  },
  RenderModal: ({
    items: templates,
    closeModal
  }) => {
    const template = templates[0];
    const title = (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(template.title.rendered);
    const [editedTitle, setEditedTitle] = (0,external_wp_element_namespaceObject.useState)(title);
    const {
      editEntityRecord,
      __experimentalSaveSpecifiedEntityEdits: saveSpecifiedEntityEdits
    } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_coreData_namespaceObject.store);
    const {
      createSuccessNotice,
      createErrorNotice
    } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_notices_namespaceObject.store);
    async function onTemplateRename(event) {
      event.preventDefault();
      try {
        await editEntityRecord('postType', template.type, template.id, {
          title: editedTitle
        });
        // Update state before saving rerenders the list.
        setEditedTitle('');
        closeModal();
        // Persist edited entity.
        await saveSpecifiedEntityEdits('postType', template.type, template.id, ['title'],
        // Only save title to avoid persisting other edits.
        {
          throwOnError: true
        });
        // TODO: this action will be reused in template parts list, so
        // let's keep this for a bit, even it's always a `template` now.
        createSuccessNotice(template.type === constants_TEMPLATE_POST_TYPE ? (0,external_wp_i18n_namespaceObject.__)('Template renamed.') : (0,external_wp_i18n_namespaceObject.__)('Template part renamed.'), {
          type: 'snackbar'
        });
      } catch (error) {
        const fallbackErrorMessage = template.type === constants_TEMPLATE_POST_TYPE ? (0,external_wp_i18n_namespaceObject.__)('An error occurred while renaming the template.') : (0,external_wp_i18n_namespaceObject.__)('An error occurred while renaming the template part.');
        const errorMessage = error.message && error.code !== 'unknown_error' ? error.message : fallbackErrorMessage;
        createErrorNotice(errorMessage, {
          type: 'snackbar'
        });
      }
    }
    return (0,external_React_.createElement)("form", {
      onSubmit: onTemplateRename
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalVStack, {
      spacing: "5"
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.TextControl, {
      __nextHasNoMarginBottom: true,
      label: (0,external_wp_i18n_namespaceObject.__)('Name'),
      value: editedTitle,
      onChange: setEditedTitle,
      required: true
    }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
      justify: "right"
    }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
      variant: "tertiary",
      onClick: closeModal
    }, (0,external_wp_i18n_namespaceObject.__)('Cancel')), (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
      variant: "primary",
      type: "submit"
    }, (0,external_wp_i18n_namespaceObject.__)('Save')))));
  }
};

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/page-templates-template-parts/add-new-template-part.js

/**
 * WordPress dependencies
 */






/**
 * Internal dependencies
 */




const {
  useHistory: add_new_template_part_useHistory
} = unlock(external_wp_router_namespaceObject.privateApis);
function AddNewTemplatePart() {
  const {
    canCreate,
    postType
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      supportsTemplatePartsMode
    } = select(store_store).getSettings();
    return {
      canCreate: !supportsTemplatePartsMode,
      postType: select(external_wp_coreData_namespaceObject.store).getPostType(TEMPLATE_PART_POST_TYPE)
    };
  }, []);
  const [isModalOpen, setIsModalOpen] = (0,external_wp_element_namespaceObject.useState)(false);
  const history = add_new_template_part_useHistory();
  if (!canCreate || !postType) {
    return null;
  }
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.Button, {
    variant: "primary",
    onClick: () => setIsModalOpen(true)
  }, postType.labels.add_new_item), isModalOpen && (0,external_React_.createElement)(CreateTemplatePartModal, {
    closeModal: () => setIsModalOpen(false),
    blocks: [],
    onCreate: templatePart => {
      setIsModalOpen(false);
      history.push({
        postId: templatePart.id,
        postType: TEMPLATE_PART_POST_TYPE,
        canvas: 'edit'
      });
    },
    onError: () => setIsModalOpen(false)
  }));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/page-templates-template-parts/index.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */










/**
 * Internal dependencies
 */










const {
  ExperimentalBlockEditorProvider: page_templates_template_parts_ExperimentalBlockEditorProvider,
  useGlobalStyle: page_templates_template_parts_useGlobalStyle
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
const {
  useHistory: page_templates_template_parts_useHistory,
  useLocation: page_templates_template_parts_useLocation
} = unlock(external_wp_router_namespaceObject.privateApis);
const page_templates_template_parts_EMPTY_ARRAY = [];
const page_templates_template_parts_SUPPORTED_LAYOUTS = window?.__experimentalAdminViews ? [LAYOUT_TABLE, LAYOUT_GRID, LAYOUT_LIST] : [LAYOUT_TABLE, LAYOUT_GRID];
const page_templates_template_parts_defaultConfigPerViewType = {
  [LAYOUT_TABLE]: {
    primaryField: 'title'
  },
  [LAYOUT_GRID]: {
    mediaField: 'preview',
    primaryField: 'title'
  },
  [LAYOUT_LIST]: {
    primaryField: 'title',
    mediaField: 'preview'
  }
};
const page_templates_template_parts_DEFAULT_VIEW = {
  type: LAYOUT_TABLE,
  search: '',
  page: 1,
  perPage: 20,
  sort: {
    field: 'title',
    direction: 'asc'
  },
  // All fields are visible by default, so it's
  // better to keep track of the hidden ones.
  hiddenFields: ['preview'],
  layout: page_templates_template_parts_defaultConfigPerViewType[LAYOUT_TABLE],
  filters: []
};
function page_templates_template_parts_normalizeSearchInput(input = '') {
  return remove_accents_default()(input.trim().toLowerCase());
}
function page_templates_template_parts_Title({
  item,
  viewType
}) {
  if (viewType === LAYOUT_LIST) {
    return (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(item.title?.rendered) || (0,external_wp_i18n_namespaceObject.__)('(no title)');
  }
  const linkProps = {
    params: {
      postId: item.id,
      postType: item.type,
      canvas: 'edit'
    }
  };
  if (item.type === TEMPLATE_PART_POST_TYPE) {
    linkProps.state = {
      backPath: '/wp_template_part/all'
    };
  }
  return (0,external_React_.createElement)(Link, {
    ...linkProps
  }, (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(item.title?.rendered) || (0,external_wp_i18n_namespaceObject.__)('(no title)'));
}
function AuthorField({
  item,
  viewType
}) {
  const {
    text,
    icon,
    imageUrl
  } = useAddedBy(item.type, item.id);
  const withIcon = viewType !== LAYOUT_LIST;
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalHStack, {
    alignment: "left",
    spacing: 1
  }, withIcon && imageUrl && (0,external_React_.createElement)(AvatarImage, {
    imageUrl: imageUrl
  }), withIcon && !imageUrl && (0,external_React_.createElement)("div", {
    className: "edit-site-list-added-by__icon"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.Icon, {
    icon: icon
  })), (0,external_React_.createElement)("span", null, text));
}
function page_templates_template_parts_Preview({
  item,
  viewType
}) {
  const settings = usePatternSettings();
  const [backgroundColor = 'white'] = page_templates_template_parts_useGlobalStyle('color.background');
  const blocks = (0,external_wp_element_namespaceObject.useMemo)(() => {
    return (0,external_wp_blocks_namespaceObject.parse)(item.content.raw);
  }, [item.content.raw]);
  const {
    onClick
  } = useLink({
    postId: item.id,
    postType: item.type,
    canvas: 'edit'
  });
  const isEmpty = !blocks?.length;
  // Wrap everything in a block editor provider to ensure 'styles' that are needed
  // for the previews are synced between the site editor store and the block editor store.
  // Additionally we need to have the `__experimentalBlockPatterns` setting in order to
  // render patterns inside the previews.
  // TODO: Same approach is used in the patterns list and it becomes obvious that some of
  // the block editor settings are needed in context where we don't have the block editor.
  // Explore how we can solve this in a better way.
  return (0,external_React_.createElement)(page_templates_template_parts_ExperimentalBlockEditorProvider, {
    settings: settings
  }, (0,external_React_.createElement)("div", {
    className: `page-templates-preview-field is-viewtype-${viewType}`,
    style: {
      backgroundColor
    }
  }, viewType === LAYOUT_LIST && !isEmpty && (0,external_React_.createElement)(external_wp_blockEditor_namespaceObject.BlockPreview, {
    blocks: blocks
  }), viewType !== LAYOUT_LIST && (0,external_React_.createElement)("button", {
    className: "page-templates-preview-field__button",
    type: "button",
    onClick: onClick,
    "aria-label": item.title?.rendered || item.title
  }, isEmpty && (item.type === constants_TEMPLATE_POST_TYPE ? (0,external_wp_i18n_namespaceObject.__)('Empty template') : (0,external_wp_i18n_namespaceObject.__)('Empty template part')), !isEmpty && (0,external_React_.createElement)(external_wp_blockEditor_namespaceObject.BlockPreview, {
    blocks: blocks
  }))));
}
function PageTemplatesTemplateParts({
  postType
}) {
  const {
    params
  } = page_templates_template_parts_useLocation();
  const {
    activeView = 'all',
    layout
  } = params;
  const defaultView = (0,external_wp_element_namespaceObject.useMemo)(() => {
    const usedType = window?.__experimentalAdminViews ? layout !== null && layout !== void 0 ? layout : page_templates_template_parts_DEFAULT_VIEW.type : page_templates_template_parts_DEFAULT_VIEW.type;
    return {
      ...page_templates_template_parts_DEFAULT_VIEW,
      type: usedType,
      layout: page_templates_template_parts_defaultConfigPerViewType[usedType],
      filters: activeView !== 'all' ? [{
        field: 'author',
        operator: 'in',
        value: activeView
      }] : []
    };
  }, [layout, activeView]);
  const [view, setView] = (0,external_wp_element_namespaceObject.useState)(defaultView);
  (0,external_wp_element_namespaceObject.useEffect)(() => {
    setView(currentView => ({
      ...currentView,
      filters: activeView !== 'all' ? [{
        field: 'author',
        operator: 'in',
        value: activeView
      }] : []
    }));
  }, [activeView]);
  const {
    records,
    isResolving: isLoadingData
  } = (0,external_wp_coreData_namespaceObject.useEntityRecords)('postType', postType, {
    per_page: -1
  });
  const history = page_templates_template_parts_useHistory();
  const onSelectionChange = (0,external_wp_element_namespaceObject.useCallback)(items => {
    if (view?.type === LAYOUT_LIST) {
      history.push({
        ...params,
        postId: items.length === 1 ? items[0].id : undefined
      });
    }
  }, [history, params, view?.type]);
  const authors = (0,external_wp_element_namespaceObject.useMemo)(() => {
    if (!records) {
      return page_templates_template_parts_EMPTY_ARRAY;
    }
    const authorsSet = new Set();
    records.forEach(template => {
      authorsSet.add(template.author_text);
    });
    return Array.from(authorsSet).map(author => ({
      value: author,
      label: author
    }));
  }, [records]);
  const fields = (0,external_wp_element_namespaceObject.useMemo)(() => {
    const _fields = [{
      header: (0,external_wp_i18n_namespaceObject.__)('Preview'),
      id: 'preview',
      render: ({
        item
      }) => {
        return (0,external_React_.createElement)(page_templates_template_parts_Preview, {
          item: item,
          viewType: view.type
        });
      },
      minWidth: 120,
      maxWidth: 120,
      enableSorting: false
    }, {
      header: postType === constants_TEMPLATE_POST_TYPE ? (0,external_wp_i18n_namespaceObject.__)('Template') : (0,external_wp_i18n_namespaceObject.__)('Template Part'),
      id: 'title',
      getValue: ({
        item
      }) => item.title?.rendered,
      render: ({
        item
      }) => (0,external_React_.createElement)(page_templates_template_parts_Title, {
        item: item,
        viewType: view.type
      }),
      maxWidth: 400,
      enableHiding: false
    }];
    if (postType === constants_TEMPLATE_POST_TYPE) {
      _fields.push({
        header: (0,external_wp_i18n_namespaceObject.__)('Description'),
        id: 'description',
        getValue: ({
          item
        }) => item.description,
        render: ({
          item
        }) => {
          return item.description ? (0,external_React_.createElement)("span", {
            className: "page-templates-description"
          }, (0,external_wp_htmlEntities_namespaceObject.decodeEntities)(item.description)) : view.type === LAYOUT_TABLE && (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_components_namespaceObject.__experimentalText, {
            variant: "muted",
            "aria-hidden": "true"
          }, "\u2014"), (0,external_React_.createElement)(external_wp_components_namespaceObject.VisuallyHidden, null, (0,external_wp_i18n_namespaceObject.__)('No description.')));
        },
        maxWidth: 400,
        minWidth: 320,
        enableSorting: false
      });
    }
    // TODO: The plan is to support fields reordering, which would require an API like `order` or something
    // similar. With the aforementioned API we wouldn't need to construct the fields array like this.
    _fields.push({
      header: (0,external_wp_i18n_namespaceObject.__)('Author'),
      id: 'author',
      getValue: ({
        item
      }) => item.author_text,
      render: ({
        item
      }) => {
        return (0,external_React_.createElement)(AuthorField, {
          viewType: view.type,
          item: item
        });
      },
      type: ENUMERATION_TYPE,
      elements: authors,
      width: '1%'
    });
    return _fields;
  }, [postType, authors, view.type]);
  const {
    data,
    paginationInfo
  } = (0,external_wp_element_namespaceObject.useMemo)(() => {
    if (!records) {
      return {
        data: page_templates_template_parts_EMPTY_ARRAY,
        paginationInfo: {
          totalItems: 0,
          totalPages: 0
        }
      };
    }
    let filteredData = [...records];
    // Handle global search.
    if (view.search) {
      const normalizedSearch = page_templates_template_parts_normalizeSearchInput(view.search);
      filteredData = filteredData.filter(item => {
        const title = item.title?.rendered || item.slug;
        return page_templates_template_parts_normalizeSearchInput(title).includes(normalizedSearch) || page_templates_template_parts_normalizeSearchInput(item.description).includes(normalizedSearch);
      });
    }

    // Handle filters.
    if (view.filters.length > 0) {
      view.filters.forEach(filter => {
        if (filter.field === 'author' && filter.operator === OPERATOR_IN && !!filter.value) {
          filteredData = filteredData.filter(item => {
            return item.author_text === filter.value;
          });
        } else if (filter.field === 'author' && filter.operator === OPERATOR_NOT_IN && !!filter.value) {
          filteredData = filteredData.filter(item => {
            return item.author_text !== filter.value;
          });
        }
      });
    }

    // Handle sorting.
    if (view.sort) {
      filteredData = sortByTextFields({
        data: filteredData,
        view,
        fields,
        textFields: ['title', 'author']
      });
    }
    // Handle pagination.
    return getPaginationResults({
      data: filteredData,
      view
    });
  }, [records, view, fields]);
  const resetTemplateAction = useResetTemplateAction();
  const actions = (0,external_wp_element_namespaceObject.useMemo)(() => [resetTemplateAction, deleteTemplateAction, renameTemplateAction, postRevisionsAction], [resetTemplateAction]);
  const onChangeView = (0,external_wp_element_namespaceObject.useCallback)(newView => {
    if (newView.type !== view.type) {
      newView = {
        ...newView,
        layout: {
          ...page_templates_template_parts_defaultConfigPerViewType[newView.type]
        }
      };
      history.push({
        ...params,
        layout: newView.type
      });
    }
    setView(newView);
  }, [view.type, setView, history, params]);
  return (0,external_React_.createElement)(Page, {
    className: "edit-site-page-template-template-parts-dataviews",
    title: postType === constants_TEMPLATE_POST_TYPE ? (0,external_wp_i18n_namespaceObject.__)('Templates') : (0,external_wp_i18n_namespaceObject.__)('Template Parts'),
    actions: postType === constants_TEMPLATE_POST_TYPE ? (0,external_React_.createElement)(AddNewTemplate, {
      templateType: postType,
      showIcon: false,
      toggleProps: {
        variant: 'primary'
      }
    }) : (0,external_React_.createElement)(AddNewTemplatePart, null)
  }, (0,external_React_.createElement)(DataViews, {
    paginationInfo: paginationInfo,
    fields: fields,
    actions: actions,
    data: data,
    isLoading: isLoadingData,
    view: view,
    onChangeView: onChangeView,
    onSelectionChange: onSelectionChange,
    deferredRendering: !view.hiddenFields?.includes('preview'),
    supportedLayouts: page_templates_template_parts_SUPPORTED_LAYOUTS
  }));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/layout/router.js

/**
 * WordPress dependencies
 */


/**
 * Internal dependencies
 */







const {
  useLocation: router_useLocation
} = unlock(external_wp_router_namespaceObject.privateApis);
function useLayoutAreas() {
  const isSiteEditorLoading = useIsSiteEditorLoading();
  const {
    params
  } = router_useLocation();
  const {
    postType,
    postId,
    path,
    layout,
    isCustom,
    canvas
  } = params !== null && params !== void 0 ? params : {};

  // Note: Since "sidebar" is not yet supported here,
  // returning undefined from "mobile" means show the sidebar.

  // Regular page
  if (path === '/page') {
    return {
      areas: {
        content: undefined,
        preview: (0,external_React_.createElement)(Editor, {
          isLoading: isSiteEditorLoading
        }),
        mobile: canvas === 'edit' ? (0,external_React_.createElement)(Editor, {
          isLoading: isSiteEditorLoading
        }) : undefined
      },
      widths: {
        content: undefined
      }
    };
  }

  // List layout is still experimental.
  // Extracted it here out of the conditionals so it doesn't unintentionally becomes stable.
  const isListLayout = isCustom !== 'true' && layout === 'list' && window?.__experimentalAdminViews;
  if (path === '/pages') {
    return {
      areas: {
        content: (0,external_React_.createElement)(PagePages, null),
        preview: isListLayout && (0,external_React_.createElement)(Editor, {
          isLoading: isSiteEditorLoading
        })
      },
      widths: {
        content: isListLayout ? 380 : undefined
      }
    };
  }

  // Regular other post types
  if (postType && postId) {
    return {
      areas: {
        preview: (0,external_React_.createElement)(Editor, {
          isLoading: isSiteEditorLoading
        }),
        mobile: canvas === 'edit' ? (0,external_React_.createElement)(Editor, {
          isLoading: isSiteEditorLoading
        }) : undefined
      }
    };
  }

  // Templates
  if (path === '/wp_template/all') {
    return {
      areas: {
        content: (0,external_React_.createElement)(PageTemplatesTemplateParts, {
          postType: constants_TEMPLATE_POST_TYPE
        }),
        preview: isListLayout && (0,external_React_.createElement)(Editor, {
          isLoading: isSiteEditorLoading
        }),
        mobile: (0,external_React_.createElement)(PageTemplatesTemplateParts, {
          postType: constants_TEMPLATE_POST_TYPE
        })
      },
      widths: {
        content: isListLayout ? 380 : undefined
      }
    };
  }

  // Template parts
  if (path === '/wp_template_part/all') {
    return {
      areas: {
        content: (0,external_React_.createElement)(PageTemplatesTemplateParts, {
          postType: TEMPLATE_PART_POST_TYPE
        }),
        preview: isListLayout && (0,external_React_.createElement)(Editor, {
          isLoading: isSiteEditorLoading
        }),
        mobile: (0,external_React_.createElement)(PageTemplatesTemplateParts, {
          postType: TEMPLATE_PART_POST_TYPE
        })
      },
      widths: {
        content: isListLayout ? 380 : undefined
      }
    };
  }

  // Patterns
  if (path === '/patterns') {
    return {
      areas: {
        content: (0,external_React_.createElement)(DataviewsPatterns, null),
        mobile: (0,external_React_.createElement)(DataviewsPatterns, null)
      }
    };
  }

  // Fallback shows the home page preview
  return {
    areas: {
      preview: (0,external_React_.createElement)(Editor, {
        isLoading: isSiteEditorLoading
      }),
      mobile: canvas === 'edit' ? (0,external_React_.createElement)(Editor, {
        isLoading: isSiteEditorLoading
      }) : undefined
    }
  };
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/layout/index.js

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */












/**
 * Internal dependencies
 */
















const {
  useCommands
} = unlock(external_wp_coreCommands_namespaceObject.privateApis);
const {
  useCommandContext
} = unlock(external_wp_commands_namespaceObject.privateApis);
const {
  useGlobalStyle: layout_useGlobalStyle
} = unlock(external_wp_blockEditor_namespaceObject.privateApis);
const ANIMATION_DURATION = 0.5;
function Layout() {
  // This ensures the edited entity id and type are initialized properly.
  useInitEditedEntityFromURL();
  useSyncCanvasModeWithURL();
  useCommands();
  useEditModeCommands();
  useCommonCommands();
  (0,external_wp_blockEditor_namespaceObject.useBlockCommands)();
  const isMobileViewport = (0,external_wp_compose_namespaceObject.useViewportMatch)('medium', '<');
  const {
    isDistractionFree,
    hasFixedToolbar,
    hasBlockSelected,
    canvasMode,
    previousShortcut,
    nextShortcut
  } = (0,external_wp_data_namespaceObject.useSelect)(select => {
    const {
      getAllShortcutKeyCombinations
    } = select(external_wp_keyboardShortcuts_namespaceObject.store);
    const {
      getCanvasMode
    } = unlock(select(store_store));
    return {
      canvasMode: getCanvasMode(),
      previousShortcut: getAllShortcutKeyCombinations('core/edit-site/previous-region'),
      nextShortcut: getAllShortcutKeyCombinations('core/edit-site/next-region'),
      hasFixedToolbar: select(external_wp_preferences_namespaceObject.store).get('core', 'fixedToolbar'),
      isDistractionFree: select(external_wp_preferences_namespaceObject.store).get('core', 'distractionFree'),
      hasBlockSelected: select(external_wp_blockEditor_namespaceObject.store).getBlockSelectionStart()
    };
  }, []);
  const navigateRegionsProps = (0,external_wp_components_namespaceObject.__unstableUseNavigateRegions)({
    previous: previousShortcut,
    next: nextShortcut
  });
  const disableMotion = (0,external_wp_compose_namespaceObject.useReducedMotion)();
  const [canvasResizer, canvasSize] = (0,external_wp_compose_namespaceObject.useResizeObserver)();
  const [fullResizer] = (0,external_wp_compose_namespaceObject.useResizeObserver)();
  const isEditorLoading = useIsSiteEditorLoading();
  const [isResizableFrameOversized, setIsResizableFrameOversized] = (0,external_wp_element_namespaceObject.useState)(false);
  const {
    areas,
    widths
  } = useLayoutAreas();

  // This determines which animation variant should apply to the header.
  // There is also a `isDistractionFreeHovering` state that gets priority
  // when hovering the `edit-site-layout__header-container` in distraction
  // free mode. It's set via framer and trickles down to all the children
  // so they can use this variant state too.
  //
  // TODO: The issue with this is we want to have the hover state stick when hovering
  // a popover opened via the header. We'll probably need to lift this state to
  // handle it ourselves. Also, focusWithin the header needs to be handled.
  let headerAnimationState;
  if (canvasMode === 'view') {
    // We need 'view' to always take priority so 'isDistractionFree'
    // doesn't bleed over into the view (sidebar) state
    headerAnimationState = 'view';
  } else if (isDistractionFree) {
    headerAnimationState = 'isDistractionFree';
  } else {
    headerAnimationState = canvasMode; // edit, view, init
  }

  // Sets the right context for the command palette
  let commandContext = 'site-editor';
  if (canvasMode === 'edit') {
    commandContext = 'site-editor-edit';
  }
  if (hasBlockSelected) {
    commandContext = 'block-selection-edit';
  }
  useCommandContext(commandContext);
  const [backgroundColor] = layout_useGlobalStyle('color.background');
  const [gradientValue] = layout_useGlobalStyle('color.gradient');

  // Synchronizing the URL with the store value of canvasMode happens in an effect
  // This condition ensures the component is only rendered after the synchronization happens
  // which prevents any animations due to potential canvasMode value change.
  if (canvasMode === 'init') {
    return null;
  }
  return (0,external_React_.createElement)(external_React_.Fragment, null, (0,external_React_.createElement)(external_wp_commands_namespaceObject.CommandMenu, null), (0,external_React_.createElement)(register, null), (0,external_React_.createElement)(global, null), fullResizer, (0,external_React_.createElement)("div", {
    ...navigateRegionsProps,
    ref: navigateRegionsProps.ref,
    className: classnames_default()('edit-site-layout', navigateRegionsProps.className, {
      'is-distraction-free': isDistractionFree && canvasMode === 'edit',
      'is-full-canvas': canvasMode === 'edit',
      'has-fixed-toolbar': hasFixedToolbar,
      'is-block-toolbar-visible': hasBlockSelected
    })
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__unstableMotion.div, {
    className: "edit-site-layout__header-container",
    variants: {
      isDistractionFree: {
        opacity: 0,
        transition: {
          type: 'tween',
          delay: 0.8,
          delayChildren: 0.8
        } // How long to wait before the header exits
      },
      isDistractionFreeHovering: {
        opacity: 1,
        transition: {
          type: 'tween',
          delay: 0.2,
          delayChildren: 0.2
        } // How long to wait before the header shows
      },
      view: {
        opacity: 1
      },
      edit: {
        opacity: 1
      }
    },
    whileHover: isDistractionFree ? 'isDistractionFreeHovering' : undefined,
    animate: headerAnimationState
  }, (0,external_React_.createElement)(site_hub, {
    isTransparent: isResizableFrameOversized,
    className: "edit-site-layout__hub"
  }), (0,external_React_.createElement)(external_wp_components_namespaceObject.__unstableAnimatePresence, {
    initial: false
  }, canvasMode === 'edit' && (0,external_React_.createElement)(NavigableRegion, {
    key: "header",
    className: "edit-site-layout__header",
    ariaLabel: (0,external_wp_i18n_namespaceObject.__)('Editor top bar'),
    as: external_wp_components_namespaceObject.__unstableMotion.div,
    variants: {
      isDistractionFree: {
        opacity: 0,
        y: 0
      },
      isDistractionFreeHovering: {
        opacity: 1,
        y: 0
      },
      view: {
        opacity: 1,
        y: '-100%'
      },
      edit: {
        opacity: 1,
        y: 0
      }
    },
    exit: {
      y: '-100%'
    },
    initial: {
      opacity: isDistractionFree ? 1 : 0,
      y: isDistractionFree ? 0 : '-100%'
    },
    transition: {
      type: 'tween',
      duration: disableMotion ? 0 : 0.2,
      ease: 'easeOut'
    }
  }, (0,external_React_.createElement)(HeaderEditMode, null)))), (0,external_React_.createElement)("div", {
    className: "edit-site-layout__content"
  }, (!isMobileViewport || isMobileViewport && !areas.mobile) && (0,external_React_.createElement)(NavigableRegion, {
    ariaLabel: (0,external_wp_i18n_namespaceObject.__)('Navigation'),
    className: "edit-site-layout__sidebar-region"
  }, (0,external_React_.createElement)(external_wp_components_namespaceObject.__unstableAnimatePresence, null, canvasMode === 'view' && (0,external_React_.createElement)(external_wp_components_namespaceObject.__unstableMotion.div, {
    initial: {
      opacity: 0
    },
    animate: {
      opacity: 1
    },
    exit: {
      opacity: 0
    },
    transition: {
      type: 'tween',
      duration:
      // Disable transition in mobile to emulate a full page transition.
      disableMotion || isMobileViewport ? 0 : ANIMATION_DURATION,
      ease: 'easeOut'
    },
    className: "edit-site-layout__sidebar"
  }, (0,external_React_.createElement)(sidebar, null)))), (0,external_React_.createElement)(SavePanel, null), isMobileViewport && areas.mobile && (0,external_React_.createElement)("div", {
    className: "edit-site-layout__mobile",
    style: {
      maxWidth: widths?.content
    }
  }, areas.mobile), !isMobileViewport && areas.content && canvasMode !== 'edit' && (0,external_React_.createElement)("div", {
    className: "edit-site-layout__area",
    style: {
      maxWidth: widths?.content
    }
  }, areas.content), !isMobileViewport && areas.preview && (0,external_React_.createElement)("div", {
    className: "edit-site-layout__canvas-container"
  }, canvasResizer, !!canvasSize.width && (0,external_React_.createElement)(external_wp_components_namespaceObject.__unstableMotion.div, {
    whileHover: canvasMode === 'view' ? {
      scale: 1.005,
      transition: {
        duration: disableMotion ? 0 : 0.5,
        ease: 'easeOut'
      }
    } : {},
    initial: false,
    layout: "position",
    className: classnames_default()('edit-site-layout__canvas', {
      'is-right-aligned': isResizableFrameOversized
    }),
    transition: {
      type: 'tween',
      duration: disableMotion ? 0 : ANIMATION_DURATION,
      ease: 'easeOut'
    }
  }, (0,external_React_.createElement)(ErrorBoundary, null, (0,external_React_.createElement)(resizable_frame, {
    isReady: !isEditorLoading,
    isFullWidth: canvasMode === 'edit',
    defaultSize: {
      width: canvasSize.width - 24 /* $canvas-padding */,
      height: canvasSize.height
    },
    isOversized: isResizableFrameOversized,
    setIsOversized: setIsResizableFrameOversized,
    innerContentStyle: {
      background: gradientValue !== null && gradientValue !== void 0 ? gradientValue : backgroundColor
    }
  }, areas.preview)))))));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/app/index.js

/**
 * WordPress dependencies
 */








/**
 * Internal dependencies
 */



const {
  RouterProvider
} = unlock(external_wp_router_namespaceObject.privateApis);
function App() {
  const {
    createErrorNotice
  } = (0,external_wp_data_namespaceObject.useDispatch)(external_wp_notices_namespaceObject.store);
  function onPluginAreaError(name) {
    createErrorNotice((0,external_wp_i18n_namespaceObject.sprintf)( /* translators: %s: plugin name */
    (0,external_wp_i18n_namespaceObject.__)('The "%s" plugin has encountered an error and cannot be rendered.'), name));
  }
  return (0,external_React_.createElement)(external_wp_components_namespaceObject.SlotFillProvider, null, (0,external_React_.createElement)(GlobalStylesProvider, null, (0,external_React_.createElement)(external_wp_editor_namespaceObject.UnsavedChangesWarning, null), (0,external_React_.createElement)(RouterProvider, null, (0,external_React_.createElement)(Layout, null), (0,external_React_.createElement)(external_wp_plugins_namespaceObject.PluginArea, {
    onError: onPluginAreaError
  }))));
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/sidebar-edit-mode/plugin-sidebar/index.js

/**
 * WordPress dependencies
 */


/**
 * Renders a sidebar when activated. The contents within the `PluginSidebar` will appear as content within the sidebar.
 * It also automatically renders a corresponding `PluginSidebarMenuItem` component when `isPinnable` flag is set to `true`.
 * If you wish to display the sidebar, you can with use the `PluginSidebarMoreMenuItem` component or the `wp.data.dispatch` API:
 *
 * ```js
 * wp.data.dispatch( 'core/edit-site' ).openGeneralSidebar( 'plugin-name/sidebar-name' );
 * ```
 *
 * @see PluginSidebarMoreMenuItem
 *
 * @param {Object}                props                                 Element props.
 * @param {string}                props.name                            A string identifying the sidebar. Must be unique for every sidebar registered within the scope of your plugin.
 * @param {string}                [props.className]                     An optional class name added to the sidebar body.
 * @param {string}                props.title                           Title displayed at the top of the sidebar.
 * @param {boolean}               [props.isPinnable=true]               Whether to allow to pin sidebar to the toolbar. When set to `true` it also automatically renders a corresponding menu item.
 * @param {WPBlockTypeIconRender} [props.icon=inherits from the plugin] The [Dashicon](https://developer.wordpress.org/resource/dashicons/) icon slug string, or an SVG WP element, to be rendered when the sidebar is pinned to toolbar.
 *
 * @example
 * ```js
 * // Using ES5 syntax
 * var __ = wp.i18n.__;
 * var el = wp.element.createElement;
 * var PanelBody = wp.components.PanelBody;
 * var PluginSidebar = wp.editSite.PluginSidebar;
 * var moreIcon = wp.element.createElement( 'svg' ); //... svg element.
 *
 * function MyPluginSidebar() {
 * 	return el(
 * 			PluginSidebar,
 * 			{
 * 				name: 'my-sidebar',
 * 				title: 'My sidebar title',
 * 				icon: moreIcon,
 * 			},
 * 			el(
 * 				PanelBody,
 * 				{},
 * 				__( 'My sidebar content' )
 * 			)
 * 	);
 * }
 * ```
 *
 * @example
 * ```jsx
 * // Using ESNext syntax
 * import { __ } from '@wordpress/i18n';
 * import { PanelBody } from '@wordpress/components';
 * import { PluginSidebar } from '@wordpress/edit-site';
 * import { more } from '@wordpress/icons';
 *
 * const MyPluginSidebar = () => (
 * 	<PluginSidebar
 * 		name="my-sidebar"
 * 		title="My sidebar title"
 * 		icon={ more }
 * 	>
 * 		<PanelBody>
 * 			{ __( 'My sidebar content' ) }
 * 		</PanelBody>
 * 	</PluginSidebar>
 * );
 * ```
 */
function PluginSidebarEditSite({
  className,
  ...props
}) {
  return (0,external_React_.createElement)(complementary_area, {
    panelClassName: className,
    className: "edit-site-sidebar-edit-mode",
    scope: "core/edit-site",
    ...props
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/header-edit-mode/plugin-sidebar-more-menu-item/index.js

/**
 * WordPress dependencies
 */


/**
 * Renders a menu item in `Plugins` group in `More Menu` drop down,
 * and can be used to activate the corresponding `PluginSidebar` component.
 * The text within the component appears as the menu item label.
 *
 * @param {Object}                props                                 Component props.
 * @param {string}                props.target                          A string identifying the target sidebar you wish to be activated by this menu item. Must be the same as the `name` prop you have given to that sidebar.
 * @param {WPBlockTypeIconRender} [props.icon=inherits from the plugin] The [Dashicon](https://developer.wordpress.org/resource/dashicons/) icon slug string, or an SVG WP element, to be rendered to the left of the menu item label.
 *
 * @example
 * ```js
 * // Using ES5 syntax
 * var __ = wp.i18n.__;
 * var PluginSidebarMoreMenuItem = wp.editSite.PluginSidebarMoreMenuItem;
 * var moreIcon = wp.element.createElement( 'svg' ); //... svg element.
 *
 * function MySidebarMoreMenuItem() {
 * 	return wp.element.createElement(
 * 		PluginSidebarMoreMenuItem,
 * 		{
 * 			target: 'my-sidebar',
 * 			icon: moreIcon,
 * 		},
 * 		__( 'My sidebar title' )
 * 	)
 * }
 * ```
 *
 * @example
 * ```jsx
 * // Using ESNext syntax
 * import { __ } from '@wordpress/i18n';
 * import { PluginSidebarMoreMenuItem } from '@wordpress/edit-site';
 * import { more } from '@wordpress/icons';
 *
 * const MySidebarMoreMenuItem = () => (
 * 	<PluginSidebarMoreMenuItem
 * 		target="my-sidebar"
 * 		icon={ more }
 * 	>
 * 		{ __( 'My sidebar title' ) }
 * 	</PluginSidebarMoreMenuItem>
 * );
 * ```
 *
 * @return {Component} The component to be rendered.
 */

function PluginSidebarMoreMenuItem(props) {
  return (0,external_React_.createElement)(ComplementaryAreaMoreMenuItem
  // Menu item is marked with unstable prop for backward compatibility.
  // @see https://github.com/WordPress/gutenberg/issues/14457
  , {
    __unstableExplicitMenuItem: true,
    scope: "core/edit-site",
    ...props
  });
}

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/components/header-edit-mode/plugin-more-menu-item/index.js
/**
 * WordPress dependencies
 */





/**
 * Renders a menu item in `Plugins` group in `More Menu` drop down, and can be used to as a button or link depending on the props provided.
 * The text within the component appears as the menu item label.
 *
 * @param {Object}                props                                 Component properties.
 * @param {string}                [props.href]                          When `href` is provided then the menu item is represented as an anchor rather than button. It corresponds to the `href` attribute of the anchor.
 * @param {WPBlockTypeIconRender} [props.icon=inherits from the plugin] The [Dashicon](https://developer.wordpress.org/resource/dashicons/) icon slug string, or an SVG WP element, to be rendered to the left of the menu item label.
 * @param {Function}              [props.onClick=noop]                  The callback function to be executed when the user clicks the menu item.
 * @param {...*}                  [props.other]                         Any additional props are passed through to the underlying [Button](/packages/components/src/button/README.md) component.
 *
 * @example
 * ```js
 * // Using ES5 syntax
 * var __ = wp.i18n.__;
 * var PluginMoreMenuItem = wp.editSite.PluginMoreMenuItem;
 * var moreIcon = wp.element.createElement( 'svg' ); //... svg element.
 *
 * function onButtonClick() {
 * 	alert( 'Button clicked.' );
 * }
 *
 * function MyButtonMoreMenuItem() {
 * 	return wp.element.createElement(
 * 		PluginMoreMenuItem,
 * 		{
 * 			icon: moreIcon,
 * 			onClick: onButtonClick,
 * 		},
 * 		__( 'My button title' )
 * 	);
 * }
 * ```
 *
 * @example
 * ```jsx
 * // Using ESNext syntax
 * import { __ } from '@wordpress/i18n';
 * import { PluginMoreMenuItem } from '@wordpress/edit-site';
 * import { more } from '@wordpress/icons';
 *
 * function onButtonClick() {
 * 	alert( 'Button clicked.' );
 * }
 *
 * const MyButtonMoreMenuItem = () => (
 * 	<PluginMoreMenuItem
 * 		icon={ more }
 * 		onClick={ onButtonClick }
 * 	>
 * 		{ __( 'My button title' ) }
 * 	</PluginMoreMenuItem>
 * );
 * ```
 *
 * @return {Component} The component to be rendered.
 */
/* harmony default export */ const plugin_more_menu_item = ((0,external_wp_compose_namespaceObject.compose)((0,external_wp_plugins_namespaceObject.withPluginContext)((context, ownProps) => {
  var _ownProps$as;
  return {
    as: (_ownProps$as = ownProps.as) !== null && _ownProps$as !== void 0 ? _ownProps$as : external_wp_components_namespaceObject.MenuItem,
    icon: ownProps.icon || context.icon,
    name: 'core/edit-site/plugin-more-menu'
  };
}))(action_item));

;// CONCATENATED MODULE: ./node_modules/@wordpress/edit-site/build-module/index.js

/**
 * WordPress dependencies
 */










/**
 * Internal dependencies
 */




/**
 * Initializes the site editor screen.
 *
 * @param {string} id       ID of the root element to render the screen in.
 * @param {Object} settings Editor settings.
 */
function initializeEditor(id, settings) {
  const target = document.getElementById(id);
  const root = (0,external_wp_element_namespaceObject.createRoot)(target);
  (0,external_wp_data_namespaceObject.dispatch)(external_wp_blocks_namespaceObject.store).reapplyBlockTypeFilters();
  const coreBlocks = (0,external_wp_blockLibrary_namespaceObject.__experimentalGetCoreBlocks)().filter(({
    name
  }) => name !== 'core/freeform');
  (0,external_wp_blockLibrary_namespaceObject.registerCoreBlocks)(coreBlocks);
  (0,external_wp_data_namespaceObject.dispatch)(external_wp_blocks_namespaceObject.store).setFreeformFallbackBlockName('core/html');
  (0,external_wp_widgets_namespaceObject.registerLegacyWidgetBlock)({
    inserter: false
  });
  (0,external_wp_widgets_namespaceObject.registerWidgetGroupBlock)({
    inserter: false
  });
  if (false) {}

  // We dispatch actions and update the store synchronously before rendering
  // so that we won't trigger unnecessary re-renders with useEffect.
  (0,external_wp_data_namespaceObject.dispatch)(external_wp_preferences_namespaceObject.store).setDefaults('core/edit-site', {
    welcomeGuide: true,
    welcomeGuideStyles: true,
    welcomeGuidePage: true,
    welcomeGuideTemplate: true
  });
  (0,external_wp_data_namespaceObject.dispatch)(external_wp_preferences_namespaceObject.store).setDefaults('core', {
    allowRightClickOverrides: true,
    distractionFree: false,
    editorMode: 'visual',
    fixedToolbar: false,
    focusMode: false,
    inactivePanels: [],
    keepCaretInsideBlock: false,
    openPanels: ['post-status'],
    showBlockBreadcrumbs: true,
    showListViewByDefault: false
  });
  (0,external_wp_data_namespaceObject.dispatch)(store).setDefaultComplementaryArea('core/edit-site', 'edit-site/template');
  (0,external_wp_data_namespaceObject.dispatch)(store_store).updateSettings(settings);

  // Keep the defaultTemplateTypes in the core/editor settings too,
  // so that they can be selected with core/editor selectors in any editor.
  // This is needed because edit-site doesn't initialize with EditorProvider,
  // which internally uses updateEditorSettings as well.
  (0,external_wp_data_namespaceObject.dispatch)(external_wp_editor_namespaceObject.store).updateEditorSettings({
    defaultTemplateTypes: settings.defaultTemplateTypes,
    defaultTemplatePartAreas: settings.defaultTemplatePartAreas
  });

  // Prevent the default browser action for files dropped outside of dropzones.
  window.addEventListener('dragover', e => e.preventDefault(), false);
  window.addEventListener('drop', e => e.preventDefault(), false);
  root.render((0,external_React_.createElement)(App, null));
  return root;
}
function reinitializeEditor() {
  external_wp_deprecated_default()('wp.editSite.reinitializeEditor', {
    since: '6.2',
    version: '6.3'
  });
}






})();

(window.wp = window.wp || {}).editSite = __webpack_exports__;
/******/ })()
;