<?php
/**
 * A dummy file to test the MediaWiki imports into the Jetpack phpcs standard.
 *
 * @package automattic/jetpack-codesniffer
 */

namespace Dummy;

// MediaWiki.Class.UnsortedUseStatements and MediaWiki.Class.UnusedUseStatement.

use X;
use Y;
use Z;

/**
 * A dummy class.
 */
class Dummy_Class {

	/**
	 * A function to reference some of the classes above.
	 *
	 * X is referenced explicitly via the typehint, while Y, Z, and Unnecessary
	 * are referenced via the doc comments.
	 *
	 * Unused isn't referenced at all, despite the mention here.
	 *
	 * @param X|Z         $x An X, or a Z.
	 * @param Unnecessary $u An unnecessary parameter.
	 * @return Y
	 */
	public function convert_x_to_y( X $x, Unnecessary $u = null ) {
		// MediaWiki.AlternativeSyntax.LeadingZeroInFloat.
		$u->dummy = 0.5;

		// MediaWiki.ExtraCharacters.ParenthesesAroundKeyword.
		require_once 'bar.php';
		$u->clone = clone $x;

		// MediaWiki.Usage.DoubleNotOperator.
		$u->bool = (bool) $u->bool;

		// MediaWiki.Usage.ForbiddenFunctions
		$u->builtin_forbidding = rtrim( $u->builtin_forbidding );
		$u->added_forbidding   = mb_strlen( $u->added_forbidding );
		$u->removed_forbidding = compact( 'x', 'u' );

		// MediaWiki.Usage.InArrayUsage.
		if (
			in_array( 'x', array_keys( $u->assoc ), true ) ||
			in_array( 'x', array_flip( $u->assoc ), true )
		) {
			return null;
		}

		// MediaWiki.Usage.MagicConstantClosure.
		$u->func = function () {
			return array( __METHOD__, __FUNCTION__ );
		};

		/**
		 * MediaWiki.Usage.NestedFunctions.
		 */
		function nested() {
		}

		// MediaWiki.Usage.PlusStringConcat.
		$u->string  = '1' + '2';
		$u->string += '3';

		// MediaWiki.Usage.ReferenceThis.
		$u->ref = &$this;

		// MediaWiki.WhiteSpace.MultipleEmptyLines.

		// Formerly MediaWiki.WhiteSpace.SpaceAfterClosure, now Squiz.Functions.MultiLineFunctionDeclaration.SpaceAfterFunction.
		$u->func2 = function () {
		};

		return $x->toY( $u );
	}

	// MediaWiki.WhiteSpace.MultipleEmptyLines again.

	// ...
}
