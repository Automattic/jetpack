var CriticalCSSGenerator = (function (exports) {
    'use strict';

    class BrowserInterface {
        constructor() {
            this.urlErrors = {};
        }
        trackUrlError(url, error) {
            this.urlErrors[url] = error;
        }
        filterValidUrls(urls) {
            return urls.filter(url => !this.urlErrors[url]);
        }
        async runInPage(_pageUrl, _viewport, _method, ..._args) {
            throw new Error('Undefined interface method: BrowserInterface.runInPage()');
        }
        /**
         * Context-specific wrapper for fetch; uses window.fetch in browsers, or a
         * node library when using Puppeteer.
         *
         * @param {string}         _url     - The URL to fetch
         * @param {FetchOptions}   _options - Fetch options
         * @param {'css' | 'html'} _role    - Role of the fetch operation
         */
        async fetch(_url, _options, _role) {
            throw new Error('Undefined interface method: BrowserInterface.fetch()');
        }
        async cleanup() {
            // No-op.
        }
        async getCssIncludes(pageUrl) {
            return await this.runInPage(pageUrl, null, BrowserInterface.innerGetCssIncludes);
        }
        static innerGetCssIncludes({ innerWindow }) {
            innerWindow = null === innerWindow ? window : innerWindow;
            return [...innerWindow.document.getElementsByTagName('link')]
                .filter(link => link.rel === 'stylesheet')
                .reduce((set, link) => {
                set[link.href] = {
                    media: link.media || null,
                };
                return set;
            }, {});
        }
        async getInternalStyles(pageUrl) {
            return await this.runInPage(pageUrl, null, BrowserInterface.innerGetInternalStyles);
        }
        /**
         * Get all internal styles as a combined string from the window.
         *
         * @param {object} wrappedArgs             - Object containing the inner window.
         * @param {Window} wrappedArgs.innerWindow - Window inside the browser interface.
         * @return {string} Combined internal styles as a string.
         */
        static innerGetInternalStyles({ innerWindow }) {
            innerWindow = null === innerWindow ? window : innerWindow;
            const styleElements = Array.from(innerWindow.document.getElementsByTagName('style'));
            return styleElements.reduce((styles, style) => {
                styles += style.innerText;
                return styles;
            }, '');
        }
        /**
         * Given a set of CSS selectors (as object keys), along with "simplified" versions
         * for easy querySelector calling (values), return an array of selectors which match
         * _any_ element on the page.
         *
         * @param {object}   wrappedArgs             - Object containing the inner window and arguments.
         * @param {Window}   wrappedArgs.innerWindow - Window inside the browser interface.
         * @param {Object[]} wrappedArgs.args        - Array of arguments.
         *                                           {Object} wrappedArgs.args[selectors] - Map containing selectors (object keys), and simplified versions for easy matching (values).
         * @return {string[]} Array of selectors matching above-the-fold elements.
         */
        static innerFindMatchingSelectors({ innerWindow, args: [selectors] }) {
            innerWindow = null === innerWindow ? window : innerWindow;
            return Object.keys(selectors).filter(selector => {
                try {
                    return !!innerWindow.document.querySelector(selectors[selector]);
                }
                catch (err) {
                    // Ignore invalid selectors.
                    return false;
                }
            });
        }
        /**
         * Given a set of CSS selectors (as object keys), along with "simplified" versions
         * for easy querySelector calling (values), return an array of selectors which match
         * any above-the-fold element on the page.
         *
         * @param {object}   wrappedArgs             - Object containing the inner window and arguments.
         * @param {Window}   wrappedArgs.innerWindow - Window inside the browser interface.
         * @param {Object[]} wrappedArgs.args        - Array of arguments.
         *                                           {Object} wrappedArgs.args[selectors] - Map containing selectors (object keys), and simplified versions for easy matching (values).
         *                                           {string[]} wrappedArgs.args[pageSelectors] - String array containing selectors that appear anywhere on this page (as returned by innerFindMatchingSelectors) - should be a subset of keys in selectors.
         * @return {string[]} Array of selectors matching above-the-fold elements.
         */
        static innerFindAboveFoldSelectors({ innerWindow, args: [selectors, pageSelectors], }) {
            /**
             * Inner helper function used inside browser / iframe to check if the given
             * element is "above the fold".
             *
             * @param {HTMLElement} element - Element to check.
             */
            innerWindow = null === innerWindow ? window : innerWindow;
            const isAboveFold = element => {
                const originalClearStyle = element.style.clear || '';
                element.style.clear = 'none';
                const rect = element.getBoundingClientRect();
                element.style.clear = originalClearStyle;
                return rect.top < innerWindow.innerHeight;
            };
            return pageSelectors.filter(s => {
                if ('*' === selectors[s]) {
                    return true;
                }
                const matches = innerWindow.document.querySelectorAll(selectors[s]);
                for (const match of matches) {
                    if (isAboveFold(match)) {
                        return true;
                    }
                }
                return false;
            });
        }
    }

    /**
     * SuccessTargetError - Indicates that insufficient pages loaded to meet
     * a specified success target. Contains information about each error that caused
     * problems and the URLs they affect.
     */
    class SuccessTargetError extends Error {
        constructor(urlErrors) {
            super('Insufficient pages loaded to meet success target. Errors:\n' +
                Object.values(urlErrors)
                    .map(e => e.message)
                    .join('\n'));
            // Mark this as a SuccessTargetError in an easy way for other code to check.
            this.isSuccessTargetError = true;
            // Convert any Error object into reliable {message,type,meta} objects.
            this.urlErrors = {};
            for (const [url, errorObject] of Object.entries(urlErrors)) {
                this.urlErrors[url] = {
                    message: errorObject.message,
                    type: errorObject.type || 'UnknownError',
                    meta: errorObject.meta || {},
                };
            }
        }
    }
    /**
     * Base class for URL specific errors, which can be bundled inside a
     * SuccessTargetError.
     */
    class UrlError extends Error {
        constructor(type, meta, message) {
            super(message);
            this.type = type;
            this.meta = meta;
        }
    }
    /**
     * HttpError - Indicates an HTTP request has failed with a non-2xx status code.
     */
    class HttpError extends UrlError {
        constructor({ url, code }) {
            super('HttpError', { url, code }, `HTTP error ${code} on URL ${url}`);
        }
    }
    /**
     * UnknownError - Indicates that fetch() threw an error with its own error string.
     * Contains a raw (and difficult to translate) error message generated by fetch.
     */
    class UnknownError extends UrlError {
        constructor({ url, message }) {
            super('UnknownError', { url, message }, `Error while loading ${url}: ${message}`);
        }
    }
    /**
     * CrossDomainError - Indicates that a requested URL failed due to CORS / security
     * limitations imposed by the browser.
     */
    class CrossDomainError extends UrlError {
        constructor({ url }) {
            super('CrossDomainError', { url }, `Failed to fetch cross-domain content at ${url}`);
        }
    }
    /**
     * LoadTimeoutError - Indicates that an HTTP request failed due to a timeout.
     */
    class LoadTimeoutError extends UrlError {
        constructor({ url }) {
            super('LoadTimeoutError', { url }, `Timeout while reading ${url}`);
        }
    }
    /**
     * RedirectError - Indicates that a requested URL failed due to an HTTP redirection of that url.
     */
    class RedirectError extends UrlError {
        constructor({ url, redirectUrl }) {
            super('RedirectError', { url, redirectUrl }, `Failed to process ${url} because it redirects to ${redirectUrl} which cannot be verified`);
        }
    }
    /**
     * UrlVerifyError - Indicates that a provided BrowserInterface verifyUrl
     * callback returned false for a page which was otherwise loaded successfully.
     */
    class UrlVerifyError extends UrlError {
        constructor({ url }) {
            super('UrlVerifyError', { url }, `Failed to verify page at ${url}`);
        }
    }
    /**
     * EmptyCSSError - Indicates that a requested URL does not have any CSS in its external style sheet(s) and therefore Critical CSS could not be generated.
     */
    class EmptyCSSError extends UrlError {
        constructor({ url }) {
            super('EmptyCSSError', { url }, `The ${url} does not have any CSS in its external style sheet(s).`);
        }
    }
    /**
     * XFrameDenyError - Indicates that a requested URL failed due to x-frame-options deny configuration
     */
    class XFrameDenyError extends UrlError {
        constructor({ url }) {
            super('XFrameDenyError', { url }, `Failed to load ${url} due to the "X-Frame-Options: DENY" header`);
        }
    }

    const defaultLoadTimeout = 60 * 1000;
    class BrowserInterfaceIframe extends BrowserInterface {
        constructor({ requestGetParameters, loadTimeout, verifyPage, allowScripts, }) {
            super();
            this.requestGetParameters = requestGetParameters || {};
            this.loadTimeout = loadTimeout || defaultLoadTimeout;
            this.verifyPage = verifyPage;
            // Default 'allowScripts' to true if not specified.
            allowScripts = allowScripts !== false;
            this.currentUrl = null;
            this.currentSize = { width: null, height: null };
            // Create a wrapper div to keep the iframe invisible.
            this.wrapperDiv = document.createElement('div');
            this.wrapperDiv.setAttribute('style', 'position:fixed; z-index: -1000; opacity: 0; top: 50px;');
            document.body.append(this.wrapperDiv);
            // Create iframe itself.
            this.iframe = document.createElement('iframe');
            this.iframe.setAttribute('style', 'max-width: none; max-height: none; border: 0px;');
            this.iframe.setAttribute('aria-hidden', 'true');
            this.iframe.setAttribute('sandbox', 'allow-same-origin ' + (allowScripts ? 'allow-scripts' : ''));
            this.wrapperDiv.append(this.iframe);
        }
        async cleanup() {
            this.iframe.remove();
            this.wrapperDiv.remove();
        }
        async fetch(url, options, _role) {
            return window.fetch(url, options);
        }
        async runInPage(pageUrl, viewport, method, ...args) {
            await this.loadPage(pageUrl);
            if (viewport) {
                await this.resize(viewport);
            }
            // The inner window in the iframe is separate from the main window object.
            // Pass the iframe window object to the evaluating method.
            return method({ innerWindow: this.iframe.contentWindow, args });
        }
        addGetParameters(rawUrl) {
            const urlObject = new URL(rawUrl);
            for (const key of Object.keys(this.requestGetParameters)) {
                urlObject.searchParams.append(key, this.requestGetParameters[key]);
            }
            return urlObject.toString();
        }
        async diagnoseUrlError(url) {
            try {
                const response = await this.fetch(url, { redirect: 'manual' }, 'html');
                const headers = response.headers;
                if (headers.get('x-frame-options') === 'DENY') {
                    return new XFrameDenyError({ url });
                }
                if (response.type === 'opaqueredirect') {
                    return new RedirectError({
                        url,
                        redirectUrl: response.url,
                    });
                }
                if (response.status === 200) {
                    return null;
                }
                return new HttpError({ url, code: response.status });
            }
            catch (err) {
                return new UnknownError({ url, message: err.message });
            }
        }
        sameOrigin(url) {
            return new URL(url).origin === window.location.origin;
        }
        async loadPage(rawUrl) {
            if (rawUrl === this.currentUrl) {
                return;
            }
            const fullUrl = this.addGetParameters(rawUrl);
            return new Promise((resolve, rawReject) => {
                // Track all URL errors.
                const reject = err => {
                    this.trackUrlError(rawUrl, err);
                    rawReject(err);
                };
                // Catch cross-domain errors before they occur.
                if (!this.sameOrigin(fullUrl)) {
                    reject(new CrossDomainError({ url: fullUrl }));
                    return;
                }
                // Set a timeout.
                const timeoutId = setTimeout(() => {
                    this.iframe.onload = null;
                    reject(new LoadTimeoutError({ url: fullUrl }));
                }, this.loadTimeout);
                // Catch load event.
                this.iframe.onload = async () => {
                    try {
                        this.iframe.onload = null;
                        clearTimeout(timeoutId);
                        // Verify the inner document is readable.
                        if (!this.iframe.contentDocument || !this.iframe.contentWindow) {
                            throw ((await this.diagnoseUrlError(fullUrl)) || new CrossDomainError({ url: fullUrl }));
                        }
                        if (!this.verifyPage(rawUrl, this.iframe.contentWindow, this.iframe.contentDocument)) {
                            // Diagnose and throw an appropriate error.
                            throw ((await this.diagnoseUrlError(fullUrl)) || new UrlVerifyError({ url: fullUrl }));
                        }
                        this.currentUrl = rawUrl;
                        resolve();
                    }
                    catch (err) {
                        reject(err);
                    }
                };
                this.iframe.src = fullUrl;
            });
        }
        async resize({ width, height }) {
            if (this.currentSize.width === width && this.currentSize.height === height) {
                return;
            }
            return new Promise(resolve => {
                // Set iframe size.
                this.iframe.width = width.toString();
                this.iframe.height = height.toString();
                // Bounce to browser main loop to allow resize to complete.
                setTimeout(resolve, 1);
            });
        }
    }

    // CSS Syntax Module Level 3
    // https://www.w3.org/TR/css-syntax-3/
    const EOF$1 = 0;                 // <EOF-token>
    const Ident = 1;               // <ident-token>
    const Function$1 = 2;            // <function-token>
    const AtKeyword = 3;           // <at-keyword-token>
    const Hash$1 = 4;                // <hash-token>
    const String$2 = 5;              // <string-token>
    const BadString = 6;           // <bad-string-token>
    const Url$2 = 7;                 // <url-token>
    const BadUrl = 8;              // <bad-url-token>
    const Delim = 9;               // <delim-token>
    const Number$2 = 10;             // <number-token>
    const Percentage$1 = 11;         // <percentage-token>
    const Dimension$1 = 12;          // <dimension-token>
    const WhiteSpace$1 = 13;         // <whitespace-token>
    const CDO$1 = 14;                // <CDO-token>
    const CDC$1 = 15;                // <CDC-token>
    const Colon = 16;              // <colon-token>     :
    const Semicolon = 17;          // <semicolon-token> ;
    const Comma = 18;              // <comma-token>     ,
    const LeftSquareBracket = 19;  // <[-token>
    const RightSquareBracket = 20; // <]-token>
    const LeftParenthesis = 21;    // <(-token>
    const RightParenthesis = 22;   // <)-token>
    const LeftCurlyBracket = 23;   // <{-token>
    const RightCurlyBracket = 24;  // <}-token>
    const Comment$1 = 25;

    const EOF = 0;

    // https://drafts.csswg.org/css-syntax-3/
    // § 4.2. Definitions

    // digit
    // A code point between U+0030 DIGIT ZERO (0) and U+0039 DIGIT NINE (9).
    function isDigit(code) {
        return code >= 0x0030 && code <= 0x0039;
    }

    // hex digit
    // A digit, or a code point between U+0041 LATIN CAPITAL LETTER A (A) and U+0046 LATIN CAPITAL LETTER F (F),
    // or a code point between U+0061 LATIN SMALL LETTER A (a) and U+0066 LATIN SMALL LETTER F (f).
    function isHexDigit(code) {
        return (
            isDigit(code) || // 0 .. 9
            (code >= 0x0041 && code <= 0x0046) || // A .. F
            (code >= 0x0061 && code <= 0x0066)    // a .. f
        );
    }

    // uppercase letter
    // A code point between U+0041 LATIN CAPITAL LETTER A (A) and U+005A LATIN CAPITAL LETTER Z (Z).
    function isUppercaseLetter(code) {
        return code >= 0x0041 && code <= 0x005A;
    }

    // lowercase letter
    // A code point between U+0061 LATIN SMALL LETTER A (a) and U+007A LATIN SMALL LETTER Z (z).
    function isLowercaseLetter(code) {
        return code >= 0x0061 && code <= 0x007A;
    }

    // letter
    // An uppercase letter or a lowercase letter.
    function isLetter(code) {
        return isUppercaseLetter(code) || isLowercaseLetter(code);
    }

    // non-ASCII code point
    // A code point with a value equal to or greater than U+0080 <control>.
    function isNonAscii(code) {
        return code >= 0x0080;
    }

    // name-start code point
    // A letter, a non-ASCII code point, or U+005F LOW LINE (_).
    function isNameStart(code) {
        return isLetter(code) || isNonAscii(code) || code === 0x005F;
    }

    // name code point
    // A name-start code point, a digit, or U+002D HYPHEN-MINUS (-).
    function isName(code) {
        return isNameStart(code) || isDigit(code) || code === 0x002D;
    }

    // non-printable code point
    // A code point between U+0000 NULL and U+0008 BACKSPACE, or U+000B LINE TABULATION,
    // or a code point between U+000E SHIFT OUT and U+001F INFORMATION SEPARATOR ONE, or U+007F DELETE.
    function isNonPrintable(code) {
        return (
            (code >= 0x0000 && code <= 0x0008) ||
            (code === 0x000B) ||
            (code >= 0x000E && code <= 0x001F) ||
            (code === 0x007F)
        );
    }

    // newline
    // U+000A LINE FEED. Note that U+000D CARRIAGE RETURN and U+000C FORM FEED are not included in this definition,
    // as they are converted to U+000A LINE FEED during preprocessing.
    // TODO: we doesn't do a preprocessing, so check a code point for U+000D CARRIAGE RETURN and U+000C FORM FEED
    function isNewline(code) {
        return code === 0x000A || code === 0x000D || code === 0x000C;
    }

    // whitespace
    // A newline, U+0009 CHARACTER TABULATION, or U+0020 SPACE.
    function isWhiteSpace(code) {
        return isNewline(code) || code === 0x0020 || code === 0x0009;
    }

    // § 4.3.8. Check if two code points are a valid escape
    function isValidEscape(first, second) {
        // If the first code point is not U+005C REVERSE SOLIDUS (\), return false.
        if (first !== 0x005C) {
            return false;
        }

        // Otherwise, if the second code point is a newline or EOF, return false.
        if (isNewline(second) || second === EOF) {
            return false;
        }

        // Otherwise, return true.
        return true;
    }

    // § 4.3.9. Check if three code points would start an identifier
    function isIdentifierStart(first, second, third) {
        // Look at the first code point:

        // U+002D HYPHEN-MINUS
        if (first === 0x002D) {
            // If the second code point is a name-start code point or a U+002D HYPHEN-MINUS,
            // or the second and third code points are a valid escape, return true. Otherwise, return false.
            return (
                isNameStart(second) ||
                second === 0x002D ||
                isValidEscape(second, third)
            );
        }

        // name-start code point
        if (isNameStart(first)) {
            // Return true.
            return true;
        }

        // U+005C REVERSE SOLIDUS (\)
        if (first === 0x005C) {
            // If the first and second code points are a valid escape, return true. Otherwise, return false.
            return isValidEscape(first, second);
        }

        // anything else
        // Return false.
        return false;
    }

    // § 4.3.10. Check if three code points would start a number
    function isNumberStart(first, second, third) {
        // Look at the first code point:

        // U+002B PLUS SIGN (+)
        // U+002D HYPHEN-MINUS (-)
        if (first === 0x002B || first === 0x002D) {
            // If the second code point is a digit, return true.
            if (isDigit(second)) {
                return 2;
            }

            // Otherwise, if the second code point is a U+002E FULL STOP (.)
            // and the third code point is a digit, return true.
            // Otherwise, return false.
            return second === 0x002E && isDigit(third) ? 3 : 0;
        }

        // U+002E FULL STOP (.)
        if (first === 0x002E) {
            // If the second code point is a digit, return true. Otherwise, return false.
            return isDigit(second) ? 2 : 0;
        }

        // digit
        if (isDigit(first)) {
            // Return true.
            return 1;
        }

        // anything else
        // Return false.
        return 0;
    }

    //
    // Misc
    //

    // detect BOM (https://en.wikipedia.org/wiki/Byte_order_mark)
    function isBOM(code) {
        // UTF-16BE
        if (code === 0xFEFF) {
            return 1;
        }

        // UTF-16LE
        if (code === 0xFFFE) {
            return 1;
        }

        return 0;
    }

    // Fast code category
    // Only ASCII code points has a special meaning, that's why we define a maps for 0..127 codes only
    const CATEGORY = new Array(0x80);
    const EofCategory = 0x80;
    const WhiteSpaceCategory = 0x82;
    const DigitCategory = 0x83;
    const NameStartCategory = 0x84;
    const NonPrintableCategory = 0x85;

    for (let i = 0; i < CATEGORY.length; i++) {
        CATEGORY[i] =
            isWhiteSpace(i) && WhiteSpaceCategory ||
            isDigit(i) && DigitCategory ||
            isNameStart(i) && NameStartCategory ||
            isNonPrintable(i) && NonPrintableCategory ||
            i || EofCategory;
    }

    function charCodeCategory(code) {
        return code < 0x80 ? CATEGORY[code] : NameStartCategory;
    }

    function getCharCode(source, offset) {
        return offset < source.length ? source.charCodeAt(offset) : 0;
    }

    function getNewlineLength(source, offset, code) {
        if (code === 13 /* \r */ && getCharCode(source, offset + 1) === 10 /* \n */) {
            return 2;
        }

        return 1;
    }

    function cmpChar(testStr, offset, referenceCode) {
        let code = testStr.charCodeAt(offset);

        // code.toLowerCase() for A..Z
        if (isUppercaseLetter(code)) {
            code = code | 32;
        }

        return code === referenceCode;
    }

    function cmpStr(testStr, start, end, referenceStr) {
        if (end - start !== referenceStr.length) {
            return false;
        }

        if (start < 0 || end > testStr.length) {
            return false;
        }

        for (let i = start; i < end; i++) {
            const referenceCode = referenceStr.charCodeAt(i - start);
            let testCode = testStr.charCodeAt(i);

            // testCode.toLowerCase() for A..Z
            if (isUppercaseLetter(testCode)) {
                testCode = testCode | 32;
            }

            if (testCode !== referenceCode) {
                return false;
            }
        }

        return true;
    }

    function findWhiteSpaceStart(source, offset) {
        for (; offset >= 0; offset--) {
            if (!isWhiteSpace(source.charCodeAt(offset))) {
                break;
            }
        }

        return offset + 1;
    }

    function findWhiteSpaceEnd(source, offset) {
        for (; offset < source.length; offset++) {
            if (!isWhiteSpace(source.charCodeAt(offset))) {
                break;
            }
        }

        return offset;
    }

    function findDecimalNumberEnd(source, offset) {
        for (; offset < source.length; offset++) {
            if (!isDigit(source.charCodeAt(offset))) {
                break;
            }
        }

        return offset;
    }

    // § 4.3.7. Consume an escaped code point
    function consumeEscaped(source, offset) {
        // It assumes that the U+005C REVERSE SOLIDUS (\) has already been consumed and
        // that the next input code point has already been verified to be part of a valid escape.
        offset += 2;

        // hex digit
        if (isHexDigit(getCharCode(source, offset - 1))) {
            // Consume as many hex digits as possible, but no more than 5.
            // Note that this means 1-6 hex digits have been consumed in total.
            for (const maxOffset = Math.min(source.length, offset + 5); offset < maxOffset; offset++) {
                if (!isHexDigit(getCharCode(source, offset))) {
                    break;
                }
            }

            // If the next input code point is whitespace, consume it as well.
            const code = getCharCode(source, offset);
            if (isWhiteSpace(code)) {
                offset += getNewlineLength(source, offset, code);
            }
        }

        return offset;
    }

    // §4.3.11. Consume a name
    // Note: This algorithm does not do the verification of the first few code points that are necessary
    // to ensure the returned code points would constitute an <ident-token>. If that is the intended use,
    // ensure that the stream starts with an identifier before calling this algorithm.
    function consumeName(source, offset) {
        // Let result initially be an empty string.
        // Repeatedly consume the next input code point from the stream:
        for (; offset < source.length; offset++) {
            const code = source.charCodeAt(offset);

            // name code point
            if (isName(code)) {
                // Append the code point to result.
                continue;
            }

            // the stream starts with a valid escape
            if (isValidEscape(code, getCharCode(source, offset + 1))) {
                // Consume an escaped code point. Append the returned code point to result.
                offset = consumeEscaped(source, offset) - 1;
                continue;
            }

            // anything else
            // Reconsume the current input code point. Return result.
            break;
        }

        return offset;
    }

    // §4.3.12. Consume a number
    function consumeNumber$1(source, offset) {
        let code = source.charCodeAt(offset);

        // 2. If the next input code point is U+002B PLUS SIGN (+) or U+002D HYPHEN-MINUS (-),
        // consume it and append it to repr.
        if (code === 0x002B || code === 0x002D) {
            code = source.charCodeAt(offset += 1);
        }

        // 3. While the next input code point is a digit, consume it and append it to repr.
        if (isDigit(code)) {
            offset = findDecimalNumberEnd(source, offset + 1);
            code = source.charCodeAt(offset);
        }

        // 4. If the next 2 input code points are U+002E FULL STOP (.) followed by a digit, then:
        if (code === 0x002E && isDigit(source.charCodeAt(offset + 1))) {
            // 4.1 Consume them.
            // 4.2 Append them to repr.
            offset += 2;

            // 4.3 Set type to "number".
            // TODO

            // 4.4 While the next input code point is a digit, consume it and append it to repr.

            offset = findDecimalNumberEnd(source, offset);
        }

        // 5. If the next 2 or 3 input code points are U+0045 LATIN CAPITAL LETTER E (E)
        // or U+0065 LATIN SMALL LETTER E (e), ... , followed by a digit, then:
        if (cmpChar(source, offset, 101 /* e */)) {
            let sign = 0;
            code = source.charCodeAt(offset + 1);

            // ... optionally followed by U+002D HYPHEN-MINUS (-) or U+002B PLUS SIGN (+) ...
            if (code === 0x002D || code === 0x002B) {
                sign = 1;
                code = source.charCodeAt(offset + 2);
            }

            // ... followed by a digit
            if (isDigit(code)) {
                // 5.1 Consume them.
                // 5.2 Append them to repr.

                // 5.3 Set type to "number".
                // TODO

                // 5.4 While the next input code point is a digit, consume it and append it to repr.
                offset = findDecimalNumberEnd(source, offset + 1 + sign + 1);
            }
        }

        return offset;
    }

    // § 4.3.14. Consume the remnants of a bad url
    // ... its sole use is to consume enough of the input stream to reach a recovery point
    // where normal tokenizing can resume.
    function consumeBadUrlRemnants(source, offset) {
        // Repeatedly consume the next input code point from the stream:
        for (; offset < source.length; offset++) {
            const code = source.charCodeAt(offset);

            // U+0029 RIGHT PARENTHESIS ())
            // EOF
            if (code === 0x0029) {
                // Return.
                offset++;
                break;
            }

            if (isValidEscape(code, getCharCode(source, offset + 1))) {
                // Consume an escaped code point.
                // Note: This allows an escaped right parenthesis ("\)") to be encountered
                // without ending the <bad-url-token>. This is otherwise identical to
                // the "anything else" clause.
                offset = consumeEscaped(source, offset);
            }
        }

        return offset;
    }

    // § 4.3.7. Consume an escaped code point
    // Note: This algorithm assumes that escaped is valid without leading U+005C REVERSE SOLIDUS (\)
    function decodeEscaped(escaped) {
        // Single char escaped that's not a hex digit
        if (escaped.length === 1 && !isHexDigit(escaped.charCodeAt(0))) {
            return escaped[0];
        }

        // Interpret the hex digits as a hexadecimal number.
        let code = parseInt(escaped, 16);

        if (
            (code === 0) ||                       // If this number is zero,
            (code >= 0xD800 && code <= 0xDFFF) || // or is for a surrogate,
            (code > 0x10FFFF)                     // or is greater than the maximum allowed code point
        ) {
            // ... return U+FFFD REPLACEMENT CHARACTER
            code = 0xFFFD;
        }

        // Otherwise, return the code point with that value.
        return String.fromCodePoint(code);
    }

    var tokenNames = [
        'EOF-token',
        'ident-token',
        'function-token',
        'at-keyword-token',
        'hash-token',
        'string-token',
        'bad-string-token',
        'url-token',
        'bad-url-token',
        'delim-token',
        'number-token',
        'percentage-token',
        'dimension-token',
        'whitespace-token',
        'CDO-token',
        'CDC-token',
        'colon-token',
        'semicolon-token',
        'comma-token',
        '[-token',
        ']-token',
        '(-token',
        ')-token',
        '{-token',
        '}-token'
    ];

    const MIN_SIZE = 16 * 1024;

    function adoptBuffer(buffer = null, size) {
        if (buffer === null || buffer.length < size) {
            return new Uint32Array(Math.max(size + 1024, MIN_SIZE));
        }

        return buffer;
    }

    const N$4 = 10;
    const F$2 = 12;
    const R$2 = 13;

    function computeLinesAndColumns(host) {
        const source = host.source;
        const sourceLength = source.length;
        const startOffset = source.length > 0 ? isBOM(source.charCodeAt(0)) : 0;
        const lines = adoptBuffer(host.lines, sourceLength);
        const columns = adoptBuffer(host.columns, sourceLength);
        let line = host.startLine;
        let column = host.startColumn;

        for (let i = startOffset; i < sourceLength; i++) {
            const code = source.charCodeAt(i);

            lines[i] = line;
            columns[i] = column++;

            if (code === N$4 || code === R$2 || code === F$2) {
                if (code === R$2 && i + 1 < sourceLength && source.charCodeAt(i + 1) === N$4) {
                    i++;
                    lines[i] = line;
                    columns[i] = column;
                }

                line++;
                column = 1;
            }
        }

        lines[sourceLength] = line;
        columns[sourceLength] = column;

        host.lines = lines;
        host.columns = columns;
        host.computed = true;
    }

    class OffsetToLocation {
        constructor() {
            this.lines = null;
            this.columns = null;
            this.computed = false;
        }
        setSource(source, startOffset = 0, startLine = 1, startColumn = 1) {
            this.source = source;
            this.startOffset = startOffset;
            this.startLine = startLine;
            this.startColumn = startColumn;
            this.computed = false;
        }
        getLocation(offset, filename) {
            if (!this.computed) {
                computeLinesAndColumns(this);
            }

            return {
                source: filename,
                offset: this.startOffset + offset,
                line: this.lines[offset],
                column: this.columns[offset]
            };
        }
        getLocationRange(start, end, filename) {
            if (!this.computed) {
                computeLinesAndColumns(this);
            }

            return {
                source: filename,
                start: {
                    offset: this.startOffset + start,
                    line: this.lines[start],
                    column: this.columns[start]
                },
                end: {
                    offset: this.startOffset + end,
                    line: this.lines[end],
                    column: this.columns[end]
                }
            };
        }
    }

    const OFFSET_MASK = 0x00FFFFFF;
    const TYPE_SHIFT = 24;
    const balancePair$1 = new Map([
        [Function$1, RightParenthesis],
        [LeftParenthesis, RightParenthesis],
        [LeftSquareBracket, RightSquareBracket],
        [LeftCurlyBracket, RightCurlyBracket]
    ]);

    class TokenStream {
        constructor(source, tokenize) {
            this.setSource(source, tokenize);
        }
        reset() {
            this.eof = false;
            this.tokenIndex = -1;
            this.tokenType = 0;
            this.tokenStart = this.firstCharOffset;
            this.tokenEnd = this.firstCharOffset;
        }
        setSource(source = '', tokenize = () => {}) {
            source = String(source || '');

            const sourceLength = source.length;
            const offsetAndType = adoptBuffer(this.offsetAndType, source.length + 1); // +1 because of eof-token
            const balance = adoptBuffer(this.balance, source.length + 1);
            let tokenCount = 0;
            let balanceCloseType = 0;
            let balanceStart = 0;
            let firstCharOffset = -1;

            // capture buffers
            this.offsetAndType = null;
            this.balance = null;

            tokenize(source, (type, start, end) => {
                switch (type) {
                    default:
                        balance[tokenCount] = sourceLength;
                        break;

                    case balanceCloseType: {
                        let balancePrev = balanceStart & OFFSET_MASK;
                        balanceStart = balance[balancePrev];
                        balanceCloseType = balanceStart >> TYPE_SHIFT;
                        balance[tokenCount] = balancePrev;
                        balance[balancePrev++] = tokenCount;
                        for (; balancePrev < tokenCount; balancePrev++) {
                            if (balance[balancePrev] === sourceLength) {
                                balance[balancePrev] = tokenCount;
                            }
                        }
                        break;
                    }

                    case LeftParenthesis:
                    case Function$1:
                    case LeftSquareBracket:
                    case LeftCurlyBracket:
                        balance[tokenCount] = balanceStart;
                        balanceCloseType = balancePair$1.get(type);
                        balanceStart = (balanceCloseType << TYPE_SHIFT) | tokenCount;
                        break;
                }

                offsetAndType[tokenCount++] = (type << TYPE_SHIFT) | end;
                if (firstCharOffset === -1) {
                    firstCharOffset = start;
                }
            });

            // finalize buffers
            offsetAndType[tokenCount] = (EOF$1 << TYPE_SHIFT) | sourceLength; // <EOF-token>
            balance[tokenCount] = sourceLength;
            balance[sourceLength] = sourceLength; // prevents false positive balance match with any token
            while (balanceStart !== 0) {
                const balancePrev = balanceStart & OFFSET_MASK;
                balanceStart = balance[balancePrev];
                balance[balancePrev] = sourceLength;
            }

            this.source = source;
            this.firstCharOffset = firstCharOffset === -1 ? 0 : firstCharOffset;
            this.tokenCount = tokenCount;
            this.offsetAndType = offsetAndType;
            this.balance = balance;

            this.reset();
            this.next();
        }

        lookupType(offset) {
            offset += this.tokenIndex;

            if (offset < this.tokenCount) {
                return this.offsetAndType[offset] >> TYPE_SHIFT;
            }

            return EOF$1;
        }
        lookupOffset(offset) {
            offset += this.tokenIndex;

            if (offset < this.tokenCount) {
                return this.offsetAndType[offset - 1] & OFFSET_MASK;
            }

            return this.source.length;
        }
        lookupValue(offset, referenceStr) {
            offset += this.tokenIndex;

            if (offset < this.tokenCount) {
                return cmpStr(
                    this.source,
                    this.offsetAndType[offset - 1] & OFFSET_MASK,
                    this.offsetAndType[offset] & OFFSET_MASK,
                    referenceStr
                );
            }

            return false;
        }
        getTokenStart(tokenIndex) {
            if (tokenIndex === this.tokenIndex) {
                return this.tokenStart;
            }

            if (tokenIndex > 0) {
                return tokenIndex < this.tokenCount
                    ? this.offsetAndType[tokenIndex - 1] & OFFSET_MASK
                    : this.offsetAndType[this.tokenCount] & OFFSET_MASK;
            }

            return this.firstCharOffset;
        }
        substrToCursor(start) {
            return this.source.substring(start, this.tokenStart);
        }

        isBalanceEdge(pos) {
            return this.balance[this.tokenIndex] < pos;
        }
        isDelim(code, offset) {
            if (offset) {
                return (
                    this.lookupType(offset) === Delim &&
                    this.source.charCodeAt(this.lookupOffset(offset)) === code
                );
            }

            return (
                this.tokenType === Delim &&
                this.source.charCodeAt(this.tokenStart) === code
            );
        }

        skip(tokenCount) {
            let next = this.tokenIndex + tokenCount;

            if (next < this.tokenCount) {
                this.tokenIndex = next;
                this.tokenStart = this.offsetAndType[next - 1] & OFFSET_MASK;
                next = this.offsetAndType[next];
                this.tokenType = next >> TYPE_SHIFT;
                this.tokenEnd = next & OFFSET_MASK;
            } else {
                this.tokenIndex = this.tokenCount;
                this.next();
            }
        }
        next() {
            let next = this.tokenIndex + 1;

            if (next < this.tokenCount) {
                this.tokenIndex = next;
                this.tokenStart = this.tokenEnd;
                next = this.offsetAndType[next];
                this.tokenType = next >> TYPE_SHIFT;
                this.tokenEnd = next & OFFSET_MASK;
            } else {
                this.eof = true;
                this.tokenIndex = this.tokenCount;
                this.tokenType = EOF$1;
                this.tokenStart = this.tokenEnd = this.source.length;
            }
        }
        skipSC() {
            while (this.tokenType === WhiteSpace$1 || this.tokenType === Comment$1) {
                this.next();
            }
        }
        skipUntilBalanced(startToken, stopConsume) {
            let cursor = startToken;
            let balanceEnd;
            let offset;

            loop:
            for (; cursor < this.tokenCount; cursor++) {
                balanceEnd = this.balance[cursor];

                // stop scanning on balance edge that points to offset before start token
                if (balanceEnd < startToken) {
                    break loop;
                }

                offset = cursor > 0 ? this.offsetAndType[cursor - 1] & OFFSET_MASK : this.firstCharOffset;

                // check stop condition
                switch (stopConsume(this.source.charCodeAt(offset))) {
                    case 1: // just stop
                        break loop;

                    case 2: // stop & included
                        cursor++;
                        break loop;

                    default:
                        // fast forward to the end of balanced block
                        if (this.balance[balanceEnd] === cursor) {
                            cursor = balanceEnd;
                        }
                }
            }

            this.skip(cursor - this.tokenIndex);
        }

        forEachToken(fn) {
            for (let i = 0, offset = this.firstCharOffset; i < this.tokenCount; i++) {
                const start = offset;
                const item = this.offsetAndType[i];
                const end = item & OFFSET_MASK;
                const type = item >> TYPE_SHIFT;

                offset = end;

                fn(type, start, end, i);
            }
        }
        dump() {
            const tokens = new Array(this.tokenCount);

            this.forEachToken((type, start, end, index) => {
                tokens[index] = {
                    idx: index,
                    type: tokenNames[type],
                    chunk: this.source.substring(start, end),
                    balance: this.balance[index]
                };
            });

            return tokens;
        }
    }

    function tokenize$3(source, onToken) {
        function getCharCode(offset) {
            return offset < sourceLength ? source.charCodeAt(offset) : 0;
        }

        // § 4.3.3. Consume a numeric token
        function consumeNumericToken() {
            // Consume a number and let number be the result.
            offset = consumeNumber$1(source, offset);

            // If the next 3 input code points would start an identifier, then:
            if (isIdentifierStart(getCharCode(offset), getCharCode(offset + 1), getCharCode(offset + 2))) {
                // Create a <dimension-token> with the same value and type flag as number, and a unit set initially to the empty string.
                // Consume a name. Set the <dimension-token>’s unit to the returned value.
                // Return the <dimension-token>.
                type = Dimension$1;
                offset = consumeName(source, offset);
                return;
            }

            // Otherwise, if the next input code point is U+0025 PERCENTAGE SIGN (%), consume it.
            if (getCharCode(offset) === 0x0025) {
                // Create a <percentage-token> with the same value as number, and return it.
                type = Percentage$1;
                offset++;
                return;
            }

            // Otherwise, create a <number-token> with the same value and type flag as number, and return it.
            type = Number$2;
        }

        // § 4.3.4. Consume an ident-like token
        function consumeIdentLikeToken() {
            const nameStartOffset = offset;

            // Consume a name, and let string be the result.
            offset = consumeName(source, offset);

            // If string’s value is an ASCII case-insensitive match for "url",
            // and the next input code point is U+0028 LEFT PARENTHESIS ((), consume it.
            if (cmpStr(source, nameStartOffset, offset, 'url') && getCharCode(offset) === 0x0028) {
                // While the next two input code points are whitespace, consume the next input code point.
                offset = findWhiteSpaceEnd(source, offset + 1);

                // If the next one or two input code points are U+0022 QUOTATION MARK ("), U+0027 APOSTROPHE ('),
                // or whitespace followed by U+0022 QUOTATION MARK (") or U+0027 APOSTROPHE ('),
                // then create a <function-token> with its value set to string and return it.
                if (getCharCode(offset) === 0x0022 ||
                    getCharCode(offset) === 0x0027) {
                    type = Function$1;
                    offset = nameStartOffset + 4;
                    return;
                }

                // Otherwise, consume a url token, and return it.
                consumeUrlToken();
                return;
            }

            // Otherwise, if the next input code point is U+0028 LEFT PARENTHESIS ((), consume it.
            // Create a <function-token> with its value set to string and return it.
            if (getCharCode(offset) === 0x0028) {
                type = Function$1;
                offset++;
                return;
            }

            // Otherwise, create an <ident-token> with its value set to string and return it.
            type = Ident;
        }

        // § 4.3.5. Consume a string token
        function consumeStringToken(endingCodePoint) {
            // This algorithm may be called with an ending code point, which denotes the code point
            // that ends the string. If an ending code point is not specified,
            // the current input code point is used.
            if (!endingCodePoint) {
                endingCodePoint = getCharCode(offset++);
            }

            // Initially create a <string-token> with its value set to the empty string.
            type = String$2;

            // Repeatedly consume the next input code point from the stream:
            for (; offset < source.length; offset++) {
                const code = source.charCodeAt(offset);

                switch (charCodeCategory(code)) {
                    // ending code point
                    case endingCodePoint:
                        // Return the <string-token>.
                        offset++;
                        return;

                        // EOF
                        // case EofCategory:
                        // This is a parse error. Return the <string-token>.
                        // return;

                    // newline
                    case WhiteSpaceCategory:
                        if (isNewline(code)) {
                            // This is a parse error. Reconsume the current input code point,
                            // create a <bad-string-token>, and return it.
                            offset += getNewlineLength(source, offset, code);
                            type = BadString;
                            return;
                        }
                        break;

                    // U+005C REVERSE SOLIDUS (\)
                    case 0x005C:
                        // If the next input code point is EOF, do nothing.
                        if (offset === source.length - 1) {
                            break;
                        }

                        const nextCode = getCharCode(offset + 1);

                        // Otherwise, if the next input code point is a newline, consume it.
                        if (isNewline(nextCode)) {
                            offset += getNewlineLength(source, offset + 1, nextCode);
                        } else if (isValidEscape(code, nextCode)) {
                            // Otherwise, (the stream starts with a valid escape) consume
                            // an escaped code point and append the returned code point to
                            // the <string-token>’s value.
                            offset = consumeEscaped(source, offset) - 1;
                        }
                        break;

                    // anything else
                    // Append the current input code point to the <string-token>’s value.
                }
            }
        }

        // § 4.3.6. Consume a url token
        // Note: This algorithm assumes that the initial "url(" has already been consumed.
        // This algorithm also assumes that it’s being called to consume an "unquoted" value, like url(foo).
        // A quoted value, like url("foo"), is parsed as a <function-token>. Consume an ident-like token
        // automatically handles this distinction; this algorithm shouldn’t be called directly otherwise.
        function consumeUrlToken() {
            // Initially create a <url-token> with its value set to the empty string.
            type = Url$2;

            // Consume as much whitespace as possible.
            offset = findWhiteSpaceEnd(source, offset);

            // Repeatedly consume the next input code point from the stream:
            for (; offset < source.length; offset++) {
                const code = source.charCodeAt(offset);

                switch (charCodeCategory(code)) {
                    // U+0029 RIGHT PARENTHESIS ())
                    case 0x0029:
                        // Return the <url-token>.
                        offset++;
                        return;

                        // EOF
                        // case EofCategory:
                        // This is a parse error. Return the <url-token>.
                        // return;

                    // whitespace
                    case WhiteSpaceCategory:
                        // Consume as much whitespace as possible.
                        offset = findWhiteSpaceEnd(source, offset);

                        // If the next input code point is U+0029 RIGHT PARENTHESIS ()) or EOF,
                        // consume it and return the <url-token>
                        // (if EOF was encountered, this is a parse error);
                        if (getCharCode(offset) === 0x0029 || offset >= source.length) {
                            if (offset < source.length) {
                                offset++;
                            }
                            return;
                        }

                        // otherwise, consume the remnants of a bad url, create a <bad-url-token>,
                        // and return it.
                        offset = consumeBadUrlRemnants(source, offset);
                        type = BadUrl;
                        return;

                    // U+0022 QUOTATION MARK (")
                    // U+0027 APOSTROPHE (')
                    // U+0028 LEFT PARENTHESIS (()
                    // non-printable code point
                    case 0x0022:
                    case 0x0027:
                    case 0x0028:
                    case NonPrintableCategory:
                        // This is a parse error. Consume the remnants of a bad url,
                        // create a <bad-url-token>, and return it.
                        offset = consumeBadUrlRemnants(source, offset);
                        type = BadUrl;
                        return;

                    // U+005C REVERSE SOLIDUS (\)
                    case 0x005C:
                        // If the stream starts with a valid escape, consume an escaped code point and
                        // append the returned code point to the <url-token>’s value.
                        if (isValidEscape(code, getCharCode(offset + 1))) {
                            offset = consumeEscaped(source, offset) - 1;
                            break;
                        }

                        // Otherwise, this is a parse error. Consume the remnants of a bad url,
                        // create a <bad-url-token>, and return it.
                        offset = consumeBadUrlRemnants(source, offset);
                        type = BadUrl;
                        return;

                    // anything else
                    // Append the current input code point to the <url-token>’s value.
                }
            }
        }

        // ensure source is a string
        source = String(source || '');

        const sourceLength = source.length;
        let start = isBOM(getCharCode(0));
        let offset = start;
        let type;

        // https://drafts.csswg.org/css-syntax-3/#consume-token
        // § 4.3.1. Consume a token
        while (offset < sourceLength) {
            const code = source.charCodeAt(offset);

            switch (charCodeCategory(code)) {
                // whitespace
                case WhiteSpaceCategory:
                    // Consume as much whitespace as possible. Return a <whitespace-token>.
                    type = WhiteSpace$1;
                    offset = findWhiteSpaceEnd(source, offset + 1);
                    break;

                // U+0022 QUOTATION MARK (")
                case 0x0022:
                    // Consume a string token and return it.
                    consumeStringToken();
                    break;

                // U+0023 NUMBER SIGN (#)
                case 0x0023:
                    // If the next input code point is a name code point or the next two input code points are a valid escape, then:
                    if (isName(getCharCode(offset + 1)) || isValidEscape(getCharCode(offset + 1), getCharCode(offset + 2))) {
                        // Create a <hash-token>.
                        type = Hash$1;

                        // If the next 3 input code points would start an identifier, set the <hash-token>’s type flag to "id".
                        // if (isIdentifierStart(getCharCode(offset + 1), getCharCode(offset + 2), getCharCode(offset + 3))) {
                        //     // TODO: set id flag
                        // }

                        // Consume a name, and set the <hash-token>’s value to the returned string.
                        offset = consumeName(source, offset + 1);

                        // Return the <hash-token>.
                    } else {
                        // Otherwise, return a <delim-token> with its value set to the current input code point.
                        type = Delim;
                        offset++;
                    }

                    break;

                // U+0027 APOSTROPHE (')
                case 0x0027:
                    // Consume a string token and return it.
                    consumeStringToken();
                    break;

                // U+0028 LEFT PARENTHESIS (()
                case 0x0028:
                    // Return a <(-token>.
                    type = LeftParenthesis;
                    offset++;
                    break;

                // U+0029 RIGHT PARENTHESIS ())
                case 0x0029:
                    // Return a <)-token>.
                    type = RightParenthesis;
                    offset++;
                    break;

                // U+002B PLUS SIGN (+)
                case 0x002B:
                    // If the input stream starts with a number, ...
                    if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {
                        // ... reconsume the current input code point, consume a numeric token, and return it.
                        consumeNumericToken();
                    } else {
                        // Otherwise, return a <delim-token> with its value set to the current input code point.
                        type = Delim;
                        offset++;
                    }
                    break;

                // U+002C COMMA (,)
                case 0x002C:
                    // Return a <comma-token>.
                    type = Comma;
                    offset++;
                    break;

                // U+002D HYPHEN-MINUS (-)
                case 0x002D:
                    // If the input stream starts with a number, reconsume the current input code point, consume a numeric token, and return it.
                    if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {
                        consumeNumericToken();
                    } else {
                        // Otherwise, if the next 2 input code points are U+002D HYPHEN-MINUS U+003E GREATER-THAN SIGN (->), consume them and return a <CDC-token>.
                        if (getCharCode(offset + 1) === 0x002D &&
                            getCharCode(offset + 2) === 0x003E) {
                            type = CDC$1;
                            offset = offset + 3;
                        } else {
                            // Otherwise, if the input stream starts with an identifier, ...
                            if (isIdentifierStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {
                                // ... reconsume the current input code point, consume an ident-like token, and return it.
                                consumeIdentLikeToken();
                            } else {
                                // Otherwise, return a <delim-token> with its value set to the current input code point.
                                type = Delim;
                                offset++;
                            }
                        }
                    }
                    break;

                // U+002E FULL STOP (.)
                case 0x002E:
                    // If the input stream starts with a number, ...
                    if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {
                        // ... reconsume the current input code point, consume a numeric token, and return it.
                        consumeNumericToken();
                    } else {
                        // Otherwise, return a <delim-token> with its value set to the current input code point.
                        type = Delim;
                        offset++;
                    }

                    break;

                // U+002F SOLIDUS (/)
                case 0x002F:
                    // If the next two input code point are U+002F SOLIDUS (/) followed by a U+002A ASTERISK (*),
                    if (getCharCode(offset + 1) === 0x002A) {
                        // ... consume them and all following code points up to and including the first U+002A ASTERISK (*)
                        // followed by a U+002F SOLIDUS (/), or up to an EOF code point.
                        type = Comment$1;
                        offset = source.indexOf('*/', offset + 2);
                        offset = offset === -1 ? source.length : offset + 2;
                    } else {
                        type = Delim;
                        offset++;
                    }
                    break;

                // U+003A COLON (:)
                case 0x003A:
                    // Return a <colon-token>.
                    type = Colon;
                    offset++;
                    break;

                // U+003B SEMICOLON (;)
                case 0x003B:
                    // Return a <semicolon-token>.
                    type = Semicolon;
                    offset++;
                    break;

                // U+003C LESS-THAN SIGN (<)
                case 0x003C:
                    // If the next 3 input code points are U+0021 EXCLAMATION MARK U+002D HYPHEN-MINUS U+002D HYPHEN-MINUS (!--), ...
                    if (getCharCode(offset + 1) === 0x0021 &&
                        getCharCode(offset + 2) === 0x002D &&
                        getCharCode(offset + 3) === 0x002D) {
                        // ... consume them and return a <CDO-token>.
                        type = CDO$1;
                        offset = offset + 4;
                    } else {
                        // Otherwise, return a <delim-token> with its value set to the current input code point.
                        type = Delim;
                        offset++;
                    }

                    break;

                // U+0040 COMMERCIAL AT (@)
                case 0x0040:
                    // If the next 3 input code points would start an identifier, ...
                    if (isIdentifierStart(getCharCode(offset + 1), getCharCode(offset + 2), getCharCode(offset + 3))) {
                        // ... consume a name, create an <at-keyword-token> with its value set to the returned value, and return it.
                        type = AtKeyword;
                        offset = consumeName(source, offset + 1);
                    } else {
                        // Otherwise, return a <delim-token> with its value set to the current input code point.
                        type = Delim;
                        offset++;
                    }

                    break;

                // U+005B LEFT SQUARE BRACKET ([)
                case 0x005B:
                    // Return a <[-token>.
                    type = LeftSquareBracket;
                    offset++;
                    break;

                // U+005C REVERSE SOLIDUS (\)
                case 0x005C:
                    // If the input stream starts with a valid escape, ...
                    if (isValidEscape(code, getCharCode(offset + 1))) {
                        // ... reconsume the current input code point, consume an ident-like token, and return it.
                        consumeIdentLikeToken();
                    } else {
                        // Otherwise, this is a parse error. Return a <delim-token> with its value set to the current input code point.
                        type = Delim;
                        offset++;
                    }
                    break;

                // U+005D RIGHT SQUARE BRACKET (])
                case 0x005D:
                    // Return a <]-token>.
                    type = RightSquareBracket;
                    offset++;
                    break;

                // U+007B LEFT CURLY BRACKET ({)
                case 0x007B:
                    // Return a <{-token>.
                    type = LeftCurlyBracket;
                    offset++;
                    break;

                // U+007D RIGHT CURLY BRACKET (})
                case 0x007D:
                    // Return a <}-token>.
                    type = RightCurlyBracket;
                    offset++;
                    break;

                // digit
                case DigitCategory:
                    // Reconsume the current input code point, consume a numeric token, and return it.
                    consumeNumericToken();
                    break;

                // name-start code point
                case NameStartCategory:
                    // Reconsume the current input code point, consume an ident-like token, and return it.
                    consumeIdentLikeToken();
                    break;

                    // EOF
                    // case EofCategory:
                    // Return an <EOF-token>.
                    // break;

                // anything else
                default:
                    // Return a <delim-token> with its value set to the current input code point.
                    type = Delim;
                    offset++;
            }

            // put token to stream
            onToken(type, start, start = offset);
        }
    }

    //
    //                              list
    //                            ┌──────┐
    //             ┌──────────────┼─head │
    //             │              │ tail─┼──────────────┐
    //             │              └──────┘              │
    //             ▼                                    ▼
    //            item        item        item        item
    //          ┌──────┐    ┌──────┐    ┌──────┐    ┌──────┐
    //  null ◀──┼─prev │◀───┼─prev │◀───┼─prev │◀───┼─prev │
    //          │ next─┼───▶│ next─┼───▶│ next─┼───▶│ next─┼──▶ null
    //          ├──────┤    ├──────┤    ├──────┤    ├──────┤
    //          │ data │    │ data │    │ data │    │ data │
    //          └──────┘    └──────┘    └──────┘    └──────┘
    //

    let releasedCursors = null;

    class List {
        static createItem(data) {
            return {
                prev: null,
                next: null,
                data
            };
        }

        constructor() {
            this.head = null;
            this.tail = null;
            this.cursor = null;
        }
        createItem(data) {
            return List.createItem(data);
        }

        // cursor helpers
        allocateCursor(prev, next) {
            let cursor;

            if (releasedCursors !== null) {
                cursor = releasedCursors;
                releasedCursors = releasedCursors.cursor;
                cursor.prev = prev;
                cursor.next = next;
                cursor.cursor = this.cursor;
            } else {
                cursor = {
                    prev,
                    next,
                    cursor: this.cursor
                };
            }

            this.cursor = cursor;

            return cursor;
        }
        releaseCursor() {
            const { cursor } = this;

            this.cursor = cursor.cursor;
            cursor.prev = null;
            cursor.next = null;
            cursor.cursor = releasedCursors;
            releasedCursors = cursor;
        }
        updateCursors(prevOld, prevNew, nextOld, nextNew) {
            let { cursor } = this;

            while (cursor !== null) {
                if (cursor.prev === prevOld) {
                    cursor.prev = prevNew;
                }

                if (cursor.next === nextOld) {
                    cursor.next = nextNew;
                }

                cursor = cursor.cursor;
            }
        }
        *[Symbol.iterator]() {
            for (let cursor = this.head; cursor !== null; cursor = cursor.next) {
                yield cursor.data;
            }
        }

        // getters
        get size() {
            let size = 0;

            for (let cursor = this.head; cursor !== null; cursor = cursor.next) {
                size++;
            }

            return size;
        }
        get isEmpty() {
            return this.head === null;
        }
        get first() {
            return this.head && this.head.data;
        }
        get last() {
            return this.tail && this.tail.data;
        }

        // convertors
        fromArray(array) {
            let cursor = null;
            this.head = null;

            for (let data of array) {
                const item = List.createItem(data);

                if (cursor !== null) {
                    cursor.next = item;
                } else {
                    this.head = item;
                }

                item.prev = cursor;
                cursor = item;
            }

            this.tail = cursor;
            return this;
        }
        toArray() {
            return [...this];
        }
        toJSON() {
            return [...this];
        }

        // array-like methods
        forEach(fn, thisArg = this) {
            // push cursor
            const cursor = this.allocateCursor(null, this.head);

            while (cursor.next !== null) {
                const item = cursor.next;
                cursor.next = item.next;
                fn.call(thisArg, item.data, item, this);
            }

            // pop cursor
            this.releaseCursor();
        }
        forEachRight(fn, thisArg = this) {
            // push cursor
            const cursor = this.allocateCursor(this.tail, null);

            while (cursor.prev !== null) {
                const item = cursor.prev;
                cursor.prev = item.prev;
                fn.call(thisArg, item.data, item, this);
            }

            // pop cursor
            this.releaseCursor();
        }
        reduce(fn, initialValue, thisArg = this) {
            // push cursor
            let cursor = this.allocateCursor(null, this.head);
            let acc = initialValue;
            let item;

            while (cursor.next !== null) {
                item = cursor.next;
                cursor.next = item.next;

                acc = fn.call(thisArg, acc, item.data, item, this);
            }

            // pop cursor
            this.releaseCursor();

            return acc;
        }
        reduceRight(fn, initialValue, thisArg = this) {
            // push cursor
            let cursor = this.allocateCursor(this.tail, null);
            let acc = initialValue;
            let item;

            while (cursor.prev !== null) {
                item = cursor.prev;
                cursor.prev = item.prev;

                acc = fn.call(thisArg, acc, item.data, item, this);
            }

            // pop cursor
            this.releaseCursor();

            return acc;
        }
        some(fn, thisArg = this) {
            for (let cursor = this.head; cursor !== null; cursor = cursor.next) {
                if (fn.call(thisArg, cursor.data, cursor, this)) {
                    return true;
                }
            }

            return false;
        }
        map(fn, thisArg = this) {
            const result = new List();

            for (let cursor = this.head; cursor !== null; cursor = cursor.next) {
                result.appendData(fn.call(thisArg, cursor.data, cursor, this));
            }

            return result;
        }
        filter(fn, thisArg = this) {
            const result = new List();

            for (let cursor = this.head; cursor !== null; cursor = cursor.next) {
                if (fn.call(thisArg, cursor.data, cursor, this)) {
                    result.appendData(cursor.data);
                }
            }

            return result;
        }

        nextUntil(start, fn, thisArg = this) {
            if (start === null) {
                return;
            }

            // push cursor
            const cursor = this.allocateCursor(null, start);

            while (cursor.next !== null) {
                const item = cursor.next;
                cursor.next = item.next;
                if (fn.call(thisArg, item.data, item, this)) {
                    break;
                }
            }

            // pop cursor
            this.releaseCursor();
        }
        prevUntil(start, fn, thisArg = this) {
            if (start === null) {
                return;
            }

            // push cursor
            const cursor = this.allocateCursor(start, null);

            while (cursor.prev !== null) {
                const item = cursor.prev;
                cursor.prev = item.prev;
                if (fn.call(thisArg, item.data, item, this)) {
                    break;
                }
            }

            // pop cursor
            this.releaseCursor();
        }

        // mutation
        clear() {
            this.head = null;
            this.tail = null;
        }
        copy() {
            const result = new List();

            for (let data of this) {
                result.appendData(data);
            }

            return result;
        }
        prepend(item) {
            //      head
            //    ^
            // item
            this.updateCursors(null, item, this.head, item);

            // insert to the beginning of the list
            if (this.head !== null) {
                // new item <- first item
                this.head.prev = item;
                // new item -> first item
                item.next = this.head;
            } else {
                // if list has no head, then it also has no tail
                // in this case tail points to the new item
                this.tail = item;
            }

            // head always points to new item
            this.head = item;
            return this;
        }
        prependData(data) {
            return this.prepend(List.createItem(data));
        }
        append(item) {
            return this.insert(item);
        }
        appendData(data) {
            return this.insert(List.createItem(data));
        }
        insert(item, before = null) {
            if (before !== null) {
                // prev   before
                //      ^
                //     item
                this.updateCursors(before.prev, item, before, item);

                if (before.prev === null) {
                    // insert to the beginning of list
                    if (this.head !== before) {
                        throw new Error('before doesn\'t belong to list');
                    }
                    // since head points to before therefore list doesn't empty
                    // no need to check tail
                    this.head = item;
                    before.prev = item;
                    item.next = before;
                    this.updateCursors(null, item);
                } else {
                    // insert between two items
                    before.prev.next = item;
                    item.prev = before.prev;
                    before.prev = item;
                    item.next = before;
                }
            } else {
                // tail
                //      ^
                //      item
                this.updateCursors(this.tail, item, null, item);

                // insert to the ending of the list
                if (this.tail !== null) {
                    // last item -> new item
                    this.tail.next = item;
                    // last item <- new item
                    item.prev = this.tail;
                } else {
                    // if list has no tail, then it also has no head
                    // in this case head points to new item
                    this.head = item;
                }

                // tail always points to new item
                this.tail = item;
            }

            return this;
        }
        insertData(data, before) {
            return this.insert(List.createItem(data), before);
        }
        remove(item) {
            //      item
            //       ^
            // prev     next
            this.updateCursors(item, item.prev, item, item.next);

            if (item.prev !== null) {
                item.prev.next = item.next;
            } else {
                if (this.head !== item) {
                    throw new Error('item doesn\'t belong to list');
                }

                this.head = item.next;
            }

            if (item.next !== null) {
                item.next.prev = item.prev;
            } else {
                if (this.tail !== item) {
                    throw new Error('item doesn\'t belong to list');
                }

                this.tail = item.prev;
            }

            item.prev = null;
            item.next = null;

            return item;
        }
        push(data) {
            this.insert(List.createItem(data));
        }
        pop() {
            return this.tail !== null ? this.remove(this.tail) : null;
        }
        unshift(data) {
            this.prepend(List.createItem(data));
        }
        shift() {
            return this.head !== null ? this.remove(this.head) : null;
        }
        prependList(list) {
            return this.insertList(list, this.head);
        }
        appendList(list) {
            return this.insertList(list);
        }
        insertList(list, before) {
            // ignore empty lists
            if (list.head === null) {
                return this;
            }

            if (before !== undefined && before !== null) {
                this.updateCursors(before.prev, list.tail, before, list.head);

                // insert in the middle of dist list
                if (before.prev !== null) {
                    // before.prev <-> list.head
                    before.prev.next = list.head;
                    list.head.prev = before.prev;
                } else {
                    this.head = list.head;
                }

                before.prev = list.tail;
                list.tail.next = before;
            } else {
                this.updateCursors(this.tail, list.tail, null, list.head);

                // insert to end of the list
                if (this.tail !== null) {
                    // if destination list has a tail, then it also has a head,
                    // but head doesn't change
                    // dest tail -> source head
                    this.tail.next = list.head;
                    // dest tail <- source head
                    list.head.prev = this.tail;
                } else {
                    // if list has no a tail, then it also has no a head
                    // in this case points head to new item
                    this.head = list.head;
                }

                // tail always start point to new item
                this.tail = list.tail;
            }

            list.head = null;
            list.tail = null;
            return this;
        }
        replace(oldItem, newItemOrList) {
            if ('head' in newItemOrList) {
                this.insertList(newItemOrList, oldItem);
            } else {
                this.insert(newItemOrList, oldItem);
            }

            this.remove(oldItem);
        }
    }

    function createCustomError(name, message) {
        // use Object.create(), because some VMs prevent setting line/column otherwise
        // (iOS Safari 10 even throws an exception)
        const error = Object.create(SyntaxError.prototype);
        const errorStack = new Error();

        return Object.assign(error, {
            name,
            message,
            get stack() {
                return (errorStack.stack || '').replace(/^(.+\n){1,3}/, `${name}: ${message}\n`);
            }
        });
    }

    const MAX_LINE_LENGTH = 100;
    const OFFSET_CORRECTION = 60;
    const TAB_REPLACEMENT = '    ';

    function sourceFragment({ source, line, column }, extraLines) {
        function processLines(start, end) {
            return lines
                .slice(start, end)
                .map((line, idx) =>
                    String(start + idx + 1).padStart(maxNumLength) + ' |' + line
                ).join('\n');
        }

        const lines = source.split(/\r\n?|\n|\f/);
        const startLine = Math.max(1, line - extraLines) - 1;
        const endLine = Math.min(line + extraLines, lines.length + 1);
        const maxNumLength = Math.max(4, String(endLine).length) + 1;
        let cutLeft = 0;

        // column correction according to replaced tab before column
        column += (TAB_REPLACEMENT.length - 1) * (lines[line - 1].substr(0, column - 1).match(/\t/g) || []).length;

        if (column > MAX_LINE_LENGTH) {
            cutLeft = column - OFFSET_CORRECTION + 3;
            column = OFFSET_CORRECTION - 2;
        }

        for (let i = startLine; i <= endLine; i++) {
            if (i >= 0 && i < lines.length) {
                lines[i] = lines[i].replace(/\t/g, TAB_REPLACEMENT);
                lines[i] =
                    (cutLeft > 0 && lines[i].length > cutLeft ? '\u2026' : '') +
                    lines[i].substr(cutLeft, MAX_LINE_LENGTH - 2) +
                    (lines[i].length > cutLeft + MAX_LINE_LENGTH - 1 ? '\u2026' : '');
            }
        }

        return [
            processLines(startLine, line),
            new Array(column + maxNumLength + 2).join('-') + '^',
            processLines(line, endLine)
        ].filter(Boolean).join('\n');
    }

    function SyntaxError$2(message, source, offset, line, column) {
        const error = Object.assign(createCustomError('SyntaxError', message), {
            source,
            offset,
            line,
            column,
            sourceFragment(extraLines) {
                return sourceFragment({ source, line, column }, isNaN(extraLines) ? 0 : extraLines);
            },
            get formattedMessage() {
                return (
                    `Parse error: ${message}\n` +
                    sourceFragment({ source, line, column }, 2)
                );
            }
        });

        return error;
    }

    function readSequence$1(recognizer) {
        const children = this.createList();
        let space = false;
        const context = {
            recognizer
        };

        while (!this.eof) {
            switch (this.tokenType) {
                case Comment$1:
                    this.next();
                    continue;

                case WhiteSpace$1:
                    space = true;
                    this.next();
                    continue;
            }

            let child = recognizer.getNode.call(this, context);

            if (child === undefined) {
                break;
            }

            if (space) {
                if (recognizer.onWhiteSpace) {
                    recognizer.onWhiteSpace.call(this, child, children, context);
                }
                space = false;
            }

            children.push(child);
        }

        if (space && recognizer.onWhiteSpace) {
            recognizer.onWhiteSpace.call(this, null, children, context);
        }

        return children;
    }

    const NOOP = () => {};
    const EXCLAMATIONMARK$3 = 0x0021;  // U+0021 EXCLAMATION MARK (!)
    const NUMBERSIGN$4 = 0x0023;       // U+0023 NUMBER SIGN (#)
    const SEMICOLON = 0x003B;        // U+003B SEMICOLON (;)
    const LEFTCURLYBRACKET$1 = 0x007B; // U+007B LEFT CURLY BRACKET ({)
    const NULL = 0;

    function createParseContext(name) {
        return function() {
            return this[name]();
        };
    }

    function fetchParseValues(dict) {
        const result = Object.create(null);

        for (const name in dict) {
            const item = dict[name];
            const fn = item.parse || item;

            if (fn) {
                result[name] = fn;
            }
        }

        return result;
    }

    function processConfig(config) {
        const parseConfig = {
            context: Object.create(null),
            scope: Object.assign(Object.create(null), config.scope),
            atrule: fetchParseValues(config.atrule),
            pseudo: fetchParseValues(config.pseudo),
            node: fetchParseValues(config.node)
        };

        for (const name in config.parseContext) {
            switch (typeof config.parseContext[name]) {
                case 'function':
                    parseConfig.context[name] = config.parseContext[name];
                    break;

                case 'string':
                    parseConfig.context[name] = createParseContext(config.parseContext[name]);
                    break;
            }
        }

        return {
            config: parseConfig,
            ...parseConfig,
            ...parseConfig.node
        };
    }

    function createParser(config) {
        let source = '';
        let filename = '<unknown>';
        let needPositions = false;
        let onParseError = NOOP;
        let onParseErrorThrow = false;

        const locationMap = new OffsetToLocation();
        const parser = Object.assign(new TokenStream(), processConfig(config || {}), {
            parseAtrulePrelude: true,
            parseRulePrelude: true,
            parseValue: true,
            parseCustomProperty: false,

            readSequence: readSequence$1,

            consumeUntilBalanceEnd: () => 0,
            consumeUntilLeftCurlyBracket(code) {
                return code === LEFTCURLYBRACKET$1 ? 1 : 0;
            },
            consumeUntilLeftCurlyBracketOrSemicolon(code) {
                return code === LEFTCURLYBRACKET$1 || code === SEMICOLON ? 1 : 0;
            },
            consumeUntilExclamationMarkOrSemicolon(code) {
                return code === EXCLAMATIONMARK$3 || code === SEMICOLON ? 1 : 0;
            },
            consumeUntilSemicolonIncluded(code) {
                return code === SEMICOLON ? 2 : 0;
            },

            createList() {
                return new List();
            },
            createSingleNodeList(node) {
                return new List().appendData(node);
            },
            getFirstListNode(list) {
                return list && list.first;
            },
            getLastListNode(list) {
                return list && list.last;
            },

            parseWithFallback(consumer, fallback) {
                const startToken = this.tokenIndex;

                try {
                    return consumer.call(this);
                } catch (e) {
                    if (onParseErrorThrow) {
                        throw e;
                    }

                    const fallbackNode = fallback.call(this, startToken);

                    onParseErrorThrow = true;
                    onParseError(e, fallbackNode);
                    onParseErrorThrow = false;

                    return fallbackNode;
                }
            },

            lookupNonWSType(offset) {
                let type;

                do {
                    type = this.lookupType(offset++);
                    if (type !== WhiteSpace$1) {
                        return type;
                    }
                } while (type !== NULL);

                return NULL;
            },

            charCodeAt(offset) {
                return offset >= 0 && offset < source.length ? source.charCodeAt(offset) : 0;
            },
            substring(offsetStart, offsetEnd) {
                return source.substring(offsetStart, offsetEnd);
            },
            substrToCursor(start) {
                return this.source.substring(start, this.tokenStart);
            },

            cmpChar(offset, charCode) {
                return cmpChar(source, offset, charCode);
            },
            cmpStr(offsetStart, offsetEnd, str) {
                return cmpStr(source, offsetStart, offsetEnd, str);
            },

            consume(tokenType) {
                const start = this.tokenStart;

                this.eat(tokenType);

                return this.substrToCursor(start);
            },
            consumeFunctionName() {
                const name = source.substring(this.tokenStart, this.tokenEnd - 1);

                this.eat(Function$1);

                return name;
            },
            consumeNumber(type) {
                const number = source.substring(this.tokenStart, consumeNumber$1(source, this.tokenStart));

                this.eat(type);

                return number;
            },

            eat(tokenType) {
                if (this.tokenType !== tokenType) {
                    const tokenName = tokenNames[tokenType].slice(0, -6).replace(/-/g, ' ').replace(/^./, m => m.toUpperCase());
                    let message = `${/[[\](){}]/.test(tokenName) ? `"${tokenName}"` : tokenName} is expected`;
                    let offset = this.tokenStart;

                    // tweak message and offset
                    switch (tokenType) {
                        case Ident:
                            // when identifier is expected but there is a function or url
                            if (this.tokenType === Function$1 || this.tokenType === Url$2) {
                                offset = this.tokenEnd - 1;
                                message = 'Identifier is expected but function found';
                            } else {
                                message = 'Identifier is expected';
                            }
                            break;

                        case Hash$1:
                            if (this.isDelim(NUMBERSIGN$4)) {
                                this.next();
                                offset++;
                                message = 'Name is expected';
                            }
                            break;

                        case Percentage$1:
                            if (this.tokenType === Number$2) {
                                offset = this.tokenEnd;
                                message = 'Percent sign is expected';
                            }
                            break;
                    }

                    this.error(message, offset);
                }

                this.next();
            },
            eatIdent(name) {
                if (this.tokenType !== Ident || this.lookupValue(0, name) === false) {
                    this.error(`Identifier "${name}" is expected`);
                }

                this.next();
            },
            eatDelim(code) {
                if (!this.isDelim(code)) {
                    this.error(`Delim "${String.fromCharCode(code)}" is expected`);
                }

                this.next();
            },

            getLocation(start, end) {
                if (needPositions) {
                    return locationMap.getLocationRange(
                        start,
                        end,
                        filename
                    );
                }

                return null;
            },
            getLocationFromList(list) {
                if (needPositions) {
                    const head = this.getFirstListNode(list);
                    const tail = this.getLastListNode(list);
                    return locationMap.getLocationRange(
                        head !== null ? head.loc.start.offset - locationMap.startOffset : this.tokenStart,
                        tail !== null ? tail.loc.end.offset - locationMap.startOffset : this.tokenStart,
                        filename
                    );
                }

                return null;
            },

            error(message, offset) {
                const location = typeof offset !== 'undefined' && offset < source.length
                    ? locationMap.getLocation(offset)
                    : this.eof
                        ? locationMap.getLocation(findWhiteSpaceStart(source, source.length - 1))
                        : locationMap.getLocation(this.tokenStart);

                throw new SyntaxError$2(
                    message || 'Unexpected input',
                    source,
                    location.offset,
                    location.line,
                    location.column
                );
            }
        });

        const parse = function(source_, options) {
            source = source_;
            options = options || {};

            parser.setSource(source, tokenize$3);
            locationMap.setSource(
                source,
                options.offset,
                options.line,
                options.column
            );

            filename = options.filename || '<unknown>';
            needPositions = Boolean(options.positions);
            onParseError = typeof options.onParseError === 'function' ? options.onParseError : NOOP;
            onParseErrorThrow = false;

            parser.parseAtrulePrelude = 'parseAtrulePrelude' in options ? Boolean(options.parseAtrulePrelude) : true;
            parser.parseRulePrelude = 'parseRulePrelude' in options ? Boolean(options.parseRulePrelude) : true;
            parser.parseValue = 'parseValue' in options ? Boolean(options.parseValue) : true;
            parser.parseCustomProperty = 'parseCustomProperty' in options ? Boolean(options.parseCustomProperty) : false;

            const { context = 'default', onComment } = options;

            if (context in parser.context === false) {
                throw new Error('Unknown context `' + context + '`');
            }

            if (typeof onComment === 'function') {
                parser.forEachToken((type, start, end) => {
                    if (type === Comment$1) {
                        const loc = parser.getLocation(start, end);
                        const value = cmpStr(source, end - 2, end, '*/')
                            ? source.slice(start + 2, end - 2)
                            : source.slice(start + 2, end);

                        onComment(value, loc);
                    }
                });
            }

            const ast = parser.context[context].call(parser, options);

            if (!parser.eof) {
                parser.error();
            }

            return ast;
        };

        return Object.assign(parse, {
            SyntaxError: SyntaxError$2,
            config: parser.config
        });
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function getAugmentedNamespace(n) {
      if (n.__esModule) return n;
      var f = n.default;
    	if (typeof f == "function") {
    		var a = function a () {
    			if (this instanceof a) {
            return Reflect.construct(f, arguments, this.constructor);
    			}
    			return f.apply(this, arguments);
    		};
    		a.prototype = f.prototype;
      } else a = {};
      Object.defineProperty(a, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    var base64Vlq$1 = {};

    var base64$3 = {};

    /* -*- Mode: js; js-indent-level: 2; -*- */

    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */

    var intToCharMap$1 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

    /**
     * Encode an integer in the range of 0 to 63 to a single base 64 digit.
     */
    base64$3.encode = function (number) {
      if (0 <= number && number < intToCharMap$1.length) {
        return intToCharMap$1[number];
      }
      throw new TypeError("Must be between 0 and 63: " + number);
    };

    /**
     * Decode a single base 64 character code digit to an integer. Returns -1 on
     * failure.
     */
    base64$3.decode = function (charCode) {
      var bigA = 65;     // 'A'
      var bigZ = 90;     // 'Z'

      var littleA = 97;  // 'a'
      var littleZ = 122; // 'z'

      var zero = 48;     // '0'
      var nine = 57;     // '9'

      var plus = 43;     // '+'
      var slash = 47;    // '/'

      var littleOffset = 26;
      var numberOffset = 52;

      // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
      if (bigA <= charCode && charCode <= bigZ) {
        return (charCode - bigA);
      }

      // 26 - 51: abcdefghijklmnopqrstuvwxyz
      if (littleA <= charCode && charCode <= littleZ) {
        return (charCode - littleA + littleOffset);
      }

      // 52 - 61: 0123456789
      if (zero <= charCode && charCode <= nine) {
        return (charCode - zero + numberOffset);
      }

      // 62: +
      if (charCode == plus) {
        return 62;
      }

      // 63: /
      if (charCode == slash) {
        return 63;
      }

      // Invalid base64 digit.
      return -1;
    };

    /* -*- Mode: js; js-indent-level: 2; -*- */

    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     *
     * Based on the Base 64 VLQ implementation in Closure Compiler:
     * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
     *
     * Copyright 2011 The Closure Compiler Authors. All rights reserved.
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     *  * Redistributions of source code must retain the above copyright
     *    notice, this list of conditions and the following disclaimer.
     *  * Redistributions in binary form must reproduce the above
     *    copyright notice, this list of conditions and the following
     *    disclaimer in the documentation and/or other materials provided
     *    with the distribution.
     *  * Neither the name of Google Inc. nor the names of its
     *    contributors may be used to endorse or promote products derived
     *    from this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
     * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
     * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */

    var base64$2 = base64$3;

    // A single base 64 digit can contain 6 bits of data. For the base 64 variable
    // length quantities we use in the source map spec, the first bit is the sign,
    // the next four bits are the actual value, and the 6th bit is the
    // continuation bit. The continuation bit tells us whether there are more
    // digits in this value following this digit.
    //
    //   Continuation
    //   |    Sign
    //   |    |
    //   V    V
    //   101011

    var VLQ_BASE_SHIFT$1 = 5;

    // binary: 100000
    var VLQ_BASE$1 = 1 << VLQ_BASE_SHIFT$1;

    // binary: 011111
    var VLQ_BASE_MASK$1 = VLQ_BASE$1 - 1;

    // binary: 100000
    var VLQ_CONTINUATION_BIT$1 = VLQ_BASE$1;

    /**
     * Converts from a two-complement value to a value where the sign bit is
     * placed in the least significant bit.  For example, as decimals:
     *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
     *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
     */
    function toVLQSigned$1(aValue) {
      return aValue < 0
        ? ((-aValue) << 1) + 1
        : (aValue << 1) + 0;
    }

    /**
     * Converts to a two-complement value from a value where the sign bit is
     * placed in the least significant bit.  For example, as decimals:
     *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
     *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
     */
    function fromVLQSigned(aValue) {
      var isNegative = (aValue & 1) === 1;
      var shifted = aValue >> 1;
      return isNegative
        ? -shifted
        : shifted;
    }

    /**
     * Returns the base 64 VLQ encoded value.
     */
    base64Vlq$1.encode = function base64VLQ_encode(aValue) {
      var encoded = "";
      var digit;

      var vlq = toVLQSigned$1(aValue);

      do {
        digit = vlq & VLQ_BASE_MASK$1;
        vlq >>>= VLQ_BASE_SHIFT$1;
        if (vlq > 0) {
          // There are still more digits in this value, so we must make sure the
          // continuation bit is marked.
          digit |= VLQ_CONTINUATION_BIT$1;
        }
        encoded += base64$2.encode(digit);
      } while (vlq > 0);

      return encoded;
    };

    /**
     * Decodes the next base 64 VLQ value from the given string and returns the
     * value and the rest of the string via the out parameter.
     */
    base64Vlq$1.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
      var strLen = aStr.length;
      var result = 0;
      var shift = 0;
      var continuation, digit;

      do {
        if (aIndex >= strLen) {
          throw new Error("Expected more digits in base 64 VLQ value.");
        }

        digit = base64$2.decode(aStr.charCodeAt(aIndex++));
        if (digit === -1) {
          throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
        }

        continuation = !!(digit & VLQ_CONTINUATION_BIT$1);
        digit &= VLQ_BASE_MASK$1;
        result = result + (digit << shift);
        shift += VLQ_BASE_SHIFT$1;
      } while (continuation);

      aOutParam.value = fromVLQSigned(result);
      aOutParam.rest = aIndex;
    };

    var util$8 = {};

    /* -*- Mode: js; js-indent-level: 2; -*- */

    (function (exports) {
    	/*
    	 * Copyright 2011 Mozilla Foundation and contributors
    	 * Licensed under the New BSD license. See LICENSE or:
    	 * http://opensource.org/licenses/BSD-3-Clause
    	 */

    	/**
    	 * This is a helper function for getting values from parameter/options
    	 * objects.
    	 *
    	 * @param args The object we are extracting values from
    	 * @param name The name of the property we are getting.
    	 * @param defaultValue An optional value to return if the property is missing
    	 * from the object. If this is not specified and the property is missing, an
    	 * error will be thrown.
    	 */
    	function getArg(aArgs, aName, aDefaultValue) {
    	  if (aName in aArgs) {
    	    return aArgs[aName];
    	  } else if (arguments.length === 3) {
    	    return aDefaultValue;
    	  } else {
    	    throw new Error('"' + aName + '" is a required argument.');
    	  }
    	}
    	exports.getArg = getArg;

    	var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
    	var dataUrlRegexp = /^data:.+\,.+$/;

    	function urlParse(aUrl) {
    	  var match = aUrl.match(urlRegexp);
    	  if (!match) {
    	    return null;
    	  }
    	  return {
    	    scheme: match[1],
    	    auth: match[2],
    	    host: match[3],
    	    port: match[4],
    	    path: match[5]
    	  };
    	}
    	exports.urlParse = urlParse;

    	function urlGenerate(aParsedUrl) {
    	  var url = '';
    	  if (aParsedUrl.scheme) {
    	    url += aParsedUrl.scheme + ':';
    	  }
    	  url += '//';
    	  if (aParsedUrl.auth) {
    	    url += aParsedUrl.auth + '@';
    	  }
    	  if (aParsedUrl.host) {
    	    url += aParsedUrl.host;
    	  }
    	  if (aParsedUrl.port) {
    	    url += ":" + aParsedUrl.port;
    	  }
    	  if (aParsedUrl.path) {
    	    url += aParsedUrl.path;
    	  }
    	  return url;
    	}
    	exports.urlGenerate = urlGenerate;

    	var MAX_CACHED_INPUTS = 32;

    	/**
    	 * Takes some function `f(input) -> result` and returns a memoized version of
    	 * `f`.
    	 *
    	 * We keep at most `MAX_CACHED_INPUTS` memoized results of `f` alive. The
    	 * memoization is a dumb-simple, linear least-recently-used cache.
    	 */
    	function lruMemoize(f) {
    	  var cache = [];

    	  return function(input) {
    	    for (var i = 0; i < cache.length; i++) {
    	      if (cache[i].input === input) {
    	        var temp = cache[0];
    	        cache[0] = cache[i];
    	        cache[i] = temp;
    	        return cache[0].result;
    	      }
    	    }

    	    var result = f(input);

    	    cache.unshift({
    	      input,
    	      result,
    	    });

    	    if (cache.length > MAX_CACHED_INPUTS) {
    	      cache.pop();
    	    }

    	    return result;
    	  };
    	}

    	/**
    	 * Normalizes a path, or the path portion of a URL:
    	 *
    	 * - Replaces consecutive slashes with one slash.
    	 * - Removes unnecessary '.' parts.
    	 * - Removes unnecessary '<dir>/..' parts.
    	 *
    	 * Based on code in the Node.js 'path' core module.
    	 *
    	 * @param aPath The path or url to normalize.
    	 */
    	var normalize = lruMemoize(function normalize(aPath) {
    	  var path = aPath;
    	  var url = urlParse(aPath);
    	  if (url) {
    	    if (!url.path) {
    	      return aPath;
    	    }
    	    path = url.path;
    	  }
    	  var isAbsolute = exports.isAbsolute(path);
    	  // Split the path into parts between `/` characters. This is much faster than
    	  // using `.split(/\/+/g)`.
    	  var parts = [];
    	  var start = 0;
    	  var i = 0;
    	  while (true) {
    	    start = i;
    	    i = path.indexOf("/", start);
    	    if (i === -1) {
    	      parts.push(path.slice(start));
    	      break;
    	    } else {
    	      parts.push(path.slice(start, i));
    	      while (i < path.length && path[i] === "/") {
    	        i++;
    	      }
    	    }
    	  }

    	  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
    	    part = parts[i];
    	    if (part === '.') {
    	      parts.splice(i, 1);
    	    } else if (part === '..') {
    	      up++;
    	    } else if (up > 0) {
    	      if (part === '') {
    	        // The first part is blank if the path is absolute. Trying to go
    	        // above the root is a no-op. Therefore we can remove all '..' parts
    	        // directly after the root.
    	        parts.splice(i + 1, up);
    	        up = 0;
    	      } else {
    	        parts.splice(i, 2);
    	        up--;
    	      }
    	    }
    	  }
    	  path = parts.join('/');

    	  if (path === '') {
    	    path = isAbsolute ? '/' : '.';
    	  }

    	  if (url) {
    	    url.path = path;
    	    return urlGenerate(url);
    	  }
    	  return path;
    	});
    	exports.normalize = normalize;

    	/**
    	 * Joins two paths/URLs.
    	 *
    	 * @param aRoot The root path or URL.
    	 * @param aPath The path or URL to be joined with the root.
    	 *
    	 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
    	 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
    	 *   first.
    	 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
    	 *   is updated with the result and aRoot is returned. Otherwise the result
    	 *   is returned.
    	 *   - If aPath is absolute, the result is aPath.
    	 *   - Otherwise the two paths are joined with a slash.
    	 * - Joining for example 'http://' and 'www.example.com' is also supported.
    	 */
    	function join(aRoot, aPath) {
    	  if (aRoot === "") {
    	    aRoot = ".";
    	  }
    	  if (aPath === "") {
    	    aPath = ".";
    	  }
    	  var aPathUrl = urlParse(aPath);
    	  var aRootUrl = urlParse(aRoot);
    	  if (aRootUrl) {
    	    aRoot = aRootUrl.path || '/';
    	  }

    	  // `join(foo, '//www.example.org')`
    	  if (aPathUrl && !aPathUrl.scheme) {
    	    if (aRootUrl) {
    	      aPathUrl.scheme = aRootUrl.scheme;
    	    }
    	    return urlGenerate(aPathUrl);
    	  }

    	  if (aPathUrl || aPath.match(dataUrlRegexp)) {
    	    return aPath;
    	  }

    	  // `join('http://', 'www.example.com')`
    	  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
    	    aRootUrl.host = aPath;
    	    return urlGenerate(aRootUrl);
    	  }

    	  var joined = aPath.charAt(0) === '/'
    	    ? aPath
    	    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

    	  if (aRootUrl) {
    	    aRootUrl.path = joined;
    	    return urlGenerate(aRootUrl);
    	  }
    	  return joined;
    	}
    	exports.join = join;

    	exports.isAbsolute = function (aPath) {
    	  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
    	};

    	/**
    	 * Make a path relative to a URL or another path.
    	 *
    	 * @param aRoot The root path or URL.
    	 * @param aPath The path or URL to be made relative to aRoot.
    	 */
    	function relative(aRoot, aPath) {
    	  if (aRoot === "") {
    	    aRoot = ".";
    	  }

    	  aRoot = aRoot.replace(/\/$/, '');

    	  // It is possible for the path to be above the root. In this case, simply
    	  // checking whether the root is a prefix of the path won't work. Instead, we
    	  // need to remove components from the root one by one, until either we find
    	  // a prefix that fits, or we run out of components to remove.
    	  var level = 0;
    	  while (aPath.indexOf(aRoot + '/') !== 0) {
    	    var index = aRoot.lastIndexOf("/");
    	    if (index < 0) {
    	      return aPath;
    	    }

    	    // If the only part of the root that is left is the scheme (i.e. http://,
    	    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
    	    // have exhausted all components, so the path is not relative to the root.
    	    aRoot = aRoot.slice(0, index);
    	    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
    	      return aPath;
    	    }

    	    ++level;
    	  }

    	  // Make sure we add a "../" for each component we removed from the root.
    	  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
    	}
    	exports.relative = relative;

    	var supportsNullProto = (function () {
    	  var obj = Object.create(null);
    	  return !('__proto__' in obj);
    	}());

    	function identity (s) {
    	  return s;
    	}

    	/**
    	 * Because behavior goes wacky when you set `__proto__` on objects, we
    	 * have to prefix all the strings in our set with an arbitrary character.
    	 *
    	 * See https://github.com/mozilla/source-map/pull/31 and
    	 * https://github.com/mozilla/source-map/issues/30
    	 *
    	 * @param String aStr
    	 */
    	function toSetString(aStr) {
    	  if (isProtoString(aStr)) {
    	    return '$' + aStr;
    	  }

    	  return aStr;
    	}
    	exports.toSetString = supportsNullProto ? identity : toSetString;

    	function fromSetString(aStr) {
    	  if (isProtoString(aStr)) {
    	    return aStr.slice(1);
    	  }

    	  return aStr;
    	}
    	exports.fromSetString = supportsNullProto ? identity : fromSetString;

    	function isProtoString(s) {
    	  if (!s) {
    	    return false;
    	  }

    	  var length = s.length;

    	  if (length < 9 /* "__proto__".length */) {
    	    return false;
    	  }

    	  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
    	      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
    	      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
    	      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
    	      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
    	      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
    	      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
    	      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
    	      s.charCodeAt(length - 9) !== 95  /* '_' */) {
    	    return false;
    	  }

    	  for (var i = length - 10; i >= 0; i--) {
    	    if (s.charCodeAt(i) !== 36 /* '$' */) {
    	      return false;
    	    }
    	  }

    	  return true;
    	}

    	/**
    	 * Comparator between two mappings where the original positions are compared.
    	 *
    	 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
    	 * mappings with the same original source/line/column, but different generated
    	 * line and column the same. Useful when searching for a mapping with a
    	 * stubbed out mapping.
    	 */
    	function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
    	  var cmp = strcmp(mappingA.source, mappingB.source);
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  cmp = mappingA.originalLine - mappingB.originalLine;
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  cmp = mappingA.originalColumn - mappingB.originalColumn;
    	  if (cmp !== 0 || onlyCompareOriginal) {
    	    return cmp;
    	  }

    	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  cmp = mappingA.generatedLine - mappingB.generatedLine;
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  return strcmp(mappingA.name, mappingB.name);
    	}
    	exports.compareByOriginalPositions = compareByOriginalPositions;

    	function compareByOriginalPositionsNoSource(mappingA, mappingB, onlyCompareOriginal) {
    	  var cmp;

    	  cmp = mappingA.originalLine - mappingB.originalLine;
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  cmp = mappingA.originalColumn - mappingB.originalColumn;
    	  if (cmp !== 0 || onlyCompareOriginal) {
    	    return cmp;
    	  }

    	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  cmp = mappingA.generatedLine - mappingB.generatedLine;
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  return strcmp(mappingA.name, mappingB.name);
    	}
    	exports.compareByOriginalPositionsNoSource = compareByOriginalPositionsNoSource;

    	/**
    	 * Comparator between two mappings with deflated source and name indices where
    	 * the generated positions are compared.
    	 *
    	 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
    	 * mappings with the same generated line and column, but different
    	 * source/name/original line and column the same. Useful when searching for a
    	 * mapping with a stubbed out mapping.
    	 */
    	function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
    	  var cmp = mappingA.generatedLine - mappingB.generatedLine;
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    	  if (cmp !== 0 || onlyCompareGenerated) {
    	    return cmp;
    	  }

    	  cmp = strcmp(mappingA.source, mappingB.source);
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  cmp = mappingA.originalLine - mappingB.originalLine;
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  cmp = mappingA.originalColumn - mappingB.originalColumn;
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  return strcmp(mappingA.name, mappingB.name);
    	}
    	exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

    	function compareByGeneratedPositionsDeflatedNoLine(mappingA, mappingB, onlyCompareGenerated) {
    	  var cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    	  if (cmp !== 0 || onlyCompareGenerated) {
    	    return cmp;
    	  }

    	  cmp = strcmp(mappingA.source, mappingB.source);
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  cmp = mappingA.originalLine - mappingB.originalLine;
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  cmp = mappingA.originalColumn - mappingB.originalColumn;
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  return strcmp(mappingA.name, mappingB.name);
    	}
    	exports.compareByGeneratedPositionsDeflatedNoLine = compareByGeneratedPositionsDeflatedNoLine;

    	function strcmp(aStr1, aStr2) {
    	  if (aStr1 === aStr2) {
    	    return 0;
    	  }

    	  if (aStr1 === null) {
    	    return 1; // aStr2 !== null
    	  }

    	  if (aStr2 === null) {
    	    return -1; // aStr1 !== null
    	  }

    	  if (aStr1 > aStr2) {
    	    return 1;
    	  }

    	  return -1;
    	}

    	/**
    	 * Comparator between two mappings with inflated source and name strings where
    	 * the generated positions are compared.
    	 */
    	function compareByGeneratedPositionsInflated(mappingA, mappingB) {
    	  var cmp = mappingA.generatedLine - mappingB.generatedLine;
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  cmp = strcmp(mappingA.source, mappingB.source);
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  cmp = mappingA.originalLine - mappingB.originalLine;
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  cmp = mappingA.originalColumn - mappingB.originalColumn;
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  return strcmp(mappingA.name, mappingB.name);
    	}
    	exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

    	/**
    	 * Strip any JSON XSSI avoidance prefix from the string (as documented
    	 * in the source maps specification), and then parse the string as
    	 * JSON.
    	 */
    	function parseSourceMapInput(str) {
    	  return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ''));
    	}
    	exports.parseSourceMapInput = parseSourceMapInput;

    	/**
    	 * Compute the URL of a source given the the source root, the source's
    	 * URL, and the source map's URL.
    	 */
    	function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
    	  sourceURL = sourceURL || '';

    	  if (sourceRoot) {
    	    // This follows what Chrome does.
    	    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {
    	      sourceRoot += '/';
    	    }
    	    // The spec says:
    	    //   Line 4: An optional source root, useful for relocating source
    	    //   files on a server or removing repeated values in the
    	    //   “sources” entry.  This value is prepended to the individual
    	    //   entries in the “source” field.
    	    sourceURL = sourceRoot + sourceURL;
    	  }

    	  // Historically, SourceMapConsumer did not take the sourceMapURL as
    	  // a parameter.  This mode is still somewhat supported, which is why
    	  // this code block is conditional.  However, it's preferable to pass
    	  // the source map URL to SourceMapConsumer, so that this function
    	  // can implement the source URL resolution algorithm as outlined in
    	  // the spec.  This block is basically the equivalent of:
    	  //    new URL(sourceURL, sourceMapURL).toString()
    	  // ... except it avoids using URL, which wasn't available in the
    	  // older releases of node still supported by this library.
    	  //
    	  // The spec says:
    	  //   If the sources are not absolute URLs after prepending of the
    	  //   “sourceRoot”, the sources are resolved relative to the
    	  //   SourceMap (like resolving script src in a html document).
    	  if (sourceMapURL) {
    	    var parsed = urlParse(sourceMapURL);
    	    if (!parsed) {
    	      throw new Error("sourceMapURL could not be parsed");
    	    }
    	    if (parsed.path) {
    	      // Strip the last path component, but keep the "/".
    	      var index = parsed.path.lastIndexOf('/');
    	      if (index >= 0) {
    	        parsed.path = parsed.path.substring(0, index + 1);
    	      }
    	    }
    	    sourceURL = join(urlGenerate(parsed), sourceURL);
    	  }

    	  return normalize(sourceURL);
    	}
    	exports.computeSourceURL = computeSourceURL; 
    } (util$8));

    var arraySet$1 = {};

    /* -*- Mode: js; js-indent-level: 2; -*- */

    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */

    var util$7 = util$8;
    var has = Object.prototype.hasOwnProperty;
    var hasNativeMap = typeof Map !== "undefined";

    /**
     * A data structure which is a combination of an array and a set. Adding a new
     * member is O(1), testing for membership is O(1), and finding the index of an
     * element is O(1). Removing elements from the set is not supported. Only
     * strings are supported for membership.
     */
    function ArraySet$4() {
      this._array = [];
      this._set = hasNativeMap ? new Map() : Object.create(null);
    }

    /**
     * Static method for creating ArraySet instances from an existing array.
     */
    ArraySet$4.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
      var set = new ArraySet$4();
      for (var i = 0, len = aArray.length; i < len; i++) {
        set.add(aArray[i], aAllowDuplicates);
      }
      return set;
    };

    /**
     * Return how many unique items are in this ArraySet. If duplicates have been
     * added, than those do not count towards the size.
     *
     * @returns Number
     */
    ArraySet$4.prototype.size = function ArraySet_size() {
      return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
    };

    /**
     * Add the given string to this set.
     *
     * @param String aStr
     */
    ArraySet$4.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
      var sStr = hasNativeMap ? aStr : util$7.toSetString(aStr);
      var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
      var idx = this._array.length;
      if (!isDuplicate || aAllowDuplicates) {
        this._array.push(aStr);
      }
      if (!isDuplicate) {
        if (hasNativeMap) {
          this._set.set(aStr, idx);
        } else {
          this._set[sStr] = idx;
        }
      }
    };

    /**
     * Is the given string a member of this set?
     *
     * @param String aStr
     */
    ArraySet$4.prototype.has = function ArraySet_has(aStr) {
      if (hasNativeMap) {
        return this._set.has(aStr);
      } else {
        var sStr = util$7.toSetString(aStr);
        return has.call(this._set, sStr);
      }
    };

    /**
     * What is the index of the given string in the array?
     *
     * @param String aStr
     */
    ArraySet$4.prototype.indexOf = function ArraySet_indexOf(aStr) {
      if (hasNativeMap) {
        var idx = this._set.get(aStr);
        if (idx >= 0) {
            return idx;
        }
      } else {
        var sStr = util$7.toSetString(aStr);
        if (has.call(this._set, sStr)) {
          return this._set[sStr];
        }
      }

      throw new Error('"' + aStr + '" is not in the set.');
    };

    /**
     * What is the element at the given index?
     *
     * @param Number aIdx
     */
    ArraySet$4.prototype.at = function ArraySet_at(aIdx) {
      if (aIdx >= 0 && aIdx < this._array.length) {
        return this._array[aIdx];
      }
      throw new Error('No element indexed by ' + aIdx);
    };

    /**
     * Returns the array representation of this set (which has the proper indices
     * indicated by indexOf). Note that this is a copy of the internal array used
     * for storing the members so that no one can mess with internal state.
     */
    ArraySet$4.prototype.toArray = function ArraySet_toArray() {
      return this._array.slice();
    };

    arraySet$1.ArraySet = ArraySet$4;

    var mappingList$1 = {};

    /* -*- Mode: js; js-indent-level: 2; -*- */

    /*
     * Copyright 2014 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */

    var util$6 = util$8;

    /**
     * Determine whether mappingB is after mappingA with respect to generated
     * position.
     */
    function generatedPositionAfter$1(mappingA, mappingB) {
      // Optimized for most common case
      var lineA = mappingA.generatedLine;
      var lineB = mappingB.generatedLine;
      var columnA = mappingA.generatedColumn;
      var columnB = mappingB.generatedColumn;
      return lineB > lineA || lineB == lineA && columnB >= columnA ||
             util$6.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
    }

    /**
     * A data structure to provide a sorted view of accumulated mappings in a
     * performance conscious manner. It trades a neglibable overhead in general
     * case for a large speedup in case of mappings being added in order.
     */
    function MappingList$3() {
      this._array = [];
      this._sorted = true;
      // Serves as infimum
      this._last = {generatedLine: -1, generatedColumn: 0};
    }

    /**
     * Iterate through internal items. This method takes the same arguments that
     * `Array.prototype.forEach` takes.
     *
     * NOTE: The order of the mappings is NOT guaranteed.
     */
    MappingList$3.prototype.unsortedForEach =
      function MappingList_forEach(aCallback, aThisArg) {
        this._array.forEach(aCallback, aThisArg);
      };

    /**
     * Add the given source mapping.
     *
     * @param Object aMapping
     */
    MappingList$3.prototype.add = function MappingList_add(aMapping) {
      if (generatedPositionAfter$1(this._last, aMapping)) {
        this._last = aMapping;
        this._array.push(aMapping);
      } else {
        this._sorted = false;
        this._array.push(aMapping);
      }
    };

    /**
     * Returns the flat, sorted array of mappings. The mappings are sorted by
     * generated position.
     *
     * WARNING: This method returns internal data without copying, for
     * performance. The return value must NOT be mutated, and should be treated as
     * an immutable borrow. If you want to take ownership, you must make your own
     * copy.
     */
    MappingList$3.prototype.toArray = function MappingList_toArray() {
      if (!this._sorted) {
        this._array.sort(util$6.compareByGeneratedPositionsInflated);
        this._sorted = true;
      }
      return this._array;
    };

    mappingList$1.MappingList = MappingList$3;

    /* -*- Mode: js; js-indent-level: 2; -*- */

    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */

    var base64VLQ$1 = base64Vlq$1;
    var util$5 = util$8;
    var ArraySet$3 = arraySet$1.ArraySet;
    var MappingList$2 = mappingList$1.MappingList;

    /**
     * An instance of the SourceMapGenerator represents a source map which is
     * being built incrementally. You may pass an object with the following
     * properties:
     *
     *   - file: The filename of the generated source.
     *   - sourceRoot: A root for all relative URLs in this source map.
     */
    function SourceMapGenerator$3(aArgs) {
      if (!aArgs) {
        aArgs = {};
      }
      this._file = util$5.getArg(aArgs, 'file', null);
      this._sourceRoot = util$5.getArg(aArgs, 'sourceRoot', null);
      this._skipValidation = util$5.getArg(aArgs, 'skipValidation', false);
      this._ignoreInvalidMapping = util$5.getArg(aArgs, 'ignoreInvalidMapping', false);
      this._sources = new ArraySet$3();
      this._names = new ArraySet$3();
      this._mappings = new MappingList$2();
      this._sourcesContents = null;
    }

    SourceMapGenerator$3.prototype._version = 3;

    /**
     * Creates a new SourceMapGenerator based on a SourceMapConsumer
     *
     * @param aSourceMapConsumer The SourceMap.
     */
    SourceMapGenerator$3.fromSourceMap =
      function SourceMapGenerator_fromSourceMap(aSourceMapConsumer, generatorOps) {
        var sourceRoot = aSourceMapConsumer.sourceRoot;
        var generator = new SourceMapGenerator$3(Object.assign(generatorOps || {}, {
          file: aSourceMapConsumer.file,
          sourceRoot: sourceRoot
        }));
        aSourceMapConsumer.eachMapping(function (mapping) {
          var newMapping = {
            generated: {
              line: mapping.generatedLine,
              column: mapping.generatedColumn
            }
          };

          if (mapping.source != null) {
            newMapping.source = mapping.source;
            if (sourceRoot != null) {
              newMapping.source = util$5.relative(sourceRoot, newMapping.source);
            }

            newMapping.original = {
              line: mapping.originalLine,
              column: mapping.originalColumn
            };

            if (mapping.name != null) {
              newMapping.name = mapping.name;
            }
          }

          generator.addMapping(newMapping);
        });
        aSourceMapConsumer.sources.forEach(function (sourceFile) {
          var sourceRelative = sourceFile;
          if (sourceRoot !== null) {
            sourceRelative = util$5.relative(sourceRoot, sourceFile);
          }

          if (!generator._sources.has(sourceRelative)) {
            generator._sources.add(sourceRelative);
          }

          var content = aSourceMapConsumer.sourceContentFor(sourceFile);
          if (content != null) {
            generator.setSourceContent(sourceFile, content);
          }
        });
        return generator;
      };

    /**
     * Add a single mapping from original source line and column to the generated
     * source's line and column for this source map being created. The mapping
     * object should have the following properties:
     *
     *   - generated: An object with the generated line and column positions.
     *   - original: An object with the original line and column positions.
     *   - source: The original source file (relative to the sourceRoot).
     *   - name: An optional original token name for this mapping.
     */
    SourceMapGenerator$3.prototype.addMapping =
      function SourceMapGenerator_addMapping(aArgs) {
        var generated = util$5.getArg(aArgs, 'generated');
        var original = util$5.getArg(aArgs, 'original', null);
        var source = util$5.getArg(aArgs, 'source', null);
        var name = util$5.getArg(aArgs, 'name', null);

        if (!this._skipValidation) {
          if (this._validateMapping(generated, original, source, name) === false) {
            return;
          }
        }

        if (source != null) {
          source = String(source);
          if (!this._sources.has(source)) {
            this._sources.add(source);
          }
        }

        if (name != null) {
          name = String(name);
          if (!this._names.has(name)) {
            this._names.add(name);
          }
        }

        this._mappings.add({
          generatedLine: generated.line,
          generatedColumn: generated.column,
          originalLine: original != null && original.line,
          originalColumn: original != null && original.column,
          source: source,
          name: name
        });
      };

    /**
     * Set the source content for a source file.
     */
    SourceMapGenerator$3.prototype.setSourceContent =
      function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
        var source = aSourceFile;
        if (this._sourceRoot != null) {
          source = util$5.relative(this._sourceRoot, source);
        }

        if (aSourceContent != null) {
          // Add the source content to the _sourcesContents map.
          // Create a new _sourcesContents map if the property is null.
          if (!this._sourcesContents) {
            this._sourcesContents = Object.create(null);
          }
          this._sourcesContents[util$5.toSetString(source)] = aSourceContent;
        } else if (this._sourcesContents) {
          // Remove the source file from the _sourcesContents map.
          // If the _sourcesContents map is empty, set the property to null.
          delete this._sourcesContents[util$5.toSetString(source)];
          if (Object.keys(this._sourcesContents).length === 0) {
            this._sourcesContents = null;
          }
        }
      };

    /**
     * Applies the mappings of a sub-source-map for a specific source file to the
     * source map being generated. Each mapping to the supplied source file is
     * rewritten using the supplied source map. Note: The resolution for the
     * resulting mappings is the minimium of this map and the supplied map.
     *
     * @param aSourceMapConsumer The source map to be applied.
     * @param aSourceFile Optional. The filename of the source file.
     *        If omitted, SourceMapConsumer's file property will be used.
     * @param aSourceMapPath Optional. The dirname of the path to the source map
     *        to be applied. If relative, it is relative to the SourceMapConsumer.
     *        This parameter is needed when the two source maps aren't in the same
     *        directory, and the source map to be applied contains relative source
     *        paths. If so, those relative source paths need to be rewritten
     *        relative to the SourceMapGenerator.
     */
    SourceMapGenerator$3.prototype.applySourceMap =
      function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
        var sourceFile = aSourceFile;
        // If aSourceFile is omitted, we will use the file property of the SourceMap
        if (aSourceFile == null) {
          if (aSourceMapConsumer.file == null) {
            throw new Error(
              'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
              'or the source map\'s "file" property. Both were omitted.'
            );
          }
          sourceFile = aSourceMapConsumer.file;
        }
        var sourceRoot = this._sourceRoot;
        // Make "sourceFile" relative if an absolute Url is passed.
        if (sourceRoot != null) {
          sourceFile = util$5.relative(sourceRoot, sourceFile);
        }
        // Applying the SourceMap can add and remove items from the sources and
        // the names array.
        var newSources = new ArraySet$3();
        var newNames = new ArraySet$3();

        // Find mappings for the "sourceFile"
        this._mappings.unsortedForEach(function (mapping) {
          if (mapping.source === sourceFile && mapping.originalLine != null) {
            // Check if it can be mapped by the source map, then update the mapping.
            var original = aSourceMapConsumer.originalPositionFor({
              line: mapping.originalLine,
              column: mapping.originalColumn
            });
            if (original.source != null) {
              // Copy mapping
              mapping.source = original.source;
              if (aSourceMapPath != null) {
                mapping.source = util$5.join(aSourceMapPath, mapping.source);
              }
              if (sourceRoot != null) {
                mapping.source = util$5.relative(sourceRoot, mapping.source);
              }
              mapping.originalLine = original.line;
              mapping.originalColumn = original.column;
              if (original.name != null) {
                mapping.name = original.name;
              }
            }
          }

          var source = mapping.source;
          if (source != null && !newSources.has(source)) {
            newSources.add(source);
          }

          var name = mapping.name;
          if (name != null && !newNames.has(name)) {
            newNames.add(name);
          }

        }, this);
        this._sources = newSources;
        this._names = newNames;

        // Copy sourcesContents of applied map.
        aSourceMapConsumer.sources.forEach(function (sourceFile) {
          var content = aSourceMapConsumer.sourceContentFor(sourceFile);
          if (content != null) {
            if (aSourceMapPath != null) {
              sourceFile = util$5.join(aSourceMapPath, sourceFile);
            }
            if (sourceRoot != null) {
              sourceFile = util$5.relative(sourceRoot, sourceFile);
            }
            this.setSourceContent(sourceFile, content);
          }
        }, this);
      };

    /**
     * A mapping can have one of the three levels of data:
     *
     *   1. Just the generated position.
     *   2. The Generated position, original position, and original source.
     *   3. Generated and original position, original source, as well as a name
     *      token.
     *
     * To maintain consistency, we validate that any new mapping being added falls
     * in to one of these categories.
     */
    SourceMapGenerator$3.prototype._validateMapping =
      function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                                  aName) {
        // When aOriginal is truthy but has empty values for .line and .column,
        // it is most likely a programmer error. In this case we throw a very
        // specific error message to try to guide them the right way.
        // For example: https://github.com/Polymer/polymer-bundler/pull/519
        if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
          var message = 'original.line and original.column are not numbers -- you probably meant to omit ' +
          'the original mapping entirely and only map the generated position. If so, pass ' +
          'null for the original mapping instead of an object with empty or null values.';

          if (this._ignoreInvalidMapping) {
            if (typeof console !== 'undefined' && console.warn) {
              console.warn(message);
            }
            return false;
          } else {
            throw new Error(message);
          }
        }

        if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
            && aGenerated.line > 0 && aGenerated.column >= 0
            && !aOriginal && !aSource && !aName) {
          // Case 1.
          return;
        }
        else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
                 && aOriginal && 'line' in aOriginal && 'column' in aOriginal
                 && aGenerated.line > 0 && aGenerated.column >= 0
                 && aOriginal.line > 0 && aOriginal.column >= 0
                 && aSource) {
          // Cases 2 and 3.
          return;
        }
        else {
          var message = 'Invalid mapping: ' + JSON.stringify({
            generated: aGenerated,
            source: aSource,
            original: aOriginal,
            name: aName
          });

          if (this._ignoreInvalidMapping) {
            if (typeof console !== 'undefined' && console.warn) {
              console.warn(message);
            }
            return false;
          } else {
            throw new Error(message)
          }
        }
      };

    /**
     * Serialize the accumulated mappings in to the stream of base 64 VLQs
     * specified by the source map format.
     */
    SourceMapGenerator$3.prototype._serializeMappings =
      function SourceMapGenerator_serializeMappings() {
        var previousGeneratedColumn = 0;
        var previousGeneratedLine = 1;
        var previousOriginalColumn = 0;
        var previousOriginalLine = 0;
        var previousName = 0;
        var previousSource = 0;
        var result = '';
        var next;
        var mapping;
        var nameIdx;
        var sourceIdx;

        var mappings = this._mappings.toArray();
        for (var i = 0, len = mappings.length; i < len; i++) {
          mapping = mappings[i];
          next = '';

          if (mapping.generatedLine !== previousGeneratedLine) {
            previousGeneratedColumn = 0;
            while (mapping.generatedLine !== previousGeneratedLine) {
              next += ';';
              previousGeneratedLine++;
            }
          }
          else {
            if (i > 0) {
              if (!util$5.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
                continue;
              }
              next += ',';
            }
          }

          next += base64VLQ$1.encode(mapping.generatedColumn
                                     - previousGeneratedColumn);
          previousGeneratedColumn = mapping.generatedColumn;

          if (mapping.source != null) {
            sourceIdx = this._sources.indexOf(mapping.source);
            next += base64VLQ$1.encode(sourceIdx - previousSource);
            previousSource = sourceIdx;

            // lines are stored 0-based in SourceMap spec version 3
            next += base64VLQ$1.encode(mapping.originalLine - 1
                                       - previousOriginalLine);
            previousOriginalLine = mapping.originalLine - 1;

            next += base64VLQ$1.encode(mapping.originalColumn
                                       - previousOriginalColumn);
            previousOriginalColumn = mapping.originalColumn;

            if (mapping.name != null) {
              nameIdx = this._names.indexOf(mapping.name);
              next += base64VLQ$1.encode(nameIdx - previousName);
              previousName = nameIdx;
            }
          }

          result += next;
        }

        return result;
      };

    SourceMapGenerator$3.prototype._generateSourcesContent =
      function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
        return aSources.map(function (source) {
          if (!this._sourcesContents) {
            return null;
          }
          if (aSourceRoot != null) {
            source = util$5.relative(aSourceRoot, source);
          }
          var key = util$5.toSetString(source);
          return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
            ? this._sourcesContents[key]
            : null;
        }, this);
      };

    /**
     * Externalize the source map.
     */
    SourceMapGenerator$3.prototype.toJSON =
      function SourceMapGenerator_toJSON() {
        var map = {
          version: this._version,
          sources: this._sources.toArray(),
          names: this._names.toArray(),
          mappings: this._serializeMappings()
        };
        if (this._file != null) {
          map.file = this._file;
        }
        if (this._sourceRoot != null) {
          map.sourceRoot = this._sourceRoot;
        }
        if (this._sourcesContents) {
          map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
        }

        return map;
      };

    /**
     * Render the source map being generated to a string.
     */
    SourceMapGenerator$3.prototype.toString =
      function SourceMapGenerator_toString() {
        return JSON.stringify(this.toJSON());
      };

    var SourceMapGenerator_1 = SourceMapGenerator$3;

    const trackNodes = new Set(['Atrule', 'Selector', 'Declaration']);

    function generateSourceMap(handlers) {
        const map = new SourceMapGenerator_1();
        const generated = {
            line: 1,
            column: 0
        };
        const original = {
            line: 0, // should be zero to add first mapping
            column: 0
        };
        const activatedGenerated = {
            line: 1,
            column: 0
        };
        const activatedMapping = {
            generated: activatedGenerated
        };
        let line = 1;
        let column = 0;
        let sourceMappingActive = false;

        const origHandlersNode = handlers.node;
        handlers.node = function(node) {
            if (node.loc && node.loc.start && trackNodes.has(node.type)) {
                const nodeLine = node.loc.start.line;
                const nodeColumn = node.loc.start.column - 1;

                if (original.line !== nodeLine ||
                    original.column !== nodeColumn) {
                    original.line = nodeLine;
                    original.column = nodeColumn;

                    generated.line = line;
                    generated.column = column;

                    if (sourceMappingActive) {
                        sourceMappingActive = false;
                        if (generated.line !== activatedGenerated.line ||
                            generated.column !== activatedGenerated.column) {
                            map.addMapping(activatedMapping);
                        }
                    }

                    sourceMappingActive = true;
                    map.addMapping({
                        source: node.loc.source,
                        original,
                        generated
                    });
                }
            }

            origHandlersNode.call(this, node);

            if (sourceMappingActive && trackNodes.has(node.type)) {
                activatedGenerated.line = line;
                activatedGenerated.column = column;
            }
        };

        const origHandlersEmit = handlers.emit;
        handlers.emit = function(value, type, auto) {
            for (let i = 0; i < value.length; i++) {
                if (value.charCodeAt(i) === 10) { // \n
                    line++;
                    column = 0;
                } else {
                    column++;
                }
            }

            origHandlersEmit(value, type, auto);
        };

        const origHandlersResult = handlers.result;
        handlers.result = function() {
            if (sourceMappingActive) {
                map.addMapping(activatedMapping);
            }

            return {
                css: origHandlersResult(),
                map
            };
        };

        return handlers;
    }

    const PLUSSIGN$9 = 0x002B;    // U+002B PLUS SIGN (+)
    const HYPHENMINUS$6 = 0x002D; // U+002D HYPHEN-MINUS (-)

    const code = (type, value) => {
        if (type === Delim) {
            type = value;
        }

        if (typeof type === 'string') {
            const charCode = type.charCodeAt(0);
            return charCode > 0x7F ? 0x8000 : charCode << 8;
        }

        return type;
    };

    // https://www.w3.org/TR/css-syntax-3/#serialization
    // The only requirement for serialization is that it must "round-trip" with parsing,
    // that is, parsing the stylesheet must produce the same data structures as parsing,
    // serializing, and parsing again, except for consecutive <whitespace-token>s,
    // which may be collapsed into a single token.

    const specPairs = [
        [Ident, Ident],
        [Ident, Function$1],
        [Ident, Url$2],
        [Ident, BadUrl],
        [Ident, '-'],
        [Ident, Number$2],
        [Ident, Percentage$1],
        [Ident, Dimension$1],
        [Ident, CDC$1],
        [Ident, LeftParenthesis],

        [AtKeyword, Ident],
        [AtKeyword, Function$1],
        [AtKeyword, Url$2],
        [AtKeyword, BadUrl],
        [AtKeyword, '-'],
        [AtKeyword, Number$2],
        [AtKeyword, Percentage$1],
        [AtKeyword, Dimension$1],
        [AtKeyword, CDC$1],

        [Hash$1, Ident],
        [Hash$1, Function$1],
        [Hash$1, Url$2],
        [Hash$1, BadUrl],
        [Hash$1, '-'],
        [Hash$1, Number$2],
        [Hash$1, Percentage$1],
        [Hash$1, Dimension$1],
        [Hash$1, CDC$1],

        [Dimension$1, Ident],
        [Dimension$1, Function$1],
        [Dimension$1, Url$2],
        [Dimension$1, BadUrl],
        [Dimension$1, '-'],
        [Dimension$1, Number$2],
        [Dimension$1, Percentage$1],
        [Dimension$1, Dimension$1],
        [Dimension$1, CDC$1],

        ['#', Ident],
        ['#', Function$1],
        ['#', Url$2],
        ['#', BadUrl],
        ['#', '-'],
        ['#', Number$2],
        ['#', Percentage$1],
        ['#', Dimension$1],
        ['#', CDC$1], // https://github.com/w3c/csswg-drafts/pull/6874

        ['-', Ident],
        ['-', Function$1],
        ['-', Url$2],
        ['-', BadUrl],
        ['-', '-'],
        ['-', Number$2],
        ['-', Percentage$1],
        ['-', Dimension$1],
        ['-', CDC$1], // https://github.com/w3c/csswg-drafts/pull/6874

        [Number$2, Ident],
        [Number$2, Function$1],
        [Number$2, Url$2],
        [Number$2, BadUrl],
        [Number$2, Number$2],
        [Number$2, Percentage$1],
        [Number$2, Dimension$1],
        [Number$2, '%'],
        [Number$2, CDC$1], // https://github.com/w3c/csswg-drafts/pull/6874

        ['@', Ident],
        ['@', Function$1],
        ['@', Url$2],
        ['@', BadUrl],
        ['@', '-'],
        ['@', CDC$1], // https://github.com/w3c/csswg-drafts/pull/6874

        ['.', Number$2],
        ['.', Percentage$1],
        ['.', Dimension$1],

        ['+', Number$2],
        ['+', Percentage$1],
        ['+', Dimension$1],

        ['/', '*']
    ];
    // validate with scripts/generate-safe
    const safePairs = specPairs.concat([
        [Ident, Hash$1],

        [Dimension$1, Hash$1],

        [Hash$1, Hash$1],

        [AtKeyword, LeftParenthesis],
        [AtKeyword, String$2],
        [AtKeyword, Colon],

        [Percentage$1, Percentage$1],
        [Percentage$1, Dimension$1],
        [Percentage$1, Function$1],
        [Percentage$1, '-'],

        [RightParenthesis, Ident],
        [RightParenthesis, Function$1],
        [RightParenthesis, Percentage$1],
        [RightParenthesis, Dimension$1],
        [RightParenthesis, Hash$1],
        [RightParenthesis, '-']
    ]);

    function createMap(pairs) {
        const isWhiteSpaceRequired = new Set(
            pairs.map(([prev, next]) => (code(prev) << 16 | code(next)))
        );

        return function(prevCode, type, value) {
            const nextCode = code(type, value);
            const nextCharCode = value.charCodeAt(0);
            const emitWs =
                (nextCharCode === HYPHENMINUS$6 &&
                    type !== Ident &&
                    type !== Function$1 &&
                    type !== CDC$1) ||
                (nextCharCode === PLUSSIGN$9)
                    ? isWhiteSpaceRequired.has(prevCode << 16 | nextCharCode << 8)
                    : isWhiteSpaceRequired.has(prevCode << 16 | nextCode);

            if (emitWs) {
                this.emit(' ', WhiteSpace$1, true);
            }

            return nextCode;
        };
    }

    const spec = createMap(specPairs);
    const safe = createMap(safePairs);

    var tokenBefore = /*#__PURE__*/Object.freeze({
        __proto__: null,
        spec: spec,
        safe: safe
    });

    const REVERSESOLIDUS = 0x005c; // U+005C REVERSE SOLIDUS (\)

    function processChildren(node, delimeter) {
        if (typeof delimeter === 'function') {
            let prev = null;

            node.children.forEach(node => {
                if (prev !== null) {
                    delimeter.call(this, prev);
                }

                this.node(node);
                prev = node;
            });

            return;
        }

        node.children.forEach(this.node, this);
    }

    function processChunk(chunk) {
        tokenize$3(chunk, (type, start, end) => {
            this.token(type, chunk.slice(start, end));
        });
    }

    function createGenerator(config) {
        const types = new Map();

        for (let name in config.node) {
            const item = config.node[name];
            const fn = item.generate || item;

            if (typeof fn === 'function') {
                types.set(name, item.generate || item);
            }
        }

        return function(node, options) {
            let buffer = '';
            let prevCode = 0;
            let handlers = {
                node(node) {
                    if (types.has(node.type)) {
                        types.get(node.type).call(publicApi, node);
                    } else {
                        throw new Error('Unknown node type: ' + node.type);
                    }
                },
                tokenBefore: safe,
                token(type, value) {
                    prevCode = this.tokenBefore(prevCode, type, value);

                    this.emit(value, type, false);

                    if (type === Delim && value.charCodeAt(0) === REVERSESOLIDUS) {
                        this.emit('\n', WhiteSpace$1, true);
                    }
                },
                emit(value) {
                    buffer += value;
                },
                result() {
                    return buffer;
                }
            };

            if (options) {
                if (typeof options.decorator === 'function') {
                    handlers = options.decorator(handlers);
                }

                if (options.sourceMap) {
                    handlers = generateSourceMap(handlers);
                }

                if (options.mode in tokenBefore) {
                    handlers.tokenBefore = tokenBefore[options.mode];
                }
            }

            const publicApi = {
                node: (node) => handlers.node(node),
                children: processChildren,
                token: (type, value) => handlers.token(type, value),
                tokenize: processChunk
            };

            handlers.node(node);

            return handlers.result();
        };
    }

    function createConvertor(walk) {
        return {
            fromPlainObject(ast) {
                walk(ast, {
                    enter(node) {
                        if (node.children && node.children instanceof List === false) {
                            node.children = new List().fromArray(node.children);
                        }
                    }
                });

                return ast;
            },
            toPlainObject(ast) {
                walk(ast, {
                    leave(node) {
                        if (node.children && node.children instanceof List) {
                            node.children = node.children.toArray();
                        }
                    }
                });

                return ast;
            }
        };
    }

    const { hasOwnProperty: hasOwnProperty$5 } = Object.prototype;
    const noop$5 = function() {};

    function ensureFunction$1(value) {
        return typeof value === 'function' ? value : noop$5;
    }

    function invokeForType(fn, type) {
        return function(node, item, list) {
            if (node.type === type) {
                fn.call(this, node, item, list);
            }
        };
    }

    function getWalkersFromStructure(name, nodeType) {
        const structure = nodeType.structure;
        const walkers = [];

        for (const key in structure) {
            if (hasOwnProperty$5.call(structure, key) === false) {
                continue;
            }

            let fieldTypes = structure[key];
            const walker = {
                name: key,
                type: false,
                nullable: false
            };

            if (!Array.isArray(fieldTypes)) {
                fieldTypes = [fieldTypes];
            }

            for (const fieldType of fieldTypes) {
                if (fieldType === null) {
                    walker.nullable = true;
                } else if (typeof fieldType === 'string') {
                    walker.type = 'node';
                } else if (Array.isArray(fieldType)) {
                    walker.type = 'list';
                }
            }

            if (walker.type) {
                walkers.push(walker);
            }
        }

        if (walkers.length) {
            return {
                context: nodeType.walkContext,
                fields: walkers
            };
        }

        return null;
    }

    function getTypesFromConfig(config) {
        const types = {};

        for (const name in config.node) {
            if (hasOwnProperty$5.call(config.node, name)) {
                const nodeType = config.node[name];

                if (!nodeType.structure) {
                    throw new Error('Missed `structure` field in `' + name + '` node type definition');
                }

                types[name] = getWalkersFromStructure(name, nodeType);
            }
        }

        return types;
    }

    function createTypeIterator(config, reverse) {
        const fields = config.fields.slice();
        const contextName = config.context;
        const useContext = typeof contextName === 'string';

        if (reverse) {
            fields.reverse();
        }

        return function(node, context, walk, walkReducer) {
            let prevContextValue;

            if (useContext) {
                prevContextValue = context[contextName];
                context[contextName] = node;
            }

            for (const field of fields) {
                const ref = node[field.name];

                if (!field.nullable || ref) {
                    if (field.type === 'list') {
                        const breakWalk = reverse
                            ? ref.reduceRight(walkReducer, false)
                            : ref.reduce(walkReducer, false);

                        if (breakWalk) {
                            return true;
                        }
                    } else if (walk(ref)) {
                        return true;
                    }
                }
            }

            if (useContext) {
                context[contextName] = prevContextValue;
            }
        };
    }

    function createFastTraveralMap({
        StyleSheet,
        Atrule,
        Rule,
        Block,
        DeclarationList
    }) {
        return {
            Atrule: {
                StyleSheet,
                Atrule,
                Rule,
                Block
            },
            Rule: {
                StyleSheet,
                Atrule,
                Rule,
                Block
            },
            Declaration: {
                StyleSheet,
                Atrule,
                Rule,
                Block,
                DeclarationList
            }
        };
    }

    function createWalker(config) {
        const types = getTypesFromConfig(config);
        const iteratorsNatural = {};
        const iteratorsReverse = {};
        const breakWalk = Symbol('break-walk');
        const skipNode = Symbol('skip-node');

        for (const name in types) {
            if (hasOwnProperty$5.call(types, name) && types[name] !== null) {
                iteratorsNatural[name] = createTypeIterator(types[name], false);
                iteratorsReverse[name] = createTypeIterator(types[name], true);
            }
        }

        const fastTraversalIteratorsNatural = createFastTraveralMap(iteratorsNatural);
        const fastTraversalIteratorsReverse = createFastTraveralMap(iteratorsReverse);

        const walk = function(root, options) {
            function walkNode(node, item, list) {
                const enterRet = enter.call(context, node, item, list);

                if (enterRet === breakWalk) {
                    return true;
                }

                if (enterRet === skipNode) {
                    return false;
                }

                if (iterators.hasOwnProperty(node.type)) {
                    if (iterators[node.type](node, context, walkNode, walkReducer)) {
                        return true;
                    }
                }

                if (leave.call(context, node, item, list) === breakWalk) {
                    return true;
                }

                return false;
            }

            let enter = noop$5;
            let leave = noop$5;
            let iterators = iteratorsNatural;
            let walkReducer = (ret, data, item, list) => ret || walkNode(data, item, list);
            const context = {
                break: breakWalk,
                skip: skipNode,

                root,
                stylesheet: null,
                atrule: null,
                atrulePrelude: null,
                rule: null,
                selector: null,
                block: null,
                declaration: null,
                function: null
            };

            if (typeof options === 'function') {
                enter = options;
            } else if (options) {
                enter = ensureFunction$1(options.enter);
                leave = ensureFunction$1(options.leave);

                if (options.reverse) {
                    iterators = iteratorsReverse;
                }

                if (options.visit) {
                    if (fastTraversalIteratorsNatural.hasOwnProperty(options.visit)) {
                        iterators = options.reverse
                            ? fastTraversalIteratorsReverse[options.visit]
                            : fastTraversalIteratorsNatural[options.visit];
                    } else if (!types.hasOwnProperty(options.visit)) {
                        throw new Error('Bad value `' + options.visit + '` for `visit` option (should be: ' + Object.keys(types).sort().join(', ') + ')');
                    }

                    enter = invokeForType(enter, options.visit);
                    leave = invokeForType(leave, options.visit);
                }
            }

            if (enter === noop$5 && leave === noop$5) {
                throw new Error('Neither `enter` nor `leave` walker handler is set or both aren\'t a function');
            }

            walkNode(root);
        };

        walk.break = breakWalk;
        walk.skip = skipNode;

        walk.find = function(ast, fn) {
            let found = null;

            walk(ast, function(node, item, list) {
                if (fn.call(this, node, item, list)) {
                    found = node;
                    return breakWalk;
                }
            });

            return found;
        };

        walk.findLast = function(ast, fn) {
            let found = null;

            walk(ast, {
                reverse: true,
                enter(node, item, list) {
                    if (fn.call(this, node, item, list)) {
                        found = node;
                        return breakWalk;
                    }
                }
            });

            return found;
        };

        walk.findAll = function(ast, fn) {
            const found = [];

            walk(ast, function(node, item, list) {
                if (fn.call(this, node, item, list)) {
                    found.push(node);
                }
            });

            return found;
        };

        return walk;
    }

    function noop$4(value) {
        return value;
    }

    function generateMultiplier(multiplier) {
        const { min, max, comma } = multiplier;

        if (min === 0 && max === 0) {
            return comma ? '#?' : '*';
        }

        if (min === 0 && max === 1) {
            return '?';
        }

        if (min === 1 && max === 0) {
            return comma ? '#' : '+';
        }

        if (min === 1 && max === 1) {
            return '';
        }

        return (
            (comma ? '#' : '') +
            (min === max
                ? '{' + min + '}'
                : '{' + min + ',' + (max !== 0 ? max : '') + '}'
            )
        );
    }

    function generateTypeOpts(node) {
        switch (node.type) {
            case 'Range':
                return (
                    ' [' +
                    (node.min === null ? '-∞' : node.min) +
                    ',' +
                    (node.max === null ? '∞' : node.max) +
                    ']'
                );

            default:
                throw new Error('Unknown node type `' + node.type + '`');
        }
    }

    function generateSequence(node, decorate, forceBraces, compact) {
        const combinator = node.combinator === ' ' || compact ? node.combinator : ' ' + node.combinator + ' ';
        const result = node.terms
            .map(term => internalGenerate(term, decorate, forceBraces, compact))
            .join(combinator);

        if (node.explicit || forceBraces) {
            return (compact || result[0] === ',' ? '[' : '[ ') + result + (compact ? ']' : ' ]');
        }

        return result;
    }

    function internalGenerate(node, decorate, forceBraces, compact) {
        let result;

        switch (node.type) {
            case 'Group':
                result =
                    generateSequence(node, decorate, forceBraces, compact) +
                    (node.disallowEmpty ? '!' : '');
                break;

            case 'Multiplier':
                // return since node is a composition
                return (
                    internalGenerate(node.term, decorate, forceBraces, compact) +
                    decorate(generateMultiplier(node), node)
                );

            case 'Type':
                result = '<' + node.name + (node.opts ? decorate(generateTypeOpts(node.opts), node.opts) : '') + '>';
                break;

            case 'Property':
                result = '<\'' + node.name + '\'>';
                break;

            case 'Keyword':
                result = node.name;
                break;

            case 'AtKeyword':
                result = '@' + node.name;
                break;

            case 'Function':
                result = node.name + '(';
                break;

            case 'String':
            case 'Token':
                result = node.value;
                break;

            case 'Comma':
                result = ',';
                break;

            default:
                throw new Error('Unknown node type `' + node.type + '`');
        }

        return decorate(result, node);
    }

    function generate$G(node, options) {
        let decorate = noop$4;
        let forceBraces = false;
        let compact = false;

        if (typeof options === 'function') {
            decorate = options;
        } else if (options) {
            forceBraces = Boolean(options.forceBraces);
            compact = Boolean(options.compact);
            if (typeof options.decorate === 'function') {
                decorate = options.decorate;
            }
        }

        return internalGenerate(node, decorate, forceBraces, compact);
    }

    const defaultLoc = { offset: 0, line: 1, column: 1 };

    function locateMismatch(matchResult, node) {
        const tokens = matchResult.tokens;
        const longestMatch = matchResult.longestMatch;
        const mismatchNode = longestMatch < tokens.length ? tokens[longestMatch].node || null : null;
        const badNode = mismatchNode !== node ? mismatchNode : null;
        let mismatchOffset = 0;
        let mismatchLength = 0;
        let entries = 0;
        let css = '';
        let start;
        let end;

        for (let i = 0; i < tokens.length; i++) {
            const token = tokens[i].value;

            if (i === longestMatch) {
                mismatchLength = token.length;
                mismatchOffset = css.length;
            }

            if (badNode !== null && tokens[i].node === badNode) {
                if (i <= longestMatch) {
                    entries++;
                } else {
                    entries = 0;
                }
            }

            css += token;
        }

        if (longestMatch === tokens.length || entries > 1) { // last
            start = fromLoc(badNode || node, 'end') || buildLoc(defaultLoc, css);
            end = buildLoc(start);
        } else {
            start = fromLoc(badNode, 'start') ||
                buildLoc(fromLoc(node, 'start') || defaultLoc, css.slice(0, mismatchOffset));
            end = fromLoc(badNode, 'end') ||
                buildLoc(start, css.substr(mismatchOffset, mismatchLength));
        }

        return {
            css,
            mismatchOffset,
            mismatchLength,
            start,
            end
        };
    }

    function fromLoc(node, point) {
        const value = node && node.loc && node.loc[point];

        if (value) {
            return 'line' in value ? buildLoc(value) : value;
        }

        return null;
    }

    function buildLoc({ offset, line, column }, extra) {
        const loc = {
            offset,
            line,
            column
        };

        if (extra) {
            const lines = extra.split(/\n|\r\n?|\f/);

            loc.offset += extra.length;
            loc.line += lines.length - 1;
            loc.column = lines.length === 1 ? loc.column + extra.length : lines.pop().length + 1;
        }

        return loc;
    }

    const SyntaxReferenceError = function(type, referenceName) {
        const error = createCustomError(
            'SyntaxReferenceError',
            type + (referenceName ? ' `' + referenceName + '`' : '')
        );

        error.reference = referenceName;

        return error;
    };

    const SyntaxMatchError = function(message, syntax, node, matchResult) {
        const error = createCustomError('SyntaxMatchError', message);
        const {
            css,
            mismatchOffset,
            mismatchLength,
            start,
            end
        } = locateMismatch(matchResult, node);

        error.rawMessage = message;
        error.syntax = syntax ? generate$G(syntax) : '<generic>';
        error.css = css;
        error.mismatchOffset = mismatchOffset;
        error.mismatchLength = mismatchLength;
        error.message = message + '\n' +
            '  syntax: ' + error.syntax + '\n' +
            '   value: ' + (css || '<empty string>') + '\n' +
            '  --------' + new Array(error.mismatchOffset + 1).join('-') + '^';

        Object.assign(error, start);
        error.loc = {
            source: (node && node.loc && node.loc.source) || '<unknown>',
            start,
            end
        };

        return error;
    };

    const keywords = new Map();
    const properties = new Map();
    const HYPHENMINUS$5 = 45; // '-'.charCodeAt()

    const keyword$1 = getKeywordDescriptor;
    const property$2 = getPropertyDescriptor;
    function isCustomProperty(str, offset) {
        offset = offset || 0;

        return str.length - offset >= 2 &&
               str.charCodeAt(offset) === HYPHENMINUS$5 &&
               str.charCodeAt(offset + 1) === HYPHENMINUS$5;
    }

    function getVendorPrefix(str, offset) {
        offset = offset || 0;

        // verdor prefix should be at least 3 chars length
        if (str.length - offset >= 3) {
            // vendor prefix starts with hyper minus following non-hyper minus
            if (str.charCodeAt(offset) === HYPHENMINUS$5 &&
                str.charCodeAt(offset + 1) !== HYPHENMINUS$5) {
                // vendor prefix should contain a hyper minus at the ending
                const secondDashIndex = str.indexOf('-', offset + 2);

                if (secondDashIndex !== -1) {
                    return str.substring(offset, secondDashIndex + 1);
                }
            }
        }

        return '';
    }

    function getKeywordDescriptor(keyword) {
        if (keywords.has(keyword)) {
            return keywords.get(keyword);
        }

        const name = keyword.toLowerCase();
        let descriptor = keywords.get(name);

        if (descriptor === undefined) {
            const custom = isCustomProperty(name, 0);
            const vendor = !custom ? getVendorPrefix(name, 0) : '';
            descriptor = Object.freeze({
                basename: name.substr(vendor.length),
                name,
                prefix: vendor,
                vendor,
                custom
            });
        }

        keywords.set(keyword, descriptor);

        return descriptor;
    }

    function getPropertyDescriptor(property) {
        if (properties.has(property)) {
            return properties.get(property);
        }

        let name = property;
        let hack = property[0];

        if (hack === '/') {
            hack = property[1] === '/' ? '//' : '/';
        } else if (hack !== '_' &&
                   hack !== '*' &&
                   hack !== '$' &&
                   hack !== '#' &&
                   hack !== '+' &&
                   hack !== '&') {
            hack = '';
        }

        const custom = isCustomProperty(name, hack.length);

        // re-use result when possible (the same as for lower case)
        if (!custom) {
            name = name.toLowerCase();
            if (properties.has(name)) {
                const descriptor = properties.get(name);
                properties.set(property, descriptor);
                return descriptor;
            }
        }

        const vendor = !custom ? getVendorPrefix(name, hack.length) : '';
        const prefix = name.substr(0, hack.length + vendor.length);
        const descriptor = Object.freeze({
            basename: name.substr(prefix.length),
            name: name.substr(hack.length),
            hack,
            vendor,
            prefix,
            custom
        });

        properties.set(property, descriptor);

        return descriptor;
    }

    // https://drafts.csswg.org/css-cascade-5/
    const cssWideKeywords = [
        'initial',
        'inherit',
        'unset',
        'revert',
        'revert-layer'
    ];

    const PLUSSIGN$8 = 0x002B;    // U+002B PLUS SIGN (+)
    const HYPHENMINUS$4 = 0x002D; // U+002D HYPHEN-MINUS (-)
    const N$3 = 0x006E;           // U+006E LATIN SMALL LETTER N (n)
    const DISALLOW_SIGN$1 = true;
    const ALLOW_SIGN$1 = false;

    function isDelim$1(token, code) {
        return token !== null && token.type === Delim && token.value.charCodeAt(0) === code;
    }

    function skipSC(token, offset, getNextToken) {
        while (token !== null && (token.type === WhiteSpace$1 || token.type === Comment$1)) {
            token = getNextToken(++offset);
        }

        return offset;
    }

    function checkInteger$1(token, valueOffset, disallowSign, offset) {
        if (!token) {
            return 0;
        }

        const code = token.value.charCodeAt(valueOffset);

        if (code === PLUSSIGN$8 || code === HYPHENMINUS$4) {
            if (disallowSign) {
                // Number sign is not allowed
                return 0;
            }
            valueOffset++;
        }

        for (; valueOffset < token.value.length; valueOffset++) {
            if (!isDigit(token.value.charCodeAt(valueOffset))) {
                // Integer is expected
                return 0;
            }
        }

        return offset + 1;
    }

    // ... <signed-integer>
    // ... ['+' | '-'] <signless-integer>
    function consumeB$1(token, offset_, getNextToken) {
        let sign = false;
        let offset = skipSC(token, offset_, getNextToken);

        token = getNextToken(offset);

        if (token === null) {
            return offset_;
        }

        if (token.type !== Number$2) {
            if (isDelim$1(token, PLUSSIGN$8) || isDelim$1(token, HYPHENMINUS$4)) {
                sign = true;
                offset = skipSC(getNextToken(++offset), offset, getNextToken);
                token = getNextToken(offset);

                if (token === null || token.type !== Number$2) {
                    return 0;
                }
            } else {
                return offset_;
            }
        }

        if (!sign) {
            const code = token.value.charCodeAt(0);
            if (code !== PLUSSIGN$8 && code !== HYPHENMINUS$4) {
                // Number sign is expected
                return 0;
            }
        }

        return checkInteger$1(token, sign ? 0 : 1, sign, offset);
    }

    // An+B microsyntax https://www.w3.org/TR/css-syntax-3/#anb
    function anPlusB(token, getNextToken) {
        /* eslint-disable brace-style*/
        let offset = 0;

        if (!token) {
            return 0;
        }

        // <integer>
        if (token.type === Number$2) {
            return checkInteger$1(token, 0, ALLOW_SIGN$1, offset); // b
        }

        // -n
        // -n <signed-integer>
        // -n ['+' | '-'] <signless-integer>
        // -n- <signless-integer>
        // <dashndashdigit-ident>
        else if (token.type === Ident && token.value.charCodeAt(0) === HYPHENMINUS$4) {
            // expect 1st char is N
            if (!cmpChar(token.value, 1, N$3)) {
                return 0;
            }

            switch (token.value.length) {
                // -n
                // -n <signed-integer>
                // -n ['+' | '-'] <signless-integer>
                case 2:
                    return consumeB$1(getNextToken(++offset), offset, getNextToken);

                // -n- <signless-integer>
                case 3:
                    if (token.value.charCodeAt(2) !== HYPHENMINUS$4) {
                        return 0;
                    }

                    offset = skipSC(getNextToken(++offset), offset, getNextToken);
                    token = getNextToken(offset);

                    return checkInteger$1(token, 0, DISALLOW_SIGN$1, offset);

                // <dashndashdigit-ident>
                default:
                    if (token.value.charCodeAt(2) !== HYPHENMINUS$4) {
                        return 0;
                    }

                    return checkInteger$1(token, 3, DISALLOW_SIGN$1, offset);
            }
        }

        // '+'? n
        // '+'? n <signed-integer>
        // '+'? n ['+' | '-'] <signless-integer>
        // '+'? n- <signless-integer>
        // '+'? <ndashdigit-ident>
        else if (token.type === Ident || (isDelim$1(token, PLUSSIGN$8) && getNextToken(offset + 1).type === Ident)) {
            // just ignore a plus
            if (token.type !== Ident) {
                token = getNextToken(++offset);
            }

            if (token === null || !cmpChar(token.value, 0, N$3)) {
                return 0;
            }

            switch (token.value.length) {
                // '+'? n
                // '+'? n <signed-integer>
                // '+'? n ['+' | '-'] <signless-integer>
                case 1:
                    return consumeB$1(getNextToken(++offset), offset, getNextToken);

                // '+'? n- <signless-integer>
                case 2:
                    if (token.value.charCodeAt(1) !== HYPHENMINUS$4) {
                        return 0;
                    }

                    offset = skipSC(getNextToken(++offset), offset, getNextToken);
                    token = getNextToken(offset);

                    return checkInteger$1(token, 0, DISALLOW_SIGN$1, offset);

                // '+'? <ndashdigit-ident>
                default:
                    if (token.value.charCodeAt(1) !== HYPHENMINUS$4) {
                        return 0;
                    }

                    return checkInteger$1(token, 2, DISALLOW_SIGN$1, offset);
            }
        }

        // <ndashdigit-dimension>
        // <ndash-dimension> <signless-integer>
        // <n-dimension>
        // <n-dimension> <signed-integer>
        // <n-dimension> ['+' | '-'] <signless-integer>
        else if (token.type === Dimension$1) {
            let code = token.value.charCodeAt(0);
            let sign = code === PLUSSIGN$8 || code === HYPHENMINUS$4 ? 1 : 0;
            let i = sign;

            for (; i < token.value.length; i++) {
                if (!isDigit(token.value.charCodeAt(i))) {
                    break;
                }
            }

            if (i === sign) {
                // Integer is expected
                return 0;
            }

            if (!cmpChar(token.value, i, N$3)) {
                return 0;
            }

            // <n-dimension>
            // <n-dimension> <signed-integer>
            // <n-dimension> ['+' | '-'] <signless-integer>
            if (i + 1 === token.value.length) {
                return consumeB$1(getNextToken(++offset), offset, getNextToken);
            } else {
                if (token.value.charCodeAt(i + 1) !== HYPHENMINUS$4) {
                    return 0;
                }

                // <ndash-dimension> <signless-integer>
                if (i + 2 === token.value.length) {
                    offset = skipSC(getNextToken(++offset), offset, getNextToken);
                    token = getNextToken(offset);

                    return checkInteger$1(token, 0, DISALLOW_SIGN$1, offset);
                }
                // <ndashdigit-dimension>
                else {
                    return checkInteger$1(token, i + 2, DISALLOW_SIGN$1, offset);
                }
            }
        }

        return 0;
    }

    const PLUSSIGN$7 = 0x002B;     // U+002B PLUS SIGN (+)
    const HYPHENMINUS$3 = 0x002D;  // U+002D HYPHEN-MINUS (-)
    const QUESTIONMARK$2 = 0x003F; // U+003F QUESTION MARK (?)
    const U$1 = 0x0075;            // U+0075 LATIN SMALL LETTER U (u)

    function isDelim(token, code) {
        return token !== null && token.type === Delim && token.value.charCodeAt(0) === code;
    }

    function startsWith$1(token, code) {
        return token.value.charCodeAt(0) === code;
    }

    function hexSequence(token, offset, allowDash) {
        let hexlen = 0;

        for (let pos = offset; pos < token.value.length; pos++) {
            const code = token.value.charCodeAt(pos);

            if (code === HYPHENMINUS$3 && allowDash && hexlen !== 0) {
                hexSequence(token, offset + hexlen + 1, false);
                return 6; // dissallow following question marks
            }

            if (!isHexDigit(code)) {
                return 0; // not a hex digit
            }

            if (++hexlen > 6) {
                return 0; // too many hex digits
            }    }

        return hexlen;
    }

    function withQuestionMarkSequence(consumed, length, getNextToken) {
        if (!consumed) {
            return 0; // nothing consumed
        }

        while (isDelim(getNextToken(length), QUESTIONMARK$2)) {
            if (++consumed > 6) {
                return 0; // too many question marks
            }

            length++;
        }

        return length;
    }

    // https://drafts.csswg.org/css-syntax/#urange
    // Informally, the <urange> production has three forms:
    // U+0001
    //      Defines a range consisting of a single code point, in this case the code point "1".
    // U+0001-00ff
    //      Defines a range of codepoints between the first and the second value, in this case
    //      the range between "1" and "ff" (255 in decimal) inclusive.
    // U+00??
    //      Defines a range of codepoints where the "?" characters range over all hex digits,
    //      in this case defining the same as the value U+0000-00ff.
    // In each form, a maximum of 6 digits is allowed for each hexadecimal number (if you treat "?" as a hexadecimal digit).
    //
    // <urange> =
    //   u '+' <ident-token> '?'* |
    //   u <dimension-token> '?'* |
    //   u <number-token> '?'* |
    //   u <number-token> <dimension-token> |
    //   u <number-token> <number-token> |
    //   u '+' '?'+
    function urange(token, getNextToken) {
        let length = 0;

        // should start with `u` or `U`
        if (token === null || token.type !== Ident || !cmpChar(token.value, 0, U$1)) {
            return 0;
        }

        token = getNextToken(++length);
        if (token === null) {
            return 0;
        }

        // u '+' <ident-token> '?'*
        // u '+' '?'+
        if (isDelim(token, PLUSSIGN$7)) {
            token = getNextToken(++length);
            if (token === null) {
                return 0;
            }

            if (token.type === Ident) {
                // u '+' <ident-token> '?'*
                return withQuestionMarkSequence(hexSequence(token, 0, true), ++length, getNextToken);
            }

            if (isDelim(token, QUESTIONMARK$2)) {
                // u '+' '?'+
                return withQuestionMarkSequence(1, ++length, getNextToken);
            }

            // Hex digit or question mark is expected
            return 0;
        }

        // u <number-token> '?'*
        // u <number-token> <dimension-token>
        // u <number-token> <number-token>
        if (token.type === Number$2) {
            const consumedHexLength = hexSequence(token, 1, true);
            if (consumedHexLength === 0) {
                return 0;
            }

            token = getNextToken(++length);
            if (token === null) {
                // u <number-token> <eof>
                return length;
            }

            if (token.type === Dimension$1 || token.type === Number$2) {
                // u <number-token> <dimension-token>
                // u <number-token> <number-token>
                if (!startsWith$1(token, HYPHENMINUS$3) || !hexSequence(token, 1, false)) {
                    return 0;
                }

                return length + 1;
            }

            // u <number-token> '?'*
            return withQuestionMarkSequence(consumedHexLength, length, getNextToken);
        }

        // u <dimension-token> '?'*
        if (token.type === Dimension$1) {
            return withQuestionMarkSequence(hexSequence(token, 1, true), ++length, getNextToken);
        }

        return 0;
    }

    const calcFunctionNames = ['calc(', '-moz-calc(', '-webkit-calc('];
    const balancePair = new Map([
        [Function$1, RightParenthesis],
        [LeftParenthesis, RightParenthesis],
        [LeftSquareBracket, RightSquareBracket],
        [LeftCurlyBracket, RightCurlyBracket]
    ]);

    // safe char code getter
    function charCodeAt(str, index) {
        return index < str.length ? str.charCodeAt(index) : 0;
    }

    function eqStr(actual, expected) {
        return cmpStr(actual, 0, actual.length, expected);
    }

    function eqStrAny(actual, expected) {
        for (let i = 0; i < expected.length; i++) {
            if (eqStr(actual, expected[i])) {
                return true;
            }
        }

        return false;
    }

    // IE postfix hack, i.e. 123\0 or 123px\9
    function isPostfixIeHack(str, offset) {
        if (offset !== str.length - 2) {
            return false;
        }

        return (
            charCodeAt(str, offset) === 0x005C &&  // U+005C REVERSE SOLIDUS (\)
            isDigit(charCodeAt(str, offset + 1))
        );
    }

    function outOfRange(opts, value, numEnd) {
        if (opts && opts.type === 'Range') {
            const num = Number(
                numEnd !== undefined && numEnd !== value.length
                    ? value.substr(0, numEnd)
                    : value
            );

            if (isNaN(num)) {
                return true;
            }

            // FIXME: when opts.min is a string it's a dimension, skip a range validation
            // for now since it requires a type covertation which is not implmented yet
            if (opts.min !== null && num < opts.min && typeof opts.min !== 'string') {
                return true;
            }

            // FIXME: when opts.max is a string it's a dimension, skip a range validation
            // for now since it requires a type covertation which is not implmented yet
            if (opts.max !== null && num > opts.max && typeof opts.max !== 'string') {
                return true;
            }
        }

        return false;
    }

    function consumeFunction(token, getNextToken) {
        let balanceCloseType = 0;
        let balanceStash = [];
        let length = 0;

        // balanced token consuming
        scan:
        do {
            switch (token.type) {
                case RightCurlyBracket:
                case RightParenthesis:
                case RightSquareBracket:
                    if (token.type !== balanceCloseType) {
                        break scan;
                    }

                    balanceCloseType = balanceStash.pop();

                    if (balanceStash.length === 0) {
                        length++;
                        break scan;
                    }

                    break;

                case Function$1:
                case LeftParenthesis:
                case LeftSquareBracket:
                case LeftCurlyBracket:
                    balanceStash.push(balanceCloseType);
                    balanceCloseType = balancePair.get(token.type);
                    break;
            }

            length++;
        } while (token = getNextToken(length));

        return length;
    }

    // TODO: implement
    // can be used wherever <length>, <frequency>, <angle>, <time>, <percentage>, <number>, or <integer> values are allowed
    // https://drafts.csswg.org/css-values/#calc-notation
    function calc(next) {
        return function(token, getNextToken, opts) {
            if (token === null) {
                return 0;
            }

            if (token.type === Function$1 && eqStrAny(token.value, calcFunctionNames)) {
                return consumeFunction(token, getNextToken);
            }

            return next(token, getNextToken, opts);
        };
    }

    function tokenType(expectedTokenType) {
        return function(token) {
            if (token === null || token.type !== expectedTokenType) {
                return 0;
            }

            return 1;
        };
    }

    // =========================
    // Complex types
    //

    // https://drafts.csswg.org/css-values-4/#custom-idents
    // 4.2. Author-defined Identifiers: the <custom-ident> type
    // Some properties accept arbitrary author-defined identifiers as a component value.
    // This generic data type is denoted by <custom-ident>, and represents any valid CSS identifier
    // that would not be misinterpreted as a pre-defined keyword in that property’s value definition.
    //
    // See also: https://developer.mozilla.org/en-US/docs/Web/CSS/custom-ident
    function customIdent(token) {
        if (token === null || token.type !== Ident) {
            return 0;
        }

        const name = token.value.toLowerCase();

        // The CSS-wide keywords are not valid <custom-ident>s
        if (eqStrAny(name, cssWideKeywords)) {
            return 0;
        }

        // The default keyword is reserved and is also not a valid <custom-ident>
        if (eqStr(name, 'default')) {
            return 0;
        }

        // TODO: ignore property specific keywords (as described https://developer.mozilla.org/en-US/docs/Web/CSS/custom-ident)
        // Specifications using <custom-ident> must specify clearly what other keywords
        // are excluded from <custom-ident>, if any—for example by saying that any pre-defined keywords
        // in that property’s value definition are excluded. Excluded keywords are excluded
        // in all ASCII case permutations.

        return 1;
    }

    // https://drafts.csswg.org/css-variables/#typedef-custom-property-name
    // A custom property is any property whose name starts with two dashes (U+002D HYPHEN-MINUS), like --foo.
    // The <custom-property-name> production corresponds to this: it’s defined as any valid identifier
    // that starts with two dashes, except -- itself, which is reserved for future use by CSS.
    // NOTE: Current implementation treat `--` as a valid name since most (all?) major browsers treat it as valid.
    function customPropertyName(token) {
        // ... defined as any valid identifier
        if (token === null || token.type !== Ident) {
            return 0;
        }

        // ... that starts with two dashes (U+002D HYPHEN-MINUS)
        if (charCodeAt(token.value, 0) !== 0x002D || charCodeAt(token.value, 1) !== 0x002D) {
            return 0;
        }

        return 1;
    }

    // https://drafts.csswg.org/css-color-4/#hex-notation
    // The syntax of a <hex-color> is a <hash-token> token whose value consists of 3, 4, 6, or 8 hexadecimal digits.
    // In other words, a hex color is written as a hash character, "#", followed by some number of digits 0-9 or
    // letters a-f (the case of the letters doesn’t matter - #00ff00 is identical to #00FF00).
    function hexColor(token) {
        if (token === null || token.type !== Hash$1) {
            return 0;
        }

        const length = token.value.length;

        // valid values (length): #rgb (4), #rgba (5), #rrggbb (7), #rrggbbaa (9)
        if (length !== 4 && length !== 5 && length !== 7 && length !== 9) {
            return 0;
        }

        for (let i = 1; i < length; i++) {
            if (!isHexDigit(charCodeAt(token.value, i))) {
                return 0;
            }
        }

        return 1;
    }

    function idSelector(token) {
        if (token === null || token.type !== Hash$1) {
            return 0;
        }

        if (!isIdentifierStart(charCodeAt(token.value, 1), charCodeAt(token.value, 2), charCodeAt(token.value, 3))) {
            return 0;
        }

        return 1;
    }

    // https://drafts.csswg.org/css-syntax/#any-value
    // It represents the entirety of what a valid declaration can have as its value.
    function declarationValue(token, getNextToken) {
        if (!token) {
            return 0;
        }

        let balanceCloseType = 0;
        let balanceStash = [];
        let length = 0;

        // The <declaration-value> production matches any sequence of one or more tokens,
        // so long as the sequence does not contain ...
        scan:
        do {
            switch (token.type) {
                // ... <bad-string-token>, <bad-url-token>,
                case BadString:
                case BadUrl:
                    break scan;

                // ... unmatched <)-token>, <]-token>, or <}-token>,
                case RightCurlyBracket:
                case RightParenthesis:
                case RightSquareBracket:
                    if (token.type !== balanceCloseType) {
                        break scan;
                    }

                    balanceCloseType = balanceStash.pop();
                    break;

                // ... or top-level <semicolon-token> tokens
                case Semicolon:
                    if (balanceCloseType === 0) {
                        break scan;
                    }

                    break;

                // ... or <delim-token> tokens with a value of "!"
                case Delim:
                    if (balanceCloseType === 0 && token.value === '!') {
                        break scan;
                    }

                    break;

                case Function$1:
                case LeftParenthesis:
                case LeftSquareBracket:
                case LeftCurlyBracket:
                    balanceStash.push(balanceCloseType);
                    balanceCloseType = balancePair.get(token.type);
                    break;
            }

            length++;
        } while (token = getNextToken(length));

        return length;
    }

    // https://drafts.csswg.org/css-syntax/#any-value
    // The <any-value> production is identical to <declaration-value>, but also
    // allows top-level <semicolon-token> tokens and <delim-token> tokens
    // with a value of "!". It represents the entirety of what valid CSS can be in any context.
    function anyValue$1(token, getNextToken) {
        if (!token) {
            return 0;
        }

        let balanceCloseType = 0;
        let balanceStash = [];
        let length = 0;

        // The <any-value> production matches any sequence of one or more tokens,
        // so long as the sequence ...
        scan:
        do {
            switch (token.type) {
                // ... does not contain <bad-string-token>, <bad-url-token>,
                case BadString:
                case BadUrl:
                    break scan;

                // ... unmatched <)-token>, <]-token>, or <}-token>,
                case RightCurlyBracket:
                case RightParenthesis:
                case RightSquareBracket:
                    if (token.type !== balanceCloseType) {
                        break scan;
                    }

                    balanceCloseType = balanceStash.pop();
                    break;

                case Function$1:
                case LeftParenthesis:
                case LeftSquareBracket:
                case LeftCurlyBracket:
                    balanceStash.push(balanceCloseType);
                    balanceCloseType = balancePair.get(token.type);
                    break;
            }

            length++;
        } while (token = getNextToken(length));

        return length;
    }

    // =========================
    // Dimensions
    //

    function dimension(type) {
        if (type) {
            type = new Set(type);
        }

        return function(token, getNextToken, opts) {
            if (token === null || token.type !== Dimension$1) {
                return 0;
            }

            const numberEnd = consumeNumber$1(token.value, 0);

            // check unit
            if (type !== null) {
                // check for IE postfix hack, i.e. 123px\0 or 123px\9
                const reverseSolidusOffset = token.value.indexOf('\\', numberEnd);
                const unit = reverseSolidusOffset === -1 || !isPostfixIeHack(token.value, reverseSolidusOffset)
                    ? token.value.substr(numberEnd)
                    : token.value.substring(numberEnd, reverseSolidusOffset);

                if (type.has(unit.toLowerCase()) === false) {
                    return 0;
                }
            }

            // check range if specified
            if (outOfRange(opts, token.value, numberEnd)) {
                return 0;
            }

            return 1;
        };
    }

    // =========================
    // Percentage
    //

    // §5.5. Percentages: the <percentage> type
    // https://drafts.csswg.org/css-values-4/#percentages
    function percentage(token, getNextToken, opts) {
        // ... corresponds to the <percentage-token> production
        if (token === null || token.type !== Percentage$1) {
            return 0;
        }

        // check range if specified
        if (outOfRange(opts, token.value, token.value.length - 1)) {
            return 0;
        }

        return 1;
    }

    // =========================
    // Numeric
    //

    // https://drafts.csswg.org/css-values-4/#numbers
    // The value <zero> represents a literal number with the value 0. Expressions that merely
    // evaluate to a <number> with the value 0 (for example, calc(0)) do not match <zero>;
    // only literal <number-token>s do.
    function zero$1(next) {
        if (typeof next !== 'function') {
            next = function() {
                return 0;
            };
        }

        return function(token, getNextToken, opts) {
            if (token !== null && token.type === Number$2) {
                if (Number(token.value) === 0) {
                    return 1;
                }
            }

            return next(token, getNextToken, opts);
        };
    }

    // § 5.3. Real Numbers: the <number> type
    // https://drafts.csswg.org/css-values-4/#numbers
    // Number values are denoted by <number>, and represent real numbers, possibly with a fractional component.
    // ... It corresponds to the <number-token> production
    function number(token, getNextToken, opts) {
        if (token === null) {
            return 0;
        }

        const numberEnd = consumeNumber$1(token.value, 0);
        const isNumber = numberEnd === token.value.length;
        if (!isNumber && !isPostfixIeHack(token.value, numberEnd)) {
            return 0;
        }

        // check range if specified
        if (outOfRange(opts, token.value, numberEnd)) {
            return 0;
        }

        return 1;
    }

    // §5.2. Integers: the <integer> type
    // https://drafts.csswg.org/css-values-4/#integers
    function integer(token, getNextToken, opts) {
        // ... corresponds to a subset of the <number-token> production
        if (token === null || token.type !== Number$2) {
            return 0;
        }

        // The first digit of an integer may be immediately preceded by `-` or `+` to indicate the integer’s sign.
        let i = charCodeAt(token.value, 0) === 0x002B ||       // U+002B PLUS SIGN (+)
                charCodeAt(token.value, 0) === 0x002D ? 1 : 0; // U+002D HYPHEN-MINUS (-)

        // When written literally, an integer is one or more decimal digits 0 through 9 ...
        for (; i < token.value.length; i++) {
            if (!isDigit(charCodeAt(token.value, i))) {
                return 0;
            }
        }

        // check range if specified
        if (outOfRange(opts, token.value, i)) {
            return 0;
        }

        return 1;
    }

    // token types
    const tokenTypes = {
        'ident-token': tokenType(Ident),
        'function-token': tokenType(Function$1),
        'at-keyword-token': tokenType(AtKeyword),
        'hash-token': tokenType(Hash$1),
        'string-token': tokenType(String$2),
        'bad-string-token': tokenType(BadString),
        'url-token': tokenType(Url$2),
        'bad-url-token': tokenType(BadUrl),
        'delim-token': tokenType(Delim),
        'number-token': tokenType(Number$2),
        'percentage-token': tokenType(Percentage$1),
        'dimension-token': tokenType(Dimension$1),
        'whitespace-token': tokenType(WhiteSpace$1),
        'CDO-token': tokenType(CDO$1),
        'CDC-token': tokenType(CDC$1),
        'colon-token': tokenType(Colon),
        'semicolon-token': tokenType(Semicolon),
        'comma-token': tokenType(Comma),
        '[-token': tokenType(LeftSquareBracket),
        ']-token': tokenType(RightSquareBracket),
        '(-token': tokenType(LeftParenthesis),
        ')-token': tokenType(RightParenthesis),
        '{-token': tokenType(LeftCurlyBracket),
        '}-token': tokenType(RightCurlyBracket)
    };

    // token production types
    const productionTypes = {
        // token type aliases
        'string': tokenType(String$2),
        'ident': tokenType(Ident),

        // percentage
        'percentage': calc(percentage),

        // numeric
        'zero': zero$1(),
        'number': calc(number),
        'integer': calc(integer),

        // complex types
        'custom-ident': customIdent,
        'custom-property-name': customPropertyName,
        'hex-color': hexColor,
        'id-selector': idSelector, // element( <id-selector> )
        'an-plus-b': anPlusB,
        'urange': urange,
        'declaration-value': declarationValue,
        'any-value': anyValue$1
    };

    // dimensions types depend on units set
    function createDemensionTypes(units) {
        const {
            angle,
            decibel,
            frequency,
            flex,
            length,
            resolution,
            semitones,
            time
        } = units || {};

        return {
            'dimension': calc(dimension(null)),
            'angle': calc(dimension(angle)),
            'decibel': calc(dimension(decibel)),
            'frequency': calc(dimension(frequency)),
            'flex': calc(dimension(flex)),
            'length': calc(zero$1(dimension(length))),
            'resolution': calc(dimension(resolution)),
            'semitones': calc(dimension(semitones)),
            'time': calc(dimension(time))
        };
    }

    function createGenericTypes(units) {
        return {
            ...tokenTypes,
            ...productionTypes,
            ...createDemensionTypes(units)
        };
    }

    const length = [
        // absolute length units https://www.w3.org/TR/css-values-3/#lengths
        'cm', 'mm', 'q', 'in', 'pt', 'pc', 'px',
        // font-relative length units https://drafts.csswg.org/css-values-4/#font-relative-lengths
        'em', 'rem',
        'ex', 'rex',
        'cap', 'rcap',
        'ch', 'rch',
        'ic', 'ric',
        'lh', 'rlh',
        // viewport-percentage lengths https://drafts.csswg.org/css-values-4/#viewport-relative-lengths
        'vw', 'svw', 'lvw', 'dvw',
        'vh', 'svh', 'lvh', 'dvh',
        'vi', 'svi', 'lvi', 'dvi',
        'vb', 'svb', 'lvb', 'dvb',
        'vmin', 'svmin', 'lvmin', 'dvmin',
        'vmax', 'svmax', 'lvmax', 'dvmax',
        // container relative lengths https://drafts.csswg.org/css-contain-3/#container-lengths
        'cqw', 'cqh', 'cqi', 'cqb', 'cqmin', 'cqmax'
    ];
    const angle = ['deg', 'grad', 'rad', 'turn'];    // https://www.w3.org/TR/css-values-3/#angles
    const time$2 = ['s', 'ms'];                        // https://www.w3.org/TR/css-values-3/#time
    const frequency = ['hz', 'khz'];                 // https://www.w3.org/TR/css-values-3/#frequency
    const resolution = ['dpi', 'dpcm', 'dppx', 'x']; // https://www.w3.org/TR/css-values-3/#resolution
    const flex = ['fr'];                             // https://drafts.csswg.org/css-grid/#fr-unit
    const decibel = ['db'];                          // https://www.w3.org/TR/css3-speech/#mixing-props-voice-volume
    const semitones = ['st'];                        // https://www.w3.org/TR/css3-speech/#voice-props-voice-pitch

    var units = /*#__PURE__*/Object.freeze({
        __proto__: null,
        length: length,
        angle: angle,
        time: time$2,
        frequency: frequency,
        resolution: resolution,
        flex: flex,
        decibel: decibel,
        semitones: semitones
    });

    function SyntaxError$1(message, input, offset) {
        return Object.assign(createCustomError('SyntaxError', message), {
            input,
            offset,
            rawMessage: message,
            message: message + '\n' +
                '  ' + input + '\n' +
                '--' + new Array((offset || input.length) + 1).join('-') + '^'
        });
    }

    const TAB$1 = 9;
    const N$2 = 10;
    const F$1 = 12;
    const R$1 = 13;
    const SPACE$3 = 32;

    class Tokenizer {
        constructor(str) {
            this.str = str;
            this.pos = 0;
        }
        charCodeAt(pos) {
            return pos < this.str.length ? this.str.charCodeAt(pos) : 0;
        }
        charCode() {
            return this.charCodeAt(this.pos);
        }
        nextCharCode() {
            return this.charCodeAt(this.pos + 1);
        }
        nextNonWsCode(pos) {
            return this.charCodeAt(this.findWsEnd(pos));
        }
        findWsEnd(pos) {
            for (; pos < this.str.length; pos++) {
                const code = this.str.charCodeAt(pos);
                if (code !== R$1 && code !== N$2 && code !== F$1 && code !== SPACE$3 && code !== TAB$1) {
                    break;
                }
            }

            return pos;
        }
        substringToPos(end) {
            return this.str.substring(this.pos, this.pos = end);
        }
        eat(code) {
            if (this.charCode() !== code) {
                this.error('Expect `' + String.fromCharCode(code) + '`');
            }

            this.pos++;
        }
        peek() {
            return this.pos < this.str.length ? this.str.charAt(this.pos++) : '';
        }
        error(message) {
            throw new SyntaxError$1(message, this.str, this.pos);
        }
    }

    const TAB = 9;
    const N$1 = 10;
    const F = 12;
    const R = 13;
    const SPACE$2 = 32;
    const EXCLAMATIONMARK$2 = 33;    // !
    const NUMBERSIGN$3 = 35;         // #
    const AMPERSAND$5 = 38;          // &
    const APOSTROPHE$2 = 39;         // '
    const LEFTPARENTHESIS$2 = 40;    // (
    const RIGHTPARENTHESIS$2 = 41;   // )
    const ASTERISK$6 = 42;           // *
    const PLUSSIGN$6 = 43;           // +
    const COMMA = 44;              // ,
    const HYPERMINUS = 45;         // -
    const LESSTHANSIGN = 60;       // <
    const GREATERTHANSIGN$2 = 62;    // >
    const QUESTIONMARK$1 = 63;       // ?
    const COMMERCIALAT = 64;       // @
    const LEFTSQUAREBRACKET = 91;  // [
    const RIGHTSQUAREBRACKET = 93; // ]
    const LEFTCURLYBRACKET = 123;  // {
    const VERTICALLINE$3 = 124;      // |
    const RIGHTCURLYBRACKET = 125; // }
    const INFINITY = 8734;         // ∞
    const NAME_CHAR = new Uint8Array(128).map((_, idx) =>
        /[a-zA-Z0-9\-]/.test(String.fromCharCode(idx)) ? 1 : 0
    );
    const COMBINATOR_PRECEDENCE = {
        ' ': 1,
        '&&': 2,
        '||': 3,
        '|': 4
    };

    function scanSpaces(tokenizer) {
        return tokenizer.substringToPos(
            tokenizer.findWsEnd(tokenizer.pos)
        );
    }

    function scanWord(tokenizer) {
        let end = tokenizer.pos;

        for (; end < tokenizer.str.length; end++) {
            const code = tokenizer.str.charCodeAt(end);
            if (code >= 128 || NAME_CHAR[code] === 0) {
                break;
            }
        }

        if (tokenizer.pos === end) {
            tokenizer.error('Expect a keyword');
        }

        return tokenizer.substringToPos(end);
    }

    function scanNumber(tokenizer) {
        let end = tokenizer.pos;

        for (; end < tokenizer.str.length; end++) {
            const code = tokenizer.str.charCodeAt(end);
            if (code < 48 || code > 57) {
                break;
            }
        }

        if (tokenizer.pos === end) {
            tokenizer.error('Expect a number');
        }

        return tokenizer.substringToPos(end);
    }

    function scanString(tokenizer) {
        const end = tokenizer.str.indexOf('\'', tokenizer.pos + 1);

        if (end === -1) {
            tokenizer.pos = tokenizer.str.length;
            tokenizer.error('Expect an apostrophe');
        }

        return tokenizer.substringToPos(end + 1);
    }

    function readMultiplierRange(tokenizer) {
        let min = null;
        let max = null;

        tokenizer.eat(LEFTCURLYBRACKET);

        min = scanNumber(tokenizer);

        if (tokenizer.charCode() === COMMA) {
            tokenizer.pos++;
            if (tokenizer.charCode() !== RIGHTCURLYBRACKET) {
                max = scanNumber(tokenizer);
            }
        } else {
            max = min;
        }

        tokenizer.eat(RIGHTCURLYBRACKET);

        return {
            min: Number(min),
            max: max ? Number(max) : 0
        };
    }

    function readMultiplier(tokenizer) {
        let range = null;
        let comma = false;

        switch (tokenizer.charCode()) {
            case ASTERISK$6:
                tokenizer.pos++;

                range = {
                    min: 0,
                    max: 0
                };

                break;

            case PLUSSIGN$6:
                tokenizer.pos++;

                range = {
                    min: 1,
                    max: 0
                };

                break;

            case QUESTIONMARK$1:
                tokenizer.pos++;

                range = {
                    min: 0,
                    max: 1
                };

                break;

            case NUMBERSIGN$3:
                tokenizer.pos++;

                comma = true;

                if (tokenizer.charCode() === LEFTCURLYBRACKET) {
                    range = readMultiplierRange(tokenizer);
                } else if (tokenizer.charCode() === QUESTIONMARK$1) {
                    // https://www.w3.org/TR/css-values-4/#component-multipliers
                    // > the # and ? multipliers may be stacked as #?
                    // In this case just treat "#?" as a single multiplier
                    // { min: 0, max: 0, comma: true }
                    tokenizer.pos++;
                    range = {
                        min: 0,
                        max: 0
                    };
                } else {
                    range = {
                        min: 1,
                        max: 0
                    };
                }

                break;

            case LEFTCURLYBRACKET:
                range = readMultiplierRange(tokenizer);
                break;

            default:
                return null;
        }

        return {
            type: 'Multiplier',
            comma,
            min: range.min,
            max: range.max,
            term: null
        };
    }

    function maybeMultiplied(tokenizer, node) {
        const multiplier = readMultiplier(tokenizer);

        if (multiplier !== null) {
            multiplier.term = node;

            // https://www.w3.org/TR/css-values-4/#component-multipliers
            // > The + and # multipliers may be stacked as +#;
            // Represent "+#" as nested multipliers:
            // { ...<multiplier #>,
            //   term: {
            //     ...<multipler +>,
            //     term: node
            //   }
            // }
            if (tokenizer.charCode() === NUMBERSIGN$3 &&
                tokenizer.charCodeAt(tokenizer.pos - 1) === PLUSSIGN$6) {
                return maybeMultiplied(tokenizer, multiplier);
            }

            return multiplier;
        }

        return node;
    }

    function maybeToken(tokenizer) {
        const ch = tokenizer.peek();

        if (ch === '') {
            return null;
        }

        return {
            type: 'Token',
            value: ch
        };
    }

    function readProperty$1(tokenizer) {
        let name;

        tokenizer.eat(LESSTHANSIGN);
        tokenizer.eat(APOSTROPHE$2);

        name = scanWord(tokenizer);

        tokenizer.eat(APOSTROPHE$2);
        tokenizer.eat(GREATERTHANSIGN$2);

        return maybeMultiplied(tokenizer, {
            type: 'Property',
            name
        });
    }

    // https://drafts.csswg.org/css-values-3/#numeric-ranges
    // 4.1. Range Restrictions and Range Definition Notation
    //
    // Range restrictions can be annotated in the numeric type notation using CSS bracketed
    // range notation—[min,max]—within the angle brackets, after the identifying keyword,
    // indicating a closed range between (and including) min and max.
    // For example, <integer [0, 10]> indicates an integer between 0 and 10, inclusive.
    function readTypeRange(tokenizer) {
        // use null for Infinity to make AST format JSON serializable/deserializable
        let min = null; // -Infinity
        let max = null; // Infinity
        let sign = 1;

        tokenizer.eat(LEFTSQUAREBRACKET);

        if (tokenizer.charCode() === HYPERMINUS) {
            tokenizer.peek();
            sign = -1;
        }

        if (sign == -1 && tokenizer.charCode() === INFINITY) {
            tokenizer.peek();
        } else {
            min = sign * Number(scanNumber(tokenizer));

            if (NAME_CHAR[tokenizer.charCode()] !== 0) {
                min += scanWord(tokenizer);
            }
        }

        scanSpaces(tokenizer);
        tokenizer.eat(COMMA);
        scanSpaces(tokenizer);

        if (tokenizer.charCode() === INFINITY) {
            tokenizer.peek();
        } else {
            sign = 1;

            if (tokenizer.charCode() === HYPERMINUS) {
                tokenizer.peek();
                sign = -1;
            }

            max = sign * Number(scanNumber(tokenizer));

            if (NAME_CHAR[tokenizer.charCode()] !== 0) {
                max += scanWord(tokenizer);
            }
        }

        tokenizer.eat(RIGHTSQUAREBRACKET);

        return {
            type: 'Range',
            min,
            max
        };
    }

    function readType(tokenizer) {
        let name;
        let opts = null;

        tokenizer.eat(LESSTHANSIGN);
        name = scanWord(tokenizer);

        if (tokenizer.charCode() === LEFTPARENTHESIS$2 &&
            tokenizer.nextCharCode() === RIGHTPARENTHESIS$2) {
            tokenizer.pos += 2;
            name += '()';
        }

        if (tokenizer.charCodeAt(tokenizer.findWsEnd(tokenizer.pos)) === LEFTSQUAREBRACKET) {
            scanSpaces(tokenizer);
            opts = readTypeRange(tokenizer);
        }

        tokenizer.eat(GREATERTHANSIGN$2);

        return maybeMultiplied(tokenizer, {
            type: 'Type',
            name,
            opts
        });
    }

    function readKeywordOrFunction(tokenizer) {
        const name = scanWord(tokenizer);

        if (tokenizer.charCode() === LEFTPARENTHESIS$2) {
            tokenizer.pos++;

            return {
                type: 'Function',
                name
            };
        }

        return maybeMultiplied(tokenizer, {
            type: 'Keyword',
            name
        });
    }

    function regroupTerms(terms, combinators) {
        function createGroup(terms, combinator) {
            return {
                type: 'Group',
                terms,
                combinator,
                disallowEmpty: false,
                explicit: false
            };
        }

        let combinator;

        combinators = Object.keys(combinators)
            .sort((a, b) => COMBINATOR_PRECEDENCE[a] - COMBINATOR_PRECEDENCE[b]);

        while (combinators.length > 0) {
            combinator = combinators.shift();

            let i = 0;
            let subgroupStart = 0;

            for (; i < terms.length; i++) {
                const term = terms[i];

                if (term.type === 'Combinator') {
                    if (term.value === combinator) {
                        if (subgroupStart === -1) {
                            subgroupStart = i - 1;
                        }
                        terms.splice(i, 1);
                        i--;
                    } else {
                        if (subgroupStart !== -1 && i - subgroupStart > 1) {
                            terms.splice(
                                subgroupStart,
                                i - subgroupStart,
                                createGroup(terms.slice(subgroupStart, i), combinator)
                            );
                            i = subgroupStart + 1;
                        }
                        subgroupStart = -1;
                    }
                }
            }

            if (subgroupStart !== -1 && combinators.length) {
                terms.splice(
                    subgroupStart,
                    i - subgroupStart,
                    createGroup(terms.slice(subgroupStart, i), combinator)
                );
            }
        }

        return combinator;
    }

    function readImplicitGroup(tokenizer) {
        const terms = [];
        const combinators = {};
        let token;
        let prevToken = null;
        let prevTokenPos = tokenizer.pos;

        while (token = peek(tokenizer)) {
            if (token.type !== 'Spaces') {
                if (token.type === 'Combinator') {
                    // check for combinator in group beginning and double combinator sequence
                    if (prevToken === null || prevToken.type === 'Combinator') {
                        tokenizer.pos = prevTokenPos;
                        tokenizer.error('Unexpected combinator');
                    }

                    combinators[token.value] = true;
                } else if (prevToken !== null && prevToken.type !== 'Combinator') {
                    combinators[' '] = true;  // a b
                    terms.push({
                        type: 'Combinator',
                        value: ' '
                    });
                }

                terms.push(token);
                prevToken = token;
                prevTokenPos = tokenizer.pos;
            }
        }

        // check for combinator in group ending
        if (prevToken !== null && prevToken.type === 'Combinator') {
            tokenizer.pos -= prevTokenPos;
            tokenizer.error('Unexpected combinator');
        }

        return {
            type: 'Group',
            terms,
            combinator: regroupTerms(terms, combinators) || ' ',
            disallowEmpty: false,
            explicit: false
        };
    }

    function readGroup(tokenizer) {
        let result;

        tokenizer.eat(LEFTSQUAREBRACKET);
        result = readImplicitGroup(tokenizer);
        tokenizer.eat(RIGHTSQUAREBRACKET);

        result.explicit = true;

        if (tokenizer.charCode() === EXCLAMATIONMARK$2) {
            tokenizer.pos++;
            result.disallowEmpty = true;
        }

        return result;
    }

    function peek(tokenizer) {
        let code = tokenizer.charCode();

        if (code < 128 && NAME_CHAR[code] === 1) {
            return readKeywordOrFunction(tokenizer);
        }

        switch (code) {
            case RIGHTSQUAREBRACKET:
                // don't eat, stop scan a group
                break;

            case LEFTSQUAREBRACKET:
                return maybeMultiplied(tokenizer, readGroup(tokenizer));

            case LESSTHANSIGN:
                return tokenizer.nextCharCode() === APOSTROPHE$2
                    ? readProperty$1(tokenizer)
                    : readType(tokenizer);

            case VERTICALLINE$3:
                return {
                    type: 'Combinator',
                    value: tokenizer.substringToPos(
                        tokenizer.pos + (tokenizer.nextCharCode() === VERTICALLINE$3 ? 2 : 1)
                    )
                };

            case AMPERSAND$5:
                tokenizer.pos++;
                tokenizer.eat(AMPERSAND$5);

                return {
                    type: 'Combinator',
                    value: '&&'
                };

            case COMMA:
                tokenizer.pos++;
                return {
                    type: 'Comma'
                };

            case APOSTROPHE$2:
                return maybeMultiplied(tokenizer, {
                    type: 'String',
                    value: scanString(tokenizer)
                });

            case SPACE$2:
            case TAB:
            case N$1:
            case R:
            case F:
                return {
                    type: 'Spaces',
                    value: scanSpaces(tokenizer)
                };

            case COMMERCIALAT:
                code = tokenizer.nextCharCode();

                if (code < 128 && NAME_CHAR[code] === 1) {
                    tokenizer.pos++;
                    return {
                        type: 'AtKeyword',
                        name: scanWord(tokenizer)
                    };
                }

                return maybeToken(tokenizer);

            case ASTERISK$6:
            case PLUSSIGN$6:
            case QUESTIONMARK$1:
            case NUMBERSIGN$3:
            case EXCLAMATIONMARK$2:
                // prohibited tokens (used as a multiplier start)
                break;

            case LEFTCURLYBRACKET:
                // LEFTCURLYBRACKET is allowed since mdn/data uses it w/o quoting
                // check next char isn't a number, because it's likely a disjoined multiplier
                code = tokenizer.nextCharCode();

                if (code < 48 || code > 57) {
                    return maybeToken(tokenizer);
                }

                break;

            default:
                return maybeToken(tokenizer);
        }
    }

    function parse$I(source) {
        const tokenizer = new Tokenizer(source);
        const result = readImplicitGroup(tokenizer);

        if (tokenizer.pos !== source.length) {
            tokenizer.error('Unexpected input');
        }

        // reduce redundant groups with single group term
        if (result.terms.length === 1 && result.terms[0].type === 'Group') {
            return result.terms[0];
        }

        return result;
    }

    const noop$3 = function() {};

    function ensureFunction(value) {
        return typeof value === 'function' ? value : noop$3;
    }

    function walk$1(node, options, context) {
        function walk(node) {
            enter.call(context, node);

            switch (node.type) {
                case 'Group':
                    node.terms.forEach(walk);
                    break;

                case 'Multiplier':
                    walk(node.term);
                    break;

                case 'Type':
                case 'Property':
                case 'Keyword':
                case 'AtKeyword':
                case 'Function':
                case 'String':
                case 'Token':
                case 'Comma':
                    break;

                default:
                    throw new Error('Unknown type: ' + node.type);
            }

            leave.call(context, node);
        }

        let enter = noop$3;
        let leave = noop$3;

        if (typeof options === 'function') {
            enter = options;
        } else if (options) {
            enter = ensureFunction(options.enter);
            leave = ensureFunction(options.leave);
        }

        if (enter === noop$3 && leave === noop$3) {
            throw new Error('Neither `enter` nor `leave` walker handler is set or both aren\'t a function');
        }

        walk(node);
    }

    const astToTokens = {
        decorator(handlers) {
            const tokens = [];
            let curNode = null;

            return {
                ...handlers,
                node(node) {
                    const tmp = curNode;
                    curNode = node;
                    handlers.node.call(this, node);
                    curNode = tmp;
                },
                emit(value, type, auto) {
                    tokens.push({
                        type,
                        value,
                        node: auto ? null : curNode
                    });
                },
                result() {
                    return tokens;
                }
            };
        }
    };

    function stringToTokens(str) {
        const tokens = [];

        tokenize$3(str, (type, start, end) =>
            tokens.push({
                type,
                value: str.slice(start, end),
                node: null
            })
        );

        return tokens;
    }

    function prepareTokens(value, syntax) {
        if (typeof value === 'string') {
            return stringToTokens(value);
        }

        return syntax.generate(value, astToTokens);
    }

    const MATCH = { type: 'Match' };
    const MISMATCH = { type: 'Mismatch' };
    const DISALLOW_EMPTY = { type: 'DisallowEmpty' };

    const LEFTPARENTHESIS$1 = 40;  // (
    const RIGHTPARENTHESIS$1 = 41; // )

    function createCondition(match, thenBranch, elseBranch) {
        // reduce node count
        if (thenBranch === MATCH && elseBranch === MISMATCH) {
            return match;
        }

        if (match === MATCH && thenBranch === MATCH && elseBranch === MATCH) {
            return match;
        }

        if (match.type === 'If' && match.else === MISMATCH && thenBranch === MATCH) {
            thenBranch = match.then;
            match = match.match;
        }

        return {
            type: 'If',
            match,
            then: thenBranch,
            else: elseBranch
        };
    }

    function isFunctionType(name) {
        return (
            name.length > 2 &&
            name.charCodeAt(name.length - 2) === LEFTPARENTHESIS$1 &&
            name.charCodeAt(name.length - 1) === RIGHTPARENTHESIS$1
        );
    }

    function isEnumCapatible(term) {
        return (
            term.type === 'Keyword' ||
            term.type === 'AtKeyword' ||
            term.type === 'Function' ||
            term.type === 'Type' && isFunctionType(term.name)
        );
    }

    function buildGroupMatchGraph(combinator, terms, atLeastOneTermMatched) {
        switch (combinator) {
            case ' ': {
                // Juxtaposing components means that all of them must occur, in the given order.
                //
                // a b c
                // =
                // match a
                //   then match b
                //     then match c
                //       then MATCH
                //       else MISMATCH
                //     else MISMATCH
                //   else MISMATCH
                let result = MATCH;

                for (let i = terms.length - 1; i >= 0; i--) {
                    const term = terms[i];

                    result = createCondition(
                        term,
                        result,
                        MISMATCH
                    );
                }
                return result;
            }

            case '|': {
                // A bar (|) separates two or more alternatives: exactly one of them must occur.
                //
                // a | b | c
                // =
                // match a
                //   then MATCH
                //   else match b
                //     then MATCH
                //     else match c
                //       then MATCH
                //       else MISMATCH

                let result = MISMATCH;
                let map = null;

                for (let i = terms.length - 1; i >= 0; i--) {
                    let term = terms[i];

                    // reduce sequence of keywords into a Enum
                    if (isEnumCapatible(term)) {
                        if (map === null && i > 0 && isEnumCapatible(terms[i - 1])) {
                            map = Object.create(null);
                            result = createCondition(
                                {
                                    type: 'Enum',
                                    map
                                },
                                MATCH,
                                result
                            );
                        }

                        if (map !== null) {
                            const key = (isFunctionType(term.name) ? term.name.slice(0, -1) : term.name).toLowerCase();
                            if (key in map === false) {
                                map[key] = term;
                                continue;
                            }
                        }
                    }

                    map = null;

                    // create a new conditonal node
                    result = createCondition(
                        term,
                        MATCH,
                        result
                    );
                }
                return result;
            }

            case '&&': {
                // A double ampersand (&&) separates two or more components,
                // all of which must occur, in any order.

                // Use MatchOnce for groups with a large number of terms,
                // since &&-groups produces at least N!-node trees
                if (terms.length > 5) {
                    return {
                        type: 'MatchOnce',
                        terms,
                        all: true
                    };
                }

                // Use a combination tree for groups with small number of terms
                //
                // a && b && c
                // =
                // match a
                //   then [b && c]
                //   else match b
                //     then [a && c]
                //     else match c
                //       then [a && b]
                //       else MISMATCH
                //
                // a && b
                // =
                // match a
                //   then match b
                //     then MATCH
                //     else MISMATCH
                //   else match b
                //     then match a
                //       then MATCH
                //       else MISMATCH
                //     else MISMATCH
                let result = MISMATCH;

                for (let i = terms.length - 1; i >= 0; i--) {
                    const term = terms[i];
                    let thenClause;

                    if (terms.length > 1) {
                        thenClause = buildGroupMatchGraph(
                            combinator,
                            terms.filter(function(newGroupTerm) {
                                return newGroupTerm !== term;
                            }),
                            false
                        );
                    } else {
                        thenClause = MATCH;
                    }

                    result = createCondition(
                        term,
                        thenClause,
                        result
                    );
                }
                return result;
            }

            case '||': {
                // A double bar (||) separates two or more options:
                // one or more of them must occur, in any order.

                // Use MatchOnce for groups with a large number of terms,
                // since ||-groups produces at least N!-node trees
                if (terms.length > 5) {
                    return {
                        type: 'MatchOnce',
                        terms,
                        all: false
                    };
                }

                // Use a combination tree for groups with small number of terms
                //
                // a || b || c
                // =
                // match a
                //   then [b || c]
                //   else match b
                //     then [a || c]
                //     else match c
                //       then [a || b]
                //       else MISMATCH
                //
                // a || b
                // =
                // match a
                //   then match b
                //     then MATCH
                //     else MATCH
                //   else match b
                //     then match a
                //       then MATCH
                //       else MATCH
                //     else MISMATCH
                let result = atLeastOneTermMatched ? MATCH : MISMATCH;

                for (let i = terms.length - 1; i >= 0; i--) {
                    const term = terms[i];
                    let thenClause;

                    if (terms.length > 1) {
                        thenClause = buildGroupMatchGraph(
                            combinator,
                            terms.filter(function(newGroupTerm) {
                                return newGroupTerm !== term;
                            }),
                            true
                        );
                    } else {
                        thenClause = MATCH;
                    }

                    result = createCondition(
                        term,
                        thenClause,
                        result
                    );
                }
                return result;
            }
        }
    }

    function buildMultiplierMatchGraph(node) {
        let result = MATCH;
        let matchTerm = buildMatchGraphInternal(node.term);

        if (node.max === 0) {
            // disable repeating of empty match to prevent infinite loop
            matchTerm = createCondition(
                matchTerm,
                DISALLOW_EMPTY,
                MISMATCH
            );

            // an occurrence count is not limited, make a cycle;
            // to collect more terms on each following matching mismatch
            result = createCondition(
                matchTerm,
                null, // will be a loop
                MISMATCH
            );

            result.then = createCondition(
                MATCH,
                MATCH,
                result // make a loop
            );

            if (node.comma) {
                result.then.else = createCondition(
                    { type: 'Comma', syntax: node },
                    result,
                    MISMATCH
                );
            }
        } else {
            // create a match node chain for [min .. max] interval with optional matches
            for (let i = node.min || 1; i <= node.max; i++) {
                if (node.comma && result !== MATCH) {
                    result = createCondition(
                        { type: 'Comma', syntax: node },
                        result,
                        MISMATCH
                    );
                }

                result = createCondition(
                    matchTerm,
                    createCondition(
                        MATCH,
                        MATCH,
                        result
                    ),
                    MISMATCH
                );
            }
        }

        if (node.min === 0) {
            // allow zero match
            result = createCondition(
                MATCH,
                MATCH,
                result
            );
        } else {
            // create a match node chain to collect [0 ... min - 1] required matches
            for (let i = 0; i < node.min - 1; i++) {
                if (node.comma && result !== MATCH) {
                    result = createCondition(
                        { type: 'Comma', syntax: node },
                        result,
                        MISMATCH
                    );
                }

                result = createCondition(
                    matchTerm,
                    result,
                    MISMATCH
                );
            }
        }

        return result;
    }

    function buildMatchGraphInternal(node) {
        if (typeof node === 'function') {
            return {
                type: 'Generic',
                fn: node
            };
        }

        switch (node.type) {
            case 'Group': {
                let result = buildGroupMatchGraph(
                    node.combinator,
                    node.terms.map(buildMatchGraphInternal),
                    false
                );

                if (node.disallowEmpty) {
                    result = createCondition(
                        result,
                        DISALLOW_EMPTY,
                        MISMATCH
                    );
                }

                return result;
            }

            case 'Multiplier':
                return buildMultiplierMatchGraph(node);

            case 'Type':
            case 'Property':
                return {
                    type: node.type,
                    name: node.name,
                    syntax: node
                };

            case 'Keyword':
                return {
                    type: node.type,
                    name: node.name.toLowerCase(),
                    syntax: node
                };

            case 'AtKeyword':
                return {
                    type: node.type,
                    name: '@' + node.name.toLowerCase(),
                    syntax: node
                };

            case 'Function':
                return {
                    type: node.type,
                    name: node.name.toLowerCase() + '(',
                    syntax: node
                };

            case 'String':
                // convert a one char length String to a Token
                if (node.value.length === 3) {
                    return {
                        type: 'Token',
                        value: node.value.charAt(1),
                        syntax: node
                    };
                }

                // otherwise use it as is
                return {
                    type: node.type,
                    value: node.value.substr(1, node.value.length - 2).replace(/\\'/g, '\''),
                    syntax: node
                };

            case 'Token':
                return {
                    type: node.type,
                    value: node.value,
                    syntax: node
                };

            case 'Comma':
                return {
                    type: node.type,
                    syntax: node
                };

            default:
                throw new Error('Unknown node type:', node.type);
        }
    }

    function buildMatchGraph(syntaxTree, ref) {
        if (typeof syntaxTree === 'string') {
            syntaxTree = parse$I(syntaxTree);
        }

        return {
            type: 'MatchGraph',
            match: buildMatchGraphInternal(syntaxTree),
            syntax: ref || null,
            source: syntaxTree
        };
    }

    const { hasOwnProperty: hasOwnProperty$4 } = Object.prototype;
    const STUB = 0;
    const TOKEN = 1;
    const OPEN_SYNTAX = 2;
    const CLOSE_SYNTAX = 3;

    const EXIT_REASON_MATCH = 'Match';
    const EXIT_REASON_MISMATCH = 'Mismatch';
    const EXIT_REASON_ITERATION_LIMIT = 'Maximum iteration number exceeded (please fill an issue on https://github.com/csstree/csstree/issues)';

    const ITERATION_LIMIT = 15000;

    function reverseList(list) {
        let prev = null;
        let next = null;
        let item = list;

        while (item !== null) {
            next = item.prev;
            item.prev = prev;
            prev = item;
            item = next;
        }

        return prev;
    }

    function areStringsEqualCaseInsensitive(testStr, referenceStr) {
        if (testStr.length !== referenceStr.length) {
            return false;
        }

        for (let i = 0; i < testStr.length; i++) {
            const referenceCode = referenceStr.charCodeAt(i);
            let testCode = testStr.charCodeAt(i);

            // testCode.toLowerCase() for U+0041 LATIN CAPITAL LETTER A (A) .. U+005A LATIN CAPITAL LETTER Z (Z).
            if (testCode >= 0x0041 && testCode <= 0x005A) {
                testCode = testCode | 32;
            }

            if (testCode !== referenceCode) {
                return false;
            }
        }

        return true;
    }

    function isContextEdgeDelim(token) {
        if (token.type !== Delim) {
            return false;
        }

        // Fix matching for unicode-range: U+30??, U+FF00-FF9F
        // Probably we need to check out previous match instead
        return token.value !== '?';
    }

    function isCommaContextStart(token) {
        if (token === null) {
            return true;
        }

        return (
            token.type === Comma ||
            token.type === Function$1 ||
            token.type === LeftParenthesis ||
            token.type === LeftSquareBracket ||
            token.type === LeftCurlyBracket ||
            isContextEdgeDelim(token)
        );
    }

    function isCommaContextEnd(token) {
        if (token === null) {
            return true;
        }

        return (
            token.type === RightParenthesis ||
            token.type === RightSquareBracket ||
            token.type === RightCurlyBracket ||
            (token.type === Delim && token.value === '/')
        );
    }

    function internalMatch(tokens, state, syntaxes) {
        function moveToNextToken() {
            do {
                tokenIndex++;
                token = tokenIndex < tokens.length ? tokens[tokenIndex] : null;
            } while (token !== null && (token.type === WhiteSpace$1 || token.type === Comment$1));
        }

        function getNextToken(offset) {
            const nextIndex = tokenIndex + offset;

            return nextIndex < tokens.length ? tokens[nextIndex] : null;
        }

        function stateSnapshotFromSyntax(nextState, prev) {
            return {
                nextState,
                matchStack,
                syntaxStack,
                thenStack,
                tokenIndex,
                prev
            };
        }

        function pushThenStack(nextState) {
            thenStack = {
                nextState,
                matchStack,
                syntaxStack,
                prev: thenStack
            };
        }

        function pushElseStack(nextState) {
            elseStack = stateSnapshotFromSyntax(nextState, elseStack);
        }

        function addTokenToMatch() {
            matchStack = {
                type: TOKEN,
                syntax: state.syntax,
                token,
                prev: matchStack
            };

            moveToNextToken();
            syntaxStash = null;

            if (tokenIndex > longestMatch) {
                longestMatch = tokenIndex;
            }
        }

        function openSyntax() {
            syntaxStack = {
                syntax: state.syntax,
                opts: state.syntax.opts || (syntaxStack !== null && syntaxStack.opts) || null,
                prev: syntaxStack
            };

            matchStack = {
                type: OPEN_SYNTAX,
                syntax: state.syntax,
                token: matchStack.token,
                prev: matchStack
            };
        }

        function closeSyntax() {
            if (matchStack.type === OPEN_SYNTAX) {
                matchStack = matchStack.prev;
            } else {
                matchStack = {
                    type: CLOSE_SYNTAX,
                    syntax: syntaxStack.syntax,
                    token: matchStack.token,
                    prev: matchStack
                };
            }

            syntaxStack = syntaxStack.prev;
        }

        let syntaxStack = null;
        let thenStack = null;
        let elseStack = null;

        // null – stashing allowed, nothing stashed
        // false – stashing disabled, nothing stashed
        // anithing else – fail stashable syntaxes, some syntax stashed
        let syntaxStash = null;

        let iterationCount = 0; // count iterations and prevent infinite loop
        let exitReason = null;

        let token = null;
        let tokenIndex = -1;
        let longestMatch = 0;
        let matchStack = {
            type: STUB,
            syntax: null,
            token: null,
            prev: null
        };

        moveToNextToken();

        while (exitReason === null && ++iterationCount < ITERATION_LIMIT) {
            // function mapList(list, fn) {
            //     const result = [];
            //     while (list) {
            //         result.unshift(fn(list));
            //         list = list.prev;
            //     }
            //     return result;
            // }
            // console.log('--\n',
            //     '#' + iterationCount,
            //     require('util').inspect({
            //         match: mapList(matchStack, x => x.type === TOKEN ? x.token && x.token.value : x.syntax ? ({ [OPEN_SYNTAX]: '<', [CLOSE_SYNTAX]: '</' }[x.type] || x.type) + '!' + x.syntax.name : null),
            //         token: token && token.value,
            //         tokenIndex,
            //         syntax: syntax.type + (syntax.id ? ' #' + syntax.id : '')
            //     }, { depth: null })
            // );
            switch (state.type) {
                case 'Match':
                    if (thenStack === null) {
                        // turn to MISMATCH when some tokens left unmatched
                        if (token !== null) {
                            // doesn't mismatch if just one token left and it's an IE hack
                            if (tokenIndex !== tokens.length - 1 || (token.value !== '\\0' && token.value !== '\\9')) {
                                state = MISMATCH;
                                break;
                            }
                        }

                        // break the main loop, return a result - MATCH
                        exitReason = EXIT_REASON_MATCH;
                        break;
                    }

                    // go to next syntax (`then` branch)
                    state = thenStack.nextState;

                    // check match is not empty
                    if (state === DISALLOW_EMPTY) {
                        if (thenStack.matchStack === matchStack) {
                            state = MISMATCH;
                            break;
                        } else {
                            state = MATCH;
                        }
                    }

                    // close syntax if needed
                    while (thenStack.syntaxStack !== syntaxStack) {
                        closeSyntax();
                    }

                    // pop stack
                    thenStack = thenStack.prev;
                    break;

                case 'Mismatch':
                    // when some syntax is stashed
                    if (syntaxStash !== null && syntaxStash !== false) {
                        // there is no else branches or a branch reduce match stack
                        if (elseStack === null || tokenIndex > elseStack.tokenIndex) {
                            // restore state from the stash
                            elseStack = syntaxStash;
                            syntaxStash = false; // disable stashing
                        }
                    } else if (elseStack === null) {
                        // no else branches -> break the main loop
                        // return a result - MISMATCH
                        exitReason = EXIT_REASON_MISMATCH;
                        break;
                    }

                    // go to next syntax (`else` branch)
                    state = elseStack.nextState;

                    // restore all the rest stack states
                    thenStack = elseStack.thenStack;
                    syntaxStack = elseStack.syntaxStack;
                    matchStack = elseStack.matchStack;
                    tokenIndex = elseStack.tokenIndex;
                    token = tokenIndex < tokens.length ? tokens[tokenIndex] : null;

                    // pop stack
                    elseStack = elseStack.prev;
                    break;

                case 'MatchGraph':
                    state = state.match;
                    break;

                case 'If':
                    // IMPORTANT: else stack push must go first,
                    // since it stores the state of thenStack before changes
                    if (state.else !== MISMATCH) {
                        pushElseStack(state.else);
                    }

                    if (state.then !== MATCH) {
                        pushThenStack(state.then);
                    }

                    state = state.match;
                    break;

                case 'MatchOnce':
                    state = {
                        type: 'MatchOnceBuffer',
                        syntax: state,
                        index: 0,
                        mask: 0
                    };
                    break;

                case 'MatchOnceBuffer': {
                    const terms = state.syntax.terms;

                    if (state.index === terms.length) {
                        // no matches at all or it's required all terms to be matched
                        if (state.mask === 0 || state.syntax.all) {
                            state = MISMATCH;
                            break;
                        }

                        // a partial match is ok
                        state = MATCH;
                        break;
                    }

                    // all terms are matched
                    if (state.mask === (1 << terms.length) - 1) {
                        state = MATCH;
                        break;
                    }

                    for (; state.index < terms.length; state.index++) {
                        const matchFlag = 1 << state.index;

                        if ((state.mask & matchFlag) === 0) {
                            // IMPORTANT: else stack push must go first,
                            // since it stores the state of thenStack before changes
                            pushElseStack(state);
                            pushThenStack({
                                type: 'AddMatchOnce',
                                syntax: state.syntax,
                                mask: state.mask | matchFlag
                            });

                            // match
                            state = terms[state.index++];
                            break;
                        }
                    }
                    break;
                }

                case 'AddMatchOnce':
                    state = {
                        type: 'MatchOnceBuffer',
                        syntax: state.syntax,
                        index: 0,
                        mask: state.mask
                    };
                    break;

                case 'Enum':
                    if (token !== null) {
                        let name = token.value.toLowerCase();

                        // drop \0 and \9 hack from keyword name
                        if (name.indexOf('\\') !== -1) {
                            name = name.replace(/\\[09].*$/, '');
                        }

                        if (hasOwnProperty$4.call(state.map, name)) {
                            state = state.map[name];
                            break;
                        }
                    }

                    state = MISMATCH;
                    break;

                case 'Generic': {
                    const opts = syntaxStack !== null ? syntaxStack.opts : null;
                    const lastTokenIndex = tokenIndex + Math.floor(state.fn(token, getNextToken, opts));

                    if (!isNaN(lastTokenIndex) && lastTokenIndex > tokenIndex) {
                        while (tokenIndex < lastTokenIndex) {
                            addTokenToMatch();
                        }

                        state = MATCH;
                    } else {
                        state = MISMATCH;
                    }

                    break;
                }

                case 'Type':
                case 'Property': {
                    const syntaxDict = state.type === 'Type' ? 'types' : 'properties';
                    const dictSyntax = hasOwnProperty$4.call(syntaxes, syntaxDict) ? syntaxes[syntaxDict][state.name] : null;

                    if (!dictSyntax || !dictSyntax.match) {
                        throw new Error(
                            'Bad syntax reference: ' +
                            (state.type === 'Type'
                                ? '<' + state.name + '>'
                                : '<\'' + state.name + '\'>')
                        );
                    }

                    // stash a syntax for types with low priority
                    if (syntaxStash !== false && token !== null && state.type === 'Type') {
                        const lowPriorityMatching =
                            // https://drafts.csswg.org/css-values-4/#custom-idents
                            // When parsing positionally-ambiguous keywords in a property value, a <custom-ident> production
                            // can only claim the keyword if no other unfulfilled production can claim it.
                            (state.name === 'custom-ident' && token.type === Ident) ||

                            // https://drafts.csswg.org/css-values-4/#lengths
                            // ... if a `0` could be parsed as either a <number> or a <length> in a property (such as line-height),
                            // it must parse as a <number>
                            (state.name === 'length' && token.value === '0');

                        if (lowPriorityMatching) {
                            if (syntaxStash === null) {
                                syntaxStash = stateSnapshotFromSyntax(state, elseStack);
                            }

                            state = MISMATCH;
                            break;
                        }
                    }

                    openSyntax();
                    state = dictSyntax.match;
                    break;
                }

                case 'Keyword': {
                    const name = state.name;

                    if (token !== null) {
                        let keywordName = token.value;

                        // drop \0 and \9 hack from keyword name
                        if (keywordName.indexOf('\\') !== -1) {
                            keywordName = keywordName.replace(/\\[09].*$/, '');
                        }

                        if (areStringsEqualCaseInsensitive(keywordName, name)) {
                            addTokenToMatch();
                            state = MATCH;
                            break;
                        }
                    }

                    state = MISMATCH;
                    break;
                }

                case 'AtKeyword':
                case 'Function':
                    if (token !== null && areStringsEqualCaseInsensitive(token.value, state.name)) {
                        addTokenToMatch();
                        state = MATCH;
                        break;
                    }

                    state = MISMATCH;
                    break;

                case 'Token':
                    if (token !== null && token.value === state.value) {
                        addTokenToMatch();
                        state = MATCH;
                        break;
                    }

                    state = MISMATCH;
                    break;

                case 'Comma':
                    if (token !== null && token.type === Comma) {
                        if (isCommaContextStart(matchStack.token)) {
                            state = MISMATCH;
                        } else {
                            addTokenToMatch();
                            state = isCommaContextEnd(token) ? MISMATCH : MATCH;
                        }
                    } else {
                        state = isCommaContextStart(matchStack.token) || isCommaContextEnd(token) ? MATCH : MISMATCH;
                    }

                    break;

                case 'String':
                    let string = '';
                    let lastTokenIndex = tokenIndex;

                    for (; lastTokenIndex < tokens.length && string.length < state.value.length; lastTokenIndex++) {
                        string += tokens[lastTokenIndex].value;
                    }

                    if (areStringsEqualCaseInsensitive(string, state.value)) {
                        while (tokenIndex < lastTokenIndex) {
                            addTokenToMatch();
                        }

                        state = MATCH;
                    } else {
                        state = MISMATCH;
                    }

                    break;

                default:
                    throw new Error('Unknown node type: ' + state.type);
            }
        }

        switch (exitReason) {
            case null:
                console.warn('[csstree-match] BREAK after ' + ITERATION_LIMIT + ' iterations');
                exitReason = EXIT_REASON_ITERATION_LIMIT;
                matchStack = null;
                break;

            case EXIT_REASON_MATCH:
                while (syntaxStack !== null) {
                    closeSyntax();
                }
                break;

            default:
                matchStack = null;
        }

        return {
            tokens,
            reason: exitReason,
            iterations: iterationCount,
            match: matchStack,
            longestMatch
        };
    }

    function matchAsTree(tokens, matchGraph, syntaxes) {
        const matchResult = internalMatch(tokens, matchGraph, syntaxes || {});

        if (matchResult.match === null) {
            return matchResult;
        }

        let item = matchResult.match;
        let host = matchResult.match = {
            syntax: matchGraph.syntax || null,
            match: []
        };
        const hostStack = [host];

        // revert a list and start with 2nd item since 1st is a stub item
        item = reverseList(item).prev;

        // build a tree
        while (item !== null) {
            switch (item.type) {
                case OPEN_SYNTAX:
                    host.match.push(host = {
                        syntax: item.syntax,
                        match: []
                    });
                    hostStack.push(host);
                    break;

                case CLOSE_SYNTAX:
                    hostStack.pop();
                    host = hostStack[hostStack.length - 1];
                    break;

                default:
                    host.match.push({
                        syntax: item.syntax || null,
                        token: item.token.value,
                        node: item.token.node
                    });
            }

            item = item.prev;
        }

        return matchResult;
    }

    function getTrace(node) {
        function shouldPutToTrace(syntax) {
            if (syntax === null) {
                return false;
            }

            return (
                syntax.type === 'Type' ||
                syntax.type === 'Property' ||
                syntax.type === 'Keyword'
            );
        }

        function hasMatch(matchNode) {
            if (Array.isArray(matchNode.match)) {
                // use for-loop for better perfomance
                for (let i = 0; i < matchNode.match.length; i++) {
                    if (hasMatch(matchNode.match[i])) {
                        if (shouldPutToTrace(matchNode.syntax)) {
                            result.unshift(matchNode.syntax);
                        }

                        return true;
                    }
                }
            } else if (matchNode.node === node) {
                result = shouldPutToTrace(matchNode.syntax)
                    ? [matchNode.syntax]
                    : [];

                return true;
            }

            return false;
        }

        let result = null;

        if (this.matched !== null) {
            hasMatch(this.matched);
        }

        return result;
    }

    function isType(node, type) {
        return testNode(this, node, match => match.type === 'Type' && match.name === type);
    }

    function isProperty(node, property) {
        return testNode(this, node, match => match.type === 'Property' && match.name === property);
    }

    function isKeyword$1(node) {
        return testNode(this, node, match => match.type === 'Keyword');
    }

    function testNode(match, node, fn) {
        const trace = getTrace.call(match, node);

        if (trace === null) {
            return false;
        }

        return trace.some(fn);
    }

    var trace = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getTrace: getTrace,
        isType: isType,
        isProperty: isProperty,
        isKeyword: isKeyword$1
    });

    function getFirstMatchNode(matchNode) {
        if ('node' in matchNode) {
            return matchNode.node;
        }

        return getFirstMatchNode(matchNode.match[0]);
    }

    function getLastMatchNode(matchNode) {
        if ('node' in matchNode) {
            return matchNode.node;
        }

        return getLastMatchNode(matchNode.match[matchNode.match.length - 1]);
    }

    function matchFragments(lexer, ast, match, type, name) {
        function findFragments(matchNode) {
            if (matchNode.syntax !== null &&
                matchNode.syntax.type === type &&
                matchNode.syntax.name === name) {
                const start = getFirstMatchNode(matchNode);
                const end = getLastMatchNode(matchNode);

                lexer.syntax.walk(ast, function(node, item, list) {
                    if (node === start) {
                        const nodes = new List();

                        do {
                            nodes.appendData(item.data);

                            if (item.data === end) {
                                break;
                            }

                            item = item.next;
                        } while (item !== null);

                        fragments.push({
                            parent: list,
                            nodes
                        });
                    }
                });
            }

            if (Array.isArray(matchNode.match)) {
                matchNode.match.forEach(findFragments);
            }
        }

        const fragments = [];

        if (match.matched !== null) {
            findFragments(match.matched);
        }

        return fragments;
    }

    const { hasOwnProperty: hasOwnProperty$3 } = Object.prototype;

    function isValidNumber(value) {
        // Number.isInteger(value) && value >= 0
        return (
            typeof value === 'number' &&
            isFinite(value) &&
            Math.floor(value) === value &&
            value >= 0
        );
    }

    function isValidLocation(loc) {
        return (
            Boolean(loc) &&
            isValidNumber(loc.offset) &&
            isValidNumber(loc.line) &&
            isValidNumber(loc.column)
        );
    }

    function createNodeStructureChecker(type, fields) {
        return function checkNode(node, warn) {
            if (!node || node.constructor !== Object) {
                return warn(node, 'Type of node should be an Object');
            }

            for (let key in node) {
                let valid = true;

                if (hasOwnProperty$3.call(node, key) === false) {
                    continue;
                }

                if (key === 'type') {
                    if (node.type !== type) {
                        warn(node, 'Wrong node type `' + node.type + '`, expected `' + type + '`');
                    }
                } else if (key === 'loc') {
                    if (node.loc === null) {
                        continue;
                    } else if (node.loc && node.loc.constructor === Object) {
                        if (typeof node.loc.source !== 'string') {
                            key += '.source';
                        } else if (!isValidLocation(node.loc.start)) {
                            key += '.start';
                        } else if (!isValidLocation(node.loc.end)) {
                            key += '.end';
                        } else {
                            continue;
                        }
                    }

                    valid = false;
                } else if (fields.hasOwnProperty(key)) {
                    valid = false;

                    for (let i = 0; !valid && i < fields[key].length; i++) {
                        const fieldType = fields[key][i];

                        switch (fieldType) {
                            case String:
                                valid = typeof node[key] === 'string';
                                break;

                            case Boolean:
                                valid = typeof node[key] === 'boolean';
                                break;

                            case null:
                                valid = node[key] === null;
                                break;

                            default:
                                if (typeof fieldType === 'string') {
                                    valid = node[key] && node[key].type === fieldType;
                                } else if (Array.isArray(fieldType)) {
                                    valid = node[key] instanceof List;
                                }
                        }
                    }
                } else {
                    warn(node, 'Unknown field `' + key + '` for ' + type + ' node type');
                }

                if (!valid) {
                    warn(node, 'Bad value for `' + type + '.' + key + '`');
                }
            }

            for (const key in fields) {
                if (hasOwnProperty$3.call(fields, key) &&
                    hasOwnProperty$3.call(node, key) === false) {
                    warn(node, 'Field `' + type + '.' + key + '` is missed');
                }
            }
        };
    }

    function processStructure(name, nodeType) {
        const structure = nodeType.structure;
        const fields = {
            type: String,
            loc: true
        };
        const docs = {
            type: '"' + name + '"'
        };

        for (const key in structure) {
            if (hasOwnProperty$3.call(structure, key) === false) {
                continue;
            }

            const docsTypes = [];
            const fieldTypes = fields[key] = Array.isArray(structure[key])
                ? structure[key].slice()
                : [structure[key]];

            for (let i = 0; i < fieldTypes.length; i++) {
                const fieldType = fieldTypes[i];
                if (fieldType === String || fieldType === Boolean) {
                    docsTypes.push(fieldType.name);
                } else if (fieldType === null) {
                    docsTypes.push('null');
                } else if (typeof fieldType === 'string') {
                    docsTypes.push('<' + fieldType + '>');
                } else if (Array.isArray(fieldType)) {
                    docsTypes.push('List'); // TODO: use type enum
                } else {
                    throw new Error('Wrong value `' + fieldType + '` in `' + name + '.' + key + '` structure definition');
                }
            }

            docs[key] = docsTypes.join(' | ');
        }

        return {
            docs,
            check: createNodeStructureChecker(name, fields)
        };
    }

    function getStructureFromConfig(config) {
        const structure = {};

        if (config.node) {
            for (const name in config.node) {
                if (hasOwnProperty$3.call(config.node, name)) {
                    const nodeType = config.node[name];

                    if (nodeType.structure) {
                        structure[name] = processStructure(name, nodeType);
                    } else {
                        throw new Error('Missed `structure` field in `' + name + '` node type definition');
                    }
                }
            }
        }

        return structure;
    }

    const cssWideKeywordsSyntax = buildMatchGraph(cssWideKeywords.join(' | '));

    function dumpMapSyntax(map, compact, syntaxAsAst) {
        const result = {};

        for (const name in map) {
            if (map[name].syntax) {
                result[name] = syntaxAsAst
                    ? map[name].syntax
                    : generate$G(map[name].syntax, { compact });
            }
        }

        return result;
    }

    function dumpAtruleMapSyntax(map, compact, syntaxAsAst) {
        const result = {};

        for (const [name, atrule] of Object.entries(map)) {
            result[name] = {
                prelude: atrule.prelude && (
                    syntaxAsAst
                        ? atrule.prelude.syntax
                        : generate$G(atrule.prelude.syntax, { compact })
                ),
                descriptors: atrule.descriptors && dumpMapSyntax(atrule.descriptors, compact, syntaxAsAst)
            };
        }

        return result;
    }

    function valueHasVar(tokens) {
        for (let i = 0; i < tokens.length; i++) {
            if (tokens[i].value.toLowerCase() === 'var(') {
                return true;
            }
        }

        return false;
    }

    function buildMatchResult(matched, error, iterations) {
        return {
            matched,
            iterations,
            error,
            ...trace
        };
    }

    function matchSyntax(lexer, syntax, value, useCssWideKeywords) {
        const tokens = prepareTokens(value, lexer.syntax);
        let result;

        if (valueHasVar(tokens)) {
            return buildMatchResult(null, new Error('Matching for a tree with var() is not supported'));
        }

        if (useCssWideKeywords) {
            result = matchAsTree(tokens, lexer.cssWideKeywordsSyntax, lexer);
        }

        if (!useCssWideKeywords || !result.match) {
            result = matchAsTree(tokens, syntax.match, lexer);
            if (!result.match) {
                return buildMatchResult(
                    null,
                    new SyntaxMatchError(result.reason, syntax.syntax, value, result),
                    result.iterations
                );
            }
        }

        return buildMatchResult(result.match, null, result.iterations);
    }

    class Lexer {
        constructor(config, syntax, structure) {
            this.cssWideKeywordsSyntax = cssWideKeywordsSyntax;
            this.syntax = syntax;
            this.generic = false;
            this.units = { ...units };
            this.atrules = Object.create(null);
            this.properties = Object.create(null);
            this.types = Object.create(null);
            this.structure = structure || getStructureFromConfig(config);

            if (config) {
                if (config.units) {
                    for (const group of Object.keys(units)) {
                        if (Array.isArray(config.units[group])) {
                            this.units[group] = config.units[group];
                        }
                    }
                }

                if (config.types) {
                    for (const name in config.types) {
                        this.addType_(name, config.types[name]);
                    }
                }

                if (config.generic) {
                    this.generic = true;
                    for (const [name, value] of Object.entries(createGenericTypes(this.units))) {
                        this.addType_(name, value);
                    }
                }

                if (config.atrules) {
                    for (const name in config.atrules) {
                        this.addAtrule_(name, config.atrules[name]);
                    }
                }

                if (config.properties) {
                    for (const name in config.properties) {
                        this.addProperty_(name, config.properties[name]);
                    }
                }
            }
        }

        checkStructure(ast) {
            function collectWarning(node, message) {
                warns.push({ node, message });
            }

            const structure = this.structure;
            const warns = [];

            this.syntax.walk(ast, function(node) {
                if (structure.hasOwnProperty(node.type)) {
                    structure[node.type].check(node, collectWarning);
                } else {
                    collectWarning(node, 'Unknown node type `' + node.type + '`');
                }
            });

            return warns.length ? warns : false;
        }

        createDescriptor(syntax, type, name, parent = null) {
            const ref = {
                type,
                name
            };
            const descriptor = {
                type,
                name,
                parent,
                serializable: typeof syntax === 'string' || (syntax && typeof syntax.type === 'string'),
                syntax: null,
                match: null
            };

            if (typeof syntax === 'function') {
                descriptor.match = buildMatchGraph(syntax, ref);
            } else {
                if (typeof syntax === 'string') {
                    // lazy parsing on first access
                    Object.defineProperty(descriptor, 'syntax', {
                        get() {
                            Object.defineProperty(descriptor, 'syntax', {
                                value: parse$I(syntax)
                            });

                            return descriptor.syntax;
                        }
                    });
                } else {
                    descriptor.syntax = syntax;
                }

                // lazy graph build on first access
                Object.defineProperty(descriptor, 'match', {
                    get() {
                        Object.defineProperty(descriptor, 'match', {
                            value: buildMatchGraph(descriptor.syntax, ref)
                        });

                        return descriptor.match;
                    }
                });
            }

            return descriptor;
        }
        addAtrule_(name, syntax) {
            if (!syntax) {
                return;
            }

            this.atrules[name] = {
                type: 'Atrule',
                name: name,
                prelude: syntax.prelude ? this.createDescriptor(syntax.prelude, 'AtrulePrelude', name) : null,
                descriptors: syntax.descriptors
                    ? Object.keys(syntax.descriptors).reduce(
                        (map, descName) => {
                            map[descName] = this.createDescriptor(syntax.descriptors[descName], 'AtruleDescriptor', descName, name);
                            return map;
                        },
                        Object.create(null)
                    )
                    : null
            };
        }
        addProperty_(name, syntax) {
            if (!syntax) {
                return;
            }

            this.properties[name] = this.createDescriptor(syntax, 'Property', name);
        }
        addType_(name, syntax) {
            if (!syntax) {
                return;
            }

            this.types[name] = this.createDescriptor(syntax, 'Type', name);
        }

        checkAtruleName(atruleName) {
            if (!this.getAtrule(atruleName)) {
                return new SyntaxReferenceError('Unknown at-rule', '@' + atruleName);
            }
        }
        checkAtrulePrelude(atruleName, prelude) {
            const error = this.checkAtruleName(atruleName);

            if (error) {
                return error;
            }

            const atrule = this.getAtrule(atruleName);

            if (!atrule.prelude && prelude) {
                return new SyntaxError('At-rule `@' + atruleName + '` should not contain a prelude');
            }

            if (atrule.prelude && !prelude) {
                if (!matchSyntax(this, atrule.prelude, '', false).matched) {
                    return new SyntaxError('At-rule `@' + atruleName + '` should contain a prelude');
                }
            }
        }
        checkAtruleDescriptorName(atruleName, descriptorName) {
            const error = this.checkAtruleName(atruleName);

            if (error) {
                return error;
            }

            const atrule = this.getAtrule(atruleName);
            const descriptor = keyword$1(descriptorName);

            if (!atrule.descriptors) {
                return new SyntaxError('At-rule `@' + atruleName + '` has no known descriptors');
            }

            if (!atrule.descriptors[descriptor.name] &&
                !atrule.descriptors[descriptor.basename]) {
                return new SyntaxReferenceError('Unknown at-rule descriptor', descriptorName);
            }
        }
        checkPropertyName(propertyName) {
            if (!this.getProperty(propertyName)) {
                return new SyntaxReferenceError('Unknown property', propertyName);
            }
        }

        matchAtrulePrelude(atruleName, prelude) {
            const error = this.checkAtrulePrelude(atruleName, prelude);

            if (error) {
                return buildMatchResult(null, error);
            }

            const atrule = this.getAtrule(atruleName);

            if (!atrule.prelude) {
                return buildMatchResult(null, null);
            }

            return matchSyntax(this, atrule.prelude, prelude || '', false);
        }
        matchAtruleDescriptor(atruleName, descriptorName, value) {
            const error = this.checkAtruleDescriptorName(atruleName, descriptorName);

            if (error) {
                return buildMatchResult(null, error);
            }

            const atrule = this.getAtrule(atruleName);
            const descriptor = keyword$1(descriptorName);

            return matchSyntax(this, atrule.descriptors[descriptor.name] || atrule.descriptors[descriptor.basename], value, false);
        }
        matchDeclaration(node) {
            if (node.type !== 'Declaration') {
                return buildMatchResult(null, new Error('Not a Declaration node'));
            }

            return this.matchProperty(node.property, node.value);
        }
        matchProperty(propertyName, value) {
            // don't match syntax for a custom property at the moment
            if (property$2(propertyName).custom) {
                return buildMatchResult(null, new Error('Lexer matching doesn\'t applicable for custom properties'));
            }

            const error = this.checkPropertyName(propertyName);

            if (error) {
                return buildMatchResult(null, error);
            }

            return matchSyntax(this, this.getProperty(propertyName), value, true);
        }
        matchType(typeName, value) {
            const typeSyntax = this.getType(typeName);

            if (!typeSyntax) {
                return buildMatchResult(null, new SyntaxReferenceError('Unknown type', typeName));
            }

            return matchSyntax(this, typeSyntax, value, false);
        }
        match(syntax, value) {
            if (typeof syntax !== 'string' && (!syntax || !syntax.type)) {
                return buildMatchResult(null, new SyntaxReferenceError('Bad syntax'));
            }

            if (typeof syntax === 'string' || !syntax.match) {
                syntax = this.createDescriptor(syntax, 'Type', 'anonymous');
            }

            return matchSyntax(this, syntax, value, false);
        }

        findValueFragments(propertyName, value, type, name) {
            return matchFragments(this, value, this.matchProperty(propertyName, value), type, name);
        }
        findDeclarationValueFragments(declaration, type, name) {
            return matchFragments(this, declaration.value, this.matchDeclaration(declaration), type, name);
        }
        findAllFragments(ast, type, name) {
            const result = [];

            this.syntax.walk(ast, {
                visit: 'Declaration',
                enter: (declaration) => {
                    result.push.apply(result, this.findDeclarationValueFragments(declaration, type, name));
                }
            });

            return result;
        }

        getAtrule(atruleName, fallbackBasename = true) {
            const atrule = keyword$1(atruleName);
            const atruleEntry = atrule.vendor && fallbackBasename
                ? this.atrules[atrule.name] || this.atrules[atrule.basename]
                : this.atrules[atrule.name];

            return atruleEntry || null;
        }
        getAtrulePrelude(atruleName, fallbackBasename = true) {
            const atrule = this.getAtrule(atruleName, fallbackBasename);

            return atrule && atrule.prelude || null;
        }
        getAtruleDescriptor(atruleName, name) {
            return this.atrules.hasOwnProperty(atruleName) && this.atrules.declarators
                ? this.atrules[atruleName].declarators[name] || null
                : null;
        }
        getProperty(propertyName, fallbackBasename = true) {
            const property = property$2(propertyName);
            const propertyEntry = property.vendor && fallbackBasename
                ? this.properties[property.name] || this.properties[property.basename]
                : this.properties[property.name];

            return propertyEntry || null;
        }
        getType(name) {
            return hasOwnProperty.call(this.types, name) ? this.types[name] : null;
        }

        validate() {
            function validate(syntax, name, broken, descriptor) {
                if (broken.has(name)) {
                    return broken.get(name);
                }

                broken.set(name, false);
                if (descriptor.syntax !== null) {
                    walk$1(descriptor.syntax, function(node) {
                        if (node.type !== 'Type' && node.type !== 'Property') {
                            return;
                        }

                        const map = node.type === 'Type' ? syntax.types : syntax.properties;
                        const brokenMap = node.type === 'Type' ? brokenTypes : brokenProperties;

                        if (!hasOwnProperty.call(map, node.name) || validate(syntax, node.name, brokenMap, map[node.name])) {
                            broken.set(name, true);
                        }
                    }, this);
                }
            }

            let brokenTypes = new Map();
            let brokenProperties = new Map();

            for (const key in this.types) {
                validate(this, key, brokenTypes, this.types[key]);
            }

            for (const key in this.properties) {
                validate(this, key, brokenProperties, this.properties[key]);
            }

            brokenTypes = [...brokenTypes.keys()].filter(name => brokenTypes.get(name));
            brokenProperties = [...brokenProperties.keys()].filter(name => brokenProperties.get(name));

            if (brokenTypes.length || brokenProperties.length) {
                return {
                    types: brokenTypes,
                    properties: brokenProperties
                };
            }

            return null;
        }
        dump(syntaxAsAst, pretty) {
            return {
                generic: this.generic,
                units: this.units,
                types: dumpMapSyntax(this.types, !pretty, syntaxAsAst),
                properties: dumpMapSyntax(this.properties, !pretty, syntaxAsAst),
                atrules: dumpAtruleMapSyntax(this.atrules, !pretty, syntaxAsAst)
            };
        }
        toString() {
            return JSON.stringify(this.dump());
        }
    }

    function appendOrSet(a, b) {
        if (typeof b === 'string' && /^\s*\|/.test(b)) {
            return typeof a === 'string'
                ? a + b
                : b.replace(/^\s*\|\s*/, '');
        }

        return b || null;
    }

    function sliceProps(obj, props) {
        const result = Object.create(null);

        for (const [key, value] of Object.entries(obj)) {
            if (value) {
                result[key] = {};
                for (const prop of Object.keys(value)) {
                    if (props.includes(prop)) {
                        result[key][prop] = value[prop];
                    }
                }
            }
        }

        return result;
    }

    function mix(dest, src) {
        const result = { ...dest };

        for (const [prop, value] of Object.entries(src)) {
            switch (prop) {
                case 'generic':
                    result[prop] = Boolean(value);
                    break;

                case 'units':
                    result[prop] = { ...dest[prop] };
                    for (const [name, patch] of Object.entries(value)) {
                        result[prop][name] = Array.isArray(patch) ? patch : [];
                    }
                    break;

                case 'atrules':
                    result[prop] = { ...dest[prop] };

                    for (const [name, atrule] of Object.entries(value)) {
                        const exists = result[prop][name] || {};
                        const current = result[prop][name] = {
                            prelude: exists.prelude || null,
                            descriptors: {
                                ...exists.descriptors
                            }
                        };

                        if (!atrule) {
                            continue;
                        }

                        current.prelude = atrule.prelude
                            ? appendOrSet(current.prelude, atrule.prelude)
                            : current.prelude || null;

                        for (const [descriptorName, descriptorValue] of Object.entries(atrule.descriptors || {})) {
                            current.descriptors[descriptorName] = descriptorValue
                                ? appendOrSet(current.descriptors[descriptorName], descriptorValue)
                                : null;
                        }

                        if (!Object.keys(current.descriptors).length) {
                            current.descriptors = null;
                        }
                    }
                    break;

                case 'types':
                case 'properties':
                    result[prop] = { ...dest[prop] };
                    for (const [name, syntax] of Object.entries(value)) {
                        result[prop][name] = appendOrSet(result[prop][name], syntax);
                    }
                    break;

                case 'scope':
                    result[prop] = { ...dest[prop] };
                    for (const [name, props] of Object.entries(value)) {
                        result[prop][name] = { ...result[prop][name], ...props };
                    }
                    break;

                case 'parseContext':
                    result[prop] = {
                        ...dest[prop],
                        ...value
                    };
                    break;

                case 'atrule':
                case 'pseudo':
                    result[prop] = {
                        ...dest[prop],
                        ...sliceProps(value, ['parse']) };
                    break;

                case 'node':
                    result[prop] = {
                        ...dest[prop],
                        ...sliceProps(value, ['name', 'structure', 'parse', 'generate', 'walkContext'])
                    };
                    break;
            }
        }

        return result;
    }

    function createSyntax(config) {
        const parse = createParser(config);
        const walk = createWalker(config);
        const generate = createGenerator(config);
        const { fromPlainObject, toPlainObject } = createConvertor(walk);

        const syntax = {
            lexer: null,
            createLexer: config => new Lexer(config, syntax, syntax.lexer.structure),

            tokenize: tokenize$3,
            parse,
            generate,

            walk,
            find: walk.find,
            findLast: walk.findLast,
            findAll: walk.findAll,

            fromPlainObject,
            toPlainObject,

            fork(extension) {
                const base = mix({}, config); // copy of config

                return createSyntax(
                    typeof extension === 'function'
                        ? extension(base, Object.assign)
                        : mix(base, extension)
                );
            }
        };

        syntax.lexer = new Lexer({
            generic: true,
            units: config.units,
            types: config.types,
            atrules: config.atrules,
            properties: config.properties,
            node: config.node
        }, syntax);

        return syntax;
    }
    var createSyntax$1 = config => createSyntax(mix({}, config));

    var definitions = {
        "generic": true,
        "units": {
            "angle": [
                "deg",
                "grad",
                "rad",
                "turn"
            ],
            "decibel": [
                "db"
            ],
            "flex": [
                "fr"
            ],
            "frequency": [
                "hz",
                "khz"
            ],
            "length": [
                "cm",
                "mm",
                "q",
                "in",
                "pt",
                "pc",
                "px",
                "em",
                "rem",
                "ex",
                "rex",
                "cap",
                "rcap",
                "ch",
                "rch",
                "ic",
                "ric",
                "lh",
                "rlh",
                "vw",
                "svw",
                "lvw",
                "dvw",
                "vh",
                "svh",
                "lvh",
                "dvh",
                "vi",
                "svi",
                "lvi",
                "dvi",
                "vb",
                "svb",
                "lvb",
                "dvb",
                "vmin",
                "svmin",
                "lvmin",
                "dvmin",
                "vmax",
                "svmax",
                "lvmax",
                "dvmax",
                "cqw",
                "cqh",
                "cqi",
                "cqb",
                "cqmin",
                "cqmax"
            ],
            "resolution": [
                "dpi",
                "dpcm",
                "dppx",
                "x"
            ],
            "semitones": [
                "st"
            ],
            "time": [
                "s",
                "ms"
            ]
        },
        "types": {
            "abs()": "abs( <calc-sum> )",
            "absolute-size": "xx-small|x-small|small|medium|large|x-large|xx-large|xxx-large",
            "acos()": "acos( <calc-sum> )",
            "alpha-value": "<number>|<percentage>",
            "angle-percentage": "<angle>|<percentage>",
            "angular-color-hint": "<angle-percentage>",
            "angular-color-stop": "<color>&&<color-stop-angle>?",
            "angular-color-stop-list": "[<angular-color-stop> [, <angular-color-hint>]?]# , <angular-color-stop>",
            "animateable-feature": "scroll-position|contents|<custom-ident>",
            "asin()": "asin( <calc-sum> )",
            "atan()": "atan( <calc-sum> )",
            "atan2()": "atan2( <calc-sum> , <calc-sum> )",
            "attachment": "scroll|fixed|local",
            "attr()": "attr( <attr-name> <type-or-unit>? [, <attr-fallback>]? )",
            "attr-matcher": "['~'|'|'|'^'|'$'|'*']? '='",
            "attr-modifier": "i|s",
            "attribute-selector": "'[' <wq-name> ']'|'[' <wq-name> <attr-matcher> [<string-token>|<ident-token>] <attr-modifier>? ']'",
            "auto-repeat": "repeat( [auto-fill|auto-fit] , [<line-names>? <fixed-size>]+ <line-names>? )",
            "auto-track-list": "[<line-names>? [<fixed-size>|<fixed-repeat>]]* <line-names>? <auto-repeat> [<line-names>? [<fixed-size>|<fixed-repeat>]]* <line-names>?",
            "axis": "block|inline|vertical|horizontal",
            "baseline-position": "[first|last]? baseline",
            "basic-shape": "<inset()>|<circle()>|<ellipse()>|<polygon()>|<path()>",
            "bg-image": "none|<image>",
            "bg-layer": "<bg-image>||<bg-position> [/ <bg-size>]?||<repeat-style>||<attachment>||<box>||<box>",
            "bg-position": "[[left|center|right|top|bottom|<length-percentage>]|[left|center|right|<length-percentage>] [top|center|bottom|<length-percentage>]|[center|[left|right] <length-percentage>?]&&[center|[top|bottom] <length-percentage>?]]",
            "bg-size": "[<length-percentage>|auto]{1,2}|cover|contain",
            "blur()": "blur( <length> )",
            "blend-mode": "normal|multiply|screen|overlay|darken|lighten|color-dodge|color-burn|hard-light|soft-light|difference|exclusion|hue|saturation|color|luminosity",
            "box": "border-box|padding-box|content-box",
            "brightness()": "brightness( <number-percentage> )",
            "calc()": "calc( <calc-sum> )",
            "calc-sum": "<calc-product> [['+'|'-'] <calc-product>]*",
            "calc-product": "<calc-value> ['*' <calc-value>|'/' <number>]*",
            "calc-value": "<number>|<dimension>|<percentage>|<calc-constant>|( <calc-sum> )",
            "calc-constant": "e|pi|infinity|-infinity|NaN",
            "cf-final-image": "<image>|<color>",
            "cf-mixing-image": "<percentage>?&&<image>",
            "circle()": "circle( [<shape-radius>]? [at <position>]? )",
            "clamp()": "clamp( <calc-sum>#{3} )",
            "class-selector": "'.' <ident-token>",
            "clip-source": "<url>",
            "color": "<rgb()>|<rgba()>|<hsl()>|<hsla()>|<hwb()>|<lab()>|<lch()>|<hex-color>|<named-color>|currentcolor|<deprecated-system-color>",
            "color-stop": "<color-stop-length>|<color-stop-angle>",
            "color-stop-angle": "<angle-percentage>{1,2}",
            "color-stop-length": "<length-percentage>{1,2}",
            "color-stop-list": "[<linear-color-stop> [, <linear-color-hint>]?]# , <linear-color-stop>",
            "combinator": "'>'|'+'|'~'|['||']",
            "common-lig-values": "[common-ligatures|no-common-ligatures]",
            "compat-auto": "searchfield|textarea|push-button|slider-horizontal|checkbox|radio|square-button|menulist|listbox|meter|progress-bar|button",
            "composite-style": "clear|copy|source-over|source-in|source-out|source-atop|destination-over|destination-in|destination-out|destination-atop|xor",
            "compositing-operator": "add|subtract|intersect|exclude",
            "compound-selector": "[<type-selector>? <subclass-selector>* [<pseudo-element-selector> <pseudo-class-selector>*]*]!",
            "compound-selector-list": "<compound-selector>#",
            "complex-selector": "<compound-selector> [<combinator>? <compound-selector>]*",
            "complex-selector-list": "<complex-selector>#",
            "conic-gradient()": "conic-gradient( [from <angle>]? [at <position>]? , <angular-color-stop-list> )",
            "contextual-alt-values": "[contextual|no-contextual]",
            "content-distribution": "space-between|space-around|space-evenly|stretch",
            "content-list": "[<string>|contents|<image>|<counter>|<quote>|<target>|<leader()>|<attr()>]+",
            "content-position": "center|start|end|flex-start|flex-end",
            "content-replacement": "<image>",
            "contrast()": "contrast( [<number-percentage>] )",
            "cos()": "cos( <calc-sum> )",
            "counter": "<counter()>|<counters()>",
            "counter()": "counter( <counter-name> , <counter-style>? )",
            "counter-name": "<custom-ident>",
            "counter-style": "<counter-style-name>|symbols( )",
            "counter-style-name": "<custom-ident>",
            "counters()": "counters( <counter-name> , <string> , <counter-style>? )",
            "cross-fade()": "cross-fade( <cf-mixing-image> , <cf-final-image>? )",
            "cubic-bezier-timing-function": "ease|ease-in|ease-out|ease-in-out|cubic-bezier( <number [0,1]> , <number> , <number [0,1]> , <number> )",
            "deprecated-system-color": "ActiveBorder|ActiveCaption|AppWorkspace|Background|ButtonFace|ButtonHighlight|ButtonShadow|ButtonText|CaptionText|GrayText|Highlight|HighlightText|InactiveBorder|InactiveCaption|InactiveCaptionText|InfoBackground|InfoText|Menu|MenuText|Scrollbar|ThreeDDarkShadow|ThreeDFace|ThreeDHighlight|ThreeDLightShadow|ThreeDShadow|Window|WindowFrame|WindowText",
            "discretionary-lig-values": "[discretionary-ligatures|no-discretionary-ligatures]",
            "display-box": "contents|none",
            "display-inside": "flow|flow-root|table|flex|grid|ruby",
            "display-internal": "table-row-group|table-header-group|table-footer-group|table-row|table-cell|table-column-group|table-column|table-caption|ruby-base|ruby-text|ruby-base-container|ruby-text-container",
            "display-legacy": "inline-block|inline-list-item|inline-table|inline-flex|inline-grid",
            "display-listitem": "<display-outside>?&&[flow|flow-root]?&&list-item",
            "display-outside": "block|inline|run-in",
            "drop-shadow()": "drop-shadow( <length>{2,3} <color>? )",
            "east-asian-variant-values": "[jis78|jis83|jis90|jis04|simplified|traditional]",
            "east-asian-width-values": "[full-width|proportional-width]",
            "element()": "element( <custom-ident> , [first|start|last|first-except]? )|element( <id-selector> )",
            "ellipse()": "ellipse( [<shape-radius>{2}]? [at <position>]? )",
            "ending-shape": "circle|ellipse",
            "env()": "env( <custom-ident> , <declaration-value>? )",
            "exp()": "exp( <calc-sum> )",
            "explicit-track-list": "[<line-names>? <track-size>]+ <line-names>?",
            "family-name": "<string>|<custom-ident>+",
            "feature-tag-value": "<string> [<integer>|on|off]?",
            "feature-type": "@stylistic|@historical-forms|@styleset|@character-variant|@swash|@ornaments|@annotation",
            "feature-value-block": "<feature-type> '{' <feature-value-declaration-list> '}'",
            "feature-value-block-list": "<feature-value-block>+",
            "feature-value-declaration": "<custom-ident> : <integer>+ ;",
            "feature-value-declaration-list": "<feature-value-declaration>",
            "feature-value-name": "<custom-ident>",
            "fill-rule": "nonzero|evenodd",
            "filter-function": "<blur()>|<brightness()>|<contrast()>|<drop-shadow()>|<grayscale()>|<hue-rotate()>|<invert()>|<opacity()>|<saturate()>|<sepia()>",
            "filter-function-list": "[<filter-function>|<url>]+",
            "final-bg-layer": "<'background-color'>||<bg-image>||<bg-position> [/ <bg-size>]?||<repeat-style>||<attachment>||<box>||<box>",
            "fixed-breadth": "<length-percentage>",
            "fixed-repeat": "repeat( [<integer [1,∞]>] , [<line-names>? <fixed-size>]+ <line-names>? )",
            "fixed-size": "<fixed-breadth>|minmax( <fixed-breadth> , <track-breadth> )|minmax( <inflexible-breadth> , <fixed-breadth> )",
            "font-stretch-absolute": "normal|ultra-condensed|extra-condensed|condensed|semi-condensed|semi-expanded|expanded|extra-expanded|ultra-expanded|<percentage>",
            "font-variant-css21": "[normal|small-caps]",
            "font-weight-absolute": "normal|bold|<number [1,1000]>",
            "frequency-percentage": "<frequency>|<percentage>",
            "general-enclosed": "[<function-token> <any-value> )]|( <ident> <any-value> )",
            "generic-family": "serif|sans-serif|cursive|fantasy|monospace|-apple-system",
            "generic-name": "serif|sans-serif|cursive|fantasy|monospace",
            "geometry-box": "<shape-box>|fill-box|stroke-box|view-box",
            "gradient": "<linear-gradient()>|<repeating-linear-gradient()>|<radial-gradient()>|<repeating-radial-gradient()>|<conic-gradient()>|<repeating-conic-gradient()>|<-legacy-gradient>",
            "grayscale()": "grayscale( <number-percentage> )",
            "grid-line": "auto|<custom-ident>|[<integer>&&<custom-ident>?]|[span&&[<integer>||<custom-ident>]]",
            "historical-lig-values": "[historical-ligatures|no-historical-ligatures]",
            "hsl()": "hsl( <hue> <percentage> <percentage> [/ <alpha-value>]? )|hsl( <hue> , <percentage> , <percentage> , <alpha-value>? )",
            "hsla()": "hsla( <hue> <percentage> <percentage> [/ <alpha-value>]? )|hsla( <hue> , <percentage> , <percentage> , <alpha-value>? )",
            "hue": "<number>|<angle>",
            "hue-rotate()": "hue-rotate( <angle> )",
            "hwb()": "hwb( [<hue>|none] [<percentage>|none] [<percentage>|none] [/ [<alpha-value>|none]]? )",
            "hypot()": "hypot( <calc-sum># )",
            "image": "<url>|<image()>|<image-set()>|<element()>|<paint()>|<cross-fade()>|<gradient>",
            "image()": "image( <image-tags>? [<image-src>? , <color>?]! )",
            "image-set()": "image-set( <image-set-option># )",
            "image-set-option": "[<image>|<string>] [<resolution>||type( <string> )]",
            "image-src": "<url>|<string>",
            "image-tags": "ltr|rtl",
            "inflexible-breadth": "<length-percentage>|min-content|max-content|auto",
            "inset()": "inset( <length-percentage>{1,4} [round <'border-radius'>]? )",
            "invert()": "invert( <number-percentage> )",
            "keyframes-name": "<custom-ident>|<string>",
            "keyframe-block": "<keyframe-selector># { <declaration-list> }",
            "keyframe-block-list": "<keyframe-block>+",
            "keyframe-selector": "from|to|<percentage>",
            "lab()": "lab( [<percentage>|<number>|none] [<percentage>|<number>|none] [<percentage>|<number>|none] [/ [<alpha-value>|none]]? )",
            "layer()": "layer( <layer-name> )",
            "layer-name": "<ident> ['.' <ident>]*",
            "lch()": "lch( [<percentage>|<number>|none] [<percentage>|<number>|none] [<hue>|none] [/ [<alpha-value>|none]]? )",
            "leader()": "leader( <leader-type> )",
            "leader-type": "dotted|solid|space|<string>",
            "length-percentage": "<length>|<percentage>",
            "line-names": "'[' <custom-ident>* ']'",
            "line-name-list": "[<line-names>|<name-repeat>]+",
            "line-style": "none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset",
            "line-width": "<length>|thin|medium|thick",
            "linear-color-hint": "<length-percentage>",
            "linear-color-stop": "<color> <color-stop-length>?",
            "linear-gradient()": "linear-gradient( [<angle>|to <side-or-corner>]? , <color-stop-list> )",
            "log()": "log( <calc-sum> , <calc-sum>? )",
            "mask-layer": "<mask-reference>||<position> [/ <bg-size>]?||<repeat-style>||<geometry-box>||[<geometry-box>|no-clip]||<compositing-operator>||<masking-mode>",
            "mask-position": "[<length-percentage>|left|center|right] [<length-percentage>|top|center|bottom]?",
            "mask-reference": "none|<image>|<mask-source>",
            "mask-source": "<url>",
            "masking-mode": "alpha|luminance|match-source",
            "matrix()": "matrix( <number>#{6} )",
            "matrix3d()": "matrix3d( <number>#{16} )",
            "max()": "max( <calc-sum># )",
            "media-and": "<media-in-parens> [and <media-in-parens>]+",
            "media-condition": "<media-not>|<media-and>|<media-or>|<media-in-parens>",
            "media-condition-without-or": "<media-not>|<media-and>|<media-in-parens>",
            "media-feature": "( [<mf-plain>|<mf-boolean>|<mf-range>] )",
            "media-in-parens": "( <media-condition> )|<media-feature>|<general-enclosed>",
            "media-not": "not <media-in-parens>",
            "media-or": "<media-in-parens> [or <media-in-parens>]+",
            "media-query": "<media-condition>|[not|only]? <media-type> [and <media-condition-without-or>]?",
            "media-query-list": "<media-query>#",
            "media-type": "<ident>",
            "mf-boolean": "<mf-name>",
            "mf-name": "<ident>",
            "mf-plain": "<mf-name> : <mf-value>",
            "mf-range": "<mf-name> ['<'|'>']? '='? <mf-value>|<mf-value> ['<'|'>']? '='? <mf-name>|<mf-value> '<' '='? <mf-name> '<' '='? <mf-value>|<mf-value> '>' '='? <mf-name> '>' '='? <mf-value>",
            "mf-value": "<number>|<dimension>|<ident>|<ratio>",
            "min()": "min( <calc-sum># )",
            "minmax()": "minmax( [<length-percentage>|min-content|max-content|auto] , [<length-percentage>|<flex>|min-content|max-content|auto] )",
            "mod()": "mod( <calc-sum> , <calc-sum> )",
            "name-repeat": "repeat( [<integer [1,∞]>|auto-fill] , <line-names>+ )",
            "named-color": "transparent|aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|rebeccapurple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen|<-non-standard-color>",
            "namespace-prefix": "<ident>",
            "ns-prefix": "[<ident-token>|'*']? '|'",
            "number-percentage": "<number>|<percentage>",
            "numeric-figure-values": "[lining-nums|oldstyle-nums]",
            "numeric-fraction-values": "[diagonal-fractions|stacked-fractions]",
            "numeric-spacing-values": "[proportional-nums|tabular-nums]",
            "nth": "<an-plus-b>|even|odd",
            "opacity()": "opacity( [<number-percentage>] )",
            "overflow-position": "unsafe|safe",
            "outline-radius": "<length>|<percentage>",
            "page-body": "<declaration>? [; <page-body>]?|<page-margin-box> <page-body>",
            "page-margin-box": "<page-margin-box-type> '{' <declaration-list> '}'",
            "page-margin-box-type": "@top-left-corner|@top-left|@top-center|@top-right|@top-right-corner|@bottom-left-corner|@bottom-left|@bottom-center|@bottom-right|@bottom-right-corner|@left-top|@left-middle|@left-bottom|@right-top|@right-middle|@right-bottom",
            "page-selector-list": "[<page-selector>#]?",
            "page-selector": "<pseudo-page>+|<ident> <pseudo-page>*",
            "page-size": "A5|A4|A3|B5|B4|JIS-B5|JIS-B4|letter|legal|ledger",
            "path()": "path( [<fill-rule> ,]? <string> )",
            "paint()": "paint( <ident> , <declaration-value>? )",
            "perspective()": "perspective( [<length [0,∞]>|none] )",
            "polygon()": "polygon( <fill-rule>? , [<length-percentage> <length-percentage>]# )",
            "position": "[[left|center|right]||[top|center|bottom]|[left|center|right|<length-percentage>] [top|center|bottom|<length-percentage>]?|[[left|right] <length-percentage>]&&[[top|bottom] <length-percentage>]]",
            "pow()": "pow( <calc-sum> , <calc-sum> )",
            "pseudo-class-selector": "':' <ident-token>|':' <function-token> <any-value> ')'",
            "pseudo-element-selector": "':' <pseudo-class-selector>",
            "pseudo-page": ": [left|right|first|blank]",
            "quote": "open-quote|close-quote|no-open-quote|no-close-quote",
            "radial-gradient()": "radial-gradient( [<ending-shape>||<size>]? [at <position>]? , <color-stop-list> )",
            "ratio": "<number [0,∞]> [/ <number [0,∞]>]?",
            "relative-selector": "<combinator>? <complex-selector>",
            "relative-selector-list": "<relative-selector>#",
            "relative-size": "larger|smaller",
            "rem()": "rem( <calc-sum> , <calc-sum> )",
            "repeat-style": "repeat-x|repeat-y|[repeat|space|round|no-repeat]{1,2}",
            "repeating-conic-gradient()": "repeating-conic-gradient( [from <angle>]? [at <position>]? , <angular-color-stop-list> )",
            "repeating-linear-gradient()": "repeating-linear-gradient( [<angle>|to <side-or-corner>]? , <color-stop-list> )",
            "repeating-radial-gradient()": "repeating-radial-gradient( [<ending-shape>||<size>]? [at <position>]? , <color-stop-list> )",
            "reversed-counter-name": "reversed( <counter-name> )",
            "rgb()": "rgb( <percentage>{3} [/ <alpha-value>]? )|rgb( <number>{3} [/ <alpha-value>]? )|rgb( <percentage>#{3} , <alpha-value>? )|rgb( <number>#{3} , <alpha-value>? )",
            "rgba()": "rgba( <percentage>{3} [/ <alpha-value>]? )|rgba( <number>{3} [/ <alpha-value>]? )|rgba( <percentage>#{3} , <alpha-value>? )|rgba( <number>#{3} , <alpha-value>? )",
            "rotate()": "rotate( [<angle>|<zero>] )",
            "rotate3d()": "rotate3d( <number> , <number> , <number> , [<angle>|<zero>] )",
            "rotateX()": "rotateX( [<angle>|<zero>] )",
            "rotateY()": "rotateY( [<angle>|<zero>] )",
            "rotateZ()": "rotateZ( [<angle>|<zero>] )",
            "round()": "round( <rounding-strategy>? , <calc-sum> , <calc-sum> )",
            "rounding-strategy": "nearest|up|down|to-zero",
            "saturate()": "saturate( <number-percentage> )",
            "scale()": "scale( [<number>|<percentage>]#{1,2} )",
            "scale3d()": "scale3d( [<number>|<percentage>]#{3} )",
            "scaleX()": "scaleX( [<number>|<percentage>] )",
            "scaleY()": "scaleY( [<number>|<percentage>] )",
            "scaleZ()": "scaleZ( [<number>|<percentage>] )",
            "scroller": "root|nearest",
            "self-position": "center|start|end|self-start|self-end|flex-start|flex-end",
            "shape-radius": "<length-percentage>|closest-side|farthest-side",
            "sign()": "sign( <calc-sum> )",
            "skew()": "skew( [<angle>|<zero>] , [<angle>|<zero>]? )",
            "skewX()": "skewX( [<angle>|<zero>] )",
            "skewY()": "skewY( [<angle>|<zero>] )",
            "sepia()": "sepia( <number-percentage> )",
            "shadow": "inset?&&<length>{2,4}&&<color>?",
            "shadow-t": "[<length>{2,3}&&<color>?]",
            "shape": "rect( <top> , <right> , <bottom> , <left> )|rect( <top> <right> <bottom> <left> )",
            "shape-box": "<box>|margin-box",
            "side-or-corner": "[left|right]||[top|bottom]",
            "sin()": "sin( <calc-sum> )",
            "single-animation": "<time>||<easing-function>||<time>||<single-animation-iteration-count>||<single-animation-direction>||<single-animation-fill-mode>||<single-animation-play-state>||[none|<keyframes-name>]",
            "single-animation-direction": "normal|reverse|alternate|alternate-reverse",
            "single-animation-fill-mode": "none|forwards|backwards|both",
            "single-animation-iteration-count": "infinite|<number>",
            "single-animation-play-state": "running|paused",
            "single-animation-timeline": "auto|none|<timeline-name>|scroll( <axis>? <scroller>? )",
            "single-transition": "[none|<single-transition-property>]||<time>||<easing-function>||<time>",
            "single-transition-property": "all|<custom-ident>",
            "size": "closest-side|farthest-side|closest-corner|farthest-corner|<length>|<length-percentage>{2}",
            "sqrt()": "sqrt( <calc-sum> )",
            "step-position": "jump-start|jump-end|jump-none|jump-both|start|end",
            "step-timing-function": "step-start|step-end|steps( <integer> [, <step-position>]? )",
            "subclass-selector": "<id-selector>|<class-selector>|<attribute-selector>|<pseudo-class-selector>",
            "supports-condition": "not <supports-in-parens>|<supports-in-parens> [and <supports-in-parens>]*|<supports-in-parens> [or <supports-in-parens>]*",
            "supports-in-parens": "( <supports-condition> )|<supports-feature>|<general-enclosed>",
            "supports-feature": "<supports-decl>|<supports-selector-fn>",
            "supports-decl": "( <declaration> )",
            "supports-selector-fn": "selector( <complex-selector> )",
            "symbol": "<string>|<image>|<custom-ident>",
            "tan()": "tan( <calc-sum> )",
            "target": "<target-counter()>|<target-counters()>|<target-text()>",
            "target-counter()": "target-counter( [<string>|<url>] , <custom-ident> , <counter-style>? )",
            "target-counters()": "target-counters( [<string>|<url>] , <custom-ident> , <string> , <counter-style>? )",
            "target-text()": "target-text( [<string>|<url>] , [content|before|after|first-letter]? )",
            "time-percentage": "<time>|<percentage>",
            "timeline-name": "<custom-ident>|<string>",
            "easing-function": "linear|<cubic-bezier-timing-function>|<step-timing-function>",
            "track-breadth": "<length-percentage>|<flex>|min-content|max-content|auto",
            "track-list": "[<line-names>? [<track-size>|<track-repeat>]]+ <line-names>?",
            "track-repeat": "repeat( [<integer [1,∞]>] , [<line-names>? <track-size>]+ <line-names>? )",
            "track-size": "<track-breadth>|minmax( <inflexible-breadth> , <track-breadth> )|fit-content( <length-percentage> )",
            "transform-function": "<matrix()>|<translate()>|<translateX()>|<translateY()>|<scale()>|<scaleX()>|<scaleY()>|<rotate()>|<skew()>|<skewX()>|<skewY()>|<matrix3d()>|<translate3d()>|<translateZ()>|<scale3d()>|<scaleZ()>|<rotate3d()>|<rotateX()>|<rotateY()>|<rotateZ()>|<perspective()>",
            "transform-list": "<transform-function>+",
            "translate()": "translate( <length-percentage> , <length-percentage>? )",
            "translate3d()": "translate3d( <length-percentage> , <length-percentage> , <length> )",
            "translateX()": "translateX( <length-percentage> )",
            "translateY()": "translateY( <length-percentage> )",
            "translateZ()": "translateZ( <length> )",
            "type-or-unit": "string|color|url|integer|number|length|angle|time|frequency|cap|ch|em|ex|ic|lh|rlh|rem|vb|vi|vw|vh|vmin|vmax|mm|Q|cm|in|pt|pc|px|deg|grad|rad|turn|ms|s|Hz|kHz|%",
            "type-selector": "<wq-name>|<ns-prefix>? '*'",
            "var()": "var( <custom-property-name> , <declaration-value>? )",
            "viewport-length": "auto|<length-percentage>",
            "visual-box": "content-box|padding-box|border-box",
            "wq-name": "<ns-prefix>? <ident-token>",
            "-legacy-gradient": "<-webkit-gradient()>|<-legacy-linear-gradient>|<-legacy-repeating-linear-gradient>|<-legacy-radial-gradient>|<-legacy-repeating-radial-gradient>",
            "-legacy-linear-gradient": "-moz-linear-gradient( <-legacy-linear-gradient-arguments> )|-webkit-linear-gradient( <-legacy-linear-gradient-arguments> )|-o-linear-gradient( <-legacy-linear-gradient-arguments> )",
            "-legacy-repeating-linear-gradient": "-moz-repeating-linear-gradient( <-legacy-linear-gradient-arguments> )|-webkit-repeating-linear-gradient( <-legacy-linear-gradient-arguments> )|-o-repeating-linear-gradient( <-legacy-linear-gradient-arguments> )",
            "-legacy-linear-gradient-arguments": "[<angle>|<side-or-corner>]? , <color-stop-list>",
            "-legacy-radial-gradient": "-moz-radial-gradient( <-legacy-radial-gradient-arguments> )|-webkit-radial-gradient( <-legacy-radial-gradient-arguments> )|-o-radial-gradient( <-legacy-radial-gradient-arguments> )",
            "-legacy-repeating-radial-gradient": "-moz-repeating-radial-gradient( <-legacy-radial-gradient-arguments> )|-webkit-repeating-radial-gradient( <-legacy-radial-gradient-arguments> )|-o-repeating-radial-gradient( <-legacy-radial-gradient-arguments> )",
            "-legacy-radial-gradient-arguments": "[<position> ,]? [[[<-legacy-radial-gradient-shape>||<-legacy-radial-gradient-size>]|[<length>|<percentage>]{2}] ,]? <color-stop-list>",
            "-legacy-radial-gradient-size": "closest-side|closest-corner|farthest-side|farthest-corner|contain|cover",
            "-legacy-radial-gradient-shape": "circle|ellipse",
            "-non-standard-font": "-apple-system-body|-apple-system-headline|-apple-system-subheadline|-apple-system-caption1|-apple-system-caption2|-apple-system-footnote|-apple-system-short-body|-apple-system-short-headline|-apple-system-short-subheadline|-apple-system-short-caption1|-apple-system-short-footnote|-apple-system-tall-body",
            "-non-standard-color": "-moz-ButtonDefault|-moz-ButtonHoverFace|-moz-ButtonHoverText|-moz-CellHighlight|-moz-CellHighlightText|-moz-Combobox|-moz-ComboboxText|-moz-Dialog|-moz-DialogText|-moz-dragtargetzone|-moz-EvenTreeRow|-moz-Field|-moz-FieldText|-moz-html-CellHighlight|-moz-html-CellHighlightText|-moz-mac-accentdarkestshadow|-moz-mac-accentdarkshadow|-moz-mac-accentface|-moz-mac-accentlightesthighlight|-moz-mac-accentlightshadow|-moz-mac-accentregularhighlight|-moz-mac-accentregularshadow|-moz-mac-chrome-active|-moz-mac-chrome-inactive|-moz-mac-focusring|-moz-mac-menuselect|-moz-mac-menushadow|-moz-mac-menutextselect|-moz-MenuHover|-moz-MenuHoverText|-moz-MenuBarText|-moz-MenuBarHoverText|-moz-nativehyperlinktext|-moz-OddTreeRow|-moz-win-communicationstext|-moz-win-mediatext|-moz-activehyperlinktext|-moz-default-background-color|-moz-default-color|-moz-hyperlinktext|-moz-visitedhyperlinktext|-webkit-activelink|-webkit-focus-ring-color|-webkit-link|-webkit-text",
            "-non-standard-image-rendering": "optimize-contrast|-moz-crisp-edges|-o-crisp-edges|-webkit-optimize-contrast",
            "-non-standard-overflow": "-moz-scrollbars-none|-moz-scrollbars-horizontal|-moz-scrollbars-vertical|-moz-hidden-unscrollable",
            "-non-standard-width": "fill-available|min-intrinsic|intrinsic|-moz-available|-moz-fit-content|-moz-min-content|-moz-max-content|-webkit-min-content|-webkit-max-content",
            "-webkit-gradient()": "-webkit-gradient( <-webkit-gradient-type> , <-webkit-gradient-point> [, <-webkit-gradient-point>|, <-webkit-gradient-radius> , <-webkit-gradient-point>] [, <-webkit-gradient-radius>]? [, <-webkit-gradient-color-stop>]* )",
            "-webkit-gradient-color-stop": "from( <color> )|color-stop( [<number-zero-one>|<percentage>] , <color> )|to( <color> )",
            "-webkit-gradient-point": "[left|center|right|<length-percentage>] [top|center|bottom|<length-percentage>]",
            "-webkit-gradient-radius": "<length>|<percentage>",
            "-webkit-gradient-type": "linear|radial",
            "-webkit-mask-box-repeat": "repeat|stretch|round",
            "-webkit-mask-clip-style": "border|border-box|padding|padding-box|content|content-box|text",
            "-ms-filter-function-list": "<-ms-filter-function>+",
            "-ms-filter-function": "<-ms-filter-function-progid>|<-ms-filter-function-legacy>",
            "-ms-filter-function-progid": "'progid:' [<ident-token> '.']* [<ident-token>|<function-token> <any-value>? )]",
            "-ms-filter-function-legacy": "<ident-token>|<function-token> <any-value>? )",
            "-ms-filter": "<string>",
            "age": "child|young|old",
            "attr-name": "<wq-name>",
            "attr-fallback": "<any-value>",
            "bg-clip": "<box>|border|text",
            "bottom": "<length>|auto",
            "generic-voice": "[<age>? <gender> <integer>?]",
            "gender": "male|female|neutral",
            "left": "<length>|auto",
            "mask-image": "<mask-reference>#",
            "paint": "none|<color>|<url> [none|<color>]?|context-fill|context-stroke",
            "right": "<length>|auto",
            "scroll-timeline-axis": "block|inline|vertical|horizontal",
            "scroll-timeline-name": "none|<custom-ident>",
            "single-animation-composition": "replace|add|accumulate",
            "svg-length": "<percentage>|<length>|<number>",
            "svg-writing-mode": "lr-tb|rl-tb|tb-rl|lr|rl|tb",
            "top": "<length>|auto",
            "x": "<number>",
            "y": "<number>",
            "declaration": "<ident-token> : <declaration-value>? ['!' important]?",
            "declaration-list": "[<declaration>? ';']* <declaration>?",
            "url": "url( <string> <url-modifier>* )|<url-token>",
            "url-modifier": "<ident>|<function-token> <any-value> )",
            "number-zero-one": "<number [0,1]>",
            "number-one-or-greater": "<number [1,∞]>",
            "-non-standard-display": "-ms-inline-flexbox|-ms-grid|-ms-inline-grid|-webkit-flex|-webkit-inline-flex|-webkit-box|-webkit-inline-box|-moz-inline-stack|-moz-box|-moz-inline-box"
        },
        "properties": {
            "--*": "<declaration-value>",
            "-ms-accelerator": "false|true",
            "-ms-block-progression": "tb|rl|bt|lr",
            "-ms-content-zoom-chaining": "none|chained",
            "-ms-content-zooming": "none|zoom",
            "-ms-content-zoom-limit": "<'-ms-content-zoom-limit-min'> <'-ms-content-zoom-limit-max'>",
            "-ms-content-zoom-limit-max": "<percentage>",
            "-ms-content-zoom-limit-min": "<percentage>",
            "-ms-content-zoom-snap": "<'-ms-content-zoom-snap-type'>||<'-ms-content-zoom-snap-points'>",
            "-ms-content-zoom-snap-points": "snapInterval( <percentage> , <percentage> )|snapList( <percentage># )",
            "-ms-content-zoom-snap-type": "none|proximity|mandatory",
            "-ms-filter": "<string>",
            "-ms-flow-from": "[none|<custom-ident>]#",
            "-ms-flow-into": "[none|<custom-ident>]#",
            "-ms-grid-columns": "none|<track-list>|<auto-track-list>",
            "-ms-grid-rows": "none|<track-list>|<auto-track-list>",
            "-ms-high-contrast-adjust": "auto|none",
            "-ms-hyphenate-limit-chars": "auto|<integer>{1,3}",
            "-ms-hyphenate-limit-lines": "no-limit|<integer>",
            "-ms-hyphenate-limit-zone": "<percentage>|<length>",
            "-ms-ime-align": "auto|after",
            "-ms-overflow-style": "auto|none|scrollbar|-ms-autohiding-scrollbar",
            "-ms-scrollbar-3dlight-color": "<color>",
            "-ms-scrollbar-arrow-color": "<color>",
            "-ms-scrollbar-base-color": "<color>",
            "-ms-scrollbar-darkshadow-color": "<color>",
            "-ms-scrollbar-face-color": "<color>",
            "-ms-scrollbar-highlight-color": "<color>",
            "-ms-scrollbar-shadow-color": "<color>",
            "-ms-scrollbar-track-color": "<color>",
            "-ms-scroll-chaining": "chained|none",
            "-ms-scroll-limit": "<'-ms-scroll-limit-x-min'> <'-ms-scroll-limit-y-min'> <'-ms-scroll-limit-x-max'> <'-ms-scroll-limit-y-max'>",
            "-ms-scroll-limit-x-max": "auto|<length>",
            "-ms-scroll-limit-x-min": "<length>",
            "-ms-scroll-limit-y-max": "auto|<length>",
            "-ms-scroll-limit-y-min": "<length>",
            "-ms-scroll-rails": "none|railed",
            "-ms-scroll-snap-points-x": "snapInterval( <length-percentage> , <length-percentage> )|snapList( <length-percentage># )",
            "-ms-scroll-snap-points-y": "snapInterval( <length-percentage> , <length-percentage> )|snapList( <length-percentage># )",
            "-ms-scroll-snap-type": "none|proximity|mandatory",
            "-ms-scroll-snap-x": "<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-x'>",
            "-ms-scroll-snap-y": "<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-y'>",
            "-ms-scroll-translation": "none|vertical-to-horizontal",
            "-ms-text-autospace": "none|ideograph-alpha|ideograph-numeric|ideograph-parenthesis|ideograph-space",
            "-ms-touch-select": "grippers|none",
            "-ms-user-select": "none|element|text",
            "-ms-wrap-flow": "auto|both|start|end|maximum|clear",
            "-ms-wrap-margin": "<length>",
            "-ms-wrap-through": "wrap|none",
            "-moz-appearance": "none|button|button-arrow-down|button-arrow-next|button-arrow-previous|button-arrow-up|button-bevel|button-focus|caret|checkbox|checkbox-container|checkbox-label|checkmenuitem|dualbutton|groupbox|listbox|listitem|menuarrow|menubar|menucheckbox|menuimage|menuitem|menuitemtext|menulist|menulist-button|menulist-text|menulist-textfield|menupopup|menuradio|menuseparator|meterbar|meterchunk|progressbar|progressbar-vertical|progresschunk|progresschunk-vertical|radio|radio-container|radio-label|radiomenuitem|range|range-thumb|resizer|resizerpanel|scale-horizontal|scalethumbend|scalethumb-horizontal|scalethumbstart|scalethumbtick|scalethumb-vertical|scale-vertical|scrollbarbutton-down|scrollbarbutton-left|scrollbarbutton-right|scrollbarbutton-up|scrollbarthumb-horizontal|scrollbarthumb-vertical|scrollbartrack-horizontal|scrollbartrack-vertical|searchfield|separator|sheet|spinner|spinner-downbutton|spinner-textfield|spinner-upbutton|splitter|statusbar|statusbarpanel|tab|tabpanel|tabpanels|tab-scroll-arrow-back|tab-scroll-arrow-forward|textfield|textfield-multiline|toolbar|toolbarbutton|toolbarbutton-dropdown|toolbargripper|toolbox|tooltip|treeheader|treeheadercell|treeheadersortarrow|treeitem|treeline|treetwisty|treetwistyopen|treeview|-moz-mac-unified-toolbar|-moz-win-borderless-glass|-moz-win-browsertabbar-toolbox|-moz-win-communicationstext|-moz-win-communications-toolbox|-moz-win-exclude-glass|-moz-win-glass|-moz-win-mediatext|-moz-win-media-toolbox|-moz-window-button-box|-moz-window-button-box-maximized|-moz-window-button-close|-moz-window-button-maximize|-moz-window-button-minimize|-moz-window-button-restore|-moz-window-frame-bottom|-moz-window-frame-left|-moz-window-frame-right|-moz-window-titlebar|-moz-window-titlebar-maximized",
            "-moz-binding": "<url>|none",
            "-moz-border-bottom-colors": "<color>+|none",
            "-moz-border-left-colors": "<color>+|none",
            "-moz-border-right-colors": "<color>+|none",
            "-moz-border-top-colors": "<color>+|none",
            "-moz-context-properties": "none|[fill|fill-opacity|stroke|stroke-opacity]#",
            "-moz-float-edge": "border-box|content-box|margin-box|padding-box",
            "-moz-force-broken-image-icon": "0|1",
            "-moz-image-region": "<shape>|auto",
            "-moz-orient": "inline|block|horizontal|vertical",
            "-moz-outline-radius": "<outline-radius>{1,4} [/ <outline-radius>{1,4}]?",
            "-moz-outline-radius-bottomleft": "<outline-radius>",
            "-moz-outline-radius-bottomright": "<outline-radius>",
            "-moz-outline-radius-topleft": "<outline-radius>",
            "-moz-outline-radius-topright": "<outline-radius>",
            "-moz-stack-sizing": "ignore|stretch-to-fit",
            "-moz-text-blink": "none|blink",
            "-moz-user-focus": "ignore|normal|select-after|select-before|select-menu|select-same|select-all|none",
            "-moz-user-input": "auto|none|enabled|disabled",
            "-moz-user-modify": "read-only|read-write|write-only",
            "-moz-window-dragging": "drag|no-drag",
            "-moz-window-shadow": "default|menu|tooltip|sheet|none",
            "-webkit-appearance": "none|button|button-bevel|caps-lock-indicator|caret|checkbox|default-button|inner-spin-button|listbox|listitem|media-controls-background|media-controls-fullscreen-background|media-current-time-display|media-enter-fullscreen-button|media-exit-fullscreen-button|media-fullscreen-button|media-mute-button|media-overlay-play-button|media-play-button|media-seek-back-button|media-seek-forward-button|media-slider|media-sliderthumb|media-time-remaining-display|media-toggle-closed-captions-button|media-volume-slider|media-volume-slider-container|media-volume-sliderthumb|menulist|menulist-button|menulist-text|menulist-textfield|meter|progress-bar|progress-bar-value|push-button|radio|scrollbarbutton-down|scrollbarbutton-left|scrollbarbutton-right|scrollbarbutton-up|scrollbargripper-horizontal|scrollbargripper-vertical|scrollbarthumb-horizontal|scrollbarthumb-vertical|scrollbartrack-horizontal|scrollbartrack-vertical|searchfield|searchfield-cancel-button|searchfield-decoration|searchfield-results-button|searchfield-results-decoration|slider-horizontal|slider-vertical|sliderthumb-horizontal|sliderthumb-vertical|square-button|textarea|textfield|-apple-pay-button",
            "-webkit-border-before": "<'border-width'>||<'border-style'>||<color>",
            "-webkit-border-before-color": "<color>",
            "-webkit-border-before-style": "<'border-style'>",
            "-webkit-border-before-width": "<'border-width'>",
            "-webkit-box-reflect": "[above|below|right|left]? <length>? <image>?",
            "-webkit-line-clamp": "none|<integer>",
            "-webkit-mask": "[<mask-reference>||<position> [/ <bg-size>]?||<repeat-style>||[<box>|border|padding|content|text]||[<box>|border|padding|content]]#",
            "-webkit-mask-attachment": "<attachment>#",
            "-webkit-mask-clip": "[<box>|border|padding|content|text]#",
            "-webkit-mask-composite": "<composite-style>#",
            "-webkit-mask-image": "<mask-reference>#",
            "-webkit-mask-origin": "[<box>|border|padding|content]#",
            "-webkit-mask-position": "<position>#",
            "-webkit-mask-position-x": "[<length-percentage>|left|center|right]#",
            "-webkit-mask-position-y": "[<length-percentage>|top|center|bottom]#",
            "-webkit-mask-repeat": "<repeat-style>#",
            "-webkit-mask-repeat-x": "repeat|no-repeat|space|round",
            "-webkit-mask-repeat-y": "repeat|no-repeat|space|round",
            "-webkit-mask-size": "<bg-size>#",
            "-webkit-overflow-scrolling": "auto|touch",
            "-webkit-tap-highlight-color": "<color>",
            "-webkit-text-fill-color": "<color>",
            "-webkit-text-stroke": "<length>||<color>",
            "-webkit-text-stroke-color": "<color>",
            "-webkit-text-stroke-width": "<length>",
            "-webkit-touch-callout": "default|none",
            "-webkit-user-modify": "read-only|read-write|read-write-plaintext-only",
            "accent-color": "auto|<color>",
            "align-content": "normal|<baseline-position>|<content-distribution>|<overflow-position>? <content-position>",
            "align-items": "normal|stretch|<baseline-position>|[<overflow-position>? <self-position>]",
            "align-self": "auto|normal|stretch|<baseline-position>|<overflow-position>? <self-position>",
            "align-tracks": "[normal|<baseline-position>|<content-distribution>|<overflow-position>? <content-position>]#",
            "all": "initial|inherit|unset|revert|revert-layer",
            "animation": "<single-animation>#",
            "animation-composition": "<single-animation-composition>#",
            "animation-delay": "<time>#",
            "animation-direction": "<single-animation-direction>#",
            "animation-duration": "<time>#",
            "animation-fill-mode": "<single-animation-fill-mode>#",
            "animation-iteration-count": "<single-animation-iteration-count>#",
            "animation-name": "[none|<keyframes-name>]#",
            "animation-play-state": "<single-animation-play-state>#",
            "animation-timing-function": "<easing-function>#",
            "animation-timeline": "<single-animation-timeline>#",
            "appearance": "none|auto|textfield|menulist-button|<compat-auto>",
            "aspect-ratio": "auto|<ratio>",
            "azimuth": "<angle>|[[left-side|far-left|left|center-left|center|center-right|right|far-right|right-side]||behind]|leftwards|rightwards",
            "backdrop-filter": "none|<filter-function-list>",
            "backface-visibility": "visible|hidden",
            "background": "[<bg-layer> ,]* <final-bg-layer>",
            "background-attachment": "<attachment>#",
            "background-blend-mode": "<blend-mode>#",
            "background-clip": "<bg-clip>#",
            "background-color": "<color>",
            "background-image": "<bg-image>#",
            "background-origin": "<box>#",
            "background-position": "<bg-position>#",
            "background-position-x": "[center|[[left|right|x-start|x-end]? <length-percentage>?]!]#",
            "background-position-y": "[center|[[top|bottom|y-start|y-end]? <length-percentage>?]!]#",
            "background-repeat": "<repeat-style>#",
            "background-size": "<bg-size>#",
            "block-overflow": "clip|ellipsis|<string>",
            "block-size": "<'width'>",
            "border": "<line-width>||<line-style>||<color>",
            "border-block": "<'border-top-width'>||<'border-top-style'>||<color>",
            "border-block-color": "<'border-top-color'>{1,2}",
            "border-block-style": "<'border-top-style'>",
            "border-block-width": "<'border-top-width'>",
            "border-block-end": "<'border-top-width'>||<'border-top-style'>||<color>",
            "border-block-end-color": "<'border-top-color'>",
            "border-block-end-style": "<'border-top-style'>",
            "border-block-end-width": "<'border-top-width'>",
            "border-block-start": "<'border-top-width'>||<'border-top-style'>||<color>",
            "border-block-start-color": "<'border-top-color'>",
            "border-block-start-style": "<'border-top-style'>",
            "border-block-start-width": "<'border-top-width'>",
            "border-bottom": "<line-width>||<line-style>||<color>",
            "border-bottom-color": "<'border-top-color'>",
            "border-bottom-left-radius": "<length-percentage>{1,2}",
            "border-bottom-right-radius": "<length-percentage>{1,2}",
            "border-bottom-style": "<line-style>",
            "border-bottom-width": "<line-width>",
            "border-collapse": "collapse|separate",
            "border-color": "<color>{1,4}",
            "border-end-end-radius": "<length-percentage>{1,2}",
            "border-end-start-radius": "<length-percentage>{1,2}",
            "border-image": "<'border-image-source'>||<'border-image-slice'> [/ <'border-image-width'>|/ <'border-image-width'>? / <'border-image-outset'>]?||<'border-image-repeat'>",
            "border-image-outset": "[<length>|<number>]{1,4}",
            "border-image-repeat": "[stretch|repeat|round|space]{1,2}",
            "border-image-slice": "<number-percentage>{1,4}&&fill?",
            "border-image-source": "none|<image>",
            "border-image-width": "[<length-percentage>|<number>|auto]{1,4}",
            "border-inline": "<'border-top-width'>||<'border-top-style'>||<color>",
            "border-inline-end": "<'border-top-width'>||<'border-top-style'>||<color>",
            "border-inline-color": "<'border-top-color'>{1,2}",
            "border-inline-style": "<'border-top-style'>",
            "border-inline-width": "<'border-top-width'>",
            "border-inline-end-color": "<'border-top-color'>",
            "border-inline-end-style": "<'border-top-style'>",
            "border-inline-end-width": "<'border-top-width'>",
            "border-inline-start": "<'border-top-width'>||<'border-top-style'>||<color>",
            "border-inline-start-color": "<'border-top-color'>",
            "border-inline-start-style": "<'border-top-style'>",
            "border-inline-start-width": "<'border-top-width'>",
            "border-left": "<line-width>||<line-style>||<color>",
            "border-left-color": "<color>",
            "border-left-style": "<line-style>",
            "border-left-width": "<line-width>",
            "border-radius": "<length-percentage>{1,4} [/ <length-percentage>{1,4}]?",
            "border-right": "<line-width>||<line-style>||<color>",
            "border-right-color": "<color>",
            "border-right-style": "<line-style>",
            "border-right-width": "<line-width>",
            "border-spacing": "<length> <length>?",
            "border-start-end-radius": "<length-percentage>{1,2}",
            "border-start-start-radius": "<length-percentage>{1,2}",
            "border-style": "<line-style>{1,4}",
            "border-top": "<line-width>||<line-style>||<color>",
            "border-top-color": "<color>",
            "border-top-left-radius": "<length-percentage>{1,2}",
            "border-top-right-radius": "<length-percentage>{1,2}",
            "border-top-style": "<line-style>",
            "border-top-width": "<line-width>",
            "border-width": "<line-width>{1,4}",
            "bottom": "<length>|<percentage>|auto",
            "box-align": "start|center|end|baseline|stretch",
            "box-decoration-break": "slice|clone",
            "box-direction": "normal|reverse|inherit",
            "box-flex": "<number>",
            "box-flex-group": "<integer>",
            "box-lines": "single|multiple",
            "box-ordinal-group": "<integer>",
            "box-orient": "horizontal|vertical|inline-axis|block-axis|inherit",
            "box-pack": "start|center|end|justify",
            "box-shadow": "none|<shadow>#",
            "box-sizing": "content-box|border-box",
            "break-after": "auto|avoid|always|all|avoid-page|page|left|right|recto|verso|avoid-column|column|avoid-region|region",
            "break-before": "auto|avoid|always|all|avoid-page|page|left|right|recto|verso|avoid-column|column|avoid-region|region",
            "break-inside": "auto|avoid|avoid-page|avoid-column|avoid-region",
            "caption-side": "top|bottom|block-start|block-end|inline-start|inline-end",
            "caret": "<'caret-color'>||<'caret-shape'>",
            "caret-color": "auto|<color>",
            "caret-shape": "auto|bar|block|underscore",
            "clear": "none|left|right|both|inline-start|inline-end",
            "clip": "<shape>|auto",
            "clip-path": "<clip-source>|[<basic-shape>||<geometry-box>]|none",
            "color": "<color>",
            "print-color-adjust": "economy|exact",
            "color-scheme": "normal|[light|dark|<custom-ident>]+&&only?",
            "column-count": "<integer>|auto",
            "column-fill": "auto|balance|balance-all",
            "column-gap": "normal|<length-percentage>",
            "column-rule": "<'column-rule-width'>||<'column-rule-style'>||<'column-rule-color'>",
            "column-rule-color": "<color>",
            "column-rule-style": "<'border-style'>",
            "column-rule-width": "<'border-width'>",
            "column-span": "none|all",
            "column-width": "<length>|auto",
            "columns": "<'column-width'>||<'column-count'>",
            "contain": "none|strict|content|[[size||inline-size]||layout||style||paint]",
            "contain-intrinsic-size": "[none|<length>|auto <length>]{1,2}",
            "contain-intrinsic-block-size": "none|<length>|auto <length>",
            "contain-intrinsic-height": "none|<length>|auto <length>",
            "contain-intrinsic-inline-size": "none|<length>|auto <length>",
            "contain-intrinsic-width": "none|<length>|auto <length>",
            "content": "normal|none|[<content-replacement>|<content-list>] [/ [<string>|<counter>]+]?",
            "content-visibility": "visible|auto|hidden",
            "counter-increment": "[<counter-name> <integer>?]+|none",
            "counter-reset": "[<counter-name> <integer>?|<reversed-counter-name> <integer>?]+|none",
            "counter-set": "[<counter-name> <integer>?]+|none",
            "cursor": "[[<url> [<x> <y>]? ,]* [auto|default|none|context-menu|help|pointer|progress|wait|cell|crosshair|text|vertical-text|alias|copy|move|no-drop|not-allowed|e-resize|n-resize|ne-resize|nw-resize|s-resize|se-resize|sw-resize|w-resize|ew-resize|ns-resize|nesw-resize|nwse-resize|col-resize|row-resize|all-scroll|zoom-in|zoom-out|grab|grabbing|hand|-webkit-grab|-webkit-grabbing|-webkit-zoom-in|-webkit-zoom-out|-moz-grab|-moz-grabbing|-moz-zoom-in|-moz-zoom-out]]",
            "direction": "ltr|rtl",
            "display": "[<display-outside>||<display-inside>]|<display-listitem>|<display-internal>|<display-box>|<display-legacy>|<-non-standard-display>",
            "empty-cells": "show|hide",
            "filter": "none|<filter-function-list>|<-ms-filter-function-list>",
            "flex": "none|[<'flex-grow'> <'flex-shrink'>?||<'flex-basis'>]",
            "flex-basis": "content|<'width'>",
            "flex-direction": "row|row-reverse|column|column-reverse",
            "flex-flow": "<'flex-direction'>||<'flex-wrap'>",
            "flex-grow": "<number>",
            "flex-shrink": "<number>",
            "flex-wrap": "nowrap|wrap|wrap-reverse",
            "float": "left|right|none|inline-start|inline-end",
            "font": "[[<'font-style'>||<font-variant-css21>||<'font-weight'>||<'font-stretch'>]? <'font-size'> [/ <'line-height'>]? <'font-family'>]|caption|icon|menu|message-box|small-caption|status-bar",
            "font-family": "[<family-name>|<generic-family>]#",
            "font-feature-settings": "normal|<feature-tag-value>#",
            "font-kerning": "auto|normal|none",
            "font-language-override": "normal|<string>",
            "font-optical-sizing": "auto|none",
            "font-variation-settings": "normal|[<string> <number>]#",
            "font-size": "<absolute-size>|<relative-size>|<length-percentage>",
            "font-size-adjust": "none|[ex-height|cap-height|ch-width|ic-width|ic-height]? [from-font|<number>]",
            "font-smooth": "auto|never|always|<absolute-size>|<length>",
            "font-stretch": "<font-stretch-absolute>",
            "font-style": "normal|italic|oblique <angle>?",
            "font-synthesis": "none|[weight||style||small-caps]",
            "font-variant": "normal|none|[<common-lig-values>||<discretionary-lig-values>||<historical-lig-values>||<contextual-alt-values>||stylistic( <feature-value-name> )||historical-forms||styleset( <feature-value-name># )||character-variant( <feature-value-name># )||swash( <feature-value-name> )||ornaments( <feature-value-name> )||annotation( <feature-value-name> )||[small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps]||<numeric-figure-values>||<numeric-spacing-values>||<numeric-fraction-values>||ordinal||slashed-zero||<east-asian-variant-values>||<east-asian-width-values>||ruby]",
            "font-variant-alternates": "normal|[stylistic( <feature-value-name> )||historical-forms||styleset( <feature-value-name># )||character-variant( <feature-value-name># )||swash( <feature-value-name> )||ornaments( <feature-value-name> )||annotation( <feature-value-name> )]",
            "font-variant-caps": "normal|small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps",
            "font-variant-east-asian": "normal|[<east-asian-variant-values>||<east-asian-width-values>||ruby]",
            "font-variant-ligatures": "normal|none|[<common-lig-values>||<discretionary-lig-values>||<historical-lig-values>||<contextual-alt-values>]",
            "font-variant-numeric": "normal|[<numeric-figure-values>||<numeric-spacing-values>||<numeric-fraction-values>||ordinal||slashed-zero]",
            "font-variant-position": "normal|sub|super",
            "font-weight": "<font-weight-absolute>|bolder|lighter",
            "forced-color-adjust": "auto|none",
            "gap": "<'row-gap'> <'column-gap'>?",
            "grid": "<'grid-template'>|<'grid-template-rows'> / [auto-flow&&dense?] <'grid-auto-columns'>?|[auto-flow&&dense?] <'grid-auto-rows'>? / <'grid-template-columns'>",
            "grid-area": "<grid-line> [/ <grid-line>]{0,3}",
            "grid-auto-columns": "<track-size>+",
            "grid-auto-flow": "[row|column]||dense",
            "grid-auto-rows": "<track-size>+",
            "grid-column": "<grid-line> [/ <grid-line>]?",
            "grid-column-end": "<grid-line>",
            "grid-column-gap": "<length-percentage>",
            "grid-column-start": "<grid-line>",
            "grid-gap": "<'grid-row-gap'> <'grid-column-gap'>?",
            "grid-row": "<grid-line> [/ <grid-line>]?",
            "grid-row-end": "<grid-line>",
            "grid-row-gap": "<length-percentage>",
            "grid-row-start": "<grid-line>",
            "grid-template": "none|[<'grid-template-rows'> / <'grid-template-columns'>]|[<line-names>? <string> <track-size>? <line-names>?]+ [/ <explicit-track-list>]?",
            "grid-template-areas": "none|<string>+",
            "grid-template-columns": "none|<track-list>|<auto-track-list>|subgrid <line-name-list>?",
            "grid-template-rows": "none|<track-list>|<auto-track-list>|subgrid <line-name-list>?",
            "hanging-punctuation": "none|[first||[force-end|allow-end]||last]",
            "height": "auto|<length>|<percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )",
            "hyphenate-character": "auto|<string>",
            "hyphens": "none|manual|auto",
            "image-orientation": "from-image|<angle>|[<angle>? flip]",
            "image-rendering": "auto|crisp-edges|pixelated|optimizeSpeed|optimizeQuality|<-non-standard-image-rendering>",
            "image-resolution": "[from-image||<resolution>]&&snap?",
            "ime-mode": "auto|normal|active|inactive|disabled",
            "initial-letter": "normal|[<number> <integer>?]",
            "initial-letter-align": "[auto|alphabetic|hanging|ideographic]",
            "inline-size": "<'width'>",
            "input-security": "auto|none",
            "inset": "<'top'>{1,4}",
            "inset-block": "<'top'>{1,2}",
            "inset-block-end": "<'top'>",
            "inset-block-start": "<'top'>",
            "inset-inline": "<'top'>{1,2}",
            "inset-inline-end": "<'top'>",
            "inset-inline-start": "<'top'>",
            "isolation": "auto|isolate",
            "justify-content": "normal|<content-distribution>|<overflow-position>? [<content-position>|left|right]",
            "justify-items": "normal|stretch|<baseline-position>|<overflow-position>? [<self-position>|left|right]|legacy|legacy&&[left|right|center]",
            "justify-self": "auto|normal|stretch|<baseline-position>|<overflow-position>? [<self-position>|left|right]",
            "justify-tracks": "[normal|<content-distribution>|<overflow-position>? [<content-position>|left|right]]#",
            "left": "<length>|<percentage>|auto",
            "letter-spacing": "normal|<length-percentage>",
            "line-break": "auto|loose|normal|strict|anywhere",
            "line-clamp": "none|<integer>",
            "line-height": "normal|<number>|<length>|<percentage>",
            "line-height-step": "<length>",
            "list-style": "<'list-style-type'>||<'list-style-position'>||<'list-style-image'>",
            "list-style-image": "<image>|none",
            "list-style-position": "inside|outside",
            "list-style-type": "<counter-style>|<string>|none",
            "margin": "[<length>|<percentage>|auto]{1,4}",
            "margin-block": "<'margin-left'>{1,2}",
            "margin-block-end": "<'margin-left'>",
            "margin-block-start": "<'margin-left'>",
            "margin-bottom": "<length>|<percentage>|auto",
            "margin-inline": "<'margin-left'>{1,2}",
            "margin-inline-end": "<'margin-left'>",
            "margin-inline-start": "<'margin-left'>",
            "margin-left": "<length>|<percentage>|auto",
            "margin-right": "<length>|<percentage>|auto",
            "margin-top": "<length>|<percentage>|auto",
            "margin-trim": "none|in-flow|all",
            "mask": "<mask-layer>#",
            "mask-border": "<'mask-border-source'>||<'mask-border-slice'> [/ <'mask-border-width'>? [/ <'mask-border-outset'>]?]?||<'mask-border-repeat'>||<'mask-border-mode'>",
            "mask-border-mode": "luminance|alpha",
            "mask-border-outset": "[<length>|<number>]{1,4}",
            "mask-border-repeat": "[stretch|repeat|round|space]{1,2}",
            "mask-border-slice": "<number-percentage>{1,4} fill?",
            "mask-border-source": "none|<image>",
            "mask-border-width": "[<length-percentage>|<number>|auto]{1,4}",
            "mask-clip": "[<geometry-box>|no-clip]#",
            "mask-composite": "<compositing-operator>#",
            "mask-image": "<mask-reference>#",
            "mask-mode": "<masking-mode>#",
            "mask-origin": "<geometry-box>#",
            "mask-position": "<position>#",
            "mask-repeat": "<repeat-style>#",
            "mask-size": "<bg-size>#",
            "mask-type": "luminance|alpha",
            "masonry-auto-flow": "[pack|next]||[definite-first|ordered]",
            "math-depth": "auto-add|add( <integer> )|<integer>",
            "math-shift": "normal|compact",
            "math-style": "normal|compact",
            "max-block-size": "<'max-width'>",
            "max-height": "none|<length-percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )",
            "max-inline-size": "<'max-width'>",
            "max-lines": "none|<integer>",
            "max-width": "none|<length-percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )|<-non-standard-width>",
            "min-block-size": "<'min-width'>",
            "min-height": "auto|<length>|<percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )",
            "min-inline-size": "<'min-width'>",
            "min-width": "auto|<length>|<percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )|<-non-standard-width>",
            "mix-blend-mode": "<blend-mode>|plus-lighter",
            "object-fit": "fill|contain|cover|none|scale-down",
            "object-position": "<position>",
            "offset": "[<'offset-position'>? [<'offset-path'> [<'offset-distance'>||<'offset-rotate'>]?]?]! [/ <'offset-anchor'>]?",
            "offset-anchor": "auto|<position>",
            "offset-distance": "<length-percentage>",
            "offset-path": "none|ray( [<angle>&&<size>&&contain?] )|<path()>|<url>|[<basic-shape>||<geometry-box>]",
            "offset-position": "auto|<position>",
            "offset-rotate": "[auto|reverse]||<angle>",
            "opacity": "<alpha-value>",
            "order": "<integer>",
            "orphans": "<integer>",
            "outline": "[<'outline-color'>||<'outline-style'>||<'outline-width'>]",
            "outline-color": "<color>|invert",
            "outline-offset": "<length>",
            "outline-style": "auto|<'border-style'>",
            "outline-width": "<line-width>",
            "overflow": "[visible|hidden|clip|scroll|auto]{1,2}|<-non-standard-overflow>",
            "overflow-anchor": "auto|none",
            "overflow-block": "visible|hidden|clip|scroll|auto",
            "overflow-clip-box": "padding-box|content-box",
            "overflow-clip-margin": "<visual-box>||<length [0,∞]>",
            "overflow-inline": "visible|hidden|clip|scroll|auto",
            "overflow-wrap": "normal|break-word|anywhere",
            "overflow-x": "visible|hidden|clip|scroll|auto",
            "overflow-y": "visible|hidden|clip|scroll|auto",
            "overscroll-behavior": "[contain|none|auto]{1,2}",
            "overscroll-behavior-block": "contain|none|auto",
            "overscroll-behavior-inline": "contain|none|auto",
            "overscroll-behavior-x": "contain|none|auto",
            "overscroll-behavior-y": "contain|none|auto",
            "padding": "[<length>|<percentage>]{1,4}",
            "padding-block": "<'padding-left'>{1,2}",
            "padding-block-end": "<'padding-left'>",
            "padding-block-start": "<'padding-left'>",
            "padding-bottom": "<length>|<percentage>",
            "padding-inline": "<'padding-left'>{1,2}",
            "padding-inline-end": "<'padding-left'>",
            "padding-inline-start": "<'padding-left'>",
            "padding-left": "<length>|<percentage>",
            "padding-right": "<length>|<percentage>",
            "padding-top": "<length>|<percentage>",
            "page-break-after": "auto|always|avoid|left|right|recto|verso",
            "page-break-before": "auto|always|avoid|left|right|recto|verso",
            "page-break-inside": "auto|avoid",
            "paint-order": "normal|[fill||stroke||markers]",
            "perspective": "none|<length>",
            "perspective-origin": "<position>",
            "place-content": "<'align-content'> <'justify-content'>?",
            "place-items": "<'align-items'> <'justify-items'>?",
            "place-self": "<'align-self'> <'justify-self'>?",
            "pointer-events": "auto|none|visiblePainted|visibleFill|visibleStroke|visible|painted|fill|stroke|all|inherit",
            "position": "static|relative|absolute|sticky|fixed|-webkit-sticky",
            "quotes": "none|auto|[<string> <string>]+",
            "resize": "none|both|horizontal|vertical|block|inline",
            "right": "<length>|<percentage>|auto",
            "rotate": "none|<angle>|[x|y|z|<number>{3}]&&<angle>",
            "row-gap": "normal|<length-percentage>",
            "ruby-align": "start|center|space-between|space-around",
            "ruby-merge": "separate|collapse|auto",
            "ruby-position": "[alternate||[over|under]]|inter-character",
            "scale": "none|<number>{1,3}",
            "scrollbar-color": "auto|<color>{2}",
            "scrollbar-gutter": "auto|stable&&both-edges?",
            "scrollbar-width": "auto|thin|none",
            "scroll-behavior": "auto|smooth",
            "scroll-margin": "<length>{1,4}",
            "scroll-margin-block": "<length>{1,2}",
            "scroll-margin-block-start": "<length>",
            "scroll-margin-block-end": "<length>",
            "scroll-margin-bottom": "<length>",
            "scroll-margin-inline": "<length>{1,2}",
            "scroll-margin-inline-start": "<length>",
            "scroll-margin-inline-end": "<length>",
            "scroll-margin-left": "<length>",
            "scroll-margin-right": "<length>",
            "scroll-margin-top": "<length>",
            "scroll-padding": "[auto|<length-percentage>]{1,4}",
            "scroll-padding-block": "[auto|<length-percentage>]{1,2}",
            "scroll-padding-block-start": "auto|<length-percentage>",
            "scroll-padding-block-end": "auto|<length-percentage>",
            "scroll-padding-bottom": "auto|<length-percentage>",
            "scroll-padding-inline": "[auto|<length-percentage>]{1,2}",
            "scroll-padding-inline-start": "auto|<length-percentage>",
            "scroll-padding-inline-end": "auto|<length-percentage>",
            "scroll-padding-left": "auto|<length-percentage>",
            "scroll-padding-right": "auto|<length-percentage>",
            "scroll-padding-top": "auto|<length-percentage>",
            "scroll-snap-align": "[none|start|end|center]{1,2}",
            "scroll-snap-coordinate": "none|<position>#",
            "scroll-snap-destination": "<position>",
            "scroll-snap-points-x": "none|repeat( <length-percentage> )",
            "scroll-snap-points-y": "none|repeat( <length-percentage> )",
            "scroll-snap-stop": "normal|always",
            "scroll-snap-type": "none|[x|y|block|inline|both] [mandatory|proximity]?",
            "scroll-snap-type-x": "none|mandatory|proximity",
            "scroll-snap-type-y": "none|mandatory|proximity",
            "scroll-timeline": "<scroll-timeline-name>||<scroll-timeline-axis>",
            "scroll-timeline-axis": "block|inline|vertical|horizontal",
            "scroll-timeline-name": "none|<custom-ident>",
            "shape-image-threshold": "<alpha-value>",
            "shape-margin": "<length-percentage>",
            "shape-outside": "none|[<shape-box>||<basic-shape>]|<image>",
            "tab-size": "<integer>|<length>",
            "table-layout": "auto|fixed",
            "text-align": "start|end|left|right|center|justify|match-parent",
            "text-align-last": "auto|start|end|left|right|center|justify",
            "text-combine-upright": "none|all|[digits <integer>?]",
            "text-decoration": "<'text-decoration-line'>||<'text-decoration-style'>||<'text-decoration-color'>||<'text-decoration-thickness'>",
            "text-decoration-color": "<color>",
            "text-decoration-line": "none|[underline||overline||line-through||blink]|spelling-error|grammar-error",
            "text-decoration-skip": "none|[objects||[spaces|[leading-spaces||trailing-spaces]]||edges||box-decoration]",
            "text-decoration-skip-ink": "auto|all|none",
            "text-decoration-style": "solid|double|dotted|dashed|wavy",
            "text-decoration-thickness": "auto|from-font|<length>|<percentage>",
            "text-emphasis": "<'text-emphasis-style'>||<'text-emphasis-color'>",
            "text-emphasis-color": "<color>",
            "text-emphasis-position": "[over|under]&&[right|left]",
            "text-emphasis-style": "none|[[filled|open]||[dot|circle|double-circle|triangle|sesame]]|<string>",
            "text-indent": "<length-percentage>&&hanging?&&each-line?",
            "text-justify": "auto|inter-character|inter-word|none",
            "text-orientation": "mixed|upright|sideways",
            "text-overflow": "[clip|ellipsis|<string>]{1,2}",
            "text-rendering": "auto|optimizeSpeed|optimizeLegibility|geometricPrecision",
            "text-shadow": "none|<shadow-t>#",
            "text-size-adjust": "none|auto|<percentage>",
            "text-transform": "none|capitalize|uppercase|lowercase|full-width|full-size-kana",
            "text-underline-offset": "auto|<length>|<percentage>",
            "text-underline-position": "auto|from-font|[under||[left|right]]",
            "top": "<length>|<percentage>|auto",
            "touch-action": "auto|none|[[pan-x|pan-left|pan-right]||[pan-y|pan-up|pan-down]||pinch-zoom]|manipulation",
            "transform": "none|<transform-list>",
            "transform-box": "content-box|border-box|fill-box|stroke-box|view-box",
            "transform-origin": "[<length-percentage>|left|center|right|top|bottom]|[[<length-percentage>|left|center|right]&&[<length-percentage>|top|center|bottom]] <length>?",
            "transform-style": "flat|preserve-3d",
            "transition": "<single-transition>#",
            "transition-delay": "<time>#",
            "transition-duration": "<time>#",
            "transition-property": "none|<single-transition-property>#",
            "transition-timing-function": "<easing-function>#",
            "translate": "none|<length-percentage> [<length-percentage> <length>?]?",
            "unicode-bidi": "normal|embed|isolate|bidi-override|isolate-override|plaintext|-moz-isolate|-moz-isolate-override|-moz-plaintext|-webkit-isolate|-webkit-isolate-override|-webkit-plaintext",
            "user-select": "auto|text|none|contain|all",
            "vertical-align": "baseline|sub|super|text-top|text-bottom|middle|top|bottom|<percentage>|<length>",
            "visibility": "visible|hidden|collapse",
            "white-space": "normal|pre|nowrap|pre-wrap|pre-line|break-spaces",
            "widows": "<integer>",
            "width": "auto|<length>|<percentage>|min-content|max-content|fit-content|fit-content( <length-percentage> )|fill|stretch|intrinsic|-moz-max-content|-webkit-max-content|-moz-fit-content|-webkit-fit-content",
            "will-change": "auto|<animateable-feature>#",
            "word-break": "normal|break-all|keep-all|break-word",
            "word-spacing": "normal|<length>",
            "word-wrap": "normal|break-word",
            "writing-mode": "horizontal-tb|vertical-rl|vertical-lr|sideways-rl|sideways-lr|<svg-writing-mode>",
            "z-index": "auto|<integer>",
            "zoom": "normal|reset|<number>|<percentage>",
            "-moz-background-clip": "padding|border",
            "-moz-border-radius-bottomleft": "<'border-bottom-left-radius'>",
            "-moz-border-radius-bottomright": "<'border-bottom-right-radius'>",
            "-moz-border-radius-topleft": "<'border-top-left-radius'>",
            "-moz-border-radius-topright": "<'border-bottom-right-radius'>",
            "-moz-control-character-visibility": "visible|hidden",
            "-moz-osx-font-smoothing": "auto|grayscale",
            "-moz-user-select": "none|text|all|-moz-none",
            "-ms-flex-align": "start|end|center|baseline|stretch",
            "-ms-flex-item-align": "auto|start|end|center|baseline|stretch",
            "-ms-flex-line-pack": "start|end|center|justify|distribute|stretch",
            "-ms-flex-negative": "<'flex-shrink'>",
            "-ms-flex-pack": "start|end|center|justify|distribute",
            "-ms-flex-order": "<integer>",
            "-ms-flex-positive": "<'flex-grow'>",
            "-ms-flex-preferred-size": "<'flex-basis'>",
            "-ms-interpolation-mode": "nearest-neighbor|bicubic",
            "-ms-grid-column-align": "start|end|center|stretch",
            "-ms-grid-row-align": "start|end|center|stretch",
            "-ms-hyphenate-limit-last": "none|always|column|page|spread",
            "-webkit-background-clip": "[<box>|border|padding|content|text]#",
            "-webkit-column-break-after": "always|auto|avoid",
            "-webkit-column-break-before": "always|auto|avoid",
            "-webkit-column-break-inside": "always|auto|avoid",
            "-webkit-font-smoothing": "auto|none|antialiased|subpixel-antialiased",
            "-webkit-mask-box-image": "[<url>|<gradient>|none] [<length-percentage>{4} <-webkit-mask-box-repeat>{2}]?",
            "-webkit-print-color-adjust": "economy|exact",
            "-webkit-text-security": "none|circle|disc|square",
            "-webkit-user-drag": "none|element|auto",
            "-webkit-user-select": "auto|none|text|all",
            "alignment-baseline": "auto|baseline|before-edge|text-before-edge|middle|central|after-edge|text-after-edge|ideographic|alphabetic|hanging|mathematical",
            "baseline-shift": "baseline|sub|super|<svg-length>",
            "behavior": "<url>+",
            "clip-rule": "nonzero|evenodd",
            "cue": "<'cue-before'> <'cue-after'>?",
            "cue-after": "<url> <decibel>?|none",
            "cue-before": "<url> <decibel>?|none",
            "dominant-baseline": "auto|use-script|no-change|reset-size|ideographic|alphabetic|hanging|mathematical|central|middle|text-after-edge|text-before-edge",
            "fill": "<paint>",
            "fill-opacity": "<number-zero-one>",
            "fill-rule": "nonzero|evenodd",
            "glyph-orientation-horizontal": "<angle>",
            "glyph-orientation-vertical": "<angle>",
            "kerning": "auto|<svg-length>",
            "marker": "none|<url>",
            "marker-end": "none|<url>",
            "marker-mid": "none|<url>",
            "marker-start": "none|<url>",
            "pause": "<'pause-before'> <'pause-after'>?",
            "pause-after": "<time>|none|x-weak|weak|medium|strong|x-strong",
            "pause-before": "<time>|none|x-weak|weak|medium|strong|x-strong",
            "rest": "<'rest-before'> <'rest-after'>?",
            "rest-after": "<time>|none|x-weak|weak|medium|strong|x-strong",
            "rest-before": "<time>|none|x-weak|weak|medium|strong|x-strong",
            "shape-rendering": "auto|optimizeSpeed|crispEdges|geometricPrecision",
            "src": "[<url> [format( <string># )]?|local( <family-name> )]#",
            "speak": "auto|none|normal",
            "speak-as": "normal|spell-out||digits||[literal-punctuation|no-punctuation]",
            "stroke": "<paint>",
            "stroke-dasharray": "none|[<svg-length>+]#",
            "stroke-dashoffset": "<svg-length>",
            "stroke-linecap": "butt|round|square",
            "stroke-linejoin": "miter|round|bevel",
            "stroke-miterlimit": "<number-one-or-greater>",
            "stroke-opacity": "<number-zero-one>",
            "stroke-width": "<svg-length>",
            "text-anchor": "start|middle|end",
            "unicode-range": "<urange>#",
            "voice-balance": "<number>|left|center|right|leftwards|rightwards",
            "voice-duration": "auto|<time>",
            "voice-family": "[[<family-name>|<generic-voice>] ,]* [<family-name>|<generic-voice>]|preserve",
            "voice-pitch": "<frequency>&&absolute|[[x-low|low|medium|high|x-high]||[<frequency>|<semitones>|<percentage>]]",
            "voice-range": "<frequency>&&absolute|[[x-low|low|medium|high|x-high]||[<frequency>|<semitones>|<percentage>]]",
            "voice-rate": "[normal|x-slow|slow|medium|fast|x-fast]||<percentage>",
            "voice-stress": "normal|strong|moderate|none|reduced",
            "voice-volume": "silent|[[x-soft|soft|medium|loud|x-loud]||<decibel>]"
        },
        "atrules": {
            "charset": {
                "prelude": "<string>",
                "descriptors": null
            },
            "counter-style": {
                "prelude": "<counter-style-name>",
                "descriptors": {
                    "additive-symbols": "[<integer>&&<symbol>]#",
                    "fallback": "<counter-style-name>",
                    "negative": "<symbol> <symbol>?",
                    "pad": "<integer>&&<symbol>",
                    "prefix": "<symbol>",
                    "range": "[[<integer>|infinite]{2}]#|auto",
                    "speak-as": "auto|bullets|numbers|words|spell-out|<counter-style-name>",
                    "suffix": "<symbol>",
                    "symbols": "<symbol>+",
                    "system": "cyclic|numeric|alphabetic|symbolic|additive|[fixed <integer>?]|[extends <counter-style-name>]"
                }
            },
            "document": {
                "prelude": "[<url>|url-prefix( <string> )|domain( <string> )|media-document( <string> )|regexp( <string> )]#",
                "descriptors": null
            },
            "font-face": {
                "prelude": null,
                "descriptors": {
                    "ascent-override": "normal|<percentage>",
                    "descent-override": "normal|<percentage>",
                    "font-display": "[auto|block|swap|fallback|optional]",
                    "font-family": "<family-name>",
                    "font-feature-settings": "normal|<feature-tag-value>#",
                    "font-variation-settings": "normal|[<string> <number>]#",
                    "font-stretch": "<font-stretch-absolute>{1,2}",
                    "font-style": "normal|italic|oblique <angle>{0,2}",
                    "font-weight": "<font-weight-absolute>{1,2}",
                    "font-variant": "normal|none|[<common-lig-values>||<discretionary-lig-values>||<historical-lig-values>||<contextual-alt-values>||stylistic( <feature-value-name> )||historical-forms||styleset( <feature-value-name># )||character-variant( <feature-value-name># )||swash( <feature-value-name> )||ornaments( <feature-value-name> )||annotation( <feature-value-name> )||[small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps]||<numeric-figure-values>||<numeric-spacing-values>||<numeric-fraction-values>||ordinal||slashed-zero||<east-asian-variant-values>||<east-asian-width-values>||ruby]",
                    "line-gap-override": "normal|<percentage>",
                    "size-adjust": "<percentage>",
                    "src": "[<url> [format( <string># )]?|local( <family-name> )]#",
                    "unicode-range": "<urange>#"
                }
            },
            "font-feature-values": {
                "prelude": "<family-name>#",
                "descriptors": null
            },
            "import": {
                "prelude": "[<string>|<url>] [layer|layer( <layer-name> )]? [supports( [<supports-condition>|<declaration>] )]? <media-query-list>?",
                "descriptors": null
            },
            "keyframes": {
                "prelude": "<keyframes-name>",
                "descriptors": null
            },
            "layer": {
                "prelude": "[<layer-name>#|<layer-name>?]",
                "descriptors": null
            },
            "media": {
                "prelude": "<media-query-list>",
                "descriptors": null
            },
            "namespace": {
                "prelude": "<namespace-prefix>? [<string>|<url>]",
                "descriptors": null
            },
            "page": {
                "prelude": "<page-selector-list>",
                "descriptors": {
                    "bleed": "auto|<length>",
                    "marks": "none|[crop||cross]",
                    "size": "<length>{1,2}|auto|[<page-size>||[portrait|landscape]]"
                }
            },
            "property": {
                "prelude": "<custom-property-name>",
                "descriptors": {
                    "syntax": "<string>",
                    "inherits": "true|false",
                    "initial-value": "<string>"
                }
            },
            "scroll-timeline": {
                "prelude": "<timeline-name>",
                "descriptors": null
            },
            "supports": {
                "prelude": "<supports-condition>",
                "descriptors": null
            },
            "viewport": {
                "prelude": null,
                "descriptors": {
                    "height": "<viewport-length>{1,2}",
                    "max-height": "<viewport-length>",
                    "max-width": "<viewport-length>",
                    "max-zoom": "auto|<number>|<percentage>",
                    "min-height": "<viewport-length>",
                    "min-width": "<viewport-length>",
                    "min-zoom": "auto|<number>|<percentage>",
                    "orientation": "auto|portrait|landscape",
                    "user-zoom": "zoom|fixed",
                    "viewport-fit": "auto|contain|cover",
                    "width": "<viewport-length>{1,2}",
                    "zoom": "auto|<number>|<percentage>"
                }
            },
            "nest": {
                "prelude": "<complex-selector-list>",
                "descriptors": null
            }
        }
    };

    const PLUSSIGN$5 = 0x002B;    // U+002B PLUS SIGN (+)
    const HYPHENMINUS$2 = 0x002D; // U+002D HYPHEN-MINUS (-)
    const N = 0x006E;           // U+006E LATIN SMALL LETTER N (n)
    const DISALLOW_SIGN = true;
    const ALLOW_SIGN = false;

    function checkInteger(offset, disallowSign) {
        let pos = this.tokenStart + offset;
        const code = this.charCodeAt(pos);

        if (code === PLUSSIGN$5 || code === HYPHENMINUS$2) {
            if (disallowSign) {
                this.error('Number sign is not allowed');
            }
            pos++;
        }

        for (; pos < this.tokenEnd; pos++) {
            if (!isDigit(this.charCodeAt(pos))) {
                this.error('Integer is expected', pos);
            }
        }
    }

    function checkTokenIsInteger(disallowSign) {
        return checkInteger.call(this, 0, disallowSign);
    }

    function expectCharCode(offset, code) {
        if (!this.cmpChar(this.tokenStart + offset, code)) {
            let msg = '';

            switch (code) {
                case N:
                    msg = 'N is expected';
                    break;
                case HYPHENMINUS$2:
                    msg = 'HyphenMinus is expected';
                    break;
            }

            this.error(msg, this.tokenStart + offset);
        }
    }

    // ... <signed-integer>
    // ... ['+' | '-'] <signless-integer>
    function consumeB() {
        let offset = 0;
        let sign = 0;
        let type = this.tokenType;

        while (type === WhiteSpace$1 || type === Comment$1) {
            type = this.lookupType(++offset);
        }

        if (type !== Number$2) {
            if (this.isDelim(PLUSSIGN$5, offset) ||
                this.isDelim(HYPHENMINUS$2, offset)) {
                sign = this.isDelim(PLUSSIGN$5, offset) ? PLUSSIGN$5 : HYPHENMINUS$2;

                do {
                    type = this.lookupType(++offset);
                } while (type === WhiteSpace$1 || type === Comment$1);

                if (type !== Number$2) {
                    this.skip(offset);
                    checkTokenIsInteger.call(this, DISALLOW_SIGN);
                }
            } else {
                return null;
            }
        }

        if (offset > 0) {
            this.skip(offset);
        }

        if (sign === 0) {
            type = this.charCodeAt(this.tokenStart);
            if (type !== PLUSSIGN$5 && type !== HYPHENMINUS$2) {
                this.error('Number sign is expected');
            }
        }

        checkTokenIsInteger.call(this, sign !== 0);
        return sign === HYPHENMINUS$2 ? '-' + this.consume(Number$2) : this.consume(Number$2);
    }

    // An+B microsyntax https://www.w3.org/TR/css-syntax-3/#anb
    const name$F = 'AnPlusB';
    const structure$E = {
        a: [String, null],
        b: [String, null]
    };

    function parse$H() {
        /* eslint-disable brace-style*/
        const start = this.tokenStart;
        let a = null;
        let b = null;

        // <integer>
        if (this.tokenType === Number$2) {
            checkTokenIsInteger.call(this, ALLOW_SIGN);
            b = this.consume(Number$2);
        }

        // -n
        // -n <signed-integer>
        // -n ['+' | '-'] <signless-integer>
        // -n- <signless-integer>
        // <dashndashdigit-ident>
        else if (this.tokenType === Ident && this.cmpChar(this.tokenStart, HYPHENMINUS$2)) {
            a = '-1';

            expectCharCode.call(this, 1, N);

            switch (this.tokenEnd - this.tokenStart) {
                // -n
                // -n <signed-integer>
                // -n ['+' | '-'] <signless-integer>
                case 2:
                    this.next();
                    b = consumeB.call(this);
                    break;

                // -n- <signless-integer>
                case 3:
                    expectCharCode.call(this, 2, HYPHENMINUS$2);

                    this.next();
                    this.skipSC();

                    checkTokenIsInteger.call(this, DISALLOW_SIGN);

                    b = '-' + this.consume(Number$2);
                    break;

                // <dashndashdigit-ident>
                default:
                    expectCharCode.call(this, 2, HYPHENMINUS$2);
                    checkInteger.call(this, 3, DISALLOW_SIGN);
                    this.next();

                    b = this.substrToCursor(start + 2);
            }
        }

        // '+'? n
        // '+'? n <signed-integer>
        // '+'? n ['+' | '-'] <signless-integer>
        // '+'? n- <signless-integer>
        // '+'? <ndashdigit-ident>
        else if (this.tokenType === Ident || (this.isDelim(PLUSSIGN$5) && this.lookupType(1) === Ident)) {
            let sign = 0;
            a = '1';

            // just ignore a plus
            if (this.isDelim(PLUSSIGN$5)) {
                sign = 1;
                this.next();
            }

            expectCharCode.call(this, 0, N);

            switch (this.tokenEnd - this.tokenStart) {
                // '+'? n
                // '+'? n <signed-integer>
                // '+'? n ['+' | '-'] <signless-integer>
                case 1:
                    this.next();
                    b = consumeB.call(this);
                    break;

                // '+'? n- <signless-integer>
                case 2:
                    expectCharCode.call(this, 1, HYPHENMINUS$2);

                    this.next();
                    this.skipSC();

                    checkTokenIsInteger.call(this, DISALLOW_SIGN);

                    b = '-' + this.consume(Number$2);
                    break;

                // '+'? <ndashdigit-ident>
                default:
                    expectCharCode.call(this, 1, HYPHENMINUS$2);
                    checkInteger.call(this, 2, DISALLOW_SIGN);
                    this.next();

                    b = this.substrToCursor(start + sign + 1);
            }
        }

        // <ndashdigit-dimension>
        // <ndash-dimension> <signless-integer>
        // <n-dimension>
        // <n-dimension> <signed-integer>
        // <n-dimension> ['+' | '-'] <signless-integer>
        else if (this.tokenType === Dimension$1) {
            const code = this.charCodeAt(this.tokenStart);
            const sign = code === PLUSSIGN$5 || code === HYPHENMINUS$2;
            let i = this.tokenStart + sign;

            for (; i < this.tokenEnd; i++) {
                if (!isDigit(this.charCodeAt(i))) {
                    break;
                }
            }

            if (i === this.tokenStart + sign) {
                this.error('Integer is expected', this.tokenStart + sign);
            }

            expectCharCode.call(this, i - this.tokenStart, N);
            a = this.substring(start, i);

            // <n-dimension>
            // <n-dimension> <signed-integer>
            // <n-dimension> ['+' | '-'] <signless-integer>
            if (i + 1 === this.tokenEnd) {
                this.next();
                b = consumeB.call(this);
            } else {
                expectCharCode.call(this, i - this.tokenStart + 1, HYPHENMINUS$2);

                // <ndash-dimension> <signless-integer>
                if (i + 2 === this.tokenEnd) {
                    this.next();
                    this.skipSC();
                    checkTokenIsInteger.call(this, DISALLOW_SIGN);
                    b = '-' + this.consume(Number$2);
                }
                // <ndashdigit-dimension>
                else {
                    checkInteger.call(this, i - this.tokenStart + 2, DISALLOW_SIGN);
                    this.next();
                    b = this.substrToCursor(i + 1);
                }
            }
        } else {
            this.error();
        }

        if (a !== null && a.charCodeAt(0) === PLUSSIGN$5) {
            a = a.substr(1);
        }

        if (b !== null && b.charCodeAt(0) === PLUSSIGN$5) {
            b = b.substr(1);
        }

        return {
            type: 'AnPlusB',
            loc: this.getLocation(start, this.tokenStart),
            a,
            b
        };
    }

    function generate$F(node) {
        if (node.a) {
            const a =
                node.a === '+1' && 'n' ||
                node.a ===  '1' && 'n' ||
                node.a === '-1' && '-n' ||
                node.a + 'n';

            if (node.b) {
                const b = node.b[0] === '-' || node.b[0] === '+'
                    ? node.b
                    : '+' + node.b;
                this.tokenize(a + b);
            } else {
                this.tokenize(a);
            }
        } else {
            this.tokenize(node.b);
        }
    }

    var AnPlusB = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$F,
        structure: structure$E,
        parse: parse$H,
        generate: generate$F
    });

    function consumeRaw$5(startToken) {
        return this.Raw(startToken, this.consumeUntilLeftCurlyBracketOrSemicolon, true);
    }

    function isDeclarationBlockAtrule() {
        for (let offset = 1, type; type = this.lookupType(offset); offset++) {
            if (type === RightCurlyBracket) {
                return true;
            }

            if (type === LeftCurlyBracket ||
                type === AtKeyword) {
                return false;
            }
        }

        return false;
    }


    const name$E = 'Atrule';
    const walkContext$9 = 'atrule';
    const structure$D = {
        name: String,
        prelude: ['AtrulePrelude', 'Raw', null],
        block: ['Block', null]
    };

    function parse$G(isDeclaration = false) {
        const start = this.tokenStart;
        let name;
        let nameLowerCase;
        let prelude = null;
        let block = null;

        this.eat(AtKeyword);

        name = this.substrToCursor(start + 1);
        nameLowerCase = name.toLowerCase();
        this.skipSC();

        // parse prelude
        if (this.eof === false &&
            this.tokenType !== LeftCurlyBracket &&
            this.tokenType !== Semicolon) {
            if (this.parseAtrulePrelude) {
                prelude = this.parseWithFallback(this.AtrulePrelude.bind(this, name, isDeclaration), consumeRaw$5);
            } else {
                prelude = consumeRaw$5.call(this, this.tokenIndex);
            }

            this.skipSC();
        }

        switch (this.tokenType) {
            case Semicolon:
                this.next();
                break;

            case LeftCurlyBracket:
                if (hasOwnProperty.call(this.atrule, nameLowerCase) &&
                    typeof this.atrule[nameLowerCase].block === 'function') {
                    block = this.atrule[nameLowerCase].block.call(this, isDeclaration);
                } else {
                    // TODO: should consume block content as Raw?
                    block = this.Block(isDeclarationBlockAtrule.call(this));
                }

                break;
        }

        return {
            type: 'Atrule',
            loc: this.getLocation(start, this.tokenStart),
            name,
            prelude,
            block
        };
    }

    function generate$E(node) {
        this.token(AtKeyword, '@' + node.name);

        if (node.prelude !== null) {
            this.node(node.prelude);
        }

        if (node.block) {
            this.node(node.block);
        } else {
            this.token(Semicolon, ';');
        }
    }

    var Atrule = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$E,
        walkContext: walkContext$9,
        structure: structure$D,
        parse: parse$G,
        generate: generate$E
    });

    const name$D = 'AtrulePrelude';
    const walkContext$8 = 'atrulePrelude';
    const structure$C = {
        children: [[]]
    };

    function parse$F(name) {
        let children = null;

        if (name !== null) {
            name = name.toLowerCase();
        }

        this.skipSC();

        if (hasOwnProperty.call(this.atrule, name) &&
            typeof this.atrule[name].prelude === 'function') {
            // custom consumer
            children = this.atrule[name].prelude.call(this);
        } else {
            // default consumer
            children = this.readSequence(this.scope.AtrulePrelude);
        }

        this.skipSC();

        if (this.eof !== true &&
            this.tokenType !== LeftCurlyBracket &&
            this.tokenType !== Semicolon) {
            this.error('Semicolon or block is expected');
        }

        return {
            type: 'AtrulePrelude',
            loc: this.getLocationFromList(children),
            children
        };
    }

    function generate$D(node) {
        this.children(node);
    }

    var AtrulePrelude = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$D,
        walkContext: walkContext$8,
        structure: structure$C,
        parse: parse$F,
        generate: generate$D
    });

    const DOLLARSIGN$1 = 0x0024;       // U+0024 DOLLAR SIGN ($)
    const ASTERISK$5 = 0x002A;         // U+002A ASTERISK (*)
    const EQUALSSIGN = 0x003D;       // U+003D EQUALS SIGN (=)
    const CIRCUMFLEXACCENT = 0x005E; // U+005E (^)
    const VERTICALLINE$2 = 0x007C;     // U+007C VERTICAL LINE (|)
    const TILDE$2 = 0x007E;            // U+007E TILDE (~)

    function getAttributeName() {
        if (this.eof) {
            this.error('Unexpected end of input');
        }

        const start = this.tokenStart;
        let expectIdent = false;

        if (this.isDelim(ASTERISK$5)) {
            expectIdent = true;
            this.next();
        } else if (!this.isDelim(VERTICALLINE$2)) {
            this.eat(Ident);
        }

        if (this.isDelim(VERTICALLINE$2)) {
            if (this.charCodeAt(this.tokenStart + 1) !== EQUALSSIGN) {
                this.next();
                this.eat(Ident);
            } else if (expectIdent) {
                this.error('Identifier is expected', this.tokenEnd);
            }
        } else if (expectIdent) {
            this.error('Vertical line is expected');
        }

        return {
            type: 'Identifier',
            loc: this.getLocation(start, this.tokenStart),
            name: this.substrToCursor(start)
        };
    }

    function getOperator() {
        const start = this.tokenStart;
        const code = this.charCodeAt(start);

        if (code !== EQUALSSIGN &&        // =
            code !== TILDE$2 &&             // ~=
            code !== CIRCUMFLEXACCENT &&  // ^=
            code !== DOLLARSIGN$1 &&        // $=
            code !== ASTERISK$5 &&          // *=
            code !== VERTICALLINE$2         // |=
        ) {
            this.error('Attribute selector (=, ~=, ^=, $=, *=, |=) is expected');
        }

        this.next();

        if (code !== EQUALSSIGN) {
            if (!this.isDelim(EQUALSSIGN)) {
                this.error('Equal sign is expected');
            }

            this.next();
        }

        return this.substrToCursor(start);
    }

    // '[' <wq-name> ']'
    // '[' <wq-name> <attr-matcher> [ <string-token> | <ident-token> ] <attr-modifier>? ']'
    const name$C = 'AttributeSelector';
    const structure$B = {
        name: 'Identifier',
        matcher: [String, null],
        value: ['String', 'Identifier', null],
        flags: [String, null]
    };

    function parse$E() {
        const start = this.tokenStart;
        let name;
        let matcher = null;
        let value = null;
        let flags = null;

        this.eat(LeftSquareBracket);
        this.skipSC();

        name = getAttributeName.call(this);
        this.skipSC();

        if (this.tokenType !== RightSquareBracket) {
            // avoid case `[name i]`
            if (this.tokenType !== Ident) {
                matcher = getOperator.call(this);

                this.skipSC();

                value = this.tokenType === String$2
                    ? this.String()
                    : this.Identifier();

                this.skipSC();
            }

            // attribute flags
            if (this.tokenType === Ident) {
                flags = this.consume(Ident);

                this.skipSC();
            }
        }

        this.eat(RightSquareBracket);

        return {
            type: 'AttributeSelector',
            loc: this.getLocation(start, this.tokenStart),
            name,
            matcher,
            value,
            flags
        };
    }

    function generate$C(node) {
        this.token(Delim, '[');
        this.node(node.name);

        if (node.matcher !== null) {
            this.tokenize(node.matcher);
            this.node(node.value);
        }

        if (node.flags !== null) {
            this.token(Ident, node.flags);
        }

        this.token(Delim, ']');
    }

    var AttributeSelector = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$C,
        structure: structure$B,
        parse: parse$E,
        generate: generate$C
    });

    const AMPERSAND$4 = 0x0026;       // U+0026 AMPERSAND (&)

    function consumeRaw$4(startToken) {
        return this.Raw(startToken, null, true);
    }
    function consumeRule() {
        return this.parseWithFallback(this.Rule, consumeRaw$4);
    }
    function consumeRawDeclaration(startToken) {
        return this.Raw(startToken, this.consumeUntilSemicolonIncluded, true);
    }
    function consumeDeclaration() {
        if (this.tokenType === Semicolon) {
            return consumeRawDeclaration.call(this, this.tokenIndex);
        }

        const node = this.parseWithFallback(this.Declaration, consumeRawDeclaration);

        if (this.tokenType === Semicolon) {
            this.next();
        }

        return node;
    }

    const name$B = 'Block';
    const walkContext$7 = 'block';
    const structure$A = {
        children: [[
            'Atrule',
            'Rule',
            'Declaration'
        ]]
    };

    function parse$D(isStyleBlock) {
        const consumer = isStyleBlock ? consumeDeclaration : consumeRule;
        const start = this.tokenStart;
        let children = this.createList();

        this.eat(LeftCurlyBracket);

        scan:
        while (!this.eof) {
            switch (this.tokenType) {
                case RightCurlyBracket:
                    break scan;

                case WhiteSpace$1:
                case Comment$1:
                    this.next();
                    break;

                case AtKeyword:
                    children.push(this.parseWithFallback(this.Atrule.bind(this, isStyleBlock), consumeRaw$4));
                    break;

                default:
                    if (isStyleBlock && this.isDelim(AMPERSAND$4))  {
                        children.push(consumeRule.call(this));
                    } else {
                        children.push(consumer.call(this));
                    }
            }
        }

        if (!this.eof) {
            this.eat(RightCurlyBracket);
        }

        return {
            type: 'Block',
            loc: this.getLocation(start, this.tokenStart),
            children
        };
    }

    function generate$B(node) {
        this.token(LeftCurlyBracket, '{');
        this.children(node, prev => {
            if (prev.type === 'Declaration') {
                this.token(Semicolon, ';');
            }
        });
        this.token(RightCurlyBracket, '}');
    }

    var Block = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$B,
        walkContext: walkContext$7,
        structure: structure$A,
        parse: parse$D,
        generate: generate$B
    });

    const name$A = 'Brackets';
    const structure$z = {
        children: [[]]
    };

    function parse$C(readSequence, recognizer) {
        const start = this.tokenStart;
        let children = null;

        this.eat(LeftSquareBracket);

        children = readSequence.call(this, recognizer);

        if (!this.eof) {
            this.eat(RightSquareBracket);
        }

        return {
            type: 'Brackets',
            loc: this.getLocation(start, this.tokenStart),
            children
        };
    }

    function generate$A(node) {
        this.token(Delim, '[');
        this.children(node);
        this.token(Delim, ']');
    }

    var Brackets = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$A,
        structure: structure$z,
        parse: parse$C,
        generate: generate$A
    });

    const name$z = 'CDC';
    const structure$y = [];

    function parse$B() {
        const start = this.tokenStart;

        this.eat(CDC$1); // -->

        return {
            type: 'CDC',
            loc: this.getLocation(start, this.tokenStart)
        };
    }

    function generate$z() {
        this.token(CDC$1, '-->');
    }

    var CDC = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$z,
        structure: structure$y,
        parse: parse$B,
        generate: generate$z
    });

    const name$y = 'CDO';
    const structure$x = [];

    function parse$A() {
        const start = this.tokenStart;

        this.eat(CDO$1); // <!--

        return {
            type: 'CDO',
            loc: this.getLocation(start, this.tokenStart)
        };
    }

    function generate$y() {
        this.token(CDO$1, '<!--');
    }

    var CDO = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$y,
        structure: structure$x,
        parse: parse$A,
        generate: generate$y
    });

    const FULLSTOP$2 = 0x002E; // U+002E FULL STOP (.)

    // '.' ident
    const name$x = 'ClassSelector';
    const structure$w = {
        name: String
    };

    function parse$z() {
        this.eatDelim(FULLSTOP$2);

        return {
            type: 'ClassSelector',
            loc: this.getLocation(this.tokenStart - 1, this.tokenEnd),
            name: this.consume(Ident)
        };
    }

    function generate$x(node) {
        this.token(Delim, '.');
        this.token(Ident, node.name);
    }

    var ClassSelector = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$x,
        structure: structure$w,
        parse: parse$z,
        generate: generate$x
    });

    const PLUSSIGN$4 = 0x002B;        // U+002B PLUS SIGN (+)
    const SOLIDUS$5 = 0x002F;         // U+002F SOLIDUS (/)
    const GREATERTHANSIGN$1 = 0x003E; // U+003E GREATER-THAN SIGN (>)
    const TILDE$1 = 0x007E;           // U+007E TILDE (~)

    const name$w = 'Combinator';
    const structure$v = {
        name: String
    };

    // + | > | ~ | /deep/
    function parse$y() {
        const start = this.tokenStart;
        let name;

        switch (this.tokenType) {
            case WhiteSpace$1:
                name = ' ';
                break;

            case Delim:
                switch (this.charCodeAt(this.tokenStart)) {
                    case GREATERTHANSIGN$1:
                    case PLUSSIGN$4:
                    case TILDE$1:
                        this.next();
                        break;

                    case SOLIDUS$5:
                        this.next();
                        this.eatIdent('deep');
                        this.eatDelim(SOLIDUS$5);
                        break;

                    default:
                        this.error('Combinator is expected');
                }

                name = this.substrToCursor(start);
                break;
        }

        return {
            type: 'Combinator',
            loc: this.getLocation(start, this.tokenStart),
            name
        };
    }

    function generate$w(node) {
        this.tokenize(node.name);
    }

    var Combinator = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$w,
        structure: structure$v,
        parse: parse$y,
        generate: generate$w
    });

    const ASTERISK$4 = 0x002A;        // U+002A ASTERISK (*)
    const SOLIDUS$4 = 0x002F;         // U+002F SOLIDUS (/)


    const name$v = 'Comment';
    const structure$u = {
        value: String
    };

    function parse$x() {
        const start = this.tokenStart;
        let end = this.tokenEnd;

        this.eat(Comment$1);

        if ((end - start + 2) >= 2 &&
            this.charCodeAt(end - 2) === ASTERISK$4 &&
            this.charCodeAt(end - 1) === SOLIDUS$4) {
            end -= 2;
        }

        return {
            type: 'Comment',
            loc: this.getLocation(start, this.tokenStart),
            value: this.substring(start + 2, end)
        };
    }

    function generate$v(node) {
        this.token(Comment$1, '/*' + node.value + '*/');
    }

    var Comment = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$v,
        structure: structure$u,
        parse: parse$x,
        generate: generate$v
    });

    const EXCLAMATIONMARK$1 = 0x0021; // U+0021 EXCLAMATION MARK (!)
    const NUMBERSIGN$2 = 0x0023;      // U+0023 NUMBER SIGN (#)
    const DOLLARSIGN = 0x0024;      // U+0024 DOLLAR SIGN ($)
    const AMPERSAND$3 = 0x0026;       // U+0026 AMPERSAND (&)
    const ASTERISK$3 = 0x002A;        // U+002A ASTERISK (*)
    const PLUSSIGN$3 = 0x002B;        // U+002B PLUS SIGN (+)
    const SOLIDUS$3 = 0x002F;         // U+002F SOLIDUS (/)

    function consumeValueRaw(startToken) {
        return this.Raw(startToken, this.consumeUntilExclamationMarkOrSemicolon, true);
    }

    function consumeCustomPropertyRaw(startToken) {
        return this.Raw(startToken, this.consumeUntilExclamationMarkOrSemicolon, false);
    }

    function consumeValue() {
        const startValueToken = this.tokenIndex;
        const value = this.Value();

        if (value.type !== 'Raw' &&
            this.eof === false &&
            this.tokenType !== Semicolon &&
            this.isDelim(EXCLAMATIONMARK$1) === false &&
            this.isBalanceEdge(startValueToken) === false) {
            this.error();
        }

        return value;
    }

    const name$u = 'Declaration';
    const walkContext$6 = 'declaration';
    const structure$t = {
        important: [Boolean, String],
        property: String,
        value: ['Value', 'Raw']
    };

    function parse$w() {
        const start = this.tokenStart;
        const startToken = this.tokenIndex;
        const property = readProperty.call(this);
        const customProperty = isCustomProperty(property);
        const parseValue = customProperty ? this.parseCustomProperty : this.parseValue;
        const consumeRaw = customProperty ? consumeCustomPropertyRaw : consumeValueRaw;
        let important = false;
        let value;

        this.skipSC();
        this.eat(Colon);

        const valueStart = this.tokenIndex;

        if (!customProperty) {
            this.skipSC();
        }

        if (parseValue) {
            value = this.parseWithFallback(consumeValue, consumeRaw);
        } else {
            value = consumeRaw.call(this, this.tokenIndex);
        }

        if (customProperty && value.type === 'Value' && value.children.isEmpty) {
            for (let offset = valueStart - this.tokenIndex; offset <= 0; offset++) {
                if (this.lookupType(offset) === WhiteSpace$1) {
                    value.children.appendData({
                        type: 'WhiteSpace',
                        loc: null,
                        value: ' '
                    });
                    break;
                }
            }
        }

        if (this.isDelim(EXCLAMATIONMARK$1)) {
            important = getImportant.call(this);
            this.skipSC();
        }

        // Do not include semicolon to range per spec
        // https://drafts.csswg.org/css-syntax/#declaration-diagram

        if (this.eof === false &&
            this.tokenType !== Semicolon &&
            this.isBalanceEdge(startToken) === false) {
            this.error();
        }

        return {
            type: 'Declaration',
            loc: this.getLocation(start, this.tokenStart),
            important,
            property,
            value
        };
    }

    function generate$u(node) {
        this.token(Ident, node.property);
        this.token(Colon, ':');
        this.node(node.value);

        if (node.important) {
            this.token(Delim, '!');
            this.token(Ident, node.important === true ? 'important' : node.important);
        }
    }

    function readProperty() {
        const start = this.tokenStart;

        // hacks
        if (this.tokenType === Delim) {
            switch (this.charCodeAt(this.tokenStart)) {
                case ASTERISK$3:
                case DOLLARSIGN:
                case PLUSSIGN$3:
                case NUMBERSIGN$2:
                case AMPERSAND$3:
                    this.next();
                    break;

                // TODO: not sure we should support this hack
                case SOLIDUS$3:
                    this.next();
                    if (this.isDelim(SOLIDUS$3)) {
                        this.next();
                    }
                    break;
            }
        }

        if (this.tokenType === Hash$1) {
            this.eat(Hash$1);
        } else {
            this.eat(Ident);
        }

        return this.substrToCursor(start);
    }

    // ! ws* important
    function getImportant() {
        this.eat(Delim);
        this.skipSC();

        const important = this.consume(Ident);

        // store original value in case it differ from `important`
        // for better original source restoring and hacks like `!ie` support
        return important === 'important' ? true : important;
    }

    var Declaration = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$u,
        walkContext: walkContext$6,
        structure: structure$t,
        parse: parse$w,
        generate: generate$u
    });

    const AMPERSAND$2 = 0x0026;       // U+0026 AMPERSAND (&)

    function consumeRaw$3(startToken) {
        return this.Raw(startToken, this.consumeUntilSemicolonIncluded, true);
    }

    const name$t = 'DeclarationList';
    const structure$s = {
        children: [[
            'Declaration',
            'Atrule',
            'Rule'
        ]]
    };

    function parse$v() {
        const children = this.createList();

        while (!this.eof) {
            switch (this.tokenType) {
                case WhiteSpace$1:
                case Comment$1:
                case Semicolon:
                    this.next();
                    break;

                case AtKeyword:
                    children.push(this.parseWithFallback(this.Atrule.bind(this, true), consumeRaw$3));
                    break;

                default:
                    if (this.isDelim(AMPERSAND$2))  {
                        children.push(this.parseWithFallback(this.Rule, consumeRaw$3));
                    } else {
                        children.push(this.parseWithFallback(this.Declaration, consumeRaw$3));
                    }
            }
        }

        return {
            type: 'DeclarationList',
            loc: this.getLocationFromList(children),
            children
        };
    }

    function generate$t(node) {
        this.children(node, prev => {
            if (prev.type === 'Declaration') {
                this.token(Semicolon, ';');
            }
        });
    }

    var DeclarationList = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$t,
        structure: structure$s,
        parse: parse$v,
        generate: generate$t
    });

    const name$s = 'Dimension';
    const structure$r = {
        value: String,
        unit: String
    };

    function parse$u() {
        const start = this.tokenStart;
        const value = this.consumeNumber(Dimension$1);

        return {
            type: 'Dimension',
            loc: this.getLocation(start, this.tokenStart),
            value,
            unit: this.substring(start + value.length, this.tokenStart)
        };
    }

    function generate$s(node) {
        this.token(Dimension$1, node.value + node.unit);
    }

    var Dimension = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$s,
        structure: structure$r,
        parse: parse$u,
        generate: generate$s
    });

    const name$r = 'Function';
    const walkContext$5 = 'function';
    const structure$q = {
        name: String,
        children: [[]]
    };

    // <function-token> <sequence> )
    function parse$t(readSequence, recognizer) {
        const start = this.tokenStart;
        const name = this.consumeFunctionName();
        const nameLowerCase = name.toLowerCase();
        let children;

        children = recognizer.hasOwnProperty(nameLowerCase)
            ? recognizer[nameLowerCase].call(this, recognizer)
            : readSequence.call(this, recognizer);

        if (!this.eof) {
            this.eat(RightParenthesis);
        }

        return {
            type: 'Function',
            loc: this.getLocation(start, this.tokenStart),
            name,
            children
        };
    }

    function generate$r(node) {
        this.token(Function$1, node.name + '(');
        this.children(node);
        this.token(RightParenthesis, ')');
    }

    var Function = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$r,
        walkContext: walkContext$5,
        structure: structure$q,
        parse: parse$t,
        generate: generate$r
    });

    // '#' ident
    const xxx = 'XXX';
    const name$q = 'Hash';
    const structure$p = {
        value: String
    };
    function parse$s() {
        const start = this.tokenStart;

        this.eat(Hash$1);

        return {
            type: 'Hash',
            loc: this.getLocation(start, this.tokenStart),
            value: this.substrToCursor(start + 1)
        };
    }
    function generate$q(node) {
        this.token(Hash$1, '#' + node.value);
    }

    var Hash = /*#__PURE__*/Object.freeze({
        __proto__: null,
        xxx: xxx,
        name: name$q,
        structure: structure$p,
        parse: parse$s,
        generate: generate$q
    });

    const name$p = 'Identifier';
    const structure$o = {
        name: String
    };

    function parse$r() {
        return {
            type: 'Identifier',
            loc: this.getLocation(this.tokenStart, this.tokenEnd),
            name: this.consume(Ident)
        };
    }

    function generate$p(node) {
        this.token(Ident, node.name);
    }

    var Identifier = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$p,
        structure: structure$o,
        parse: parse$r,
        generate: generate$p
    });

    const name$o = 'IdSelector';
    const structure$n = {
        name: String
    };

    function parse$q() {
        const start = this.tokenStart;

        // TODO: check value is an ident
        this.eat(Hash$1);

        return {
            type: 'IdSelector',
            loc: this.getLocation(start, this.tokenStart),
            name: this.substrToCursor(start + 1)
        };
    }

    function generate$o(node) {
        // Using Delim instead of Hash is a hack to avoid for a whitespace between ident and id-selector
        // in safe mode (e.g. "a#id"), because IE11 doesn't allow a sequence <ident-token> <hash-token>
        // without a whitespace in values (e.g. "1px solid#000")
        this.token(Delim, '#' + node.name);
    }

    var IdSelector = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$o,
        structure: structure$n,
        parse: parse$q,
        generate: generate$o
    });

    const name$n = 'MediaFeature';
    const structure$m = {
        name: String,
        value: ['Identifier', 'Number', 'Dimension', 'Ratio', null]
    };

    function parse$p() {
        const start = this.tokenStart;
        let name;
        let value = null;

        this.eat(LeftParenthesis);
        this.skipSC();

        name = this.consume(Ident);
        this.skipSC();

        if (this.tokenType !== RightParenthesis) {
            this.eat(Colon);
            this.skipSC();

            switch (this.tokenType) {
                case Number$2:
                    if (this.lookupNonWSType(1) === Delim) {
                        value = this.Ratio();
                    } else {
                        value = this.Number();
                    }

                    break;

                case Dimension$1:
                    value = this.Dimension();
                    break;

                case Ident:
                    value = this.Identifier();
                    break;

                default:
                    this.error('Number, dimension, ratio or identifier is expected');
            }

            this.skipSC();
        }

        this.eat(RightParenthesis);

        return {
            type: 'MediaFeature',
            loc: this.getLocation(start, this.tokenStart),
            name,
            value
        };
    }

    function generate$n(node) {
        this.token(LeftParenthesis, '(');
        this.token(Ident, node.name);

        if (node.value !== null) {
            this.token(Colon, ':');
            this.node(node.value);
        }

        this.token(RightParenthesis, ')');
    }

    var MediaFeature = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$n,
        structure: structure$m,
        parse: parse$p,
        generate: generate$n
    });

    const name$m = 'MediaQuery';
    const structure$l = {
        children: [[
            'Identifier',
            'MediaFeature',
            'WhiteSpace'
        ]]
    };

    function parse$o() {
        const children = this.createList();
        let child = null;

        this.skipSC();

        scan:
        while (!this.eof) {
            switch (this.tokenType) {
                case Comment$1:
                case WhiteSpace$1:
                    this.next();
                    continue;

                case Ident:
                    child = this.Identifier();
                    break;

                case LeftParenthesis:
                    child = this.MediaFeature();
                    break;

                default:
                    break scan;
            }

            children.push(child);
        }

        if (child === null) {
            this.error('Identifier or parenthesis is expected');
        }

        return {
            type: 'MediaQuery',
            loc: this.getLocationFromList(children),
            children
        };
    }

    function generate$m(node) {
        this.children(node);
    }

    var MediaQuery = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$m,
        structure: structure$l,
        parse: parse$o,
        generate: generate$m
    });

    const name$l = 'MediaQueryList';
    const structure$k = {
        children: [[
            'MediaQuery'
        ]]
    };

    function parse$n() {
        const children = this.createList();

        this.skipSC();

        while (!this.eof) {
            children.push(this.MediaQuery());

            if (this.tokenType !== Comma) {
                break;
            }

            this.next();
        }

        return {
            type: 'MediaQueryList',
            loc: this.getLocationFromList(children),
            children
        };
    }

    function generate$l(node) {
        this.children(node, () => this.token(Comma, ','));
    }

    var MediaQueryList = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$l,
        structure: structure$k,
        parse: parse$n,
        generate: generate$l
    });

    const AMPERSAND$1 = 0x0026;       // U+0026 AMPERSAND (&)

    const name$k = 'NestingSelector';
    const structure$j = {
    };

    function parse$m() {
        const start = this.tokenStart;

        this.eatDelim(AMPERSAND$1);

        return {
            type: 'NestingSelector',
            loc: this.getLocation(start, this.tokenStart)
        };
    }

    function generate$k() {
        this.token(Delim, '&');
    }

    var NestingSelector = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$k,
        structure: structure$j,
        parse: parse$m,
        generate: generate$k
    });

    const name$j = 'Nth';
    const structure$i = {
        nth: ['AnPlusB', 'Identifier'],
        selector: ['SelectorList', null]
    };

    function parse$l() {
        this.skipSC();

        const start = this.tokenStart;
        let end = start;
        let selector = null;
        let nth;

        if (this.lookupValue(0, 'odd') || this.lookupValue(0, 'even')) {
            nth = this.Identifier();
        } else {
            nth = this.AnPlusB();
        }

        end = this.tokenStart;
        this.skipSC();

        if (this.lookupValue(0, 'of')) {
            this.next();

            selector = this.SelectorList();
            end = this.tokenStart;
        }

        return {
            type: 'Nth',
            loc: this.getLocation(start, end),
            nth,
            selector
        };
    }

    function generate$j(node) {
        this.node(node.nth);
        if (node.selector !== null) {
            this.token(Ident, 'of');
            this.node(node.selector);
        }
    }

    var Nth = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$j,
        structure: structure$i,
        parse: parse$l,
        generate: generate$j
    });

    const name$i = 'Number';
    const structure$h = {
        value: String
    };

    function parse$k() {
        return {
            type: 'Number',
            loc: this.getLocation(this.tokenStart, this.tokenEnd),
            value: this.consume(Number$2)
        };
    }

    function generate$i(node) {
        this.token(Number$2, node.value);
    }

    var Number$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$i,
        structure: structure$h,
        parse: parse$k,
        generate: generate$i
    });

    // '/' | '*' | ',' | ':' | '+' | '-'
    const name$h = 'Operator';
    const structure$g = {
        value: String
    };

    function parse$j() {
        const start = this.tokenStart;

        this.next();

        return {
            type: 'Operator',
            loc: this.getLocation(start, this.tokenStart),
            value: this.substrToCursor(start)
        };
    }

    function generate$h(node) {
        this.tokenize(node.value);
    }

    var Operator = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$h,
        structure: structure$g,
        parse: parse$j,
        generate: generate$h
    });

    const name$g = 'Parentheses';
    const structure$f = {
        children: [[]]
    };

    function parse$i(readSequence, recognizer) {
        const start = this.tokenStart;
        let children = null;

        this.eat(LeftParenthesis);

        children = readSequence.call(this, recognizer);

        if (!this.eof) {
            this.eat(RightParenthesis);
        }

        return {
            type: 'Parentheses',
            loc: this.getLocation(start, this.tokenStart),
            children
        };
    }

    function generate$g(node) {
        this.token(LeftParenthesis, '(');
        this.children(node);
        this.token(RightParenthesis, ')');
    }

    var Parentheses = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$g,
        structure: structure$f,
        parse: parse$i,
        generate: generate$g
    });

    const name$f = 'Percentage';
    const structure$e = {
        value: String
    };

    function parse$h() {
        return {
            type: 'Percentage',
            loc: this.getLocation(this.tokenStart, this.tokenEnd),
            value: this.consumeNumber(Percentage$1)
        };
    }

    function generate$f(node) {
        this.token(Percentage$1, node.value + '%');
    }

    var Percentage = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$f,
        structure: structure$e,
        parse: parse$h,
        generate: generate$f
    });

    const name$e = 'PseudoClassSelector';
    const walkContext$4 = 'function';
    const structure$d = {
        name: String,
        children: [['Raw'], null]
    };

    // : [ <ident> | <function-token> <any-value>? ) ]
    function parse$g() {
        const start = this.tokenStart;
        let children = null;
        let name;
        let nameLowerCase;

        this.eat(Colon);

        if (this.tokenType === Function$1) {
            name = this.consumeFunctionName();
            nameLowerCase = name.toLowerCase();

            if (hasOwnProperty.call(this.pseudo, nameLowerCase)) {
                this.skipSC();
                children = this.pseudo[nameLowerCase].call(this);
                this.skipSC();
            } else {
                children = this.createList();
                children.push(
                    this.Raw(this.tokenIndex, null, false)
                );
            }

            this.eat(RightParenthesis);
        } else {
            name = this.consume(Ident);
        }

        return {
            type: 'PseudoClassSelector',
            loc: this.getLocation(start, this.tokenStart),
            name,
            children
        };
    }

    function generate$e(node) {
        this.token(Colon, ':');

        if (node.children === null) {
            this.token(Ident, node.name);
        } else {
            this.token(Function$1, node.name + '(');
            this.children(node);
            this.token(RightParenthesis, ')');
        }
    }

    var PseudoClassSelector = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$e,
        walkContext: walkContext$4,
        structure: structure$d,
        parse: parse$g,
        generate: generate$e
    });

    const name$d = 'PseudoElementSelector';
    const walkContext$3 = 'function';
    const structure$c = {
        name: String,
        children: [['Raw'], null]
    };

    // :: [ <ident> | <function-token> <any-value>? ) ]
    function parse$f() {
        const start = this.tokenStart;
        let children = null;
        let name;
        let nameLowerCase;

        this.eat(Colon);
        this.eat(Colon);

        if (this.tokenType === Function$1) {
            name = this.consumeFunctionName();
            nameLowerCase = name.toLowerCase();

            if (hasOwnProperty.call(this.pseudo, nameLowerCase)) {
                this.skipSC();
                children = this.pseudo[nameLowerCase].call(this);
                this.skipSC();
            } else {
                children = this.createList();
                children.push(
                    this.Raw(this.tokenIndex, null, false)
                );
            }

            this.eat(RightParenthesis);
        } else {
            name = this.consume(Ident);
        }

        return {
            type: 'PseudoElementSelector',
            loc: this.getLocation(start, this.tokenStart),
            name,
            children
        };
    }

    function generate$d(node) {
        this.token(Colon, ':');
        this.token(Colon, ':');

        if (node.children === null) {
            this.token(Ident, node.name);
        } else {
            this.token(Function$1, node.name + '(');
            this.children(node);
            this.token(RightParenthesis, ')');
        }
    }

    var PseudoElementSelector = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$d,
        walkContext: walkContext$3,
        structure: structure$c,
        parse: parse$f,
        generate: generate$d
    });

    const SOLIDUS$2 = 0x002F;  // U+002F SOLIDUS (/)
    const FULLSTOP$1 = 0x002E; // U+002E FULL STOP (.)

    // Terms of <ratio> should be a positive numbers (not zero or negative)
    // (see https://drafts.csswg.org/mediaqueries-3/#values)
    // However, -o-min-device-pixel-ratio takes fractional values as a ratio's term
    // and this is using by various sites. Therefore we relax checking on parse
    // to test a term is unsigned number without an exponent part.
    // Additional checking may be applied on lexer validation.
    function consumeNumber() {
        this.skipSC();

        const value = this.consume(Number$2);

        for (let i = 0; i < value.length; i++) {
            const code = value.charCodeAt(i);
            if (!isDigit(code) && code !== FULLSTOP$1) {
                this.error('Unsigned number is expected', this.tokenStart - value.length + i);
            }
        }

        if (Number(value) === 0) {
            this.error('Zero number is not allowed', this.tokenStart - value.length);
        }

        return value;
    }

    const name$c = 'Ratio';
    const structure$b = {
        left: String,
        right: String
    };

    // <positive-integer> S* '/' S* <positive-integer>
    function parse$e() {
        const start = this.tokenStart;
        const left = consumeNumber.call(this);
        let right;

        this.skipSC();
        this.eatDelim(SOLIDUS$2);
        right = consumeNumber.call(this);

        return {
            type: 'Ratio',
            loc: this.getLocation(start, this.tokenStart),
            left,
            right
        };
    }

    function generate$c(node) {
        this.token(Number$2, node.left);
        this.token(Delim, '/');
        this.token(Number$2, node.right);
    }

    var Ratio = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$c,
        structure: structure$b,
        parse: parse$e,
        generate: generate$c
    });

    function getOffsetExcludeWS() {
        if (this.tokenIndex > 0) {
            if (this.lookupType(-1) === WhiteSpace$1) {
                return this.tokenIndex > 1
                    ? this.getTokenStart(this.tokenIndex - 1)
                    : this.firstCharOffset;
            }
        }

        return this.tokenStart;
    }

    const name$b = 'Raw';
    const structure$a = {
        value: String
    };

    function parse$d(startToken, consumeUntil, excludeWhiteSpace) {
        const startOffset = this.getTokenStart(startToken);
        let endOffset;

        this.skipUntilBalanced(startToken, consumeUntil || this.consumeUntilBalanceEnd);

        if (excludeWhiteSpace && this.tokenStart > startOffset) {
            endOffset = getOffsetExcludeWS.call(this);
        } else {
            endOffset = this.tokenStart;
        }

        return {
            type: 'Raw',
            loc: this.getLocation(startOffset, endOffset),
            value: this.substring(startOffset, endOffset)
        };
    }

    function generate$b(node) {
        this.tokenize(node.value);
    }

    var Raw = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$b,
        structure: structure$a,
        parse: parse$d,
        generate: generate$b
    });

    function consumeRaw$2(startToken) {
        return this.Raw(startToken, this.consumeUntilLeftCurlyBracket, true);
    }

    function consumePrelude() {
        const prelude = this.SelectorList();

        if (prelude.type !== 'Raw' &&
            this.eof === false &&
            this.tokenType !== LeftCurlyBracket) {
            this.error();
        }

        return prelude;
    }

    const name$a = 'Rule';
    const walkContext$2 = 'rule';
    const structure$9 = {
        prelude: ['SelectorList', 'Raw'],
        block: ['Block']
    };

    function parse$c() {
        const startToken = this.tokenIndex;
        const startOffset = this.tokenStart;
        let prelude;
        let block;

        if (this.parseRulePrelude) {
            prelude = this.parseWithFallback(consumePrelude, consumeRaw$2);
        } else {
            prelude = consumeRaw$2.call(this, startToken);
        }

        block = this.Block(true);

        return {
            type: 'Rule',
            loc: this.getLocation(startOffset, this.tokenStart),
            prelude,
            block
        };
    }
    function generate$a(node) {
        this.node(node.prelude);
        this.node(node.block);
    }

    var Rule = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$a,
        walkContext: walkContext$2,
        structure: structure$9,
        parse: parse$c,
        generate: generate$a
    });

    const name$9 = 'Selector';
    const structure$8 = {
        children: [[
            'TypeSelector',
            'IdSelector',
            'ClassSelector',
            'AttributeSelector',
            'PseudoClassSelector',
            'PseudoElementSelector',
            'Combinator',
            'WhiteSpace'
        ]]
    };

    function parse$b() {
        const children = this.readSequence(this.scope.Selector);

        // nothing were consumed
        if (this.getFirstListNode(children) === null) {
            this.error('Selector is expected');
        }

        return {
            type: 'Selector',
            loc: this.getLocationFromList(children),
            children
        };
    }

    function generate$9(node) {
        this.children(node);
    }

    var Selector$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$9,
        structure: structure$8,
        parse: parse$b,
        generate: generate$9
    });

    const name$8 = 'SelectorList';
    const walkContext$1 = 'selector';
    const structure$7 = {
        children: [[
            'Selector',
            'Raw'
        ]]
    };

    function parse$a() {
        const children = this.createList();

        while (!this.eof) {
            children.push(this.Selector());

            if (this.tokenType === Comma) {
                this.next();
                continue;
            }

            break;
        }

        return {
            type: 'SelectorList',
            loc: this.getLocationFromList(children),
            children
        };
    }

    function generate$8(node) {
        this.children(node, () => this.token(Comma, ','));
    }

    var SelectorList = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$8,
        walkContext: walkContext$1,
        structure: structure$7,
        parse: parse$a,
        generate: generate$8
    });

    const REVERSE_SOLIDUS$1 = 0x005c; // U+005C REVERSE SOLIDUS (\)
    const QUOTATION_MARK$1 = 0x0022;  // "
    const APOSTROPHE$1 = 0x0027;      // '

    function decode$1(str) {
        const len = str.length;
        const firstChar = str.charCodeAt(0);
        const start = firstChar === QUOTATION_MARK$1 || firstChar === APOSTROPHE$1 ? 1 : 0;
        const end = start === 1 && len > 1 && str.charCodeAt(len - 1) === firstChar ? len - 2 : len - 1;
        let decoded = '';

        for (let i = start; i <= end; i++) {
            let code = str.charCodeAt(i);

            if (code === REVERSE_SOLIDUS$1) {
                // special case at the ending
                if (i === end) {
                    // if the next input code point is EOF, do nothing
                    // otherwise include last quote as escaped
                    if (i !== len - 1) {
                        decoded = str.substr(i + 1);
                    }
                    break;
                }

                code = str.charCodeAt(++i);

                // consume escaped
                if (isValidEscape(REVERSE_SOLIDUS$1, code)) {
                    const escapeStart = i - 1;
                    const escapeEnd = consumeEscaped(str, escapeStart);

                    i = escapeEnd - 1;
                    decoded += decodeEscaped(str.substring(escapeStart + 1, escapeEnd));
                } else {
                    // \r\n
                    if (code === 0x000d && str.charCodeAt(i + 1) === 0x000a) {
                        i++;
                    }
                }
            } else {
                decoded += str[i];
            }
        }

        return decoded;
    }

    // https://drafts.csswg.org/cssom/#serialize-a-string
    // § 2.1. Common Serializing Idioms
    function encode$2(str, apostrophe) {
        const quote = apostrophe ? '\'' : '"';
        const quoteCode = apostrophe ? APOSTROPHE$1 : QUOTATION_MARK$1;
        let encoded = '';
        let wsBeforeHexIsNeeded = false;

        for (let i = 0; i < str.length; i++) {
            const code = str.charCodeAt(i);

            // If the character is NULL (U+0000), then the REPLACEMENT CHARACTER (U+FFFD).
            if (code === 0x0000) {
                encoded += '\uFFFD';
                continue;
            }

            // If the character is in the range [\1-\1f] (U+0001 to U+001F) or is U+007F,
            // the character escaped as code point.
            // Note: Do not compare with 0x0001 since 0x0000 is precessed before
            if (code <= 0x001f || code === 0x007F) {
                encoded += '\\' + code.toString(16);
                wsBeforeHexIsNeeded = true;
                continue;
            }

            // If the character is '"' (U+0022) or "\" (U+005C), the escaped character.
            if (code === quoteCode || code === REVERSE_SOLIDUS$1) {
                encoded += '\\' + str.charAt(i);
                wsBeforeHexIsNeeded = false;
            } else {
                if (wsBeforeHexIsNeeded && (isHexDigit(code) || isWhiteSpace(code))) {
                    encoded += ' ';
                }

                // Otherwise, the character itself.
                encoded += str.charAt(i);
                wsBeforeHexIsNeeded = false;
            }
        }

        return quote + encoded + quote;
    }

    const name$7 = 'String';
    const structure$6 = {
        value: String
    };

    function parse$9() {
        return {
            type: 'String',
            loc: this.getLocation(this.tokenStart, this.tokenEnd),
            value: decode$1(this.consume(String$2))
        };
    }

    function generate$7(node) {
        this.token(String$2, encode$2(node.value));
    }

    var String$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$7,
        structure: structure$6,
        parse: parse$9,
        generate: generate$7
    });

    const EXCLAMATIONMARK = 0x0021; // U+0021 EXCLAMATION MARK (!)

    function consumeRaw$1(startToken) {
        return this.Raw(startToken, null, false);
    }

    const name$6 = 'StyleSheet';
    const walkContext = 'stylesheet';
    const structure$5 = {
        children: [[
            'Comment',
            'CDO',
            'CDC',
            'Atrule',
            'Rule',
            'Raw'
        ]]
    };

    function parse$8() {
        const start = this.tokenStart;
        const children = this.createList();
        let child;

        while (!this.eof) {
            switch (this.tokenType) {
                case WhiteSpace$1:
                    this.next();
                    continue;

                case Comment$1:
                    // ignore comments except exclamation comments (i.e. /*! .. */) on top level
                    if (this.charCodeAt(this.tokenStart + 2) !== EXCLAMATIONMARK) {
                        this.next();
                        continue;
                    }

                    child = this.Comment();
                    break;

                case CDO$1: // <!--
                    child = this.CDO();
                    break;

                case CDC$1: // -->
                    child = this.CDC();
                    break;

                // CSS Syntax Module Level 3
                // §2.2 Error handling
                // At the "top level" of a stylesheet, an <at-keyword-token> starts an at-rule.
                case AtKeyword:
                    child = this.parseWithFallback(this.Atrule, consumeRaw$1);
                    break;

                // Anything else starts a qualified rule ...
                default:
                    child = this.parseWithFallback(this.Rule, consumeRaw$1);
            }

            children.push(child);
        }

        return {
            type: 'StyleSheet',
            loc: this.getLocation(start, this.tokenStart),
            children
        };
    }

    function generate$6(node) {
        this.children(node);
    }

    var StyleSheet = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$6,
        walkContext: walkContext,
        structure: structure$5,
        parse: parse$8,
        generate: generate$6
    });

    const ASTERISK$2 = 0x002A;     // U+002A ASTERISK (*)
    const VERTICALLINE$1 = 0x007C; // U+007C VERTICAL LINE (|)

    function eatIdentifierOrAsterisk() {
        if (this.tokenType !== Ident &&
            this.isDelim(ASTERISK$2) === false) {
            this.error('Identifier or asterisk is expected');
        }

        this.next();
    }

    const name$5 = 'TypeSelector';
    const structure$4 = {
        name: String
    };

    // ident
    // ident|ident
    // ident|*
    // *
    // *|ident
    // *|*
    // |ident
    // |*
    function parse$7() {
        const start = this.tokenStart;

        if (this.isDelim(VERTICALLINE$1)) {
            this.next();
            eatIdentifierOrAsterisk.call(this);
        } else {
            eatIdentifierOrAsterisk.call(this);

            if (this.isDelim(VERTICALLINE$1)) {
                this.next();
                eatIdentifierOrAsterisk.call(this);
            }
        }

        return {
            type: 'TypeSelector',
            loc: this.getLocation(start, this.tokenStart),
            name: this.substrToCursor(start)
        };
    }

    function generate$5(node) {
        this.tokenize(node.name);
    }

    var TypeSelector = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$5,
        structure: structure$4,
        parse: parse$7,
        generate: generate$5
    });

    const PLUSSIGN$2 = 0x002B;     // U+002B PLUS SIGN (+)
    const HYPHENMINUS$1 = 0x002D;  // U+002D HYPHEN-MINUS (-)
    const QUESTIONMARK = 0x003F; // U+003F QUESTION MARK (?)

    function eatHexSequence(offset, allowDash) {
        let len = 0;

        for (let pos = this.tokenStart + offset; pos < this.tokenEnd; pos++) {
            const code = this.charCodeAt(pos);

            if (code === HYPHENMINUS$1 && allowDash && len !== 0) {
                eatHexSequence.call(this, offset + len + 1, false);
                return -1;
            }

            if (!isHexDigit(code)) {
                this.error(
                    allowDash && len !== 0
                        ? 'Hyphen minus' + (len < 6 ? ' or hex digit' : '') + ' is expected'
                        : (len < 6 ? 'Hex digit is expected' : 'Unexpected input'),
                    pos
                );
            }

            if (++len > 6) {
                this.error('Too many hex digits', pos);
            }    }

        this.next();
        return len;
    }

    function eatQuestionMarkSequence(max) {
        let count = 0;

        while (this.isDelim(QUESTIONMARK)) {
            if (++count > max) {
                this.error('Too many question marks');
            }

            this.next();
        }
    }

    function startsWith(code) {
        if (this.charCodeAt(this.tokenStart) !== code) {
            this.error((code === PLUSSIGN$2 ? 'Plus sign' : 'Hyphen minus') + ' is expected');
        }
    }

    // https://drafts.csswg.org/css-syntax/#urange
    // Informally, the <urange> production has three forms:
    // U+0001
    //      Defines a range consisting of a single code point, in this case the code point "1".
    // U+0001-00ff
    //      Defines a range of codepoints between the first and the second value, in this case
    //      the range between "1" and "ff" (255 in decimal) inclusive.
    // U+00??
    //      Defines a range of codepoints where the "?" characters range over all hex digits,
    //      in this case defining the same as the value U+0000-00ff.
    // In each form, a maximum of 6 digits is allowed for each hexadecimal number (if you treat "?" as a hexadecimal digit).
    //
    // <urange> =
    //   u '+' <ident-token> '?'* |
    //   u <dimension-token> '?'* |
    //   u <number-token> '?'* |
    //   u <number-token> <dimension-token> |
    //   u <number-token> <number-token> |
    //   u '+' '?'+
    function scanUnicodeRange() {
        let hexLength = 0;

        switch (this.tokenType) {
            case Number$2:
                // u <number-token> '?'*
                // u <number-token> <dimension-token>
                // u <number-token> <number-token>
                hexLength = eatHexSequence.call(this, 1, true);

                if (this.isDelim(QUESTIONMARK)) {
                    eatQuestionMarkSequence.call(this, 6 - hexLength);
                    break;
                }

                if (this.tokenType === Dimension$1 ||
                    this.tokenType === Number$2) {
                    startsWith.call(this, HYPHENMINUS$1);
                    eatHexSequence.call(this, 1, false);
                    break;
                }

                break;

            case Dimension$1:
                // u <dimension-token> '?'*
                hexLength = eatHexSequence.call(this, 1, true);

                if (hexLength > 0) {
                    eatQuestionMarkSequence.call(this, 6 - hexLength);
                }

                break;

            default:
                // u '+' <ident-token> '?'*
                // u '+' '?'+
                this.eatDelim(PLUSSIGN$2);

                if (this.tokenType === Ident) {
                    hexLength = eatHexSequence.call(this, 0, true);
                    if (hexLength > 0) {
                        eatQuestionMarkSequence.call(this, 6 - hexLength);
                    }
                    break;
                }

                if (this.isDelim(QUESTIONMARK)) {
                    this.next();
                    eatQuestionMarkSequence.call(this, 5);
                    break;
                }

                this.error('Hex digit or question mark is expected');
        }
    }

    const name$4 = 'UnicodeRange';
    const structure$3 = {
        value: String
    };

    function parse$6() {
        const start = this.tokenStart;

        // U or u
        this.eatIdent('u');
        scanUnicodeRange.call(this);

        return {
            type: 'UnicodeRange',
            loc: this.getLocation(start, this.tokenStart),
            value: this.substrToCursor(start)
        };
    }

    function generate$4(node) {
        this.tokenize(node.value);
    }

    var UnicodeRange = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$4,
        structure: structure$3,
        parse: parse$6,
        generate: generate$4
    });

    const SPACE$1 = 0x0020;            // U+0020 SPACE
    const REVERSE_SOLIDUS = 0x005c;  // U+005C REVERSE SOLIDUS (\)
    const QUOTATION_MARK = 0x0022;   // "
    const APOSTROPHE = 0x0027;       // '
    const LEFTPARENTHESIS = 0x0028;  // U+0028 LEFT PARENTHESIS (()
    const RIGHTPARENTHESIS = 0x0029; // U+0029 RIGHT PARENTHESIS ())

    function decode(str) {
        const len = str.length;
        let start = 4; // length of "url("
        let end = str.charCodeAt(len - 1) === RIGHTPARENTHESIS ? len - 2 : len - 1;
        let decoded = '';

        while (start < end && isWhiteSpace(str.charCodeAt(start))) {
            start++;
        }

        while (start < end && isWhiteSpace(str.charCodeAt(end))) {
            end--;
        }

        for (let i = start; i <= end; i++) {
            let code = str.charCodeAt(i);

            if (code === REVERSE_SOLIDUS) {
                // special case at the ending
                if (i === end) {
                    // if the next input code point is EOF, do nothing
                    // otherwise include last left parenthesis as escaped
                    if (i !== len - 1) {
                        decoded = str.substr(i + 1);
                    }
                    break;
                }

                code = str.charCodeAt(++i);

                // consume escaped
                if (isValidEscape(REVERSE_SOLIDUS, code)) {
                    const escapeStart = i - 1;
                    const escapeEnd = consumeEscaped(str, escapeStart);

                    i = escapeEnd - 1;
                    decoded += decodeEscaped(str.substring(escapeStart + 1, escapeEnd));
                } else {
                    // \r\n
                    if (code === 0x000d && str.charCodeAt(i + 1) === 0x000a) {
                        i++;
                    }
                }
            } else {
                decoded += str[i];
            }
        }

        return decoded;
    }

    function encode$1(str) {
        let encoded = '';
        let wsBeforeHexIsNeeded = false;

        for (let i = 0; i < str.length; i++) {
            const code = str.charCodeAt(i);

            // If the character is NULL (U+0000), then the REPLACEMENT CHARACTER (U+FFFD).
            if (code === 0x0000) {
                encoded += '\uFFFD';
                continue;
            }

            // If the character is in the range [\1-\1f] (U+0001 to U+001F) or is U+007F,
            // the character escaped as code point.
            // Note: Do not compare with 0x0001 since 0x0000 is precessed before
            if (code <= 0x001f || code === 0x007F) {
                encoded += '\\' + code.toString(16);
                wsBeforeHexIsNeeded = true;
                continue;
            }

            if (code === SPACE$1 ||
                code === REVERSE_SOLIDUS ||
                code === QUOTATION_MARK ||
                code === APOSTROPHE ||
                code === LEFTPARENTHESIS ||
                code === RIGHTPARENTHESIS) {
                encoded += '\\' + str.charAt(i);
                wsBeforeHexIsNeeded = false;
            } else {
                if (wsBeforeHexIsNeeded && isHexDigit(code)) {
                    encoded += ' ';
                }

                encoded += str.charAt(i);
                wsBeforeHexIsNeeded = false;
            }
        }

        return 'url(' + encoded + ')';
    }

    const name$3 = 'Url';
    const structure$2 = {
        value: String
    };

    // <url-token> | <function-token> <string> )
    function parse$5() {
        const start = this.tokenStart;
        let value;

        switch (this.tokenType) {
            case Url$2:
                value = decode(this.consume(Url$2));
                break;

            case Function$1:
                if (!this.cmpStr(this.tokenStart, this.tokenEnd, 'url(')) {
                    this.error('Function name must be `url`');
                }

                this.eat(Function$1);
                this.skipSC();
                value = decode$1(this.consume(String$2));
                this.skipSC();
                if (!this.eof) {
                    this.eat(RightParenthesis);
                }
                break;

            default:
                this.error('Url or Function is expected');
        }

        return {
            type: 'Url',
            loc: this.getLocation(start, this.tokenStart),
            value
        };
    }

    function generate$3(node) {
        this.token(Url$2, encode$1(node.value));
    }

    var Url$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$3,
        structure: structure$2,
        parse: parse$5,
        generate: generate$3
    });

    const name$2 = 'Value';
    const structure$1 = {
        children: [[]]
    };

    function parse$4() {
        const start = this.tokenStart;
        const children = this.readSequence(this.scope.Value);

        return {
            type: 'Value',
            loc: this.getLocation(start, this.tokenStart),
            children
        };
    }

    function generate$2(node) {
        this.children(node);
    }

    var Value = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$2,
        structure: structure$1,
        parse: parse$4,
        generate: generate$2
    });

    const SPACE = Object.freeze({
        type: 'WhiteSpace',
        loc: null,
        value: ' '
    });

    const name$1 = 'WhiteSpace';
    const structure = {
        value: String
    };

    function parse$3() {
        this.eat(WhiteSpace$1);
        return SPACE;

        // return {
        //     type: 'WhiteSpace',
        //     loc: this.getLocation(this.tokenStart, this.tokenEnd),
        //     value: this.consume(WHITESPACE)
        // };
    }

    function generate$1(node) {
        this.token(WhiteSpace$1, node.value);
    }

    var WhiteSpace = /*#__PURE__*/Object.freeze({
        __proto__: null,
        name: name$1,
        structure: structure,
        parse: parse$3,
        generate: generate$1
    });

    var node$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AnPlusB: AnPlusB,
        Atrule: Atrule,
        AtrulePrelude: AtrulePrelude,
        AttributeSelector: AttributeSelector,
        Block: Block,
        Brackets: Brackets,
        CDC: CDC,
        CDO: CDO,
        ClassSelector: ClassSelector,
        Combinator: Combinator,
        Comment: Comment,
        Declaration: Declaration,
        DeclarationList: DeclarationList,
        Dimension: Dimension,
        Function: Function,
        Hash: Hash,
        Identifier: Identifier,
        IdSelector: IdSelector,
        MediaFeature: MediaFeature,
        MediaQuery: MediaQuery,
        MediaQueryList: MediaQueryList,
        NestingSelector: NestingSelector,
        Nth: Nth,
        Number: Number$1,
        Operator: Operator,
        Parentheses: Parentheses,
        Percentage: Percentage,
        PseudoClassSelector: PseudoClassSelector,
        PseudoElementSelector: PseudoElementSelector,
        Ratio: Ratio,
        Raw: Raw,
        Rule: Rule,
        Selector: Selector$1,
        SelectorList: SelectorList,
        String: String$1,
        StyleSheet: StyleSheet,
        TypeSelector: TypeSelector,
        UnicodeRange: UnicodeRange,
        Url: Url$1,
        Value: Value,
        WhiteSpace: WhiteSpace
    });

    var lexerConfig = {
        generic: true,
        ...definitions,
        node: node$1
    };

    const NUMBERSIGN$1 = 0x0023;  // U+0023 NUMBER SIGN (#)
    const ASTERISK$1 = 0x002A;    // U+002A ASTERISK (*)
    const PLUSSIGN$1 = 0x002B;    // U+002B PLUS SIGN (+)
    const HYPHENMINUS = 0x002D; // U+002D HYPHEN-MINUS (-)
    const SOLIDUS$1 = 0x002F;     // U+002F SOLIDUS (/)
    const U = 0x0075;           // U+0075 LATIN SMALL LETTER U (u)

    function defaultRecognizer(context) {
        switch (this.tokenType) {
            case Hash$1:
                return this.Hash();

            case Comma:
                return this.Operator();

            case LeftParenthesis:
                return this.Parentheses(this.readSequence, context.recognizer);

            case LeftSquareBracket:
                return this.Brackets(this.readSequence, context.recognizer);

            case String$2:
                return this.String();

            case Dimension$1:
                return this.Dimension();

            case Percentage$1:
                return this.Percentage();

            case Number$2:
                return this.Number();

            case Function$1:
                return this.cmpStr(this.tokenStart, this.tokenEnd, 'url(')
                    ? this.Url()
                    : this.Function(this.readSequence, context.recognizer);

            case Url$2:
                return this.Url();

            case Ident:
                // check for unicode range, it should start with u+ or U+
                if (this.cmpChar(this.tokenStart, U) &&
                    this.cmpChar(this.tokenStart + 1, PLUSSIGN$1)) {
                    return this.UnicodeRange();
                } else {
                    return this.Identifier();
                }

            case Delim: {
                const code = this.charCodeAt(this.tokenStart);

                if (code === SOLIDUS$1 ||
                    code === ASTERISK$1 ||
                    code === PLUSSIGN$1 ||
                    code === HYPHENMINUS) {
                    return this.Operator(); // TODO: replace with Delim
                }

                // TODO: produce a node with Delim node type

                if (code === NUMBERSIGN$1) {
                    this.error('Hex or identifier is expected', this.tokenStart + 1);
                }

                break;
            }
        }
    }

    var atrulePrelude = {
        getNode: defaultRecognizer
    };

    const NUMBERSIGN = 0x0023;      // U+0023 NUMBER SIGN (#)
    const AMPERSAND = 0x0026;       // U+0026 AMPERSAND (&)
    const ASTERISK = 0x002A;        // U+002A ASTERISK (*)
    const PLUSSIGN = 0x002B;        // U+002B PLUS SIGN (+)
    const SOLIDUS = 0x002F;         // U+002F SOLIDUS (/)
    const FULLSTOP = 0x002E;        // U+002E FULL STOP (.)
    const GREATERTHANSIGN = 0x003E; // U+003E GREATER-THAN SIGN (>)
    const VERTICALLINE = 0x007C;    // U+007C VERTICAL LINE (|)
    const TILDE = 0x007E;           // U+007E TILDE (~)

    function onWhiteSpace(next, children) {
        if (children.last !== null && children.last.type !== 'Combinator' &&
            next !== null && next.type !== 'Combinator') {
            children.push({  // FIXME: this.Combinator() should be used instead
                type: 'Combinator',
                loc: null,
                name: ' '
            });
        }
    }

    function getNode() {
        switch (this.tokenType) {
            case LeftSquareBracket:
                return this.AttributeSelector();

            case Hash$1:
                return this.IdSelector();

            case Colon:
                if (this.lookupType(1) === Colon) {
                    return this.PseudoElementSelector();
                } else {
                    return this.PseudoClassSelector();
                }

            case Ident:
                return this.TypeSelector();

            case Number$2:
            case Percentage$1:
                return this.Percentage();

            case Dimension$1:
                // throws when .123ident
                if (this.charCodeAt(this.tokenStart) === FULLSTOP) {
                    this.error('Identifier is expected', this.tokenStart + 1);
                }
                break;

            case Delim: {
                const code = this.charCodeAt(this.tokenStart);

                switch (code) {
                    case PLUSSIGN:
                    case GREATERTHANSIGN:
                    case TILDE:
                    case SOLIDUS:  // /deep/
                        return this.Combinator();

                    case FULLSTOP:
                        return this.ClassSelector();

                    case ASTERISK:
                    case VERTICALLINE:
                        return this.TypeSelector();

                    case NUMBERSIGN:
                        return this.IdSelector();

                    case AMPERSAND:
                        return this.NestingSelector();
                }

                break;
            }
        }
    }
    var selector$1 = {
        onWhiteSpace,
        getNode
    };

    // legacy IE function
    // expression( <any-value> )
    function expressionFn() {
        return this.createSingleNodeList(
            this.Raw(this.tokenIndex, null, false)
        );
    }

    // var( <ident> , <value>? )
    function varFn() {
        const children = this.createList();

        this.skipSC();

        // NOTE: Don't check more than a first argument is an ident, rest checks are for lexer
        children.push(this.Identifier());

        this.skipSC();

        if (this.tokenType === Comma) {
            children.push(this.Operator());

            const startIndex = this.tokenIndex;
            const value = this.parseCustomProperty
                ? this.Value(null)
                : this.Raw(this.tokenIndex, this.consumeUntilExclamationMarkOrSemicolon, false);

            if (value.type === 'Value' && value.children.isEmpty) {
                for (let offset = startIndex - this.tokenIndex; offset <= 0; offset++) {
                    if (this.lookupType(offset) === WhiteSpace$1) {
                        value.children.appendData({
                            type: 'WhiteSpace',
                            loc: null,
                            value: ' '
                        });
                        break;
                    }
                }
            }

            children.push(value);
        }

        return children;
    }

    function isPlusMinusOperator(node) {
        return (
            node !== null &&
            node.type === 'Operator' &&
            (node.value[node.value.length - 1] === '-' || node.value[node.value.length - 1] === '+')
        );
    }

    var value$2 = {
        getNode: defaultRecognizer,
        onWhiteSpace(next, children) {
            if (isPlusMinusOperator(next)) {
                next.value = ' ' + next.value;
            }
            if (isPlusMinusOperator(children.last)) {
                children.last.value += ' ';
            }
        },
        'expression': expressionFn,
        'var': varFn
    };

    var scope = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AtrulePrelude: atrulePrelude,
        Selector: selector$1,
        Value: value$2
    });

    var fontFace = {
        parse: {
            prelude: null,
            block() {
                return this.Block(true);
            }
        }
    };

    var importAtrule = {
        parse: {
            prelude() {
                const children = this.createList();

                this.skipSC();

                switch (this.tokenType) {
                    case String$2:
                        children.push(this.String());
                        break;

                    case Url$2:
                    case Function$1:
                        children.push(this.Url());
                        break;

                    default:
                        this.error('String or url() is expected');
                }

                if (this.lookupNonWSType(0) === Ident ||
                    this.lookupNonWSType(0) === LeftParenthesis) {
                    children.push(this.MediaQueryList());
                }

                return children;
            },
            block: null
        }
    };

    var media = {
        parse: {
            prelude() {
                return this.createSingleNodeList(
                    this.MediaQueryList()
                );
            },
            block(isStyleBlock = false) {
                return this.Block(isStyleBlock);
            }
        }
    };

    var nest = {
        parse: {
            prelude() {
                return this.createSingleNodeList(
                    this.SelectorList()
                );
            },
            block() {
                return this.Block(true);
            }
        }
    };

    var page = {
        parse: {
            prelude() {
                return this.createSingleNodeList(
                    this.SelectorList()
                );
            },
            block() {
                return this.Block(true);
            }
        }
    };

    function consumeRaw() {
        return this.createSingleNodeList(
            this.Raw(this.tokenIndex, null, false)
        );
    }

    function parentheses() {
        this.skipSC();

        if (this.tokenType === Ident &&
            this.lookupNonWSType(1) === Colon) {
            return this.createSingleNodeList(
                this.Declaration()
            );
        }

        return readSequence.call(this);
    }

    function readSequence() {
        const children = this.createList();
        let child;

        this.skipSC();

        scan:
        while (!this.eof) {
            switch (this.tokenType) {
                case Comment$1:
                case WhiteSpace$1:
                    this.next();
                    continue;

                case Function$1:
                    child = this.Function(consumeRaw, this.scope.AtrulePrelude);
                    break;

                case Ident:
                    child = this.Identifier();
                    break;

                case LeftParenthesis:
                    child = this.Parentheses(parentheses, this.scope.AtrulePrelude);
                    break;

                default:
                    break scan;
            }

            children.push(child);
        }

        return children;
    }

    var supports = {
        parse: {
            prelude() {
                const children = readSequence.call(this);

                if (this.getFirstListNode(children) === null) {
                    this.error('Condition is expected');
                }

                return children;
            },
            block(isStyleBlock = false) {
                return this.Block(isStyleBlock);
            }
        }
    };

    var atrule = {
        'font-face': fontFace,
        'import': importAtrule,
        media,
        nest,
        page,
        supports
    };

    const selectorList = {
        parse() {
            return this.createSingleNodeList(
                this.SelectorList()
            );
        }
    };

    const selector = {
        parse() {
            return this.createSingleNodeList(
                this.Selector()
            );
        }
    };

    const identList = {
        parse() {
            return this.createSingleNodeList(
                this.Identifier()
            );
        }
    };

    const nth = {
        parse() {
            return this.createSingleNodeList(
                this.Nth()
            );
        }
    };

    var pseudo = {
        'dir': identList,
        'has': selectorList,
        'lang': identList,
        'matches': selectorList,
        'is': selectorList,
        '-moz-any': selectorList,
        '-webkit-any': selectorList,
        'where': selectorList,
        'not': selectorList,
        'nth-child': nth,
        'nth-last-child': nth,
        'nth-last-of-type': nth,
        'nth-of-type': nth,
        'slotted': selector,
        'host': selector,
        'host-context': selector
    };

    var node = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AnPlusB: parse$H,
        Atrule: parse$G,
        AtrulePrelude: parse$F,
        AttributeSelector: parse$E,
        Block: parse$D,
        Brackets: parse$C,
        CDC: parse$B,
        CDO: parse$A,
        ClassSelector: parse$z,
        Combinator: parse$y,
        Comment: parse$x,
        Declaration: parse$w,
        DeclarationList: parse$v,
        Dimension: parse$u,
        Function: parse$t,
        Hash: parse$s,
        Identifier: parse$r,
        IdSelector: parse$q,
        MediaFeature: parse$p,
        MediaQuery: parse$o,
        MediaQueryList: parse$n,
        NestingSelector: parse$m,
        Nth: parse$l,
        Number: parse$k,
        Operator: parse$j,
        Parentheses: parse$i,
        Percentage: parse$h,
        PseudoClassSelector: parse$g,
        PseudoElementSelector: parse$f,
        Ratio: parse$e,
        Raw: parse$d,
        Rule: parse$c,
        Selector: parse$b,
        SelectorList: parse$a,
        String: parse$9,
        StyleSheet: parse$8,
        TypeSelector: parse$7,
        UnicodeRange: parse$6,
        Url: parse$5,
        Value: parse$4,
        WhiteSpace: parse$3
    });

    var parserConfig = {
        parseContext: {
            default: 'StyleSheet',
            stylesheet: 'StyleSheet',
            atrule: 'Atrule',
            atrulePrelude(options) {
                return this.AtrulePrelude(options.atrule ? String(options.atrule) : null);
            },
            mediaQueryList: 'MediaQueryList',
            mediaQuery: 'MediaQuery',
            rule: 'Rule',
            selectorList: 'SelectorList',
            selector: 'Selector',
            block() {
                return this.Block(true);
            },
            declarationList: 'DeclarationList',
            declaration: 'Declaration',
            value: 'Value'
        },
        scope,
        atrule,
        pseudo,
        node
    };

    var walkerConfig = {
        node: node$1
    };

    var syntax = createSyntax$1({
        ...lexerConfig,
        ...parserConfig,
        ...walkerConfig
    });

    function clone$1(node) {
        const result = {};

        for (const key in node) {
            let value = node[key];

            if (value) {
                if (Array.isArray(value) || value instanceof List) {
                    value = value.map(clone$1);
                } else if (value.constructor === Object) {
                    value = clone$1(value);
                }
            }

            result[key] = value;
        }

        return result;
    }

    const {
        tokenize: tokenize$2,
        parse: parse$2,
        generate,
        lexer,
        createLexer,

        walk,
        find,
        findLast,
        findAll,

        toPlainObject,
        fromPlainObject,

        fork
    } = syntax;

    const validMediaTypes = ['all', 'print', 'screen', 'speech'];
    const base64Pattern = /data:[^,]*;base64,/;
    const stringPattern = /^(["']).*\1$/;
    const maxBase64Length = 1000;
    const excludedSelectors = [/::?(?:-moz-)?selection/];
    const excludedProperties = [
        /(.*)animation/,
        /(.*)transition(.*)/,
        /cursor/,
        /pointer-events/,
        /(-webkit-)?tap-highlight-color/,
        /(.*)user-select/,
    ];
    /**
     * Checks if the given node is a CSS declaration.
     * @param {csstree.CssNode} node - The CSS node to check.
     * @return {boolean} True if the node is a CSS declaration, false otherwise.
     */
    function isDeclaration(node) {
        return node.type === 'Declaration';
    }
    /**
     * Checks if the given node has an empty child list.
     * @param {csstree.CssNode} node - The CSS node to check.
     * @return {boolean} True if the node has an empty child list, false otherwise.
     */
    function hasEmptyChildList(node) {
        if ('children' in node && node.children instanceof List) {
            return node.children.isEmpty;
        }
        return false;
    }
    /**
     * Represents an Abstract Syntax Tree for a CSS file (as generated by css-tree) and contains helper
     * methods for pruning and rearranging it.
     */
    class StyleAST {
        // eslint-disable-next-line no-useless-constructor
        constructor(css, ast, errors) {
            this.css = css;
            this.ast = ast;
            this.errors = errors;
        }
        /**
         * Given a base URL (where the CSS file this AST was built from), find all relative URLs and
         * convert them to absolute.
         *
         * @param {string} base - base URL for relative URLs.
         */
        absolutifyUrls(base) {
            walk(this.ast, {
                visit: 'Url',
                enter: url => {
                    if (url.value) {
                        const value = StyleAST.readValue(url);
                        const absolute = new URL(value, base).toString();
                        if (absolute !== value) {
                            url.value = absolute;
                        }
                    }
                },
            });
        }
        /**
         * Returns a new StyleAST with content from this one pruned based on the specified contentWindow
         * and criticalSelectors to keep.
         *
         * Removes:
         * - Irrelevant media queries
         * - Selectors not included in criticalSelectors
         * - Excluded properties
         * - Large embeds
         * - Empty rules
         *
         * @param {Set< string >} criticalSelectors - Set of selectors to keep in the new AST.
         *
         * @return {StyleAST} - New AST with pruned contents.
         */
        pruned(criticalSelectors) {
            const clone = new StyleAST(this.css, clone$1(this.ast), this.errors);
            clone.pruneMediaQueries();
            clone.pruneAtRules(['keyframes', 'charset', 'import']);
            clone.pruneNonCriticalSelectors(criticalSelectors);
            clone.pruneExcludedProperties();
            clone.pruneLargeBase64Embeds();
            clone.pruneComments();
            return clone;
        }
        /**
         * Given an AST node, returns the original text it was compiled from in the source CSS.
         *
         * @param {object} node - Node from the AST.
         * @return {string} original text the node was compiled from.
         */
        originalText(node) {
            if (node.loc && node.loc.start && node.loc.end) {
                return this.css.substring(node.loc.start.offset, node.loc.end.offset);
            }
            return '';
        }
        /**
         * Applies filters to the properties or atRules in this AST. Mutates the AST in-place.
         *
         * @param {FilterSpec} filters - Object containing property and atRule filter functions.
         */
        applyFilters(filters) {
            if (!filters) {
                return;
            }
            if (filters.properties) {
                this.applyPropertiesFilter(filters.properties);
            }
            if (filters.atRules) {
                this.applyAtRulesFilter(filters.atRules);
            }
        }
        /**
         * Applies a filter to the properties in this AST. Mutates the AST in-place.
         *
         * @param {Function} filter - to apply.
         */
        applyPropertiesFilter(filter) {
            walk(this.ast, {
                visit: 'Declaration',
                enter: (declaration, item, list) => {
                    if (filter(declaration.property, this.originalText(declaration.value)) === false) {
                        list.remove(item);
                    }
                },
            });
        }
        /**
         * Applies a filter to the atRules in this AST. Mutates the AST in-place.
         *
         * @param {Function} filter - to apply.
         */
        applyAtRulesFilter(filter) {
            walk(this.ast, {
                visit: 'Atrule',
                enter: (atrule, item, list) => {
                    if (filter(atrule.name) === false) {
                        list.remove(item);
                    }
                },
            });
        }
        /**
         * Remove variables that do not appear in the usedVariables set. Returns a count of variables
         * that were removed.
         *
         * @param {Set< string >} usedVariables - Set of used variables to keep.
         * @return {number} variables pruned.
         */
        pruneUnusedVariables(usedVariables) {
            let pruned = 0;
            walk(this.ast, {
                visit: 'Declaration',
                enter: (declaration, item, list) => {
                    // Ignore declarations that aren't defining variables.
                    if (!declaration.property.startsWith('--')) {
                        return;
                    }
                    // Check if this declared variable is used.
                    if (usedVariables.has(declaration.property)) {
                        return;
                    }
                    // Prune unused variable.
                    list.remove(item);
                    pruned++;
                },
            });
            return pruned;
        }
        /**
         * Find all variables that are used and return them as a Set.
         * @return {Set< string >} Set of used variables.
         */
        getUsedVariables() {
            const usedVariables = new Set();
            walk(this.ast, {
                visit: 'Function',
                enter: func => {
                    // Ignore functions that aren't var()
                    if (keyword$1(func.name).name !== 'var') {
                        return;
                    }
                    const names = func.children.map(StyleAST.readValue);
                    names.forEach(name => usedVariables.add(name));
                },
            });
            return usedVariables;
        }
        /**
         * Remove all comments from the syntax tree.
         */
        pruneComments() {
            walk(this.ast, {
                visit: 'Comment',
                enter: (_, item, list) => {
                    list.remove(item);
                },
            });
        }
        /**
         * Remove media queries that only apply to print.
         */
        pruneMediaQueries() {
            walk(this.ast, {
                visit: 'Atrule',
                enter: (atrule, atitem, atlist) => {
                    // Ignore non-media and invalid atrules.
                    if (keyword$1(atrule.name).name !== 'media' || !atrule.prelude) {
                        return;
                    }
                    // Go through all MediaQueryLists (should be one, but let's be sure).
                    walk(atrule, {
                        visit: 'MediaQueryList',
                        enter: (mqrule, mqitem, mqlist) => {
                            // Filter out MediaQueries that aren't interesting.
                            walk(mqrule, {
                                visit: 'MediaQuery',
                                enter: (mediaQuery, mediaItem, mediaList) => {
                                    if (!StyleAST.isUsefulMediaQuery(mediaQuery)) {
                                        mediaList.remove(mediaItem);
                                    }
                                },
                            });
                            // If empty MQ, remove from parent.
                            if (hasEmptyChildList(mqrule)) {
                                mqlist.remove(mqitem);
                            }
                        },
                    });
                    // If there are no useful media query lists left, throw away the block.
                    if (hasEmptyChildList(atrule.prelude)) {
                        atlist.remove(atitem);
                    }
                },
            });
        }
        /**
         * Remove unwanted at-rules.
         *
         * @param { string[] } names - Names of at-rules to remove, excluding the at symbol.
         */
        pruneAtRules(names) {
            walk(this.ast, {
                visit: 'Atrule',
                enter: (atrule, atitem, atlist) => {
                    if (names.includes(keyword$1(atrule.name).basename)) {
                        atlist.remove(atitem);
                    }
                },
            });
        }
        /**
         * Returns true if the given CSS rule object relates to animation keyframes.
         *
         * @param {csstree.WalkContext} rule - CSS rule.
         * @return {boolean} True if the rule is a keyframe rule, false otherwise.
         */
        static isKeyframeRule(rule) {
            return (rule.atrule && keyword$1(rule.atrule.name).basename === 'keyframes') || false;
        }
        /**
         * Walks this AST and calls the specified callback with each selector found (as text).
         * Skips any selectors in the excludedSelectors constant.
         *
         * @param {Function} callback - Callback to call with each selector.
         */
        forEachSelector(callback) {
            walk(this.ast, {
                visit: 'Rule',
                enter(rule) {
                    // Ignore rules inside @keyframes.
                    if (StyleAST.isKeyframeRule(this)) {
                        return;
                    }
                    // Ignore invalid rules.
                    if (rule.prelude.type !== 'SelectorList') {
                        return;
                    }
                    // Go through all selectors, filtering out unwanted ones.
                    rule.prelude.children.forEach(child => {
                        const selector = generate(child);
                        if (!excludedSelectors.some(s => s.test(selector))) {
                            callback(selector);
                        }
                    });
                },
            });
        }
        /**
         * Remove any selectors not listed in the criticalSelectors set, deleting any
         * rules that no longer have any selectors in their prelude.
         *
         * @param {Set< string >} criticalSelector - Set of critical selectors.
         */
        pruneNonCriticalSelectors(criticalSelector) {
            walk(this.ast, {
                visit: 'Rule',
                enter(rule, item, list) {
                    // Ignore rules inside @keyframes... until later.
                    if (this.atrule && keyword$1(this.atrule.name).basename === 'keyframes') {
                        return;
                    }
                    // Remove invalid rules.
                    if (rule.prelude.type !== 'SelectorList') {
                        list.remove(item);
                        return;
                    }
                    // Always include any rule that uses the grid-area property.
                    if (rule.block.children.some(propertyNode => isDeclaration(propertyNode) && propertyNode.property === 'grid-area')) {
                        return;
                    }
                    // Prune any selectors that aren't used.
                    rule.prelude.children = rule.prelude.children.filter(selector => {
                        // Prune selectors marked to always remove.
                        if (excludedSelectors.some(s => s.test(generate(selector)))) {
                            return false;
                        }
                        const selectorText = generate(selector);
                        return criticalSelector.has(selectorText);
                    });
                    // If the selector list is empty, prune the whole rule.
                    if (hasEmptyChildList(rule.prelude)) {
                        list.remove(item);
                    }
                },
            });
        }
        /**
         * Remove any Base64 embedded content which exceeds maxBase64Length.
         */
        pruneLargeBase64Embeds() {
            walk(this.ast, {
                visit: 'Declaration',
                enter: (declaration, item, list) => {
                    let tooLong = false;
                    walk(declaration, {
                        visit: 'Url',
                        enter(url) {
                            const value = url.value;
                            if (base64Pattern.test(value) && value.length > maxBase64Length) {
                                tooLong = true;
                            }
                        },
                    });
                    if (tooLong) {
                        list.remove(item);
                    }
                },
            });
        }
        /**
         * Remove any properties that match the regular expressions in the excludedProperties constant.
         */
        pruneExcludedProperties() {
            walk(this.ast, {
                visit: 'Declaration',
                enter: (declaration, item, list) => {
                    if (declaration.property) {
                        const property = property$2(declaration.property).name;
                        if (excludedProperties.some(e => e.test(property))) {
                            list.remove(item);
                        }
                    }
                },
            });
        }
        /**
         * Remove any fonts which are not in the specified whitelist.
         *
         * @param {Set< string >} fontWhitelist - Whitelisted font.
         */
        pruneNonCriticalFonts(fontWhitelist) {
            walk(this.ast, {
                visit: 'Atrule',
                enter: (atrule, item, list) => {
                    // Skip rules that aren't @font-face...
                    if (keyword$1(atrule.name).basename !== 'font-face') {
                        return;
                    }
                    // Find src and font-family.
                    const properties = {};
                    walk(atrule, {
                        visit: 'Declaration',
                        enter: (declaration, decItem, decList) => {
                            const property = property$2(declaration.property).name;
                            if (['src', 'font-family'].includes(property) &&
                                'children' in declaration.value) {
                                const values = declaration.value.children.toArray();
                                properties[property] = values.map(StyleAST.readValue);
                            }
                            // Prune out src from result.
                            if (property === 'src') {
                                decList.remove(decItem);
                            }
                        },
                    });
                    // Remove font-face rules without a src and font-family.
                    if (!properties.src || !properties['font-family']) {
                        list.remove(item);
                        return;
                    }
                    // Prune if none of the font-family values are in the whitelist.
                    if (!properties['font-family'].some(family => fontWhitelist.has(family))) {
                        list.remove(item);
                    }
                },
            });
        }
        /**
         * Returns a count of the rules in this Style AST.
         *
         * @return {number} rules in this AST.
         */
        ruleCount() {
            let rules = 0;
            walk(this.ast, {
                visit: 'Rule',
                enter: () => {
                    rules++;
                },
            });
            return rules;
        }
        /**
         * Returns a list of font families that are used by any rule in this AST.
         *
         * @return {Set<string>} Set of used fonts.
         */
        getUsedFontFamilies() {
            const fontFamilies = new Set();
            walk(this.ast, {
                visit: 'Declaration',
                enter(node) {
                    // Ignore declarations not inside rules.
                    if (!this.rule) {
                        return;
                    }
                    // Pull the lexer out of csstree. Note: the types don't include
                    // this, so we have to hack it with any :(
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    const lexer$1 = lexer;
                    // Gather family-name values.
                    const frags = lexer$1.findDeclarationValueFragments(node, 'Type', 'family-name');
                    const nodes = frags.map(frag => frag.nodes.toArray()).flat();
                    const names = nodes.map(StyleAST.readValue);
                    names.forEach(name => fontFamilies.add(name));
                },
            });
            return fontFamilies;
        }
        /**
         * Given an AST node, read it as a value based on its type. Removes quote marks from
         * string types if present.
         *
         * @param {csstree.CssNode} node - AST node.
         * @return {string} The value of the node as a string.
         */
        static readValue(node) {
            if (node.type === 'String' && stringPattern.test(node.value)) {
                return node.value.substr(1, node.value.length - 2);
            }
            else if (node.type === 'Identifier') {
                return node.name;
            }
            else if ('value' in node) {
                return node.value;
            }
            return '';
        }
        /**
         * Returns true if the specified media query node is relevant to screen rendering.
         *
         * @param {object} mediaQueryNode - Media Query AST node to examine.
         *
         * @return {boolean} true if the media query is relevant to screens.
         */
        static isUsefulMediaQuery(mediaQueryNode) {
            // Find media types.
            let lastIdentifierNot = false;
            const mediaTypes = {};
            walk(mediaQueryNode, {
                visit: 'Identifier',
                enter: node => {
                    const identifier = keyword$1(node.name).name;
                    if (identifier === 'not') {
                        lastIdentifierNot = true;
                        return;
                    }
                    if (validMediaTypes.includes(identifier)) {
                        mediaTypes[identifier] = !lastIdentifierNot;
                    }
                    lastIdentifierNot = false;
                },
            });
            // If no media types specified, assume screen.
            if (Object.keys(mediaTypes).length === 0) {
                return true;
            }
            // If 'screen' or 'all' explicitly specified, use those (preference screen).
            for (const mediaType of ['screen', 'all']) {
                if (Object.prototype.hasOwnProperty.call(mediaTypes, mediaType)) {
                    return mediaTypes[mediaType];
                }
            }
            // If any other media type specified, only true if 'not'. e.g.: 'not print'.
            return Object.values(mediaTypes).some(value => !value);
        }
        /**
         * Returns this AST converted to CSS.
         *
         * @return {string} this AST represented in CSS.
         */
        toCSS() {
            return generate(this.ast);
        }
        /**
         * Static method to parse a block of CSS and return a new StyleAST object which represents it.
         *
         * @param {string} css - CSS to parse.
         *
         * @return {StyleAST} new parse AST based on the CSS.
         */
        static parse(css) {
            const errors = [];
            const ast = parse$2(css, {
                parseCustomProperty: true,
                positions: true,
                onParseError: err => {
                    errors.push(err);
                },
            });
            return new StyleAST(css, ast, errors);
        }
    }

    // Maximum number of iterations when pruning unused variables.
    const maxVarPruneIterations = 10;
    /**
     * Represents a set of CSS files found on one or more HTML page. Automatically de-duplicates
     * CSS files by URL and by content, and parses each into an Abstract Syntax Tree. Also tracks
     * all errors that occur while loading or parsing CSS.
     */
    class CSSFileSet {
        constructor(browserInterface) {
            this.browserInterface = browserInterface;
            this.internalStyles = {};
            this.knownUrls = {};
            this.cssFiles = [];
            this.errors = [];
        }
        /**
         * Add a set of CSS URLs from an HTML page to this set.
         *
         * @param {string} page        - URL of the page the CSS URLs were found on.
         * @param {object} cssIncludes - Included CSS Files. Keyed by URL.
         */
        async addMultiple(page, cssIncludes) {
            await Promise.all(Object.keys(cssIncludes).map(url => this.add(page, url, cssIncludes[url])));
        }
        async addInternalStyles(page, internalStyles) {
            this.internalStyles[page] = StyleAST.parse(internalStyles);
        }
        /**
         * Add a CSS URL from an HTML page to this set.
         *
         * @param {string} page     - URL of the page the CSS URL was found on.
         * @param {string} cssUrl   - The CSS file URL.
         * @param {object} settings - Additional settings for the CSS file.
         */
        async add(page, cssUrl, settings = {}) {
            // Add by reference if we already know this file.
            if (Object.prototype.hasOwnProperty.call(this.knownUrls, cssUrl)) {
                if (this.knownUrls[cssUrl] instanceof Error) {
                    // We already know this URL failed. Bail early.
                    return;
                }
                this.addExtraReference(page, cssUrl, this.knownUrls[cssUrl]);
                return;
            }
            // Try to load this URL.
            try {
                const response = await this.browserInterface.fetch(cssUrl, {}, 'css');
                if (!response.ok) {
                    throw new HttpError({ code: response.status, url: cssUrl });
                }
                let css = await response.text();
                // If there is an implied media query from the css's <link> tag, wrap the CSS in it.
                if (settings.media) {
                    css = '@media ' + settings.media + ' {\n' + css + '\n}';
                }
                this.storeCss(page, cssUrl, css);
            }
            catch (err) {
                let wrappedError = err;
                // Wrap any unfamiliar fetch errors in an unknown error.
                if (!(err instanceof UrlError)) {
                    wrappedError = new UnknownError({
                        url: cssUrl,
                        message: err.message,
                    });
                }
                this.storeError(cssUrl, wrappedError);
            }
        }
        /**
         * Collates an object describing the selectors found in the CSS files in this set, and which
         * HTML page URLs include them (via CSS files)
         *
         * @return {object} - An object with selector text keys, each containing a Set of page URLs (strings)
         */
        collateSelectorPages() {
            const selectors = {};
            for (const file of this.cssFiles) {
                file.ast.forEachSelector(selector => {
                    if (!selectors[selector]) {
                        selectors[selector] = new Set();
                    }
                    file.pages.forEach(pageUrl => selectors[selector].add(pageUrl));
                });
            }
            return selectors;
        }
        /**
         * Applies filters to the properties or atRules in each AST in this set of CSS files.
         * Mutates each AST in-place.
         *
         * @param {FilterSpec} filters - Object containing property and atRule filter functions.
         */
        applyFilters(filters) {
            for (const file of this.cssFiles) {
                file.ast.applyFilters(filters);
            }
        }
        /**
         * Returns a new AST which is pruned appropriately for the specified contentWindow, and the
         * set of selectors that are worth keeping. (i.e.: appear above the fold).
         *
         * @param {Set<string>} usefulSelectors - Set of selectors to keep.
         * @return {StyleAST[]} Array of pruned StyleAST objects.
         */
        prunedAsts(usefulSelectors) {
            // Perform basic pruning.
            let asts = this.cssFiles.map(file => {
                return file.ast.pruned(usefulSelectors);
            });
            const internallyUsedVariables = new Set();
            Object.values(this.internalStyles).reduce((set, ast) => {
                ast.getUsedVariables().forEach(v => set.add(v));
                return set;
            }, internallyUsedVariables);
            // Repeatedly prune unused variables (up to maxVarPruneIterations), to catch vars which are
            // only used to define other vars which aren't used.
            let prevUsedVariables;
            for (let i = 0; i < maxVarPruneIterations; i++) {
                // Gather the set of used variables.
                const usedVariables = asts.reduce((set, ast) => {
                    ast.getUsedVariables().forEach(v => set.add(v));
                    return set;
                }, new Set());
                // If the number of used vars hasn't changed since last iteration, stop early.
                if (prevUsedVariables && prevUsedVariables.size === usedVariables.size) {
                    break;
                }
                // Prune unused variables, keep a sum of pruned variables.
                const prunedCount = asts.reduce((sum, ast) => {
                    sum += ast.pruneUnusedVariables(new Set([...usedVariables, ...internallyUsedVariables]));
                    return sum;
                }, 0);
                // If no variables were pruned this iteration, stop early.
                if (prunedCount === 0) {
                    break;
                }
                prevUsedVariables = usedVariables;
            }
            // Find all fonts used across all ASTs, and prune all that are not referenced.
            const fontWhitelist = asts.reduce((set, ast) => {
                ast.getUsedFontFamilies().forEach(font => set.add(font));
                return set;
            }, new Set());
            // Remove any fonts that aren't used above the fold.
            asts.forEach(ast => ast.pruneNonCriticalFonts(fontWhitelist));
            // Throw away any ASTs without rules.
            asts = asts.filter(ast => ast.ruleCount() > 0);
            return asts;
        }
        /**
         * Internal method: Store the specified css found at the cssUrl for an HTML page,
         * de-duplicating CSS files by content along the way.
         *
         * @param {string} page   - URL of HTML page this CSS file was found on.
         * @param {string} cssUrl - URL of the CSS file.
         * @param {string} css    - Content of the CSS File.
         */
        storeCss(page, cssUrl, css) {
            // De-duplicate css contents in case cache busters in URLs or WAFs, etc confound URL de-duplication.
            const matchingFile = this.cssFiles.find(file => file.css === css);
            if (matchingFile) {
                this.addExtraReference(page, cssUrl, matchingFile);
                return;
            }
            // Parse the CSS into an AST.
            const ast = StyleAST.parse(css);
            // Make sure relative URLs in the AST are absolute.
            ast.absolutifyUrls(cssUrl);
            const file = { css, ast, pages: [page], urls: [cssUrl] };
            this.knownUrls[cssUrl] = file;
            this.cssFiles.push(file);
        }
        /**
         * Internal method: Add an extra reference to a previously known CSS file found either
         * on a new HTML page, or at a new URL.
         *
         * @param {string} page         - URL of the page this CSS file was found on.
         * @param {string} cssUrl       - URL of the CSS File.
         * @param {object} matchingFile - Internal CSS File object.
         */
        addExtraReference(page, cssUrl, matchingFile) {
            this.knownUrls[cssUrl] = matchingFile;
            matchingFile.pages.push(page);
            if (!matchingFile.urls.includes(cssUrl)) {
                matchingFile.urls.push(cssUrl);
            }
        }
        /**
         * Stores an error that occurred while fetching or parsing CSS at the given URL.
         *
         * @param {string} url - CSS URL that failed to fetch or parse.
         * @param {Error}  err - Error object describing the problem.
         */
        storeError(url, err) {
            this.knownUrls[url] = err;
            this.errors.push(err);
        }
        /**
         * Returns a list of errors that occurred while fetching or parsing these CSS files.
         *
         * @return {Error[]} - List of errors that occurred.
         */
        getErrors() {
            return this.errors;
        }
    }

    const ignoredPseudoElements = [
        'after',
        'before',
        'first-(line|letter)',
        '(input-)?placeholder',
        'scrollbar',
        'search(results-)?decoration',
        'search-(cancel|results)-button',
    ];
    let removePseudoElementRegex;
    /**
     * Builds a RegExp for finding pseudo elements that should be ignored while matching
     * elements that are above the fold.
     *
     * @return {RegExp} A RegExp to use when removing unwanted pseudo elements.
     */
    function getRemovePseudoElementRegex() {
        if (removePseudoElementRegex) {
            return removePseudoElementRegex;
        }
        const allIgnored = ignoredPseudoElements.join('|');
        removePseudoElementRegex = new RegExp('::?(-(moz|ms|webkit)-)?(' + allIgnored + ')');
        return removePseudoElementRegex;
    }
    /**
     * Remove pseudo elements that are ignored while matching elements above the fold.
     *
     * @param {string} selector - selector to filter.
     *
     * @return {string} selector with ignored pseudo elements removed.
     */
    function removeIgnoredPseudoElements(selector) {
        return selector.replace(getRemovePseudoElementRegex(), '').trim();
    }

    var global$1 = (typeof global !== "undefined" ? global :
      typeof self !== "undefined" ? self :
      typeof window !== "undefined" ? window : {});

    // shim for using process in browser
    // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

    function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
    }
    function defaultClearTimeout () {
        throw new Error('clearTimeout has not been defined');
    }
    var cachedSetTimeout = defaultSetTimout;
    var cachedClearTimeout = defaultClearTimeout;
    if (typeof global$1.setTimeout === 'function') {
        cachedSetTimeout = setTimeout;
    }
    if (typeof global$1.clearTimeout === 'function') {
        cachedClearTimeout = clearTimeout;
    }

    function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
        } catch(e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
            } catch(e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
            }
        }


    }
    function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
        } catch (e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
            } catch (e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
            }
        }



    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
        if (!draining || !currentQueue) {
            return;
        }
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }

    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;

        var len = queue.length;
        while(len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
    }
    function nextTick(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
        }
    }
    // v8 likes predictible objects
    function Item(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    var title = 'browser';
    var platform$1 = 'browser';
    var browser = true;
    var env = {};
    var argv = [];
    var version$1 = ''; // empty string to avoid regexp issues
    var versions = {};
    var release$1 = {};
    var config = {};

    function noop$2() {}

    var on = noop$2;
    var addListener = noop$2;
    var once = noop$2;
    var off = noop$2;
    var removeListener = noop$2;
    var removeAllListeners = noop$2;
    var emit = noop$2;

    function binding(name) {
        throw new Error('process.binding is not supported');
    }

    function cwd () { return '/' }
    function chdir (dir) {
        throw new Error('process.chdir is not supported');
    }function umask() { return 0; }

    // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
    var performance = global$1.performance || {};
    var performanceNow =
      performance.now        ||
      performance.mozNow     ||
      performance.msNow      ||
      performance.oNow       ||
      performance.webkitNow  ||
      function(){ return (new Date()).getTime() };

    // generate timestamp or delta
    // see http://nodejs.org/api/process.html#process_process_hrtime
    function hrtime(previousTimestamp){
      var clocktime = performanceNow.call(performance)*1e-3;
      var seconds = Math.floor(clocktime);
      var nanoseconds = Math.floor((clocktime%1)*1e9);
      if (previousTimestamp) {
        seconds = seconds - previousTimestamp[0];
        nanoseconds = nanoseconds - previousTimestamp[1];
        if (nanoseconds<0) {
          seconds--;
          nanoseconds += 1e9;
        }
      }
      return [seconds,nanoseconds]
    }

    var startTime = new Date();
    function uptime$1() {
      var currentTime = new Date();
      var dif = currentTime - startTime;
      return dif / 1000;
    }

    var browser$1 = {
      nextTick: nextTick,
      title: title,
      browser: browser,
      env: env,
      argv: argv,
      version: version$1,
      versions: versions,
      on: on,
      addListener: addListener,
      once: once,
      off: off,
      removeListener: removeListener,
      removeAllListeners: removeAllListeners,
      emit: emit,
      binding: binding,
      cwd: cwd,
      chdir: chdir,
      umask: umask,
      hrtime: hrtime,
      platform: platform$1,
      release: release$1,
      config: config,
      uptime: uptime$1
    };

    var clean = {exports: {}};

    function level0Optimize$1(tokens) {
      // noop as level 0 means no optimizations!
      return tokens;
    }

    var optimize$4 = level0Optimize$1;

    // adapted from http://nedbatchelder.com/blog/200712.html#e20071211T054956

    var NUMBER_PATTERN = /([0-9]+)/;

    function naturalCompare$1(value1, value2) {
      var keys1 = ('' + value1).split(NUMBER_PATTERN).map(tryParseInt);
      var keys2 = ('' + value2).split(NUMBER_PATTERN).map(tryParseInt);
      var key1;
      var key2;
      var compareFirst = Math.min(keys1.length, keys2.length);
      var i, l;

      for (i = 0, l = compareFirst; i < l; i++) {
        key1 = keys1[i];
        key2 = keys2[i];

        if (key1 != key2) {
          return key1 > key2 ? 1 : -1;
        }
      }

      return keys1.length > keys2.length ? 1 : (keys1.length == keys2.length ? 0 : -1);
    }

    function tryParseInt(value) {
      return ('' + parseInt(value)) == value
        ? parseInt(value)
        : value;
    }

    var naturalCompare_1 = naturalCompare$1;

    var naturalCompare = naturalCompare_1;

    function naturalSorter$1(scope1, scope2) {
      return naturalCompare(scope1[1], scope2[1]);
    }

    function standardSorter(scope1, scope2) {
      return scope1[1] > scope2[1] ? 1 : -1;
    }

    function sortSelectors$3(selectors, method) {
      switch (method) {
      case 'natural':
        return selectors.sort(naturalSorter$1);
      case 'standard':
        return selectors.sort(standardSorter);
      case 'none':
      case false:
        return selectors;
      }
    }

    var sortSelectors_1 = sortSelectors$3;

    function override$7(source1, source2) {
      var target = {};
      var key1;
      var key2;
      var item;

      for (key1 in source1) {
        item = source1[key1];

        if (Array.isArray(item)) {
          target[key1] = item.slice(0);
        } else if (typeof item == 'object' && item !== null) {
          target[key1] = override$7(item, {});
        } else {
          target[key1] = item;
        }
      }

      for (key2 in source2) {
        item = source2[key2];

        if (key2 in target && Array.isArray(item)) {
          target[key2] = item.slice(0);
        } else if (key2 in target && typeof item == 'object' && item !== null) {
          target[key2] = override$7(target[key2], item);
        } else {
          target[key2] = item;
        }
      }

      return target;
    }

    var override_1 = override$7;

    /*
    The MIT License (MIT)

    Copyright (c) 2016 CoderPuppy

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

    */
    var _endianness;
    function endianness() {
      if (typeof _endianness === 'undefined') {
        var a = new ArrayBuffer(2);
        var b = new Uint8Array(a);
        var c = new Uint16Array(a);
        b[0] = 1;
        b[1] = 2;
        if (c[0] === 258) {
          _endianness = 'BE';
        } else if (c[0] === 513){
          _endianness = 'LE';
        } else {
          throw new Error('unable to figure out endianess');
        }
      }
      return _endianness;
    }

    function hostname() {
      if (typeof global$1.location !== 'undefined') {
        return global$1.location.hostname
      } else return '';
    }

    function loadavg() {
      return [];
    }

    function uptime() {
      return 0;
    }

    function freemem() {
      return Number.MAX_VALUE;
    }

    function totalmem() {
      return Number.MAX_VALUE;
    }

    function cpus() {
      return [];
    }

    function type() {
      return 'Browser';
    }

    function release () {
      if (typeof global$1.navigator !== 'undefined') {
        return global$1.navigator.appVersion;
      }
      return '';
    }

    function networkInterfaces () {
      return {};
    }

    function getNetworkInterfaces () {
      return {};
    }

    function arch() {
      return 'javascript';
    }

    function platform() {
      return 'browser';
    }

    function tmpDir() {
      return '/tmp';
    }
    var tmpdir = tmpDir;

    var EOL = '\n';

    function homedir(){
      return '$HOME'
    }

    var _polyfillNode_os = {
      homedir: homedir,
      EOL: EOL,
      arch: arch,
      platform: platform,
      tmpdir: tmpdir,
      tmpDir: tmpDir,
      networkInterfaces:networkInterfaces,
      getNetworkInterfaces: getNetworkInterfaces,
      release: release,
      type: type,
      cpus: cpus,
      totalmem: totalmem,
      freemem: freemem,
      uptime: uptime,
      loadavg: loadavg,
      hostname: hostname,
      endianness: endianness,
    };

    var _polyfillNode_os$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        endianness: endianness,
        hostname: hostname,
        loadavg: loadavg,
        uptime: uptime,
        freemem: freemem,
        totalmem: totalmem,
        cpus: cpus,
        type: type,
        release: release,
        networkInterfaces: networkInterfaces,
        getNetworkInterfaces: getNetworkInterfaces,
        arch: arch,
        platform: platform,
        tmpDir: tmpDir,
        tmpdir: tmpdir,
        EOL: EOL,
        homedir: homedir,
        'default': _polyfillNode_os
    });

    var require$$1$3 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_os$1);

    var override$6 = override_1;

    function getSystemLineBreak() {
      var systemLineBreak = '\n';
      try {
        var os = require$$1$3;
        systemLineBreak = os.EOL;
      } catch (_) {
        // no op
      }
      return systemLineBreak;
    }

    var Breaks$1 = {
      AfterAtRule: 'afterAtRule',
      AfterBlockBegins: 'afterBlockBegins',
      AfterBlockEnds: 'afterBlockEnds',
      AfterComment: 'afterComment',
      AfterProperty: 'afterProperty',
      AfterRuleBegins: 'afterRuleBegins',
      AfterRuleEnds: 'afterRuleEnds',
      BeforeBlockEnds: 'beforeBlockEnds',
      BetweenSelectors: 'betweenSelectors'
    };

    var BreakWith = {
      CarriageReturnLineFeed: '\r\n',
      LineFeed: '\n',
      System: getSystemLineBreak()
    };

    var IndentWith = {
      Space: ' ',
      Tab: '\t'
    };

    var Spaces$2 = {
      AroundSelectorRelation: 'aroundSelectorRelation',
      BeforeBlockBegins: 'beforeBlockBegins',
      BeforeValue: 'beforeValue'
    };

    var DEFAULTS$2 = {
      breaks: breaks(false),
      breakWith: BreakWith.System,
      indentBy: 0,
      indentWith: IndentWith.Space,
      spaces: spaces(false),
      wrapAt: false,
      semicolonAfterLastProperty: false
    };

    var BEAUTIFY_ALIAS = 'beautify';
    var KEEP_BREAKS_ALIAS = 'keep-breaks';

    var OPTION_SEPARATOR$1 = ';';
    var OPTION_NAME_VALUE_SEPARATOR = ':';
    var HASH_VALUES_OPTION_SEPARATOR = ',';
    var HASH_VALUES_NAME_VALUE_SEPARATOR = '=';

    var FALSE_KEYWORD_1$1 = 'false';
    var FALSE_KEYWORD_2$1 = 'off';
    var TRUE_KEYWORD_1$1 = 'true';
    var TRUE_KEYWORD_2$1 = 'on';

    function breaks(value) {
      var breakOptions = {};

      breakOptions[Breaks$1.AfterAtRule] = value;
      breakOptions[Breaks$1.AfterBlockBegins] = value;
      breakOptions[Breaks$1.AfterBlockEnds] = value;
      breakOptions[Breaks$1.AfterComment] = value;
      breakOptions[Breaks$1.AfterProperty] = value;
      breakOptions[Breaks$1.AfterRuleBegins] = value;
      breakOptions[Breaks$1.AfterRuleEnds] = value;
      breakOptions[Breaks$1.BeforeBlockEnds] = value;
      breakOptions[Breaks$1.BetweenSelectors] = value;

      return breakOptions;
    }

    function spaces(value) {
      var spaceOptions = {};

      spaceOptions[Spaces$2.AroundSelectorRelation] = value;
      spaceOptions[Spaces$2.BeforeBlockBegins] = value;
      spaceOptions[Spaces$2.BeforeValue] = value;

      return spaceOptions;
    }

    function formatFrom$1(source) {
      if (source === undefined || source === false) {
        return false;
      }

      if (typeof source == 'object' && 'breakWith' in source) {
        source = override$6(source, { breakWith: mapBreakWith(source.breakWith) });
      }

      if (typeof source == 'object' && 'indentBy' in source) {
        source = override$6(source, { indentBy: parseInt(source.indentBy) });
      }

      if (typeof source == 'object' && 'indentWith' in source) {
        source = override$6(source, { indentWith: mapIndentWith(source.indentWith) });
      }

      if (typeof source == 'object') {
        return remapBreaks(override$6(DEFAULTS$2, source));
      }

      if (typeof source == 'string' && source == BEAUTIFY_ALIAS) {
        return remapBreaks(
          override$6(DEFAULTS$2, {
            breaks: breaks(true),
            indentBy: 2,
            spaces: spaces(true)
          })
        );
      }

      if (typeof source == 'string' && source == KEEP_BREAKS_ALIAS) {
        return remapBreaks(
          override$6(DEFAULTS$2, {
            breaks: {
              afterAtRule: true,
              afterBlockBegins: true,
              afterBlockEnds: true,
              afterComment: true,
              afterRuleEnds: true,
              beforeBlockEnds: true
            }
          })
        );
      }

      if (typeof source == 'string') {
        return remapBreaks(override$6(DEFAULTS$2, toHash(source)));
      }

      return DEFAULTS$2;
    }

    function toHash(string) {
      return string
        .split(OPTION_SEPARATOR$1)
        .reduce(function(accumulator, directive) {
          var parts = directive.split(OPTION_NAME_VALUE_SEPARATOR);
          var name = parts[0];
          var value = parts[1];

          if (name == 'breaks' || name == 'spaces') {
            accumulator[name] = hashValuesToHash(value);
          } else if (name == 'indentBy' || name == 'wrapAt') {
            accumulator[name] = parseInt(value);
          } else if (name == 'indentWith') {
            accumulator[name] = mapIndentWith(value);
          } else if (name == 'breakWith') {
            accumulator[name] = mapBreakWith(value);
          }

          return accumulator;
        }, {});
    }

    function hashValuesToHash(string) {
      return string
        .split(HASH_VALUES_OPTION_SEPARATOR)
        .reduce(function(accumulator, directive) {
          var parts = directive.split(HASH_VALUES_NAME_VALUE_SEPARATOR);
          var name = parts[0];
          var value = parts[1];

          accumulator[name] = normalizeValue$1(value);

          return accumulator;
        }, {});
    }

    function normalizeValue$1(value) {
      switch (value) {
      case FALSE_KEYWORD_1$1:
      case FALSE_KEYWORD_2$1:
        return false;
      case TRUE_KEYWORD_1$1:
      case TRUE_KEYWORD_2$1:
        return true;
      default:
        return value;
      }
    }

    function mapBreakWith(value) {
      switch (value) {
      case 'windows':
      case 'crlf':
      case BreakWith.CarriageReturnLineFeed:
        return BreakWith.CarriageReturnLineFeed;
      case 'unix':
      case 'lf':
      case BreakWith.LineFeed:
        return BreakWith.LineFeed;
      default:
        return BreakWith.System;
      }
    }

    function mapIndentWith(value) {
      switch (value) {
      case 'space':
        return IndentWith.Space;
      case 'tab':
        return IndentWith.Tab;
      default:
        return value;
      }
    }

    function remapBreaks(source) {
      for (var key in Breaks$1) {
        var breakName = Breaks$1[key];
        var breakValue = source.breaks[breakName];

        if (breakValue === true) {
          source.breaks[breakName] = source.breakWith;
        } else if (breakValue === false) {
          source.breaks[breakName] = '';
        } else {
          source.breaks[breakName] = source.breakWith.repeat(parseInt(breakValue));
        }
      }

      return source;
    }

    var format$2 = {
      Breaks: Breaks$1,
      Spaces: Spaces$2,
      formatFrom: formatFrom$1
    };

    var Marker$g = {
      ASTERISK: '*',
      AT: '@',
      BACK_SLASH: '\\',
      CARRIAGE_RETURN: '\r',
      CLOSE_CURLY_BRACKET: '}',
      CLOSE_ROUND_BRACKET: ')',
      CLOSE_SQUARE_BRACKET: ']',
      COLON: ':',
      COMMA: ',',
      DOUBLE_QUOTE: '"',
      EXCLAMATION: '!',
      FORWARD_SLASH: '/',
      INTERNAL: '-clean-css-',
      NEW_LINE_NIX: '\n',
      OPEN_CURLY_BRACKET: '{',
      OPEN_ROUND_BRACKET: '(',
      OPEN_SQUARE_BRACKET: '[',
      SEMICOLON: ';',
      SINGLE_QUOTE: '\'',
      SPACE: ' ',
      TAB: '\t',
      UNDERSCORE: '_'
    };

    var marker = Marker$g;

    function formatPosition$4(metadata) {
      var line = metadata[0];
      var column = metadata[1];
      var source = metadata[2];

      return source
        ? source + ':' + line + ':' + column
        : line + ':' + column;
    }

    var formatPosition_1 = formatPosition$4;

    var Spaces$1 = format$2.Spaces;
    var Marker$f = marker;
    var formatPosition$3 = formatPosition_1;

    var CASE_ATTRIBUTE_PATTERN = /[\s"'][iI]\s*\]/;
    var CASE_RESTORE_PATTERN = /([\d\w])([iI])\]/g;
    var DOUBLE_QUOTE_CASE_PATTERN = /="([a-zA-Z][a-zA-Z\d\-_]+)"([iI])/g;
    var DOUBLE_QUOTE_PATTERN = /="([a-zA-Z][a-zA-Z\d\-_]+)"(\s|\])/g;
    var HTML_COMMENT_PATTERN = /^(?:(?:<!--|-->)\s*)+/;
    var SINGLE_QUOTE_CASE_PATTERN = /='([a-zA-Z][a-zA-Z\d\-_]+)'([iI])/g;
    var SINGLE_QUOTE_PATTERN = /='([a-zA-Z][a-zA-Z\d\-_]+)'(\s|\])/g;
    var RELATION_PATTERN$1 = /[>+~]/;
    var WHITESPACE_PATTERN$2 = /\s/;

    var ASTERISK_PLUS_HTML_HACK = '*+html ';
    var ASTERISK_FIRST_CHILD_PLUS_HTML_HACK = '*:first-child+html ';
    var LESS_THAN = '<';

    var PSEUDO_CLASSES_WITH_SELECTORS = [
      ':current',
      ':future',
      ':has',
      ':host',
      ':host-context',
      ':is',
      ':not',
      ':past',
      ':where'
    ];

    function hasInvalidCharacters(value) {
      var isEscaped;
      var isInvalid = false;
      var character;
      var isQuote = false;
      var i, l;

      for (i = 0, l = value.length; i < l; i++) {
        character = value[i];

        if (isEscaped) ; else if (character == Marker$f.SINGLE_QUOTE || character == Marker$f.DOUBLE_QUOTE) {
          isQuote = !isQuote;
        } else if (!isQuote
          && (character == Marker$f.CLOSE_CURLY_BRACKET
            || character == Marker$f.EXCLAMATION
            || character == LESS_THAN
            || character == Marker$f.SEMICOLON)
        ) {
          isInvalid = true;
          break;
        } else if (!isQuote && i === 0 && RELATION_PATTERN$1.test(character)) {
          isInvalid = true;
          break;
        }

        isEscaped = character == Marker$f.BACK_SLASH;
      }

      return isInvalid;
    }

    function removeWhitespace(value, format) {
      var stripped = [];
      var character;
      var isNewLineNix;
      var isNewLineWin;
      var isEscaped;
      var wasEscaped;
      var isQuoted;
      var isSingleQuoted;
      var isDoubleQuoted;
      var isAttribute;
      var isRelation;
      var isWhitespace;
      var isSpaceAwarePseudoClass;
      var roundBracketLevel = 0;
      var wasComma = false;
      var wasRelation = false;
      var wasWhitespace = false;
      var withCaseAttribute = CASE_ATTRIBUTE_PATTERN.test(value);
      var spaceAroundRelation = format && format.spaces[Spaces$1.AroundSelectorRelation];
      var i, l;

      for (i = 0, l = value.length; i < l; i++) {
        character = value[i];

        isNewLineNix = character == Marker$f.NEW_LINE_NIX;
        isNewLineWin = character == Marker$f.NEW_LINE_NIX && value[i - 1] == Marker$f.CARRIAGE_RETURN;
        isQuoted = isSingleQuoted || isDoubleQuoted;
        isRelation = !isAttribute && !isEscaped && roundBracketLevel === 0 && RELATION_PATTERN$1.test(character);
        isWhitespace = WHITESPACE_PATTERN$2.test(character);
        isSpaceAwarePseudoClass = roundBracketLevel == 1 && character == Marker$f.CLOSE_ROUND_BRACKET
          ? false
          : isSpaceAwarePseudoClass
            || (roundBracketLevel === 0 && character == Marker$f.COLON && isPseudoClassWithSelectors(value, i));

        if (wasEscaped && isQuoted && isNewLineWin) {
          // swallow escaped new windows lines in comments
          stripped.pop();
          stripped.pop();
        } else if (isEscaped && isQuoted && isNewLineNix) {
          // swallow escaped new *nix lines in comments
          stripped.pop();
        } else if (isEscaped) {
          stripped.push(character);
        } else if (character == Marker$f.OPEN_SQUARE_BRACKET && !isQuoted) {
          stripped.push(character);
          isAttribute = true;
        } else if (character == Marker$f.CLOSE_SQUARE_BRACKET && !isQuoted) {
          stripped.push(character);
          isAttribute = false;
        } else if (character == Marker$f.OPEN_ROUND_BRACKET && !isQuoted) {
          stripped.push(character);
          roundBracketLevel++;
        } else if (character == Marker$f.CLOSE_ROUND_BRACKET && !isQuoted) {
          stripped.push(character);
          roundBracketLevel--;
        } else if (character == Marker$f.SINGLE_QUOTE && !isQuoted) {
          stripped.push(character);
          isSingleQuoted = true;
        } else if (character == Marker$f.DOUBLE_QUOTE && !isQuoted) {
          stripped.push(character);
          isDoubleQuoted = true;
        } else if (character == Marker$f.SINGLE_QUOTE && isQuoted) {
          stripped.push(character);
          isSingleQuoted = false;
        } else if (character == Marker$f.DOUBLE_QUOTE && isQuoted) {
          stripped.push(character);
          isDoubleQuoted = false;
        } else if (isWhitespace && wasRelation && !spaceAroundRelation) {
          continue;
        } else if (!isWhitespace && wasRelation && spaceAroundRelation) {
          stripped.push(Marker$f.SPACE);
          stripped.push(character);
        } else if (isWhitespace && !wasWhitespace && wasComma && roundBracketLevel > 0 && isSpaceAwarePseudoClass) ; else if (isWhitespace && !wasWhitespace && roundBracketLevel > 0 && isSpaceAwarePseudoClass) {
          stripped.push(character);
        } else if (isWhitespace && (isAttribute || roundBracketLevel > 0) && !isQuoted) ; else if (isWhitespace && wasWhitespace && !isQuoted) ; else if ((isNewLineWin || isNewLineNix) && (isAttribute || roundBracketLevel > 0) && isQuoted) ; else if (isRelation && wasWhitespace && !spaceAroundRelation) {
          stripped.pop();
          stripped.push(character);
        } else if (isRelation && !wasWhitespace && spaceAroundRelation) {
          stripped.push(Marker$f.SPACE);
          stripped.push(character);
        } else if (isWhitespace) {
          stripped.push(Marker$f.SPACE);
        } else {
          stripped.push(character);
        }

        wasEscaped = isEscaped;
        isEscaped = character == Marker$f.BACK_SLASH;
        wasRelation = isRelation;
        wasWhitespace = isWhitespace;
        wasComma = character == Marker$f.COMMA;
      }

      return withCaseAttribute
        ? stripped.join('').replace(CASE_RESTORE_PATTERN, '$1 $2]')
        : stripped.join('');
    }

    function isPseudoClassWithSelectors(value, colonPosition) {
      var pseudoClass = value.substring(colonPosition, value.indexOf(Marker$f.OPEN_ROUND_BRACKET, colonPosition));

      return PSEUDO_CLASSES_WITH_SELECTORS.indexOf(pseudoClass) > -1;
    }

    function removeQuotes(value) {
      if (value.indexOf('\'') == -1 && value.indexOf('"') == -1) {
        return value;
      }

      return value
        .replace(SINGLE_QUOTE_CASE_PATTERN, '=$1 $2')
        .replace(SINGLE_QUOTE_PATTERN, '=$1$2')
        .replace(DOUBLE_QUOTE_CASE_PATTERN, '=$1 $2')
        .replace(DOUBLE_QUOTE_PATTERN, '=$1$2');
    }

    function replacePseudoClasses(value) {
      return value
        .replace('nth-child(1)', 'first-child')
        .replace('nth-of-type(1)', 'first-of-type')
        .replace('nth-of-type(even)', 'nth-of-type(2n)')
        .replace('nth-child(even)', 'nth-child(2n)')
        .replace('nth-of-type(2n+1)', 'nth-of-type(odd)')
        .replace('nth-child(2n+1)', 'nth-child(odd)')
        .replace('nth-last-child(1)', 'last-child')
        .replace('nth-last-of-type(1)', 'last-of-type')
        .replace('nth-last-of-type(even)', 'nth-last-of-type(2n)')
        .replace('nth-last-child(even)', 'nth-last-child(2n)')
        .replace('nth-last-of-type(2n+1)', 'nth-last-of-type(odd)')
        .replace('nth-last-child(2n+1)', 'nth-last-child(odd)');
    }

    function tidyRules$3(rules, removeUnsupported, adjacentSpace, format, warnings) {
      var list = [];
      var repeated = [];

      function removeHTMLComment(rule, match) {
        warnings.push('HTML comment \'' + match + '\' at ' + formatPosition$3(rule[2][0]) + '. Removing.');
        return '';
      }

      for (var i = 0, l = rules.length; i < l; i++) {
        var rule = rules[i];
        var reduced = rule[1];

        reduced = reduced.replace(HTML_COMMENT_PATTERN, removeHTMLComment.bind(null, rule));

        if (hasInvalidCharacters(reduced)) {
          warnings.push('Invalid selector \'' + rule[1] + '\' at ' + formatPosition$3(rule[2][0]) + '. Ignoring.');
          continue;
        }

        reduced = removeWhitespace(reduced, format);
        reduced = removeQuotes(reduced);

        if (adjacentSpace && reduced.indexOf('nav') > 0) {
          reduced = reduced.replace(/\+nav(\S|$)/, '+ nav$1');
        }

        if (removeUnsupported && reduced.indexOf(ASTERISK_PLUS_HTML_HACK) > -1) {
          continue;
        }

        if (removeUnsupported && reduced.indexOf(ASTERISK_FIRST_CHILD_PLUS_HTML_HACK) > -1) {
          continue;
        }

        if (reduced.indexOf('*') > -1) {
          reduced = reduced
            .replace(/\*([:#.[])/g, '$1')
            .replace(/^(:first-child)?\+html/, '*$1+html');
        }

        if (repeated.indexOf(reduced) > -1) {
          continue;
        }

        reduced = replacePseudoClasses(reduced);

        rule[1] = reduced;
        repeated.push(reduced);
        list.push(rule);
      }

      if (list.length == 1 && list[0][1].length === 0) {
        warnings.push('Empty selector \'' + list[0][1] + '\' at ' + formatPosition$3(list[0][2][0]) + '. Ignoring.');
        list = [];
      }

      return list;
    }

    var tidyRules_1 = tidyRules$3;

    var SUPPORTED_COMPACT_BLOCK_MATCHER = /^@media\W/;
    var SUPPORTED_QUOTE_REMOVAL_MATCHER = /^@(?:keyframes|-moz-keyframes|-o-keyframes|-webkit-keyframes)\W/;

    function tidyBlock$1(values, spaceAfterClosingBrace) {
      var withoutSpaceAfterClosingBrace;
      var withoutQuotes;
      var i;

      for (i = values.length - 1; i >= 0; i--) {
        withoutSpaceAfterClosingBrace = !spaceAfterClosingBrace && SUPPORTED_COMPACT_BLOCK_MATCHER.test(values[i][1]);
        withoutQuotes = SUPPORTED_QUOTE_REMOVAL_MATCHER.test(values[i][1]);

        values[i][1] = values[i][1]
          .replace(/\n|\r\n/g, ' ')
          .replace(/\s+/g, ' ')
          .replace(/(,|:|\() /g, '$1')
          .replace(/ \)/g, ')');

        if (withoutQuotes) {
          values[i][1] = values[i][1]
            .replace(/'([a-zA-Z][a-zA-Z\d\-_]+)'/, '$1')
            .replace(/"([a-zA-Z][a-zA-Z\d\-_]+)"/, '$1');
        }

        if (withoutSpaceAfterClosingBrace) {
          values[i][1] = values[i][1]
            .replace(/\) /g, ')');
        }
      }

      return values;
    }

    var tidyBlock_1 = tidyBlock$1;

    function tidyAtRule$1(value) {
      return value
        .replace(/\s+/g, ' ')
        .replace(/url\(\s+/g, 'url(')
        .replace(/\s+\)/g, ')')
        .trim();
    }

    var tidyAtRule_1 = tidyAtRule$1;

    var Hack$3 = {
      ASTERISK: 'asterisk',
      BANG: 'bang',
      BACKSLASH: 'backslash',
      UNDERSCORE: 'underscore'
    };

    var hack = Hack$3;

    function removeUnused$2(properties) {
      for (var i = properties.length - 1; i >= 0; i--) {
        var property = properties[i];

        if (property.unused) {
          property.all.splice(property.position, 1);
        }
      }
    }

    var removeUnused_1 = removeUnused$2;

    var Hack$2 = hack;

    var Marker$e = marker;

    var ASTERISK_HACK = '*';
    var BACKSLASH_HACK = '\\';
    var IMPORTANT_TOKEN = '!important';
    var UNDERSCORE_HACK = '_';
    var BANG_HACK = '!ie';

    function restoreFromOptimizing$5(properties, restoreCallback) {
      var property;
      var restored;
      var current;
      var i;

      for (i = properties.length - 1; i >= 0; i--) {
        property = properties[i];

        if (property.dynamic && property.important) {
          restoreImportant(property);
          continue;
        }

        if (property.dynamic) {
          continue;
        }

        if (property.unused) {
          continue;
        }

        if (!property.dirty && !property.important && !property.hack) {
          continue;
        }

        if (property.optimizable && restoreCallback) {
          restored = restoreCallback(property);
          property.value = restored;
        } else {
          restored = property.value;
        }

        if (property.important) {
          restoreImportant(property);
        }

        if (property.hack) {
          restoreHack(property);
        }

        if ('all' in property) {
          current = property.all[property.position];
          current[1][1] = property.name;

          current.splice(2, current.length - 1);
          Array.prototype.push.apply(current, restored);
        }
      }
    }

    function restoreImportant(property) {
      property.value[property.value.length - 1][1] += IMPORTANT_TOKEN;
    }

    function restoreHack(property) {
      if (property.hack[0] == Hack$2.UNDERSCORE) {
        property.name = UNDERSCORE_HACK + property.name;
      } else if (property.hack[0] == Hack$2.ASTERISK) {
        property.name = ASTERISK_HACK + property.name;
      } else if (property.hack[0] == Hack$2.BACKSLASH) {
        property.value[property.value.length - 1][1] += BACKSLASH_HACK + property.hack[1];
      } else if (property.hack[0] == Hack$2.BANG) {
        property.value[property.value.length - 1][1] += Marker$e.SPACE + BANG_HACK;
      }
    }

    var restoreFromOptimizing_1 = restoreFromOptimizing$5;

    var Token$o = {
      AT_RULE: 'at-rule', // e.g. `@import`, `@charset`
      AT_RULE_BLOCK: 'at-rule-block', // e.g. `@font-face{...}`
      AT_RULE_BLOCK_SCOPE: 'at-rule-block-scope', // e.g. `@font-face`
      COMMENT: 'comment', // e.g. `/* comment */`
      NESTED_BLOCK: 'nested-block', // e.g. `@media screen{...}`, `@keyframes animation {...}`
      NESTED_BLOCK_SCOPE: 'nested-block-scope', // e.g. `@media`, `@keyframes`
      PROPERTY: 'property', // e.g. `color:red`
      PROPERTY_BLOCK: 'property-block', // e.g. `--var:{color:red}`
      PROPERTY_NAME: 'property-name', // e.g. `color`
      PROPERTY_VALUE: 'property-value', // e.g. `red`
      RAW: 'raw', // e.g. anything between /* clean-css ignore:start */ and /* clean-css ignore:end */ comments
      RULE: 'rule', // e.g `div > a{...}`
      RULE_SCOPE: 'rule-scope' // e.g `div > a`
    };

    var token = Token$o;

    var Hack$1 = hack;

    var Marker$d = marker;
    var Token$n = token;

    var Match = {
      ASTERISK: '*',
      BACKSLASH: '\\',
      BANG: '!',
      BANG_SUFFIX_PATTERN: /!\w+$/,
      IMPORTANT_TOKEN: '!important',
      IMPORTANT_TOKEN_PATTERN: new RegExp('!important$', 'i'),
      IMPORTANT_WORD: 'important',
      IMPORTANT_WORD_PATTERN: new RegExp('important$', 'i'),
      SUFFIX_BANG_PATTERN: /!$/,
      UNDERSCORE: '_',
      VARIABLE_REFERENCE_PATTERN: /var\(--.+\)$/
    };

    function wrapAll(properties, skipProperties) {
      var wrapped = [];
      var single;
      var property;
      var i;

      for (i = properties.length - 1; i >= 0; i--) {
        property = properties[i];

        if (property[0] != Token$n.PROPERTY) {
          continue;
        }

        if (skipProperties && skipProperties.indexOf(property[1][1]) > -1) {
          continue;
        }

        single = wrapSingle$3(property);
        single.all = properties;
        single.position = i;
        wrapped.unshift(single);
      }

      return wrapped;
    }

    function someVariableReferences(property) {
      var i, l;
      var value;

      // skipping `property` and property name tokens
      for (i = 2, l = property.length; i < l; i++) {
        value = property[i];

        if (value[0] != Token$n.PROPERTY_VALUE) {
          continue;
        }

        if (isVariableReference(value[1])) {
          return true;
        }
      }

      return false;
    }

    function isVariableReference(value) {
      return Match.VARIABLE_REFERENCE_PATTERN.test(value);
    }

    function isMultiplex(property) {
      var value;
      var i, l;

      for (i = 3, l = property.length; i < l; i++) {
        value = property[i];

        if (value[0] == Token$n.PROPERTY_VALUE && (value[1] == Marker$d.COMMA || value[1] == Marker$d.FORWARD_SLASH)) {
          return true;
        }
      }

      return false;
    }

    function hackFrom(property) {
      var match = false;
      var name = property[1][1];
      var lastValue = property[property.length - 1];

      if (name[0] == Match.UNDERSCORE) {
        match = [Hack$1.UNDERSCORE];
      } else if (name[0] == Match.ASTERISK) {
        match = [Hack$1.ASTERISK];
      } else if (lastValue[1][0] == Match.BANG && !lastValue[1].match(Match.IMPORTANT_WORD_PATTERN)) {
        match = [Hack$1.BANG];
      } else if (lastValue[1].indexOf(Match.BANG) > 0
        && !lastValue[1].match(Match.IMPORTANT_WORD_PATTERN)
        && Match.BANG_SUFFIX_PATTERN.test(lastValue[1])) {
        match = [Hack$1.BANG];
      } else if (lastValue[1].indexOf(Match.BACKSLASH) > 0
        && lastValue[1].indexOf(Match.BACKSLASH) == lastValue[1].length - Match.BACKSLASH.length - 1) {
        match = [Hack$1.BACKSLASH, lastValue[1].substring(lastValue[1].indexOf(Match.BACKSLASH) + 1)];
      } else if (lastValue[1].indexOf(Match.BACKSLASH) === 0 && lastValue[1].length == 2) {
        match = [Hack$1.BACKSLASH, lastValue[1].substring(1)];
      }

      return match;
    }

    function isImportant(property) {
      if (property.length < 3) { return false; }

      var lastValue = property[property.length - 1];
      if (Match.IMPORTANT_TOKEN_PATTERN.test(lastValue[1])) {
        return true;
      } if (Match.IMPORTANT_WORD_PATTERN.test(lastValue[1])
        && Match.SUFFIX_BANG_PATTERN.test(property[property.length - 2][1])) {
        return true;
      }

      return false;
    }

    function stripImportant(property) {
      var lastValue = property[property.length - 1];
      var oneButLastValue = property[property.length - 2];

      if (Match.IMPORTANT_TOKEN_PATTERN.test(lastValue[1])) {
        lastValue[1] = lastValue[1].replace(Match.IMPORTANT_TOKEN_PATTERN, '');
      } else {
        lastValue[1] = lastValue[1].replace(Match.IMPORTANT_WORD_PATTERN, '');
        oneButLastValue[1] = oneButLastValue[1].replace(Match.SUFFIX_BANG_PATTERN, '');
      }

      if (lastValue[1].length === 0) {
        property.pop();
      }

      if (oneButLastValue[1].length === 0) {
        property.pop();
      }
    }

    function stripPrefixHack(property) {
      property[1][1] = property[1][1].substring(1);
    }

    function stripSuffixHack(property, hackFrom) {
      var lastValue = property[property.length - 1];
      lastValue[1] = lastValue[1]
        .substring(0, lastValue[1].indexOf(hackFrom[0] == Hack$1.BACKSLASH ? Match.BACKSLASH : Match.BANG))
        .trim();

      if (lastValue[1].length === 0) {
        property.pop();
      }
    }

    function wrapSingle$3(property) {
      var importantProperty = isImportant(property);
      if (importantProperty) {
        stripImportant(property);
      }

      var whichHack = hackFrom(property);
      if (whichHack[0] == Hack$1.ASTERISK || whichHack[0] == Hack$1.UNDERSCORE) {
        stripPrefixHack(property);
      } else if (whichHack[0] == Hack$1.BACKSLASH || whichHack[0] == Hack$1.BANG) {
        stripSuffixHack(property, whichHack);
      }

      return {
        block: property[2] && property[2][0] == Token$n.PROPERTY_BLOCK,
        components: [],
        dirty: false,
        dynamic: someVariableReferences(property),
        hack: whichHack,
        important: importantProperty,
        name: property[1][1],
        multiplex: property.length > 3 ? isMultiplex(property) : false,
        optimizable: true,
        position: 0,
        shorthand: false,
        unused: false,
        value: property.slice(2)
      };
    }

    var wrapForOptimizing$3 = {
      all: wrapAll,
      single: wrapSingle$3
    };

    function InvalidPropertyError$2(message) {
      this.name = 'InvalidPropertyError';
      this.message = message;
      this.stack = (new Error()).stack;
    }

    InvalidPropertyError$2.prototype = Object.create(Error.prototype);
    InvalidPropertyError$2.prototype.constructor = InvalidPropertyError$2;

    var invalidPropertyError = InvalidPropertyError$2;

    var InvalidPropertyError$1 = invalidPropertyError;

    var wrapSingle$2 = wrapForOptimizing$3.single;

    var Token$m = token;
    var Marker$c = marker;

    var formatPosition$2 = formatPosition_1;

    function _anyIsInherit(values) {
      var i, l;

      for (i = 0, l = values.length; i < l; i++) {
        if (values[i][1] == 'inherit') {
          return true;
        }
      }

      return false;
    }

    function _colorFilter(validator) {
      return function(value) {
        return value[1] == 'invert' || validator.isColor(value[1]) || validator.isPrefixed(value[1]);
      };
    }

    function _styleFilter(validator) {
      return function(value) {
        return value[1] != 'inherit' && validator.isStyleKeyword(value[1]) && !validator.isColorFunction(value[1]);
      };
    }

    function _wrapDefault(name, property, configuration) {
      var descriptor = configuration[name];
      if (descriptor.doubleValues && descriptor.defaultValue.length == 2) {
        return wrapSingle$2([
          Token$m.PROPERTY,
          [Token$m.PROPERTY_NAME, name],
          [Token$m.PROPERTY_VALUE, descriptor.defaultValue[0]],
          [Token$m.PROPERTY_VALUE, descriptor.defaultValue[1]]
        ]);
      } if (descriptor.doubleValues && descriptor.defaultValue.length == 1) {
        return wrapSingle$2([
          Token$m.PROPERTY,
          [Token$m.PROPERTY_NAME, name],
          [Token$m.PROPERTY_VALUE, descriptor.defaultValue[0]]
        ]);
      }
      return wrapSingle$2([
        Token$m.PROPERTY,
        [Token$m.PROPERTY_NAME, name],
        [Token$m.PROPERTY_VALUE, descriptor.defaultValue]
      ]);
    }

    function _widthFilter(validator) {
      return function(value) {
        return value[1] != 'inherit'
          && (validator.isWidth(value[1]) || validator.isUnit(value[1]) || validator.isDynamicUnit(value[1]))
          && !validator.isStyleKeyword(value[1])
          && !validator.isColorFunction(value[1]);
      };
    }

    function animation(property, configuration, validator) {
      var duration = _wrapDefault(property.name + '-duration', property, configuration);
      var timing = _wrapDefault(property.name + '-timing-function', property, configuration);
      var delay = _wrapDefault(property.name + '-delay', property, configuration);
      var iteration = _wrapDefault(property.name + '-iteration-count', property, configuration);
      var direction = _wrapDefault(property.name + '-direction', property, configuration);
      var fill = _wrapDefault(property.name + '-fill-mode', property, configuration);
      var play = _wrapDefault(property.name + '-play-state', property, configuration);
      var name = _wrapDefault(property.name + '-name', property, configuration);
      var components = [duration, timing, delay, iteration, direction, fill, play, name];
      var values = property.value;
      var value;
      var durationSet = false;
      var timingSet = false;
      var delaySet = false;
      var iterationSet = false;
      var directionSet = false;
      var fillSet = false;
      var playSet = false;
      var nameSet = false;
      var i;
      var l;

      if (property.value.length == 1 && property.value[0][1] == 'inherit') {
        // eslint-disable-next-line max-len
        duration.value = timing.value = delay.value = iteration.value = direction.value = fill.value = play.value = name.value = property.value;
        return components;
      }

      if (values.length > 1 && _anyIsInherit(values)) {
        throw new InvalidPropertyError$1('Invalid animation values at ' + formatPosition$2(values[0][2][0]) + '. Ignoring.');
      }

      for (i = 0, l = values.length; i < l; i++) {
        value = values[i];

        if (validator.isTime(value[1]) && !durationSet) {
          duration.value = [value];
          durationSet = true;
        } else if (validator.isTime(value[1]) && !delaySet) {
          delay.value = [value];
          delaySet = true;
        } else if ((validator.isGlobal(value[1]) || validator.isTimingFunction(value[1])) && !timingSet) {
          timing.value = [value];
          timingSet = true;
        } else if ((validator.isAnimationIterationCountKeyword(value[1])
          || validator.isPositiveNumber(value[1]))
          && !iterationSet) {
          iteration.value = [value];
          iterationSet = true;
        } else if (validator.isAnimationDirectionKeyword(value[1]) && !directionSet) {
          direction.value = [value];
          directionSet = true;
        } else if (validator.isAnimationFillModeKeyword(value[1]) && !fillSet) {
          fill.value = [value];
          fillSet = true;
        } else if (validator.isAnimationPlayStateKeyword(value[1]) && !playSet) {
          play.value = [value];
          playSet = true;
        } else if ((validator.isAnimationNameKeyword(value[1]) || validator.isIdentifier(value[1])) && !nameSet) {
          name.value = [value];
          nameSet = true;
        } else {
          throw new InvalidPropertyError$1('Invalid animation value at ' + formatPosition$2(value[2][0]) + '. Ignoring.');
        }
      }

      return components;
    }

    function background$2(property, configuration, validator) {
      var image = _wrapDefault('background-image', property, configuration);
      var position = _wrapDefault('background-position', property, configuration);
      var size = _wrapDefault('background-size', property, configuration);
      var repeat = _wrapDefault('background-repeat', property, configuration);
      var attachment = _wrapDefault('background-attachment', property, configuration);
      var origin = _wrapDefault('background-origin', property, configuration);
      var clip = _wrapDefault('background-clip', property, configuration);
      var color = _wrapDefault('background-color', property, configuration);
      var components = [image, position, size, repeat, attachment, origin, clip, color];
      var values = property.value;

      var positionSet = false;
      var clipSet = false;
      var originSet = false;
      var repeatSet = false;

      var anyValueSet = false;

      if (property.value.length == 1 && property.value[0][1] == 'inherit') {
        // NOTE: 'inherit' is not a valid value for background-attachment
        color.value = image.value = repeat.value = position.value = size.value = origin.value = clip.value = property.value;
        return components;
      }

      if (property.value.length == 1 && property.value[0][1] == '0 0') {
        return components;
      }

      for (var i = values.length - 1; i >= 0; i--) {
        var value = values[i];

        if (validator.isBackgroundAttachmentKeyword(value[1])) {
          attachment.value = [value];
          anyValueSet = true;
        } else if (validator.isBackgroundClipKeyword(value[1]) || validator.isBackgroundOriginKeyword(value[1])) {
          if (clipSet) {
            origin.value = [value];
            originSet = true;
          } else {
            clip.value = [value];
            clipSet = true;
          }
          anyValueSet = true;
        } else if (validator.isBackgroundRepeatKeyword(value[1])) {
          if (repeatSet) {
            repeat.value.unshift(value);
          } else {
            repeat.value = [value];
            repeatSet = true;
          }
          anyValueSet = true;
        } else if (validator.isBackgroundPositionKeyword(value[1])
        || validator.isBackgroundSizeKeyword(value[1])
        || validator.isUnit(value[1])
        || validator.isDynamicUnit(value[1])) {
          if (i > 0) {
            var previousValue = values[i - 1];

            if (previousValue[1] == Marker$c.FORWARD_SLASH) {
              size.value = [value];
            } else if (i > 1 && values[i - 2][1] == Marker$c.FORWARD_SLASH) {
              size.value = [previousValue, value];
              i -= 2;
            } else {
              if (!positionSet) { position.value = []; }

              position.value.unshift(value);
              positionSet = true;
            }
          } else {
            if (!positionSet) { position.value = []; }

            position.value.unshift(value);
            positionSet = true;
          }
          anyValueSet = true;
        } else if ((color.value[0][1] == configuration[color.name].defaultValue || color.value[0][1] == 'none') && (validator.isColor(value[1]) || validator.isPrefixed(value[1]))) {
          color.value = [value];
          anyValueSet = true;
        } else if (validator.isUrl(value[1]) || validator.isFunction(value[1])) {
          image.value = [value];
          anyValueSet = true;
        }
      }

      if (clipSet && !originSet) { origin.value = clip.value.slice(0); }

      if (!anyValueSet) {
        throw new InvalidPropertyError$1('Invalid background value at ' + formatPosition$2(values[0][2][0]) + '. Ignoring.');
      }

      return components;
    }

    function borderRadius$2(property, configuration) {
      var values = property.value;
      var splitAt = -1;

      for (var i = 0, l = values.length; i < l; i++) {
        if (values[i][1] == Marker$c.FORWARD_SLASH) {
          splitAt = i;
          break;
        }
      }

      if (splitAt === 0 || splitAt === values.length - 1) {
        throw new InvalidPropertyError$1('Invalid border-radius value at ' + formatPosition$2(values[0][2][0]) + '. Ignoring.');
      }

      var target = _wrapDefault(property.name, property, configuration);
      target.value = splitAt > -1
        ? values.slice(0, splitAt)
        : values.slice(0);
      target.components = fourValues$1(target, configuration);

      var remainder = _wrapDefault(property.name, property, configuration);
      remainder.value = splitAt > -1
        ? values.slice(splitAt + 1)
        : values.slice(0);
      remainder.components = fourValues$1(remainder, configuration);

      for (var j = 0; j < 4; j++) {
        target.components[j].multiplex = true;
        target.components[j].value = target.components[j].value.concat(remainder.components[j].value);
      }

      return target.components;
    }

    function font$1(property, configuration, validator) {
      var style = _wrapDefault('font-style', property, configuration);
      var variant = _wrapDefault('font-variant', property, configuration);
      var weight = _wrapDefault('font-weight', property, configuration);
      var stretch = _wrapDefault('font-stretch', property, configuration);
      var size = _wrapDefault('font-size', property, configuration);
      var height = _wrapDefault('line-height', property, configuration);
      var family = _wrapDefault('font-family', property, configuration);
      var components = [style, variant, weight, stretch, size, height, family];
      var values = property.value;
      var fuzzyMatched = 4; // style, variant, weight, and stretch
      var index = 0;
      var isStretchSet = false;
      var isStretchValid;
      var isStyleSet = false;
      var isStyleValid;
      var isVariantSet = false;
      var isVariantValid;
      var isWeightSet = false;
      var isWeightValid;
      var appendableFamilyName = false;

      if (!values[index]) {
        throw new InvalidPropertyError$1('Missing font values at ' + formatPosition$2(property.all[property.position][1][2][0]) + '. Ignoring.');
      }

      if (values.length == 1 && values[0][1] == 'inherit') {
        style.value = variant.value = weight.value = stretch.value = size.value = height.value = family.value = values;
        return components;
      }

      if (values.length == 1
        && (validator.isFontKeyword(values[0][1])
        || validator.isGlobal(values[0][1])
        || validator.isPrefixed(values[0][1]))
      ) {
        values[0][1] = Marker$c.INTERNAL + values[0][1];
        style.value = variant.value = weight.value = stretch.value = size.value = height.value = family.value = values;
        return components;
      }

      if (values.length < 2 || !_anyIsFontSize(values, validator) || !_anyIsFontFamily(values, validator)) {
        throw new InvalidPropertyError$1('Invalid font values at ' + formatPosition$2(property.all[property.position][1][2][0]) + '. Ignoring.');
      }

      if (values.length > 1 && _anyIsInherit(values)) {
        throw new InvalidPropertyError$1('Invalid font values at ' + formatPosition$2(values[0][2][0]) + '. Ignoring.');
      }

      // fuzzy match style, variant, weight, and stretch on first elements
      while (index < fuzzyMatched) {
        isStretchValid = validator.isFontStretchKeyword(values[index][1]) || validator.isGlobal(values[index][1]);
        isStyleValid = validator.isFontStyleKeyword(values[index][1]) || validator.isGlobal(values[index][1]);
        isVariantValid = validator.isFontVariantKeyword(values[index][1]) || validator.isGlobal(values[index][1]);
        isWeightValid = validator.isFontWeightKeyword(values[index][1]) || validator.isGlobal(values[index][1]);

        if (isStyleValid && !isStyleSet) {
          style.value = [values[index]];
          isStyleSet = true;
        } else if (isVariantValid && !isVariantSet) {
          variant.value = [values[index]];
          isVariantSet = true;
        } else if (isWeightValid && !isWeightSet) {
          weight.value = [values[index]];
          isWeightSet = true;
        } else if (isStretchValid && !isStretchSet) {
          stretch.value = [values[index]];
          isStretchSet = true;
        } else if (isStyleValid
          && isStyleSet
          || isVariantValid
          && isVariantSet
          || isWeightValid
          && isWeightSet
          || isStretchValid
          && isStretchSet) {
          throw new InvalidPropertyError$1('Invalid font style / variant / weight / stretch value at ' + formatPosition$2(values[0][2][0]) + '. Ignoring.');
        } else {
          break;
        }

        index++;
      }

      // now comes font-size ...
      if (validator.isFontSizeKeyword(values[index][1])
        || validator.isUnit(values[index][1])
        && !validator.isDynamicUnit(values[index][1])) {
        size.value = [values[index]];
        index++;
      } else {
        throw new InvalidPropertyError$1('Missing font size at ' + formatPosition$2(values[0][2][0]) + '. Ignoring.');
      }

      if (!values[index]) {
        throw new InvalidPropertyError$1('Missing font family at ' + formatPosition$2(values[0][2][0]) + '. Ignoring.');
      }

      // ... and perhaps line-height
      if (values[index]
        && values[index][1] == Marker$c.FORWARD_SLASH
        && values[index + 1]
        && (validator.isLineHeightKeyword(values[index + 1][1])
        || validator.isUnit(values[index + 1][1])
        || validator.isNumber(values[index + 1][1]))) {
        height.value = [values[index + 1]];
        index++;
        index++;
      }

      // ... and whatever comes next is font-family
      family.value = [];

      while (values[index]) {
        if (values[index][1] == Marker$c.COMMA) {
          appendableFamilyName = false;
        } else {
          if (appendableFamilyName) {
            family.value[family.value.length - 1][1] += Marker$c.SPACE + values[index][1];
          } else {
            family.value.push(values[index]);
          }

          appendableFamilyName = true;
        }

        index++;
      }

      if (family.value.length === 0) {
        throw new InvalidPropertyError$1('Missing font family at ' + formatPosition$2(values[0][2][0]) + '. Ignoring.');
      }

      return components;
    }

    function _anyIsFontSize(values, validator) {
      var value;
      var i, l;

      for (i = 0, l = values.length; i < l; i++) {
        value = values[i];

        if (validator.isFontSizeKeyword(value[1])
          || validator.isUnit(value[1])
          && !validator.isDynamicUnit(value[1])
          || validator.isFunction(value[1])) {
          return true;
        }
      }

      return false;
    }

    function _anyIsFontFamily(values, validator) {
      var value;
      var i, l;

      for (i = 0, l = values.length; i < l; i++) {
        value = values[i];

        if (validator.isIdentifier(value[1]) || validator.isQuotedText(value[1])) {
          return true;
        }
      }

      return false;
    }

    function fourValues$1(property, configuration) {
      var componentNames = configuration[property.name].components;
      var components = [];
      var value = property.value;

      if (value.length < 1) { return []; }

      if (value.length < 2) { value[1] = value[0].slice(0); }
      if (value.length < 3) { value[2] = value[0].slice(0); }
      if (value.length < 4) { value[3] = value[1].slice(0); }

      for (var i = componentNames.length - 1; i >= 0; i--) {
        var component = wrapSingle$2([
          Token$m.PROPERTY,
          [Token$m.PROPERTY_NAME, componentNames[i]]
        ]);
        component.value = [value[i]];
        components.unshift(component);
      }

      return components;
    }

    function multiplex$1(splitWith) {
      return function(property, configuration, validator) {
        var splitsAt = [];
        var values = property.value;
        var i, j, l, m;

        // find split commas
        for (i = 0, l = values.length; i < l; i++) {
          if (values[i][1] == ',') { splitsAt.push(i); }
        }

        if (splitsAt.length === 0) { return splitWith(property, configuration, validator); }

        var splitComponents = [];

        // split over commas, and into components
        for (i = 0, l = splitsAt.length; i <= l; i++) {
          var from = i === 0 ? 0 : splitsAt[i - 1] + 1;
          var to = i < l ? splitsAt[i] : values.length;

          var _property = _wrapDefault(property.name, property, configuration);
          _property.value = values.slice(from, to);

          if (_property.value.length > 0) {
            splitComponents.push(splitWith(_property, configuration, validator));
          }
        }

        var components = splitComponents[0];

        // group component values from each split
        for (i = 0, l = components.length; i < l; i++) {
          components[i].multiplex = true;

          for (j = 1, m = splitComponents.length; j < m; j++) {
            components[i].value.push([Token$m.PROPERTY_VALUE, Marker$c.COMMA]);
            Array.prototype.push.apply(components[i].value, splitComponents[j][i].value);
          }
        }

        return components;
      };
    }

    function listStyle(property, configuration, validator) {
      var type = _wrapDefault('list-style-type', property, configuration);
      var position = _wrapDefault('list-style-position', property, configuration);
      var image = _wrapDefault('list-style-image', property, configuration);
      var components = [type, position, image];

      if (property.value.length == 1 && property.value[0][1] == 'inherit') {
        type.value = position.value = image.value = [property.value[0]];
        return components;
      }

      var values = property.value.slice(0);
      var total = values.length;
      var index = 0;

      // `image` first...
      for (index = 0, total = values.length; index < total; index++) {
        if (validator.isUrl(values[index][1]) || values[index][1] == '0') {
          image.value = [values[index]];
          values.splice(index, 1);
          break;
        }
      }

      // ... then `position`
      for (index = 0, total = values.length; index < total; index++) {
        if (validator.isListStylePositionKeyword(values[index][1])) {
          position.value = [values[index]];
          values.splice(index, 1);
          break;
        }
      }

      // ... and what's left is a `type`
      if (values.length > 0 && (validator.isListStyleTypeKeyword(values[0][1]) || validator.isIdentifier(values[0][1]))) {
        type.value = [values[0]];
      }

      return components;
    }

    function transition(property, configuration, validator) {
      var prop = _wrapDefault(property.name + '-property', property, configuration);
      var duration = _wrapDefault(property.name + '-duration', property, configuration);
      var timing = _wrapDefault(property.name + '-timing-function', property, configuration);
      var delay = _wrapDefault(property.name + '-delay', property, configuration);
      var components = [prop, duration, timing, delay];
      var values = property.value;
      var value;
      var durationSet = false;
      var delaySet = false;
      var propSet = false;
      var timingSet = false;
      var i;
      var l;

      if (property.value.length == 1 && property.value[0][1] == 'inherit') {
        prop.value = duration.value = timing.value = delay.value = property.value;
        return components;
      }

      if (values.length > 1 && _anyIsInherit(values)) {
        throw new InvalidPropertyError$1('Invalid animation values at ' + formatPosition$2(values[0][2][0]) + '. Ignoring.');
      }

      for (i = 0, l = values.length; i < l; i++) {
        value = values[i];

        if (validator.isTime(value[1]) && !durationSet) {
          duration.value = [value];
          durationSet = true;
        } else if (validator.isTime(value[1]) && !delaySet) {
          delay.value = [value];
          delaySet = true;
        } else if ((validator.isGlobal(value[1]) || validator.isTimingFunction(value[1])) && !timingSet) {
          timing.value = [value];
          timingSet = true;
        } else if (validator.isIdentifier(value[1]) && !propSet) {
          prop.value = [value];
          propSet = true;
        } else {
          throw new InvalidPropertyError$1('Invalid animation value at ' + formatPosition$2(value[2][0]) + '. Ignoring.');
        }
      }

      return components;
    }

    function widthStyleColor(property, configuration, validator) {
      var descriptor = configuration[property.name];
      var components = [
        _wrapDefault(descriptor.components[0], property, configuration),
        _wrapDefault(descriptor.components[1], property, configuration),
        _wrapDefault(descriptor.components[2], property, configuration)
      ];
      var color, style, width;

      for (var i = 0; i < 3; i++) {
        var component = components[i];

        if (component.name.indexOf('color') > 0) { color = component; } else if (component.name.indexOf('style') > 0) { style = component; } else { width = component; }
      }

      if ((property.value.length == 1 && property.value[0][1] == 'inherit')
          || (property.value.length == 3 && property.value[0][1] == 'inherit' && property.value[1][1] == 'inherit' && property.value[2][1] == 'inherit')) {
        color.value = style.value = width.value = [property.value[0]];
        return components;
      }

      var values = property.value.slice(0);
      var match, matches;

      // NOTE: usually users don't follow the required order of parts in this shorthand,
      // so we'll try to parse it caring as little about order as possible

      if (values.length > 0) {
        matches = values.filter(_widthFilter(validator));
        match = matches.length > 1 && (matches[0][1] == 'none' || matches[0][1] == 'auto') ? matches[1] : matches[0];
        if (match) {
          width.value = [match];
          values.splice(values.indexOf(match), 1);
        }
      }

      if (values.length > 0) {
        match = values.filter(_styleFilter(validator))[0];
        if (match) {
          style.value = [match];
          values.splice(values.indexOf(match), 1);
        }
      }

      if (values.length > 0) {
        match = values.filter(_colorFilter(validator))[0];
        if (match) {
          color.value = [match];
          values.splice(values.indexOf(match), 1);
        }
      }

      return components;
    }

    var breakUp$1 = {
      animation: animation,
      background: background$2,
      border: widthStyleColor,
      borderRadius: borderRadius$2,
      font: font$1,
      fourValues: fourValues$1,
      listStyle: listStyle,
      multiplex: multiplex$1,
      outline: widthStyleColor,
      transition: transition
    };

    var VENDOR_PREFIX_PATTERN = /(?:^|\W)(-\w+-)/g;

    function unique(value) {
      var prefixes = [];
      var match;

      // eslint-disable-next-line no-cond-assign
      while ((match = VENDOR_PREFIX_PATTERN.exec(value)) !== null) {
        if (prefixes.indexOf(match[0]) == -1) {
          prefixes.push(match[0]);
        }
      }

      return prefixes;
    }

    function same(value1, value2) {
      return unique(value1).sort().join(',') == unique(value2).sort().join(',');
    }

    var vendorPrefixes = {
      unique: unique,
      same: same
    };

    var sameVendorPrefixes = vendorPrefixes.same;

    function understandable$1(validator, value1, value2, _position, isPaired) {
      if (!sameVendorPrefixes(value1, value2)) {
        return false;
      }

      if (isPaired && validator.isVariable(value1) !== validator.isVariable(value2)) {
        return false;
      }

      return true;
    }

    var understandable_1 = understandable$1;

    var understandable = understandable_1;

    function animationIterationCount(validator, value1, value2) {
      if (!understandable(validator, value1, value2, 0, true)
        && !(validator.isAnimationIterationCountKeyword(value2) || validator.isPositiveNumber(value2))) {
        return false;
      } if (validator.isVariable(value1) && validator.isVariable(value2)) {
        return true;
      }

      return validator.isAnimationIterationCountKeyword(value2) || validator.isPositiveNumber(value2);
    }

    function animationName(validator, value1, value2) {
      if (!understandable(validator, value1, value2, 0, true)
        && !(validator.isAnimationNameKeyword(value2) || validator.isIdentifier(value2))) {
        return false;
      } if (validator.isVariable(value1) && validator.isVariable(value2)) {
        return true;
      }

      return validator.isAnimationNameKeyword(value2) || validator.isIdentifier(value2);
    }

    function areSameFunction(validator, value1, value2) {
      if (!validator.isFunction(value1) || !validator.isFunction(value2)) {
        return false;
      }

      var function1Name = value1.substring(0, value1.indexOf('('));
      var function2Name = value2.substring(0, value2.indexOf('('));

      var function1Value = value1.substring(function1Name.length + 1, value1.length - 1);
      var function2Value = value2.substring(function2Name.length + 1, value2.length - 1);

      if (validator.isFunction(function1Value) || validator.isFunction(function2Value)) {
        return function1Name === function2Name && areSameFunction(validator, function1Value, function2Value);
      }
      return function1Name === function2Name;
    }

    function backgroundPosition(validator, value1, value2) {
      if (!understandable(validator, value1, value2, 0, true)
        && !(validator.isBackgroundPositionKeyword(value2) || validator.isGlobal(value2))) {
        return false;
      } if (validator.isVariable(value1) && validator.isVariable(value2)) {
        return true;
      } if (validator.isBackgroundPositionKeyword(value2) || validator.isGlobal(value2)) {
        return true;
      }

      return unit$1(validator, value1, value2);
    }

    function backgroundSize(validator, value1, value2) {
      if (!understandable(validator, value1, value2, 0, true)
        && !(validator.isBackgroundSizeKeyword(value2) || validator.isGlobal(value2))) {
        return false;
      } if (validator.isVariable(value1) && validator.isVariable(value2)) {
        return true;
      } if (validator.isBackgroundSizeKeyword(value2) || validator.isGlobal(value2)) {
        return true;
      }

      return unit$1(validator, value1, value2);
    }

    function color$1(validator, value1, value2) {
      if (!understandable(validator, value1, value2, 0, true) && !validator.isColor(value2)) {
        return false;
      } if (validator.isVariable(value1) && validator.isVariable(value2)) {
        return true;
      } if (!validator.colorOpacity && (validator.isRgbColor(value1) || validator.isHslColor(value1))) {
        return false;
      } if (!validator.colorOpacity && (validator.isRgbColor(value2) || validator.isHslColor(value2))) {
        return false;
      } if (!validator.colorHexAlpha && (validator.isHexAlphaColor(value1) || validator.isHexAlphaColor(value2))) {
        return false;
      } if (validator.isColor(value1) && validator.isColor(value2)) {
        return true;
      }

      return sameFunctionOrValue(validator, value1, value2);
    }

    function components(overrideCheckers) {
      return function(validator, value1, value2, position) {
        return overrideCheckers[position](validator, value1, value2);
      };
    }

    function fontFamily(validator, value1, value2) {
      return understandable(validator, value1, value2, 0, true);
    }

    function image(validator, value1, value2) {
      if (!understandable(validator, value1, value2, 0, true) && !validator.isImage(value2)) {
        return false;
      } if (validator.isVariable(value1) && validator.isVariable(value2)) {
        return true;
      } if (validator.isImage(value2)) {
        return true;
      } if (validator.isImage(value1)) {
        return false;
      }

      return sameFunctionOrValue(validator, value1, value2);
    }

    function keyword(propertyName) {
      return function(validator, value1, value2) {
        if (!understandable(validator, value1, value2, 0, true) && !validator.isKeyword(propertyName)(value2)) {
          return false;
        } if (validator.isVariable(value1) && validator.isVariable(value2)) {
          return true;
        }

        return validator.isKeyword(propertyName)(value2);
      };
    }

    function keywordWithGlobal(propertyName) {
      return function(validator, value1, value2) {
        if (!understandable(validator, value1, value2, 0, true)
          && !(validator.isKeyword(propertyName)(value2) || validator.isGlobal(value2))) {
          return false;
        } if (validator.isVariable(value1) && validator.isVariable(value2)) {
          return true;
        }

        return validator.isKeyword(propertyName)(value2) || validator.isGlobal(value2);
      };
    }

    function propertyName$1(validator, value1, value2) {
      if (!understandable(validator, value1, value2, 0, true) && !validator.isIdentifier(value2)) {
        return false;
      } if (validator.isVariable(value1) && validator.isVariable(value2)) {
        return true;
      }

      return validator.isIdentifier(value2);
    }

    function sameFunctionOrValue(validator, value1, value2) {
      return areSameFunction(validator, value1, value2)
        ? true
        : value1 === value2;
    }

    function textShadow(validator, value1, value2) {
      if (!understandable(validator, value1, value2, 0, true)
        && !(validator.isUnit(value2)
        || validator.isColor(value2)
        || validator.isGlobal(value2))) {
        return false;
      } if (validator.isVariable(value1) && validator.isVariable(value2)) {
        return true;
      }

      return validator.isUnit(value2) || validator.isColor(value2) || validator.isGlobal(value2);
    }

    function time$1(validator, value1, value2) {
      if (!understandable(validator, value1, value2, 0, true) && !validator.isTime(value2)) {
        return false;
      } if (validator.isVariable(value1) && validator.isVariable(value2)) {
        return true;
      } if (validator.isTime(value1) && !validator.isTime(value2)) {
        return false;
      } if (validator.isTime(value2)) {
        return true;
      } if (validator.isTime(value1)) {
        return false;
      } if (validator.isFunction(value1)
        && !validator.isPrefixed(value1)
        && validator.isFunction(value2)
        && !validator.isPrefixed(value2)) {
        return true;
      }

      return sameFunctionOrValue(validator, value1, value2);
    }

    function timingFunction(validator, value1, value2) {
      if (!understandable(validator, value1, value2, 0, true)
        && !(validator.isTimingFunction(value2) || validator.isGlobal(value2))) {
        return false;
      } if (validator.isVariable(value1) && validator.isVariable(value2)) {
        return true;
      }

      return validator.isTimingFunction(value2) || validator.isGlobal(value2);
    }

    function unit$1(validator, value1, value2) {
      if (!understandable(validator, value1, value2, 0, true) && !validator.isUnit(value2)) {
        return false;
      } if (validator.isVariable(value1) && validator.isVariable(value2)) {
        return true;
      } if (validator.isUnit(value1) && !validator.isUnit(value2)) {
        return false;
      } if (validator.isUnit(value2)) {
        return true;
      } if (validator.isUnit(value1)) {
        return false;
      } if (validator.isFunction(value1)
        && !validator.isPrefixed(value1)
        && validator.isFunction(value2)
        && !validator.isPrefixed(value2)) {
        return true;
      }

      return sameFunctionOrValue(validator, value1, value2);
    }

    function unitOrKeywordWithGlobal(propertyName) {
      var byKeyword = keywordWithGlobal(propertyName);

      return function(validator, value1, value2) {
        return unit$1(validator, value1, value2) || byKeyword(validator, value1, value2);
      };
    }

    function unitOrNumber(validator, value1, value2) {
      if (!understandable(validator, value1, value2, 0, true)
        && !(validator.isUnit(value2)
        || validator.isNumber(value2))) {
        return false;
      } if (validator.isVariable(value1) && validator.isVariable(value2)) {
        return true;
      } if ((validator.isUnit(value1)
        || validator.isNumber(value1))
        && !(validator.isUnit(value2)
        || validator.isNumber(value2))) {
        return false;
      } if (validator.isUnit(value2) || validator.isNumber(value2)) {
        return true;
      } if (validator.isUnit(value1) || validator.isNumber(value1)) {
        return false;
      } if (validator.isFunction(value1)
        && !validator.isPrefixed(value1)
        && validator.isFunction(value2)
        && !validator.isPrefixed(value2)) {
        return true;
      }

      return sameFunctionOrValue(validator, value1, value2);
    }

    function zIndex(validator, value1, value2) {
      if (!understandable(validator, value1, value2, 0, true) && !validator.isZIndex(value2)) {
        return false;
      } if (validator.isVariable(value1) && validator.isVariable(value2)) {
        return true;
      }

      return validator.isZIndex(value2);
    }

    var canOverride$1 = {
      generic: {
        color: color$1,
        components: components,
        image: image,
        propertyName: propertyName$1,
        time: time$1,
        timingFunction: timingFunction,
        unit: unit$1,
        unitOrNumber: unitOrNumber
      },
      property: {
        animationDirection: keywordWithGlobal('animation-direction'),
        animationFillMode: keyword('animation-fill-mode'),
        animationIterationCount: animationIterationCount,
        animationName: animationName,
        animationPlayState: keywordWithGlobal('animation-play-state'),
        backgroundAttachment: keyword('background-attachment'),
        backgroundClip: keywordWithGlobal('background-clip'),
        backgroundOrigin: keyword('background-origin'),
        backgroundPosition: backgroundPosition,
        backgroundRepeat: keyword('background-repeat'),
        backgroundSize: backgroundSize,
        bottom: unitOrKeywordWithGlobal('bottom'),
        borderCollapse: keyword('border-collapse'),
        borderStyle: keywordWithGlobal('*-style'),
        clear: keywordWithGlobal('clear'),
        cursor: keywordWithGlobal('cursor'),
        display: keywordWithGlobal('display'),
        float: keywordWithGlobal('float'),
        left: unitOrKeywordWithGlobal('left'),
        fontFamily: fontFamily,
        fontStretch: keywordWithGlobal('font-stretch'),
        fontStyle: keywordWithGlobal('font-style'),
        fontVariant: keywordWithGlobal('font-variant'),
        fontWeight: keywordWithGlobal('font-weight'),
        listStyleType: keywordWithGlobal('list-style-type'),
        listStylePosition: keywordWithGlobal('list-style-position'),
        outlineStyle: keywordWithGlobal('*-style'),
        overflow: keywordWithGlobal('overflow'),
        position: keywordWithGlobal('position'),
        right: unitOrKeywordWithGlobal('right'),
        textAlign: keywordWithGlobal('text-align'),
        textDecoration: keywordWithGlobal('text-decoration'),
        textOverflow: keywordWithGlobal('text-overflow'),
        textShadow: textShadow,
        top: unitOrKeywordWithGlobal('top'),
        transform: sameFunctionOrValue,
        verticalAlign: unitOrKeywordWithGlobal('vertical-align'),
        visibility: keywordWithGlobal('visibility'),
        whiteSpace: keywordWithGlobal('white-space'),
        zIndex: zIndex
      }
    };

    var wrapSingle$1 = wrapForOptimizing$3.single;

    var Token$l = token;

    function deep(property) {
      var cloned = shallow(property);
      for (var i = property.components.length - 1; i >= 0; i--) {
        var component = shallow(property.components[i]);
        component.value = property.components[i].value.slice(0);
        cloned.components.unshift(component);
      }

      cloned.dirty = true;
      cloned.value = property.value.slice(0);

      return cloned;
    }

    function shallow(property) {
      var cloned = wrapSingle$1([
        Token$l.PROPERTY,
        [Token$l.PROPERTY_NAME, property.name]
      ]);
      cloned.important = property.important;
      cloned.hack = property.hack;
      cloned.unused = false;
      return cloned;
    }

    var clone = {
      deep: deep,
      shallow: shallow
    };

    var shallowClone$1 = clone.shallow;

    var Token$k = token;
    var Marker$b = marker;

    function isInheritOnly(values) {
      for (var i = 0, l = values.length; i < l; i++) {
        var value = values[i][1];

        if (value != 'inherit' && value != Marker$b.COMMA && value != Marker$b.FORWARD_SLASH) { return false; }
      }

      return true;
    }

    function background$1(property, configuration, lastInMultiplex) {
      var components = property.components;
      var restored = [];
      var needsOne, needsBoth;

      function restoreValue(component) {
        Array.prototype.unshift.apply(restored, component.value);
      }

      function isDefaultValue(component) {
        var descriptor = configuration[component.name];

        if (descriptor.doubleValues && descriptor.defaultValue.length == 1) {
          return component.value[0][1] == descriptor.defaultValue[0]
            && (component.value[1]
              ? component.value[1][1] == descriptor.defaultValue[0]
              : true);
        } if (descriptor.doubleValues && descriptor.defaultValue.length != 1) {
          return component.value[0][1] == descriptor.defaultValue[0]
          && ((component.value[1] ? component.value[1][1] : component.value[0][1])
            == descriptor.defaultValue[1]);
        }
        return component.value[0][1] == descriptor.defaultValue;
      }

      for (var i = components.length - 1; i >= 0; i--) {
        var component = components[i];
        var isDefault = isDefaultValue(component);

        if (component.name == 'background-clip') {
          var originComponent = components[i - 1];
          var isOriginDefault = isDefaultValue(originComponent);

          needsOne = component.value[0][1] == originComponent.value[0][1];

          needsBoth = !needsOne && (
            (isOriginDefault && !isDefault)
            || (!isOriginDefault && !isDefault)
            || (!isOriginDefault && isDefault && component.value[0][1] != originComponent.value[0][1]));

          if (needsOne) {
            restoreValue(originComponent);
          } else if (needsBoth) {
            restoreValue(component);
            restoreValue(originComponent);
          }

          i--;
        } else if (component.name == 'background-size') {
          var positionComponent = components[i - 1];
          var isPositionDefault = isDefaultValue(positionComponent);

          needsOne = !isPositionDefault && isDefault;

          needsBoth = !needsOne
            && (isPositionDefault && !isDefault || !isPositionDefault && !isDefault);

          if (needsOne) {
            restoreValue(positionComponent);
          } else if (needsBoth) {
            restoreValue(component);
            restored.unshift([Token$k.PROPERTY_VALUE, Marker$b.FORWARD_SLASH]);
            restoreValue(positionComponent);
          } else if (positionComponent.value.length == 1) {
            restoreValue(positionComponent);
          }

          i--;
        } else {
          if (isDefault || configuration[component.name].multiplexLastOnly && !lastInMultiplex) { continue; }

          restoreValue(component);
        }
      }

      if (restored.length === 0 && property.value.length == 1 && property.value[0][1] == '0') { restored.push(property.value[0]); }

      if (restored.length === 0) { restored.push([Token$k.PROPERTY_VALUE, configuration[property.name].defaultValue]); }

      if (isInheritOnly(restored)) { return [restored[0]]; }

      return restored;
    }

    function borderRadius$1(property) {
      if (property.multiplex) {
        var horizontal = shallowClone$1(property);
        var vertical = shallowClone$1(property);

        for (var i = 0; i < 4; i++) {
          var component = property.components[i];

          var horizontalComponent = shallowClone$1(property);
          horizontalComponent.value = [component.value[0]];
          horizontal.components.push(horizontalComponent);

          var verticalComponent = shallowClone$1(property);
          // FIXME: only shorthand compactor (see breakup#borderRadius) knows that border radius
          // longhands have two values, whereas tokenizer does not care about populating 2nd value
          // if it's missing, hence this fallback
          verticalComponent.value = [component.value[1] || component.value[0]];
          vertical.components.push(verticalComponent);
        }

        var horizontalValues = fourValues(horizontal);
        var verticalValues = fourValues(vertical);

        if (horizontalValues.length == verticalValues.length
            && horizontalValues[0][1] == verticalValues[0][1]
            && (horizontalValues.length > 1 ? horizontalValues[1][1] == verticalValues[1][1] : true)
            && (horizontalValues.length > 2 ? horizontalValues[2][1] == verticalValues[2][1] : true)
            && (horizontalValues.length > 3 ? horizontalValues[3][1] == verticalValues[3][1] : true)) {
          return horizontalValues;
        }
        return horizontalValues.concat([[Token$k.PROPERTY_VALUE, Marker$b.FORWARD_SLASH]]).concat(verticalValues);
      }
      return fourValues(property);
    }

    function font(property, configuration) {
      var components = property.components;
      var restored = [];
      var component;
      var componentIndex = 0;
      var fontFamilyIndex = 0;

      if (property.value[0][1].indexOf(Marker$b.INTERNAL) === 0) {
        property.value[0][1] = property.value[0][1].substring(Marker$b.INTERNAL.length);
        return property.value;
      }

      // first four components are optional
      while (componentIndex < 4) {
        component = components[componentIndex];

        if (component.value[0][1] != configuration[component.name].defaultValue) {
          Array.prototype.push.apply(restored, component.value);
        }

        componentIndex++;
      }

      // then comes font-size
      Array.prototype.push.apply(restored, components[componentIndex].value);
      componentIndex++;

      // then may come line-height
      if (components[componentIndex].value[0][1] != configuration[components[componentIndex].name].defaultValue) {
        Array.prototype.push.apply(restored, [[Token$k.PROPERTY_VALUE, Marker$b.FORWARD_SLASH]]);
        Array.prototype.push.apply(restored, components[componentIndex].value);
      }

      componentIndex++;

      // then comes font-family
      while (components[componentIndex].value[fontFamilyIndex]) {
        restored.push(components[componentIndex].value[fontFamilyIndex]);

        if (components[componentIndex].value[fontFamilyIndex + 1]) {
          restored.push([Token$k.PROPERTY_VALUE, Marker$b.COMMA]);
        }

        fontFamilyIndex++;
      }

      if (isInheritOnly(restored)) {
        return [restored[0]];
      }

      return restored;
    }

    function fourValues(property) {
      var components = property.components;
      var value1 = components[0].value[0];
      var value2 = components[1].value[0];
      var value3 = components[2].value[0];
      var value4 = components[3].value[0];

      if (value1[1] == value2[1] && value1[1] == value3[1] && value1[1] == value4[1]) {
        return [value1];
      } if (value1[1] == value3[1] && value2[1] == value4[1]) {
        return [value1, value2];
      } if (value2[1] == value4[1]) {
        return [value1, value2, value3];
      }
      return [value1, value2, value3, value4];
    }

    function multiplex(restoreWith) {
      return function(property, configuration) {
        if (!property.multiplex) { return restoreWith(property, configuration, true); }

        var multiplexSize = 0;
        var restored = [];
        var componentMultiplexSoFar = {};
        var i, l;

        // At this point we don't know what's the multiplex size, e.g. how many background layers are there
        for (i = 0, l = property.components[0].value.length; i < l; i++) {
          if (property.components[0].value[i][1] == Marker$b.COMMA) { multiplexSize++; }
        }

        for (i = 0; i <= multiplexSize; i++) {
          var _property = shallowClone$1(property);

          // We split multiplex into parts and restore them one by one
          for (var j = 0, m = property.components.length; j < m; j++) {
            var componentToClone = property.components[j];
            var _component = shallowClone$1(componentToClone);
            _property.components.push(_component);

            // The trick is some properties has more than one value, so we iterate over values looking for
            // a multiplex separator - a comma
            for (var k = componentMultiplexSoFar[_component.name] || 0, n = componentToClone.value.length; k < n; k++) {
              if (componentToClone.value[k][1] == Marker$b.COMMA) {
                componentMultiplexSoFar[_component.name] = k + 1;
                break;
              }

              _component.value.push(componentToClone.value[k]);
            }
          }

          // No we can restore shorthand value
          var lastInMultiplex = i == multiplexSize;
          var _restored = restoreWith(_property, configuration, lastInMultiplex);
          Array.prototype.push.apply(restored, _restored);

          if (i < multiplexSize) { restored.push([Token$k.PROPERTY_VALUE, Marker$b.COMMA]); }
        }

        return restored;
      };
    }

    function withoutDefaults(property, configuration) {
      var components = property.components;
      var restored = [];

      for (var i = components.length - 1; i >= 0; i--) {
        var component = components[i];
        var descriptor = configuration[component.name];

        if (component.value[0][1] != descriptor.defaultValue || ('keepUnlessDefault' in descriptor) && !isDefault(components, configuration, descriptor.keepUnlessDefault)) {
          restored.unshift(component.value[0]);
        }
      }

      if (restored.length === 0) { restored.push([Token$k.PROPERTY_VALUE, configuration[property.name].defaultValue]); }

      if (isInheritOnly(restored)) { return [restored[0]]; }

      return restored;
    }

    function isDefault(components, configuration, propertyName) {
      var component;
      var i, l;

      for (i = 0, l = components.length; i < l; i++) {
        component = components[i];

        if (component.name == propertyName && component.value[0][1] == configuration[propertyName].defaultValue) {
          return true;
        }
      }

      return false;
    }

    var restore$1 = {
      background: background$1,
      borderRadius: borderRadius$1,
      font: font,
      fourValues: fourValues,
      multiplex: multiplex,
      withoutDefaults: withoutDefaults
    };

    var override$5 = override_1;

    var INTEGER_PATTERN = /^\d+$/;

    var ALL_UNITS = ['*', 'all'];
    var DEFAULT_PRECISION = 'off'; // all precision changes are disabled
    var DIRECTIVES_SEPARATOR = ','; // e.g. *=5,px=3
    var DIRECTIVE_VALUE_SEPARATOR = '='; // e.g. *=5

    function roundingPrecisionFrom$1(source) {
      return override$5(defaults$1(DEFAULT_PRECISION), buildPrecisionFrom(source));
    }

    function defaults$1(value) {
      return {
        ch: value,
        cm: value,
        em: value,
        ex: value,
        in: value,
        mm: value,
        pc: value,
        pt: value,
        px: value,
        q: value,
        rem: value,
        vh: value,
        vmax: value,
        vmin: value,
        vw: value,
        '%': value
      };
    }

    function buildPrecisionFrom(source) {
      if (source === null || source === undefined) {
        return {};
      }

      if (typeof source == 'boolean') {
        return {};
      }

      if (typeof source == 'number' && source == -1) {
        return defaults$1(DEFAULT_PRECISION);
      }

      if (typeof source == 'number') {
        return defaults$1(source);
      }

      if (typeof source == 'string' && INTEGER_PATTERN.test(source)) {
        return defaults$1(parseInt(source));
      }

      if (typeof source == 'string' && source == DEFAULT_PRECISION) {
        return defaults$1(DEFAULT_PRECISION);
      }

      if (typeof source == 'object') {
        return source;
      }

      return source
        .split(DIRECTIVES_SEPARATOR)
        .reduce(function(accumulator, directive) {
          var directiveParts = directive.split(DIRECTIVE_VALUE_SEPARATOR);
          var name = directiveParts[0];
          var value = parseInt(directiveParts[1]);

          if (Number.isNaN(value) || value == -1) {
            value = DEFAULT_PRECISION;
          }

          if (ALL_UNITS.indexOf(name) > -1) {
            accumulator = override$5(accumulator, defaults$1(value));
          } else {
            accumulator[name] = value;
          }

          return accumulator;
        }, {});
    }

    var roundingPrecision = {
      DEFAULT: DEFAULT_PRECISION,
      roundingPrecisionFrom: roundingPrecisionFrom$1
    };

    var roundingPrecisionFrom = roundingPrecision.roundingPrecisionFrom;

    var override$4 = override_1;

    var OptimizationLevel$j = {
      Zero: '0',
      One: '1',
      Two: '2'
    };

    var DEFAULTS$1 = {};

    DEFAULTS$1[OptimizationLevel$j.Zero] = {};
    DEFAULTS$1[OptimizationLevel$j.One] = {
      cleanupCharsets: true,
      normalizeUrls: true,
      optimizeBackground: true,
      optimizeBorderRadius: true,
      optimizeFilter: true,
      optimizeFontWeight: true,
      optimizeOutline: true,
      removeEmpty: true,
      removeNegativePaddings: true,
      removeQuotes: true,
      removeWhitespace: true,
      replaceMultipleZeros: true,
      replaceTimeUnits: true,
      replaceZeroUnits: true,
      roundingPrecision: roundingPrecisionFrom(undefined),
      selectorsSortingMethod: 'standard',
      specialComments: 'all',
      tidyAtRules: true,
      tidyBlockScopes: true,
      tidySelectors: true,
      variableValueOptimizers: []
    };
    DEFAULTS$1[OptimizationLevel$j.Two] = {
      mergeAdjacentRules: true,
      mergeIntoShorthands: true,
      mergeMedia: true,
      mergeNonAdjacentRules: true,
      mergeSemantically: false,
      overrideProperties: true,
      removeEmpty: true,
      reduceNonAdjacentRules: true,
      removeDuplicateFontRules: true,
      removeDuplicateMediaBlocks: true,
      removeDuplicateRules: true,
      removeUnusedAtRules: false,
      restructureRules: false,
      skipProperties: []
    };

    var ALL_KEYWORD_1 = '*';
    var ALL_KEYWORD_2 = 'all';
    var FALSE_KEYWORD_1 = 'false';
    var FALSE_KEYWORD_2 = 'off';
    var TRUE_KEYWORD_1 = 'true';
    var TRUE_KEYWORD_2 = 'on';

    var LIST_VALUE_SEPARATOR = ',';
    var OPTION_SEPARATOR = ';';
    var OPTION_VALUE_SEPARATOR = ':';

    function optimizationLevelFrom$1(source) {
      var level = override$4(DEFAULTS$1, {});
      var Zero = OptimizationLevel$j.Zero;
      var One = OptimizationLevel$j.One;
      var Two = OptimizationLevel$j.Two;

      if (undefined === source) {
        delete level[Two];
        return level;
      }

      if (typeof source == 'string') {
        source = parseInt(source);
      }

      if (typeof source == 'number' && source === parseInt(Two)) {
        return level;
      }

      if (typeof source == 'number' && source === parseInt(One)) {
        delete level[Two];
        return level;
      }

      if (typeof source == 'number' && source === parseInt(Zero)) {
        delete level[Two];
        delete level[One];
        return level;
      }

      if (typeof source == 'object') {
        source = covertValuesToHashes(source);
      }

      if (One in source && 'roundingPrecision' in source[One]) {
        source[One].roundingPrecision = roundingPrecisionFrom(source[One].roundingPrecision);
      }

      if (Two in source && 'skipProperties' in source[Two] && typeof (source[Two].skipProperties) == 'string') {
        source[Two].skipProperties = source[Two].skipProperties.split(LIST_VALUE_SEPARATOR);
      }

      if (Zero in source || One in source || Two in source) {
        level[Zero] = override$4(level[Zero], source[Zero]);
      }

      if (One in source && ALL_KEYWORD_1 in source[One]) {
        level[One] = override$4(level[One], defaults(One, normalizeValue(source[One][ALL_KEYWORD_1])));
        delete source[One][ALL_KEYWORD_1];
      }

      if (One in source && ALL_KEYWORD_2 in source[One]) {
        level[One] = override$4(level[One], defaults(One, normalizeValue(source[One][ALL_KEYWORD_2])));
        delete source[One][ALL_KEYWORD_2];
      }

      if (One in source || Two in source) {
        level[One] = override$4(level[One], source[One]);
      } else {
        delete level[One];
      }

      if (Two in source && ALL_KEYWORD_1 in source[Two]) {
        level[Two] = override$4(level[Two], defaults(Two, normalizeValue(source[Two][ALL_KEYWORD_1])));
        delete source[Two][ALL_KEYWORD_1];
      }

      if (Two in source && ALL_KEYWORD_2 in source[Two]) {
        level[Two] = override$4(level[Two], defaults(Two, normalizeValue(source[Two][ALL_KEYWORD_2])));
        delete source[Two][ALL_KEYWORD_2];
      }

      if (Two in source) {
        level[Two] = override$4(level[Two], source[Two]);
      } else {
        delete level[Two];
      }

      return level;
    }

    function defaults(level, value) {
      var options = override$4(DEFAULTS$1[level], {});
      var key;

      for (key in options) {
        if (typeof options[key] == 'boolean') {
          options[key] = value;
        }
      }

      return options;
    }

    function normalizeValue(value) {
      switch (value) {
      case FALSE_KEYWORD_1:
      case FALSE_KEYWORD_2:
        return false;
      case TRUE_KEYWORD_1:
      case TRUE_KEYWORD_2:
        return true;
      default:
        return value;
      }
    }

    function covertValuesToHashes(source) {
      var clonedSource = override$4(source, {});
      var level;
      var i;

      for (i = 0; i <= 2; i++) {
        level = '' + i;

        if (level in clonedSource && (clonedSource[level] === undefined || clonedSource[level] === false)) {
          delete clonedSource[level];
        }

        if (level in clonedSource && clonedSource[level] === true) {
          clonedSource[level] = {};
        }

        if (level in clonedSource && typeof clonedSource[level] == 'string') {
          clonedSource[level] = covertToHash(clonedSource[level], level);
        }
      }

      return clonedSource;
    }

    function covertToHash(asString, level) {
      return asString
        .split(OPTION_SEPARATOR)
        .reduce(function(accumulator, directive) {
          var parts = directive.split(OPTION_VALUE_SEPARATOR);
          var name = parts[0];
          var value = parts[1];
          var normalizedValue = normalizeValue(value);

          if (ALL_KEYWORD_1 == name || ALL_KEYWORD_2 == name) {
            accumulator = override$4(accumulator, defaults(level, normalizedValue));
          } else {
            accumulator[name] = normalizedValue;
          }

          return accumulator;
        }, {});
    }

    var optimizationLevel = {
      OptimizationLevel: OptimizationLevel$j,
      optimizationLevelFrom: optimizationLevelFrom$1
    };

    var OptimizationLevel$i = optimizationLevel.OptimizationLevel;

    var plugin$j = {
      level1: {
        property: function background(_rule, property, options) {
          var values = property.value;

          if (!options.level[OptimizationLevel$i.One].optimizeBackground) {
            return;
          }

          if (values.length == 1 && values[0][1] == 'none') {
            values[0][1] = '0 0';
          }

          if (values.length == 1 && values[0][1] == 'transparent') {
            values[0][1] = '0 0';
          }
        }
      }
    };

    var background = plugin$j;

    var plugin$i = {
      level1: {
        property: function boxShadow(_rule, property) {
          var values = property.value;

          // remove multiple zeros
          if (values.length == 4 && values[0][1] === '0' && values[1][1] === '0' && values[2][1] === '0' && values[3][1] === '0') {
            property.value.splice(2);
            property.dirty = true;
          }
        }
      }
    };

    var boxShadow = plugin$i;

    var OptimizationLevel$h = optimizationLevel.OptimizationLevel;

    var plugin$h = {
      level1: {
        property: function borderRadius(_rule, property, options) {
          var values = property.value;

          if (!options.level[OptimizationLevel$h.One].optimizeBorderRadius) {
            return;
          }

          if (values.length == 3 && values[1][1] == '/' && values[0][1] == values[2][1]) {
            property.value.splice(1);
            property.dirty = true;
          } else if (values.length == 5 && values[2][1] == '/' && values[0][1] == values[3][1] && values[1][1] == values[4][1]) {
            property.value.splice(2);
            property.dirty = true;
          } else if (values.length == 7 && values[3][1] == '/' && values[0][1] == values[4][1] && values[1][1] == values[5][1] && values[2][1] == values[6][1]) {
            property.value.splice(3);
            property.dirty = true;
          } else if (values.length == 9 && values[4][1] == '/' && values[0][1] == values[5][1] && values[1][1] == values[6][1] && values[2][1] == values[7][1] && values[3][1] == values[8][1]) {
            property.value.splice(4);
            property.dirty = true;
          }
        }
      }
    };

    var borderRadius = plugin$h;

    var OptimizationLevel$g = optimizationLevel.OptimizationLevel;

    var ALPHA_OR_CHROMA_FILTER_PATTERN = /progid:DXImageTransform\.Microsoft\.(Alpha|Chroma)(\W)/;
    var NO_SPACE_AFTER_COMMA_PATTERN = /,(\S)/g;
    var WHITESPACE_AROUND_EQUALS_PATTERN = / ?= ?/g;

    var plugin$g = {
      level1: {
        property: function filter(_rule, property, options) {
          if (!options.compatibility.properties.ieFilters) {
            return;
          }

          if (!options.level[OptimizationLevel$g.One].optimizeFilter) {
            return;
          }

          if (property.value.length == 1) {
            property.value[0][1] = property.value[0][1].replace(
              ALPHA_OR_CHROMA_FILTER_PATTERN,
              function(match, filter, suffix) {
                return filter.toLowerCase() + suffix;
              }
            );
          }

          property.value[0][1] = property.value[0][1]
            .replace(NO_SPACE_AFTER_COMMA_PATTERN, ', $1')
            .replace(WHITESPACE_AROUND_EQUALS_PATTERN, '=');
        }
      }
    };

    var filter$1 = plugin$g;

    var OptimizationLevel$f = optimizationLevel.OptimizationLevel;

    var plugin$f = {
      level1: {
        property: function fontWeight(_rule, property, options) {
          var value = property.value[0][1];

          if (!options.level[OptimizationLevel$f.One].optimizeFontWeight) {
            return;
          }

          if (value == 'normal') {
            value = '400';
          } else if (value == 'bold') {
            value = '700';
          }

          property.value[0][1] = value;
        }
      }
    };

    var fontWeight = plugin$f;

    var OptimizationLevel$e = optimizationLevel.OptimizationLevel;

    var plugin$e = {
      level1: {
        property: function margin(_rule, property, options) {
          var values = property.value;

          if (!options.level[OptimizationLevel$e.One].replaceMultipleZeros) {
            return;
          }

          // remove multiple zeros
          if (values.length == 4 && values[0][1] === '0' && values[1][1] === '0' && values[2][1] === '0' && values[3][1] === '0') {
            property.value.splice(1);
            property.dirty = true;
          }
        }
      }
    };

    var margin = plugin$e;

    var OptimizationLevel$d = optimizationLevel.OptimizationLevel;

    var plugin$d = {
      level1: {
        property: function outline(_rule, property, options) {
          var values = property.value;

          if (!options.level[OptimizationLevel$d.One].optimizeOutline) {
            return;
          }

          if (values.length == 1 && values[0][1] == 'none') {
            values[0][1] = '0';
          }
        }
      }
    };

    var outline = plugin$d;

    var OptimizationLevel$c = optimizationLevel.OptimizationLevel;

    function isNegative(value) {
      return value && value[1][0] == '-' && parseFloat(value[1]) < 0;
    }

    var plugin$c = {
      level1: {
        property: function padding(_rule, property, options) {
          var values = property.value;

          // remove multiple zeros
          if (values.length == 4 && values[0][1] === '0' && values[1][1] === '0' && values[2][1] === '0' && values[3][1] === '0') {
            property.value.splice(1);
            property.dirty = true;
          }

          // remove negative paddings
          if (options.level[OptimizationLevel$c.One].removeNegativePaddings
            && (
              isNegative(property.value[0])
              || isNegative(property.value[1])
              || isNegative(property.value[2])
              || isNegative(property.value[3])
            )) {
            property.unused = true;
          }
        }
      }
    };

    var padding = plugin$c;

    var propertyOptimizers$1 = {
      background: background.level1.property,
      boxShadow: boxShadow.level1.property,
      borderRadius: borderRadius.level1.property,
      filter: filter$1.level1.property,
      fontWeight: fontWeight.level1.property,
      margin: margin.level1.property,
      outline: outline.level1.property,
      padding: padding.level1.property
    };

    var COLORS = {
      aliceblue: '#f0f8ff',
      antiquewhite: '#faebd7',
      aqua: '#0ff',
      aquamarine: '#7fffd4',
      azure: '#f0ffff',
      beige: '#f5f5dc',
      bisque: '#ffe4c4',
      black: '#000',
      blanchedalmond: '#ffebcd',
      blue: '#00f',
      blueviolet: '#8a2be2',
      brown: '#a52a2a',
      burlywood: '#deb887',
      cadetblue: '#5f9ea0',
      chartreuse: '#7fff00',
      chocolate: '#d2691e',
      coral: '#ff7f50',
      cornflowerblue: '#6495ed',
      cornsilk: '#fff8dc',
      crimson: '#dc143c',
      cyan: '#0ff',
      darkblue: '#00008b',
      darkcyan: '#008b8b',
      darkgoldenrod: '#b8860b',
      darkgray: '#a9a9a9',
      darkgreen: '#006400',
      darkgrey: '#a9a9a9',
      darkkhaki: '#bdb76b',
      darkmagenta: '#8b008b',
      darkolivegreen: '#556b2f',
      darkorange: '#ff8c00',
      darkorchid: '#9932cc',
      darkred: '#8b0000',
      darksalmon: '#e9967a',
      darkseagreen: '#8fbc8f',
      darkslateblue: '#483d8b',
      darkslategray: '#2f4f4f',
      darkslategrey: '#2f4f4f',
      darkturquoise: '#00ced1',
      darkviolet: '#9400d3',
      deeppink: '#ff1493',
      deepskyblue: '#00bfff',
      dimgray: '#696969',
      dimgrey: '#696969',
      dodgerblue: '#1e90ff',
      firebrick: '#b22222',
      floralwhite: '#fffaf0',
      forestgreen: '#228b22',
      fuchsia: '#f0f',
      gainsboro: '#dcdcdc',
      ghostwhite: '#f8f8ff',
      gold: '#ffd700',
      goldenrod: '#daa520',
      gray: '#808080',
      green: '#008000',
      greenyellow: '#adff2f',
      grey: '#808080',
      honeydew: '#f0fff0',
      hotpink: '#ff69b4',
      indianred: '#cd5c5c',
      indigo: '#4b0082',
      ivory: '#fffff0',
      khaki: '#f0e68c',
      lavender: '#e6e6fa',
      lavenderblush: '#fff0f5',
      lawngreen: '#7cfc00',
      lemonchiffon: '#fffacd',
      lightblue: '#add8e6',
      lightcoral: '#f08080',
      lightcyan: '#e0ffff',
      lightgoldenrodyellow: '#fafad2',
      lightgray: '#d3d3d3',
      lightgreen: '#90ee90',
      lightgrey: '#d3d3d3',
      lightpink: '#ffb6c1',
      lightsalmon: '#ffa07a',
      lightseagreen: '#20b2aa',
      lightskyblue: '#87cefa',
      lightslategray: '#778899',
      lightslategrey: '#778899',
      lightsteelblue: '#b0c4de',
      lightyellow: '#ffffe0',
      lime: '#0f0',
      limegreen: '#32cd32',
      linen: '#faf0e6',
      magenta: '#ff00ff',
      maroon: '#800000',
      mediumaquamarine: '#66cdaa',
      mediumblue: '#0000cd',
      mediumorchid: '#ba55d3',
      mediumpurple: '#9370db',
      mediumseagreen: '#3cb371',
      mediumslateblue: '#7b68ee',
      mediumspringgreen: '#00fa9a',
      mediumturquoise: '#48d1cc',
      mediumvioletred: '#c71585',
      midnightblue: '#191970',
      mintcream: '#f5fffa',
      mistyrose: '#ffe4e1',
      moccasin: '#ffe4b5',
      navajowhite: '#ffdead',
      navy: '#000080',
      oldlace: '#fdf5e6',
      olive: '#808000',
      olivedrab: '#6b8e23',
      orange: '#ffa500',
      orangered: '#ff4500',
      orchid: '#da70d6',
      palegoldenrod: '#eee8aa',
      palegreen: '#98fb98',
      paleturquoise: '#afeeee',
      palevioletred: '#db7093',
      papayawhip: '#ffefd5',
      peachpuff: '#ffdab9',
      peru: '#cd853f',
      pink: '#ffc0cb',
      plum: '#dda0dd',
      powderblue: '#b0e0e6',
      purple: '#800080',
      rebeccapurple: '#663399',
      red: '#f00',
      rosybrown: '#bc8f8f',
      royalblue: '#4169e1',
      saddlebrown: '#8b4513',
      salmon: '#fa8072',
      sandybrown: '#f4a460',
      seagreen: '#2e8b57',
      seashell: '#fff5ee',
      sienna: '#a0522d',
      silver: '#c0c0c0',
      skyblue: '#87ceeb',
      slateblue: '#6a5acd',
      slategray: '#708090',
      slategrey: '#708090',
      snow: '#fffafa',
      springgreen: '#00ff7f',
      steelblue: '#4682b4',
      tan: '#d2b48c',
      teal: '#008080',
      thistle: '#d8bfd8',
      tomato: '#ff6347',
      turquoise: '#40e0d0',
      violet: '#ee82ee',
      wheat: '#f5deb3',
      white: '#fff',
      whitesmoke: '#f5f5f5',
      yellow: '#ff0',
      yellowgreen: '#9acd32'
    };

    var toHex$1 = {};
    var toName = {};

    for (var name in COLORS) {
      var hex = COLORS[name];

      if (name.length < hex.length) {
        toName[hex] = name;
      } else {
        toHex$1[name] = hex;
      }
    }

    var toHexPattern = new RegExp('(^| |,|\\))(' + Object.keys(toHex$1).join('|') + ')( |,|\\)|$)', 'ig');
    var toNamePattern = new RegExp('(' + Object.keys(toName).join('|') + ')([^a-f0-9]|$)', 'ig');

    function hexConverter(match, prefix, colorValue, suffix) {
      return prefix + toHex$1[colorValue.toLowerCase()] + suffix;
    }

    function nameConverter(match, colorValue, suffix) {
      return toName[colorValue.toLowerCase()] + suffix;
    }

    function shortenHex$1(value) {
      var hasHex = value.indexOf('#') > -1;
      var shortened = value.replace(toHexPattern, hexConverter);

      if (shortened != value) {
        shortened = shortened.replace(toHexPattern, hexConverter);
      }

      return hasHex
        ? shortened.replace(toNamePattern, nameConverter)
        : shortened;
    }

    var shortenHex_1 = shortenHex$1;

    // HSL to RGB converter. Both methods adapted from:
    // http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript

    function hslToRgb(h, s, l) {
      var r, g, b;

      // normalize hue orientation b/w 0 and 360 degrees
      h %= 360;
      if (h < 0) { h += 360; }
      h = ~~h / 360;

      if (s < 0) { s = 0; } else if (s > 100) { s = 100; }
      s = ~~s / 100;

      if (l < 0) { l = 0; } else if (l > 100) { l = 100; }
      l = ~~l / 100;

      if (s === 0) {
        r = g = b = l; // achromatic
      } else {
        var q = l < 0.5
          ? l * (1 + s)
          : l + s - l * s;
        var p = 2 * l - q;
        r = hueToRgb(p, q, h + 1 / 3);
        g = hueToRgb(p, q, h);
        b = hueToRgb(p, q, h - 1 / 3);
      }

      return [~~(r * 255), ~~(g * 255), ~~(b * 255)];
    }

    function hueToRgb(p, q, t) {
      if (t < 0) { t += 1; }
      if (t > 1) { t -= 1; }
      if (t < 1 / 6) { return p + (q - p) * 6 * t; }
      if (t < 1 / 2) { return q; }
      if (t < 2 / 3) { return p + (q - p) * (2 / 3 - t) * 6; }
      return p;
    }

    function shortenHsl$1(hue, saturation, lightness) {
      var asRgb = hslToRgb(hue, saturation, lightness);
      var redAsHex = asRgb[0].toString(16);
      var greenAsHex = asRgb[1].toString(16);
      var blueAsHex = asRgb[2].toString(16);

      return '#'
        + ((redAsHex.length == 1 ? '0' : '') + redAsHex)
        + ((greenAsHex.length == 1 ? '0' : '') + greenAsHex)
        + ((blueAsHex.length == 1 ? '0' : '') + blueAsHex);
    }

    var shortenHsl_1 = shortenHsl$1;

    function shortenRgb$1(red, green, blue) {
      var normalizedRed = Math.max(0, Math.min(parseInt(red), 255));
      var normalizedGreen = Math.max(0, Math.min(parseInt(green), 255));
      var normalizedBlue = Math.max(0, Math.min(parseInt(blue), 255));

      // Credit: Asen  http://jsbin.com/UPUmaGOc/2/edit?js,console
      return '#' + ('00000' + (normalizedRed << 16 | normalizedGreen << 8 | normalizedBlue).toString(16)).slice(-6);
    }

    var shortenRgb_1 = shortenRgb$1;

    var Marker$a = marker;

    function is(value, separator, isSeparatorRegex) {
      return isSeparatorRegex
        ? separator.test(value)
        : value === separator;
    }

    function split$5(value, separator) {
      var openLevel = Marker$a.OPEN_ROUND_BRACKET;
      var closeLevel = Marker$a.CLOSE_ROUND_BRACKET;
      var level = 0;
      var cursor = 0;
      var lastStart = 0;
      var lastValue;
      var lastCharacter;
      var len = value.length;
      var parts = [];
      var isSeparatorRegex = typeof (separator) == 'object' && 'exec' in separator;

      if (!isSeparatorRegex && value.indexOf(separator) == -1) {
        return [value];
      }

      if (value.indexOf(openLevel) == -1) {
        return value.split(separator);
      }

      while (cursor < len) {
        if (value[cursor] == openLevel) {
          level++;
        } else if (value[cursor] == closeLevel) {
          level--;
        }

        if (level === 0 && cursor > 0 && cursor + 1 < len && is(value[cursor], separator, isSeparatorRegex)) {
          parts.push(value.substring(lastStart, cursor));

          if (isSeparatorRegex && separator.exec(value[cursor]).length > 1) {
            parts.push(value[cursor]);
          }

          lastStart = cursor + 1;
        }

        cursor++;
      }

      if (lastStart < cursor + 1) {
        lastValue = value.substring(lastStart);
        lastCharacter = lastValue[lastValue.length - 1];
        if (is(lastCharacter, separator, isSeparatorRegex)) {
          lastValue = lastValue.substring(0, lastValue.length - 1);
        }

        parts.push(lastValue);
      }

      return parts;
    }

    var split_1 = split$5;

    var shortenHex = shortenHex_1;
    var shortenHsl = shortenHsl_1;
    var shortenRgb = shortenRgb_1;

    var split$4 = split_1;

    var ANY_COLOR_FUNCTION_PATTERN = /(rgb|rgba|hsl|hsla)\(([^()]+)\)/gi;
    var COLOR_PREFIX_PATTERN = /#|rgb|hsl/gi;
    var HEX_LONG_PATTERN = /(^|[^='"])#([0-9a-f]{6})/gi;
    var HEX_SHORT_PATTERN = /(^|[^='"])#([0-9a-f]{3})/gi;
    var HEX_VALUE_PATTERN = /[0-9a-f]/i;
    var HSL_PATTERN = /hsl\((-?\d+),(-?\d+)%?,(-?\d+)%?\)/gi;
    var RGBA_HSLA_PATTERN = /(rgb|hsl)a?\((-?\d+),(-?\d+%?),(-?\d+%?),(0*[1-9]+[0-9]*(\.?\d*)?)\)/gi;
    var RGB_PATTERN = /rgb\((-?\d+),(-?\d+),(-?\d+)\)/gi;
    var TRANSPARENT_FUNCTION_PATTERN = /(?:rgba|hsla)\(0,0%?,0%?,0\)/g;

    var plugin$b = {
      level1: {
        value: function color(name, value, options) {
          if (!options.compatibility.properties.colors) {
            return value;
          }

          if (!value.match(COLOR_PREFIX_PATTERN)) {
            return shortenHex(value);
          }

          value = value
            .replace(RGBA_HSLA_PATTERN, function(match, colorFn, p1, p2, p3, alpha) {
              return (parseInt(alpha) >= 1 ? colorFn + '(' + [p1, p2, p3].join(',') + ')' : match);
            })
            .replace(RGB_PATTERN, function(match, red, green, blue) {
              return shortenRgb(red, green, blue);
            })
            .replace(HSL_PATTERN, function(match, hue, saturation, lightness) {
              return shortenHsl(hue, saturation, lightness);
            })
            .replace(HEX_LONG_PATTERN, function(match, prefix, color, at, inputValue) {
              var suffix = inputValue[at + match.length];

              if (suffix && HEX_VALUE_PATTERN.test(suffix)) {
                return match;
              } if (color[0] == color[1] && color[2] == color[3] && color[4] == color[5]) {
                return (prefix + '#' + color[0] + color[2] + color[4]).toLowerCase();
              }
              return (prefix + '#' + color).toLowerCase();
            })
            .replace(HEX_SHORT_PATTERN, function(match, prefix, color) {
              return prefix + '#' + color.toLowerCase();
            })
            .replace(ANY_COLOR_FUNCTION_PATTERN, function(match, colorFunction, colorDef) {
              var tokens = colorDef.split(',');
              var colorFnLowercase = colorFunction && colorFunction.toLowerCase();
              var applies = (colorFnLowercase == 'hsl' && tokens.length == 3)
                || (colorFnLowercase == 'hsla' && tokens.length == 4)
                || (colorFnLowercase == 'rgb' && tokens.length === 3 && colorDef.indexOf('%') > 0)
                || (colorFnLowercase == 'rgba' && tokens.length == 4 && tokens[0].indexOf('%') > 0);

              if (!applies) {
                return match;
              }

              if (tokens[1].indexOf('%') == -1) {
                tokens[1] += '%';
              }

              if (tokens[2].indexOf('%') == -1) {
                tokens[2] += '%';
              }

              return colorFunction + '(' + tokens.join(',') + ')';
            });

          if (options.compatibility.colors.opacity && name.indexOf('background') == -1) {
            value = value.replace(TRANSPARENT_FUNCTION_PATTERN, function(match) {
              if (split$4(value, ',').pop().indexOf('gradient(') > -1) {
                return match;
              }

              return 'transparent';
            });
          }

          return shortenHex(value);
        }
      }
    };

    var color = plugin$b;

    var ZERO_DEG_PATTERN = /\(0deg\)/g;

    var plugin$a = {
      level1: {
        value: function degrees(_name, value, options) {
          if (!options.compatibility.properties.zeroUnits) {
            return value;
          }

          if (value.indexOf('0deg') == -1) {
            return value;
          }

          return value.replace(ZERO_DEG_PATTERN, '(0)');
        }
      }
    };

    var degrees = plugin$a;

    var URL_PREFIX_PATTERN$4 = /^url\(/i;

    function startsAsUrl$4(value) {
      return URL_PREFIX_PATTERN$4.test(value);
    }

    var startsAsUrl_1 = startsAsUrl$4;

    var split$3 = split_1;
    var startsAsUrl$3 = startsAsUrl_1;

    var OptimizationLevel$b = optimizationLevel.OptimizationLevel;

    var EXPRESSION_PATTERN = /^expression\(.*\)$/;
    var ANY_FUNCTION_PATTERN$1 = /^(-(?:moz|ms|o|webkit)-[a-z-]+|[a-z-]+)\((.+)\)$/;
    var TOKEN_SEPARATOR_PATTERN$1 = /([\s,/])/;

    var DOT_ZERO_PATTERN = /(^|\D)\.0+(\D|$)/g;
    var FRACTION_PATTERN = /\.([1-9]*)0+(\D|$)/g;
    var LEADING_ZERO_FRACTION_PATTERN = /(^|\D)0\.(\d)/g;
    var MINUS_ZERO_FRACTION_PATTERN = /([^\w\d-]|^)-0([^.]|$)/g;
    var ZERO_PREFIXED_UNIT_PATTERN = /(^|\s)0+([1-9])/g;

    function optimizeRecursively(value) {
      var functionTokens;
      var tokens;

      if (startsAsUrl$3(value)) {
        return value;
      }

      if (EXPRESSION_PATTERN.test(value)) {
        return value;
      }

      functionTokens = ANY_FUNCTION_PATTERN$1.exec(value);

      if (!functionTokens) {
        return optimizeFractions(value);
      }

      tokens = split$3(functionTokens[2], TOKEN_SEPARATOR_PATTERN$1)
        .map(function(token) { return optimizeRecursively(token); });

      return functionTokens[1] + '(' + tokens.join('') + ')';
    }

    function optimizeFractions(value) {
      if (value.indexOf('0') == -1) {
        return value;
      }

      if (value.indexOf('-') > -1) {
        value = value
          .replace(MINUS_ZERO_FRACTION_PATTERN, '$10$2')
          .replace(MINUS_ZERO_FRACTION_PATTERN, '$10$2');
      }

      return value
        .replace(ZERO_PREFIXED_UNIT_PATTERN, '$1$2')
        .replace(DOT_ZERO_PATTERN, '$10$2')
        .replace(FRACTION_PATTERN, function(match, nonZeroPart, suffix) {
          return (nonZeroPart.length > 0 ? '.' : '') + nonZeroPart + suffix;
        })
        .replace(LEADING_ZERO_FRACTION_PATTERN, '$1.$2');
    }

    var plugin$9 = {
      level1: {
        value: function fraction(name, value, options) {
          if (!options.level[OptimizationLevel$b.One].replaceZeroUnits) {
            return value;
          }

          return optimizeRecursively(value);
        }
      }
    };

    var fraction = plugin$9;

    var plugin$8 = {
      level1: {
        value: function precision(_name, value, options) {
          if (!options.precision.enabled || value.indexOf('.') === -1) {
            return value;
          }

          return value
            .replace(options.precision.decimalPointMatcher, '$1$2$3')
            .replace(options.precision.zeroMatcher, function(match, integerPart, fractionPart, unit) {
              var multiplier = options.precision.units[unit].multiplier;
              var parsedInteger = parseInt(integerPart);
              var integer = Number.isNaN(parsedInteger) ? 0 : parsedInteger;
              var fraction = parseFloat(fractionPart);

              return Math.round((integer + fraction) * multiplier) / multiplier + unit;
            });
        }
      }
    };

    var precision = plugin$8;

    var OptimizationLevel$a = optimizationLevel.OptimizationLevel;

    var LOCAL_PREFIX_PATTERN = /^local\(/i;
    var QUOTED_PATTERN = /^('.*'|".*")$/;
    var QUOTED_BUT_SAFE_PATTERN = /^['"][a-zA-Z][a-zA-Z\d\-_]+['"]$/;
    // eslint-disable-next-line max-len
    var GENERIC_FONT_FAMILY_PATTERN = /^['"](?:cursive|default|emoji|fangsong|fantasy|inherit|initial|math|monospace|revert|revert-layer|sans-serif|serif|system-ui|ui-monospace|ui-rounded|ui-sans-serif|ui-serif|unset)['"]$/;

    var plugin$7 = {
      level1: {
        value: function textQuotes(name, value, options) {
          if ((name == 'font-family' || name == 'font') && GENERIC_FONT_FAMILY_PATTERN.test(value)) {
            return value;
          }

          if (!options.level[OptimizationLevel$a.One].removeQuotes) {
            return value;
          }

          if (!QUOTED_PATTERN.test(value) && !LOCAL_PREFIX_PATTERN.test(value)) {
            return value;
          }

          return QUOTED_BUT_SAFE_PATTERN.test(value)
            ? value.substring(1, value.length - 1)
            : value;
        }
      }
    };

    var textQuotes = plugin$7;

    var OptimizationLevel$9 = optimizationLevel.OptimizationLevel;

    var TIME_VALUE = /^(-?[\d.]+)(m?s)$/;

    var plugin$6 = {
      level1: {
        value: function time(name, value, options) {
          if (!options.level[OptimizationLevel$9.One].replaceTimeUnits) {
            return value;
          }

          if (!TIME_VALUE.test(value)) {
            return value;
          }

          return value.replace(TIME_VALUE, function(match, val, unit) {
            var newValue;

            if (unit == 'ms') {
              newValue = parseInt(val) / 1000 + 's';
            } else if (unit == 's') {
              newValue = parseFloat(val) * 1000 + 'ms';
            }

            return newValue.length < match.length ? newValue : match;
          });
        }
      }
    };

    var time = plugin$6;

    var WHOLE_PIXEL_VALUE = /(?:^|\s|\()(-?\d+)px/;

    var plugin$5 = {
      level1: {
        value: function unit(_name, value, options) {
          if (!WHOLE_PIXEL_VALUE.test(value)) {
            return value;
          }

          return value.replace(WHOLE_PIXEL_VALUE, function(match, val) {
            var newValue;
            var intVal = parseInt(val);

            if (intVal === 0) {
              return match;
            }

            if (options.compatibility.properties.shorterLengthUnits
              && options.compatibility.units.pt
              && intVal * 3 % 4 === 0) {
              newValue = intVal * 3 / 4 + 'pt';
            }

            if (options.compatibility.properties.shorterLengthUnits
              && options.compatibility.units.pc
              && intVal % 16 === 0) {
              newValue = intVal / 16 + 'pc';
            }

            if (options.compatibility.properties.shorterLengthUnits
              && options.compatibility.units.in
              && intVal % 96 === 0) {
              newValue = intVal / 96 + 'in';
            }

            if (newValue) {
              newValue = match.substring(0, match.indexOf(val)) + newValue;
            }

            return newValue && newValue.length < match.length ? newValue : match;
          });
        }
      }
    };

    var unit = plugin$5;

    var startsAsUrl$2 = startsAsUrl_1;

    var OptimizationLevel$8 = optimizationLevel.OptimizationLevel;

    var URL_PREFIX_PATTERN$3 = /^url\(/i;

    var plugin$4 = {
      level1: {
        value: function urlPrefix(_name, value, options) {
          if (!options.level[OptimizationLevel$8.One].normalizeUrls) {
            return value;
          }

          if (!startsAsUrl$2(value)) {
            return value;
          }

          return value.replace(URL_PREFIX_PATTERN$3, 'url(');
        }
      }
    };

    var urlPrefix = plugin$4;

    var QUOTED_URL_PATTERN = /^url\(['"].+['"]\)$/;
    var QUOTED_URL_WITH_WHITESPACE_PATTERN = /^url\(['"].*[*\s()'"].*['"]\)$/;
    var QUOTES_PATTERN = /["']/g;
    var URL_DATA_PATTERN = /^url\(['"]data:[^;]+;charset/;

    var plugin$3 = {
      level1: {
        value: function urlQuotes(_name, value, options) {
          if (options.compatibility.properties.urlQuotes) {
            return value;
          }

          return QUOTED_URL_PATTERN.test(value)
            && !QUOTED_URL_WITH_WHITESPACE_PATTERN.test(value)
            && !URL_DATA_PATTERN.test(value)
            ? value.replace(QUOTES_PATTERN, '')
            : value;
        }
      }
    };

    var urlQuotes = plugin$3;

    var startsAsUrl$1 = startsAsUrl_1;

    var WHITESPACE_PATTERN$1 = /\\?\n|\\?\r\n/g;
    var WHITESPACE_PREFIX_PATTERN = /(\()\s+/g;
    var WHITESPACE_SUFFIX_PATTERN = /\s+(\))/g;

    var plugin$2 = {
      level1: {
        value: function urlWhitespace(_name, value) {
          if (!startsAsUrl$1(value)) {
            return value;
          }

          return value
            .replace(WHITESPACE_PATTERN$1, '')
            .replace(WHITESPACE_PREFIX_PATTERN, '$1')
            .replace(WHITESPACE_SUFFIX_PATTERN, '$1');
        }
      }
    };

    var urlWhitespace = plugin$2;

    var OptimizationLevel$7 = optimizationLevel.OptimizationLevel;

    var Marker$9 = marker;

    var CALC_DIVISION_WHITESPACE_PATTERN = /\) ?\/ ?/g;
    var COMMA_AND_SPACE_PATTERN = /, /g;
    var LINE_BREAK_PATTERN = /\r?\n/g;
    var MULTI_WHITESPACE_PATTERN = /\s+/g;
    var FUNCTION_CLOSING_BRACE_WHITESPACE_PATTERN = /\s+(;?\))/g;
    var FUNCTION_OPENING_BRACE_WHITESPACE_PATTERN = /(\(;?)\s+/g;
    var VARIABLE_NAME_PATTERN = /^--\S+$/;
    var VARIABLE_VALUE_PATTERN = /^var\(\s*--\S+\s*\)$/;

    var plugin$1 = {
      level1: {
        value: function whitespace(name, value, options) {
          if (!options.level[OptimizationLevel$7.One].removeWhitespace) {
            return value;
          }

          if (VARIABLE_NAME_PATTERN.test(name) && !VARIABLE_VALUE_PATTERN.test(value)) {
            return value;
          }

          if ((value.indexOf(' ') == -1 && value.indexOf('\n') == -1) || value.indexOf('expression') === 0) {
            return value;
          }

          if (value.indexOf(Marker$9.SINGLE_QUOTE) > -1 || value.indexOf(Marker$9.DOUBLE_QUOTE) > -1) {
            return value;
          }

          value = value.replace(LINE_BREAK_PATTERN, '');
          value = value.replace(MULTI_WHITESPACE_PATTERN, ' ');

          if (value.indexOf('calc') > -1) {
            value = value.replace(CALC_DIVISION_WHITESPACE_PATTERN, ')/ ');
          }

          return value
            .replace(FUNCTION_OPENING_BRACE_WHITESPACE_PATTERN, '$1')
            .replace(FUNCTION_CLOSING_BRACE_WHITESPACE_PATTERN, '$1')
            .replace(COMMA_AND_SPACE_PATTERN, ',');
        }
      }
    };

    var whitespace = plugin$1;

    var split$2 = split_1;

    var ANY_FUNCTION_PATTERN = /^(-(?:moz|ms|o|webkit)-[a-z-]+|[a-z-]+)\((.+)\)$/;
    var SKIP_FUNCTION_PATTERN = /^(?:-moz-calc|-webkit-calc|calc|rgb|hsl|rgba|hsla|min|max|clamp|expression)\(/;
    var TOKEN_SEPARATOR_PATTERN = /([\s,/])/;

    function removeRecursively(value, options) {
      var functionTokens;
      var tokens;

      if (SKIP_FUNCTION_PATTERN.test(value)) {
        return value;
      }

      functionTokens = ANY_FUNCTION_PATTERN.exec(value);

      if (!functionTokens) {
        return removeZeros(value, options);
      }

      tokens = split$2(functionTokens[2], TOKEN_SEPARATOR_PATTERN)
        .map(function(token) { return removeRecursively(token, options); });

      return functionTokens[1] + '(' + tokens.join('') + ')';
    }

    function removeZeros(value, options) {
      return value
        .replace(options.unitsRegexp, '$10$2')
        .replace(options.unitsRegexp, '$10$2');
    }

    var plugin = {
      level1: {
        value: function zero(name, value, options) {
          if (!options.compatibility.properties.zeroUnits) {
            return value;
          }

          if (value.indexOf('%') > 0 && (name == 'height' || name == 'max-height' || name == 'width' || name == 'max-width')) {
            return value;
          }

          return removeRecursively(value, options);
        }
      }
    };

    var zero = plugin;

    var valueOptimizers$1 = {
      color: color.level1.value,
      degrees: degrees.level1.value,
      fraction: fraction.level1.value,
      precision: precision.level1.value,
      textQuotes: textQuotes.level1.value,
      time: time.level1.value,
      unit: unit.level1.value,
      urlPrefix: urlPrefix.level1.value,
      urlQuotes: urlQuotes.level1.value,
      urlWhiteSpace: urlWhitespace.level1.value,
      whiteSpace: whitespace.level1.value,
      zero: zero.level1.value
    };

    // Contains the interpretation of CSS properties, as used by the property optimizer

    var breakUp = breakUp$1;
    var canOverride = canOverride$1;
    var restore = restore$1;

    var propertyOptimizers = propertyOptimizers$1;
    var valueOptimizers = valueOptimizers$1;

    var override$3 = override_1;

    // Properties to process
    // Extend this object in order to add support for more properties in the optimizer.
    //
    // Each key in this object represents a CSS property and should be an object.
    // Such an object contains properties that describe how the represented CSS property should be handled.
    // Possible options:
    //
    // * components: array (Only specify for shorthand properties.)
    //   Contains the names of the granular properties this shorthand compacts.
    //
    // * canOverride: function
    //   Returns whether two tokens of this property can be merged with each other.
    //   This property has no meaning for shorthands.
    //
    // * defaultValue: string
    //   Specifies the default value of the property according to the CSS standard.
    //   For shorthand, this is used when every component is set to its default value, therefore it should be the shortest possible default value of all the components.
    //
    // * shortestValue: string
    //   Specifies the shortest possible value the property can possibly have.
    //   (Falls back to defaultValue if unspecified.)
    //
    // * breakUp: function (Only specify for shorthand properties.)
    //   Breaks the shorthand up to its components.
    //
    // * restore: function (Only specify for shorthand properties.)
    //   Puts the shorthand together from its components.
    //
    var configuration$8 = {
      animation: {
        canOverride: canOverride.generic.components([
          canOverride.generic.time,
          canOverride.generic.timingFunction,
          canOverride.generic.time,
          canOverride.property.animationIterationCount,
          canOverride.property.animationDirection,
          canOverride.property.animationFillMode,
          canOverride.property.animationPlayState,
          canOverride.property.animationName
        ]),
        components: [
          'animation-duration',
          'animation-timing-function',
          'animation-delay',
          'animation-iteration-count',
          'animation-direction',
          'animation-fill-mode',
          'animation-play-state',
          'animation-name'
        ],
        breakUp: breakUp.multiplex(breakUp.animation),
        defaultValue: 'none',
        restore: restore.multiplex(restore.withoutDefaults),
        shorthand: true,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.textQuotes,
          valueOptimizers.time,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ],
        vendorPrefixes: [
          '-moz-',
          '-o-',
          '-webkit-'
        ]
      },
      'animation-delay': {
        canOverride: canOverride.generic.time,
        componentOf: [
          'animation'
        ],
        defaultValue: '0s',
        intoMultiplexMode: 'real',
        valueOptimizers: [
          valueOptimizers.time,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ],
        vendorPrefixes: [
          '-moz-',
          '-o-',
          '-webkit-'
        ]
      },
      'animation-direction': {
        canOverride: canOverride.property.animationDirection,
        componentOf: [
          'animation'
        ],
        defaultValue: 'normal',
        intoMultiplexMode: 'real',
        vendorPrefixes: [
          '-moz-',
          '-o-',
          '-webkit-'
        ]
      },
      'animation-duration': {
        canOverride: canOverride.generic.time,
        componentOf: [
          'animation'
        ],
        defaultValue: '0s',
        intoMultiplexMode: 'real',
        keepUnlessDefault: 'animation-delay',
        valueOptimizers: [
          valueOptimizers.time,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ],
        vendorPrefixes: [
          '-moz-',
          '-o-',
          '-webkit-'
        ]
      },
      'animation-fill-mode': {
        canOverride: canOverride.property.animationFillMode,
        componentOf: [
          'animation'
        ],
        defaultValue: 'none',
        intoMultiplexMode: 'real',
        vendorPrefixes: [
          '-moz-',
          '-o-',
          '-webkit-'
        ]
      },
      'animation-iteration-count': {
        canOverride: canOverride.property.animationIterationCount,
        componentOf: [
          'animation'
        ],
        defaultValue: '1',
        intoMultiplexMode: 'real',
        vendorPrefixes: [
          '-moz-',
          '-o-',
          '-webkit-'
        ]
      },
      'animation-name': {
        canOverride: canOverride.property.animationName,
        componentOf: [
          'animation'
        ],
        defaultValue: 'none',
        intoMultiplexMode: 'real',
        valueOptimizers: [
          valueOptimizers.textQuotes
        ],
        vendorPrefixes: [
          '-moz-',
          '-o-',
          '-webkit-'
        ]
      },
      'animation-play-state': {
        canOverride: canOverride.property.animationPlayState,
        componentOf: [
          'animation'
        ],
        defaultValue: 'running',
        intoMultiplexMode: 'real',
        vendorPrefixes: [
          '-moz-',
          '-o-',
          '-webkit-'
        ]
      },
      'animation-timing-function': {
        canOverride: canOverride.generic.timingFunction,
        componentOf: [
          'animation'
        ],
        defaultValue: 'ease',
        intoMultiplexMode: 'real',
        vendorPrefixes: [
          '-moz-',
          '-o-',
          '-webkit-'
        ]
      },
      background: {
        canOverride: canOverride.generic.components([
          canOverride.generic.image,
          canOverride.property.backgroundPosition,
          canOverride.property.backgroundSize,
          canOverride.property.backgroundRepeat,
          canOverride.property.backgroundAttachment,
          canOverride.property.backgroundOrigin,
          canOverride.property.backgroundClip,
          canOverride.generic.color
        ]),
        components: [
          'background-image',
          'background-position',
          'background-size',
          'background-repeat',
          'background-attachment',
          'background-origin',
          'background-clip',
          'background-color'
        ],
        breakUp: breakUp.multiplex(breakUp.background),
        defaultValue: '0 0',
        propertyOptimizer: propertyOptimizers.background,
        restore: restore.multiplex(restore.background),
        shortestValue: '0',
        shorthand: true,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.urlWhiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.zero,
          valueOptimizers.color,
          valueOptimizers.urlPrefix,
          valueOptimizers.urlQuotes
        ]
      },
      'background-attachment': {
        canOverride: canOverride.property.backgroundAttachment,
        componentOf: [
          'background'
        ],
        defaultValue: 'scroll',
        intoMultiplexMode: 'real'
      },
      'background-clip': {
        canOverride: canOverride.property.backgroundClip,
        componentOf: [
          'background'
        ],
        defaultValue: 'border-box',
        intoMultiplexMode: 'real',
        shortestValue: 'border-box'
      },
      'background-color': {
        canOverride: canOverride.generic.color,
        componentOf: [
          'background'
        ],
        defaultValue: 'transparent',
        intoMultiplexMode: 'real', // otherwise real color will turn into default since color appears in last multiplex only
        multiplexLastOnly: true,
        nonMergeableValue: 'none',
        shortestValue: 'red',
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.color
        ]
      },
      'background-image': {
        canOverride: canOverride.generic.image,
        componentOf: [
          'background'
        ],
        defaultValue: 'none',
        intoMultiplexMode: 'default',
        valueOptimizers: [
          valueOptimizers.urlWhiteSpace,
          valueOptimizers.urlPrefix,
          valueOptimizers.urlQuotes,
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero,
          valueOptimizers.color
        ]
      },
      'background-origin': {
        canOverride: canOverride.property.backgroundOrigin,
        componentOf: [
          'background'
        ],
        defaultValue: 'padding-box',
        intoMultiplexMode: 'real',
        shortestValue: 'border-box'
      },
      'background-position': {
        canOverride: canOverride.property.backgroundPosition,
        componentOf: [
          'background'
        ],
        defaultValue: ['0', '0'],
        doubleValues: true,
        intoMultiplexMode: 'real',
        shortestValue: '0',
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      'background-repeat': {
        canOverride: canOverride.property.backgroundRepeat,
        componentOf: [
          'background'
        ],
        defaultValue: ['repeat'],
        doubleValues: true,
        intoMultiplexMode: 'real'
      },
      'background-size': {
        canOverride: canOverride.property.backgroundSize,
        componentOf: [
          'background'
        ],
        defaultValue: ['auto'],
        doubleValues: true,
        intoMultiplexMode: 'real',
        shortestValue: '0 0',
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      bottom: {
        canOverride: canOverride.property.bottom,
        defaultValue: 'auto',
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      border: {
        breakUp: breakUp.border,
        canOverride: canOverride.generic.components([
          canOverride.generic.unit,
          canOverride.property.borderStyle,
          canOverride.generic.color
        ]),
        components: [
          'border-width',
          'border-style',
          'border-color'
        ],
        defaultValue: 'none',
        overridesShorthands: [
          'border-bottom',
          'border-left',
          'border-right',
          'border-top'
        ],
        restore: restore.withoutDefaults,
        shorthand: true,
        shorthandComponents: true,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.zero,
          valueOptimizers.color
        ]
      },
      'border-bottom': {
        breakUp: breakUp.border,
        canOverride: canOverride.generic.components([
          canOverride.generic.unit,
          canOverride.property.borderStyle,
          canOverride.generic.color
        ]),
        components: [
          'border-bottom-width',
          'border-bottom-style',
          'border-bottom-color'
        ],
        defaultValue: 'none',
        restore: restore.withoutDefaults,
        shorthand: true,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.zero,
          valueOptimizers.color
        ]
      },
      'border-bottom-color': {
        canOverride: canOverride.generic.color,
        componentOf: [
          'border-bottom',
          'border-color'
        ],
        defaultValue: 'none',
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.color
        ]
      },
      'border-bottom-left-radius': {
        canOverride: canOverride.generic.unit,
        componentOf: [
          'border-radius'
        ],
        defaultValue: '0',
        propertyOptimizer: propertyOptimizers.borderRadius,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ],
        vendorPrefixes: [
          '-moz-',
          '-o-'
        ]
      },
      'border-bottom-right-radius': {
        canOverride: canOverride.generic.unit,
        componentOf: [
          'border-radius'
        ],
        defaultValue: '0',
        propertyOptimizer: propertyOptimizers.borderRadius,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ],
        vendorPrefixes: [
          '-moz-',
          '-o-'
        ]
      },
      'border-bottom-style': {
        canOverride: canOverride.property.borderStyle,
        componentOf: [
          'border-bottom',
          'border-style'
        ],
        defaultValue: 'none'
      },
      'border-bottom-width': {
        canOverride: canOverride.generic.unit,
        componentOf: [
          'border-bottom',
          'border-width'
        ],
        defaultValue: 'medium',
        oppositeTo: 'border-top-width',
        shortestValue: '0',
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      'border-collapse': {
        canOverride: canOverride.property.borderCollapse,
        defaultValue: 'separate'
      },
      'border-color': {
        breakUp: breakUp.fourValues,
        canOverride: canOverride.generic.components([
          canOverride.generic.color,
          canOverride.generic.color,
          canOverride.generic.color,
          canOverride.generic.color
        ]),
        componentOf: [
          'border'
        ],
        components: [
          'border-top-color',
          'border-right-color',
          'border-bottom-color',
          'border-left-color'
        ],
        defaultValue: 'none',
        restore: restore.fourValues,
        shortestValue: 'red',
        shorthand: true,
        singleTypeComponents: true,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.color
        ]
      },
      'border-left': {
        breakUp: breakUp.border,
        canOverride: canOverride.generic.components([
          canOverride.generic.unit,
          canOverride.property.borderStyle,
          canOverride.generic.color
        ]),
        components: [
          'border-left-width',
          'border-left-style',
          'border-left-color'
        ],
        defaultValue: 'none',
        restore: restore.withoutDefaults,
        shorthand: true,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.zero,
          valueOptimizers.color
        ]
      },
      'border-left-color': {
        canOverride: canOverride.generic.color,
        componentOf: [
          'border-color',
          'border-left'
        ],
        defaultValue: 'none',
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.color
        ]
      },
      'border-left-style': {
        canOverride: canOverride.property.borderStyle,
        componentOf: [
          'border-left',
          'border-style'
        ],
        defaultValue: 'none'
      },
      'border-left-width': {
        canOverride: canOverride.generic.unit,
        componentOf: [
          'border-left',
          'border-width'
        ],
        defaultValue: 'medium',
        oppositeTo: 'border-right-width',
        shortestValue: '0',
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      'border-radius': {
        breakUp: breakUp.borderRadius,
        canOverride: canOverride.generic.components([
          canOverride.generic.unit,
          canOverride.generic.unit,
          canOverride.generic.unit,
          canOverride.generic.unit
        ]),
        components: [
          'border-top-left-radius',
          'border-top-right-radius',
          'border-bottom-right-radius',
          'border-bottom-left-radius'
        ],
        defaultValue: '0',
        propertyOptimizer: propertyOptimizers.borderRadius,
        restore: restore.borderRadius,
        shorthand: true,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ],
        vendorPrefixes: [
          '-moz-',
          '-o-'
        ]
      },
      'border-right': {
        breakUp: breakUp.border,
        canOverride: canOverride.generic.components([
          canOverride.generic.unit,
          canOverride.property.borderStyle,
          canOverride.generic.color
        ]),
        components: [
          'border-right-width',
          'border-right-style',
          'border-right-color'
        ],
        defaultValue: 'none',
        restore: restore.withoutDefaults,
        shorthand: true,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.color
        ]
      },
      'border-right-color': {
        canOverride: canOverride.generic.color,
        componentOf: [
          'border-color',
          'border-right'
        ],
        defaultValue: 'none',
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.color
        ]
      },
      'border-right-style': {
        canOverride: canOverride.property.borderStyle,
        componentOf: [
          'border-right',
          'border-style'
        ],
        defaultValue: 'none'
      },
      'border-right-width': {
        canOverride: canOverride.generic.unit,
        componentOf: [
          'border-right',
          'border-width'
        ],
        defaultValue: 'medium',
        oppositeTo: 'border-left-width',
        shortestValue: '0',
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      'border-style': {
        breakUp: breakUp.fourValues,
        canOverride: canOverride.generic.components([
          canOverride.property.borderStyle,
          canOverride.property.borderStyle,
          canOverride.property.borderStyle,
          canOverride.property.borderStyle
        ]),
        componentOf: [
          'border'
        ],
        components: [
          'border-top-style',
          'border-right-style',
          'border-bottom-style',
          'border-left-style'
        ],
        defaultValue: 'none',
        restore: restore.fourValues,
        shorthand: true,
        singleTypeComponents: true
      },
      'border-top': {
        breakUp: breakUp.border,
        canOverride: canOverride.generic.components([
          canOverride.generic.unit,
          canOverride.property.borderStyle,
          canOverride.generic.color
        ]),
        components: [
          'border-top-width',
          'border-top-style',
          'border-top-color'
        ],
        defaultValue: 'none',
        restore: restore.withoutDefaults,
        shorthand: true,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.zero,
          valueOptimizers.color,
          valueOptimizers.unit
        ]
      },
      'border-top-color': {
        canOverride: canOverride.generic.color,
        componentOf: [
          'border-color',
          'border-top'
        ],
        defaultValue: 'none',
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.color
        ]
      },
      'border-top-left-radius': {
        canOverride: canOverride.generic.unit,
        componentOf: [
          'border-radius'
        ],
        defaultValue: '0',
        propertyOptimizer: propertyOptimizers.borderRadius,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ],
        vendorPrefixes: [
          '-moz-',
          '-o-'
        ]
      },
      'border-top-right-radius': {
        canOverride: canOverride.generic.unit,
        componentOf: [
          'border-radius'
        ],
        defaultValue: '0',
        propertyOptimizer: propertyOptimizers.borderRadius,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ],
        vendorPrefixes: [
          '-moz-',
          '-o-'
        ]
      },
      'border-top-style': {
        canOverride: canOverride.property.borderStyle,
        componentOf: [
          'border-style',
          'border-top'
        ],
        defaultValue: 'none'
      },
      'border-top-width': {
        canOverride: canOverride.generic.unit,
        componentOf: [
          'border-top',
          'border-width'
        ],
        defaultValue: 'medium',
        oppositeTo: 'border-bottom-width',
        shortestValue: '0',
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      'border-width': {
        breakUp: breakUp.fourValues,
        canOverride: canOverride.generic.components([
          canOverride.generic.unit,
          canOverride.generic.unit,
          canOverride.generic.unit,
          canOverride.generic.unit
        ]),
        componentOf: [
          'border'
        ],
        components: [
          'border-top-width',
          'border-right-width',
          'border-bottom-width',
          'border-left-width'
        ],
        defaultValue: 'medium',
        restore: restore.fourValues,
        shortestValue: '0',
        shorthand: true,
        singleTypeComponents: true,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      'box-shadow': {
        propertyOptimizer: propertyOptimizers.boxShadow,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero,
          valueOptimizers.color
        ],
        vendorPrefixes: [
          '-moz-',
          '-ms-',
          '-o-',
          '-webkit-'
        ]
      },
      clear: {
        canOverride: canOverride.property.clear,
        defaultValue: 'none'
      },
      clip: {
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      color: {
        canOverride: canOverride.generic.color,
        defaultValue: 'transparent',
        shortestValue: 'red',
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.color
        ]
      },
      'column-gap': {
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      cursor: {
        canOverride: canOverride.property.cursor,
        defaultValue: 'auto'
      },
      display: { canOverride: canOverride.property.display },
      filter: {
        propertyOptimizer: propertyOptimizers.filter,
        valueOptimizers: [
          valueOptimizers.fraction
        ]
      },
      float: {
        canOverride: canOverride.property.float,
        defaultValue: 'none'
      },
      font: {
        breakUp: breakUp.font,
        canOverride: canOverride.generic.components([
          canOverride.property.fontStyle,
          canOverride.property.fontVariant,
          canOverride.property.fontWeight,
          canOverride.property.fontStretch,
          canOverride.generic.unit,
          canOverride.generic.unit,
          canOverride.property.fontFamily
        ]),
        components: [
          'font-style',
          'font-variant',
          'font-weight',
          'font-stretch',
          'font-size',
          'line-height',
          'font-family'
        ],
        restore: restore.font,
        shorthand: true,
        valueOptimizers: [
          valueOptimizers.textQuotes
        ]
      },
      'font-family': {
        canOverride: canOverride.property.fontFamily,
        defaultValue: 'user|agent|specific',
        valueOptimizers: [
          valueOptimizers.textQuotes
        ]
      },
      'font-size': {
        canOverride: canOverride.generic.unit,
        defaultValue: 'medium',
        shortestValue: '0',
        valueOptimizers: [
          valueOptimizers.fraction
        ]
      },
      'font-stretch': {
        canOverride: canOverride.property.fontStretch,
        defaultValue: 'normal'
      },
      'font-style': {
        canOverride: canOverride.property.fontStyle,
        defaultValue: 'normal'
      },
      'font-variant': {
        canOverride: canOverride.property.fontVariant,
        defaultValue: 'normal'
      },
      'font-weight': {
        canOverride: canOverride.property.fontWeight,
        defaultValue: 'normal',
        propertyOptimizer: propertyOptimizers.fontWeight,
        shortestValue: '400'
      },
      gap: {
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      height: {
        canOverride: canOverride.generic.unit,
        defaultValue: 'auto',
        shortestValue: '0',
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      left: {
        canOverride: canOverride.property.left,
        defaultValue: 'auto',
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      'letter-spacing': {
        valueOptimizers: [
          valueOptimizers.fraction,
          valueOptimizers.zero
        ]
      },
      'line-height': {
        canOverride: canOverride.generic.unitOrNumber,
        defaultValue: 'normal',
        shortestValue: '0',
        valueOptimizers: [
          valueOptimizers.fraction,
          valueOptimizers.zero
        ]
      },
      'list-style': {
        canOverride: canOverride.generic.components([
          canOverride.property.listStyleType,
          canOverride.property.listStylePosition,
          canOverride.property.listStyleImage
        ]),
        components: [
          'list-style-type',
          'list-style-position',
          'list-style-image'
        ],
        breakUp: breakUp.listStyle,
        restore: restore.withoutDefaults,
        defaultValue: 'outside', // can't use 'disc' because that'd override default 'decimal' for <ol>
        shortestValue: 'none',
        shorthand: true
      },
      'list-style-image': {
        canOverride: canOverride.generic.image,
        componentOf: [
          'list-style'
        ],
        defaultValue: 'none'
      },
      'list-style-position': {
        canOverride: canOverride.property.listStylePosition,
        componentOf: [
          'list-style'
        ],
        defaultValue: 'outside',
        shortestValue: 'inside'
      },
      'list-style-type': {
        canOverride: canOverride.property.listStyleType,
        componentOf: [
          'list-style'
        ],
        // NOTE: we can't tell the real default value here, it's 'disc' for <ul> and 'decimal' for <ol>
        // this is a hack, but it doesn't matter because this value will be either overridden or
        // it will disappear at the final step anyway
        defaultValue: 'decimal|disc',
        shortestValue: 'none'
      },
      margin: {
        breakUp: breakUp.fourValues,
        canOverride: canOverride.generic.components([
          canOverride.generic.unit,
          canOverride.generic.unit,
          canOverride.generic.unit,
          canOverride.generic.unit
        ]),
        components: [
          'margin-top',
          'margin-right',
          'margin-bottom',
          'margin-left'
        ],
        defaultValue: '0',
        propertyOptimizer: propertyOptimizers.margin,
        restore: restore.fourValues,
        shorthand: true,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      'margin-bottom': {
        canOverride: canOverride.generic.unit,
        componentOf: [
          'margin'
        ],
        defaultValue: '0',
        oppositeTo: 'margin-top',
        propertyOptimizer: propertyOptimizers.margin,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      'margin-inline-end': {
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      'margin-inline-start': {
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      'margin-left': {
        canOverride: canOverride.generic.unit,
        componentOf: [
          'margin'
        ],
        defaultValue: '0',
        oppositeTo: 'margin-right',
        propertyOptimizer: propertyOptimizers.margin,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      'margin-right': {
        canOverride: canOverride.generic.unit,
        componentOf: [
          'margin'
        ],
        defaultValue: '0',
        oppositeTo: 'margin-left',
        propertyOptimizer: propertyOptimizers.margin,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      'margin-top': {
        canOverride: canOverride.generic.unit,
        componentOf: [
          'margin'
        ],
        defaultValue: '0',
        oppositeTo: 'margin-bottom',
        propertyOptimizer: propertyOptimizers.margin,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      'max-height': {
        canOverride: canOverride.generic.unit,
        defaultValue: 'none',
        shortestValue: '0',
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      'max-width': {
        canOverride: canOverride.generic.unit,
        defaultValue: 'none',
        shortestValue: '0',
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      'min-height': {
        canOverride: canOverride.generic.unit,
        defaultValue: '0',
        shortestValue: '0',
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      'min-width': {
        canOverride: canOverride.generic.unit,
        defaultValue: '0',
        shortestValue: '0',
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      opacity: {
        valueOptimizers: [
          valueOptimizers.fraction,
          valueOptimizers.precision
        ]
      },
      outline: {
        canOverride: canOverride.generic.components([
          canOverride.generic.color,
          canOverride.property.outlineStyle,
          canOverride.generic.unit
        ]),
        components: [
          'outline-color',
          'outline-style',
          'outline-width'
        ],
        breakUp: breakUp.outline,
        restore: restore.withoutDefaults,
        defaultValue: '0',
        propertyOptimizer: propertyOptimizers.outline,
        shorthand: true,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      'outline-color': {
        canOverride: canOverride.generic.color,
        componentOf: [
          'outline'
        ],
        defaultValue: 'invert',
        shortestValue: 'red',
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.color
        ]
      },
      'outline-style': {
        canOverride: canOverride.property.outlineStyle,
        componentOf: [
          'outline'
        ],
        defaultValue: 'none'
      },
      'outline-width': {
        canOverride: canOverride.generic.unit,
        componentOf: [
          'outline'
        ],
        defaultValue: 'medium',
        shortestValue: '0',
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      overflow: {
        canOverride: canOverride.property.overflow,
        defaultValue: 'visible'
      },
      'overflow-x': {
        canOverride: canOverride.property.overflow,
        defaultValue: 'visible'
      },
      'overflow-y': {
        canOverride: canOverride.property.overflow,
        defaultValue: 'visible'
      },
      padding: {
        breakUp: breakUp.fourValues,
        canOverride: canOverride.generic.components([
          canOverride.generic.unit,
          canOverride.generic.unit,
          canOverride.generic.unit,
          canOverride.generic.unit
        ]),
        components: [
          'padding-top',
          'padding-right',
          'padding-bottom',
          'padding-left'
        ],
        defaultValue: '0',
        propertyOptimizer: propertyOptimizers.padding,
        restore: restore.fourValues,
        shorthand: true,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      'padding-bottom': {
        canOverride: canOverride.generic.unit,
        componentOf: [
          'padding'
        ],
        defaultValue: '0',
        oppositeTo: 'padding-top',
        propertyOptimizer: propertyOptimizers.padding,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      'padding-left': {
        canOverride: canOverride.generic.unit,
        componentOf: [
          'padding'
        ],
        defaultValue: '0',
        oppositeTo: 'padding-right',
        propertyOptimizer: propertyOptimizers.padding,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      'padding-right': {
        canOverride: canOverride.generic.unit,
        componentOf: [
          'padding'
        ],
        defaultValue: '0',
        oppositeTo: 'padding-left',
        propertyOptimizer: propertyOptimizers.padding,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      'padding-top': {
        canOverride: canOverride.generic.unit,
        componentOf: [
          'padding'
        ],
        defaultValue: '0',
        oppositeTo: 'padding-bottom',
        propertyOptimizer: propertyOptimizers.padding,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      position: {
        canOverride: canOverride.property.position,
        defaultValue: 'static'
      },
      right: {
        canOverride: canOverride.property.right,
        defaultValue: 'auto',
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      'row-gap': {
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      src: {
        valueOptimizers: [
          valueOptimizers.urlWhiteSpace,
          valueOptimizers.urlPrefix,
          valueOptimizers.urlQuotes
        ]
      },
      'stroke-width': {
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      'text-align': {
        canOverride: canOverride.property.textAlign,
        // NOTE: we can't tell the real default value here, as it depends on default text direction
        // this is a hack, but it doesn't matter because this value will be either overridden or
        // it will disappear anyway
        defaultValue: 'left|right'
      },
      'text-decoration': {
        canOverride: canOverride.property.textDecoration,
        defaultValue: 'none'
      },
      'text-indent': {
        canOverride: canOverride.property.textOverflow,
        defaultValue: 'none',
        valueOptimizers: [
          valueOptimizers.fraction,
          valueOptimizers.zero
        ]
      },
      'text-overflow': {
        canOverride: canOverride.property.textOverflow,
        defaultValue: 'none'
      },
      'text-shadow': {
        canOverride: canOverride.property.textShadow,
        defaultValue: 'none',
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.zero,
          valueOptimizers.color
        ]
      },
      top: {
        canOverride: canOverride.property.top,
        defaultValue: 'auto',
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      transform: {
        canOverride: canOverride.property.transform,
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.degrees,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ],
        vendorPrefixes: [
          '-moz-',
          '-ms-',
          '-o-',
          '-webkit-'
        ]
      },
      transition: {
        breakUp: breakUp.multiplex(breakUp.transition),
        canOverride: canOverride.generic.components([
          canOverride.property.transitionProperty,
          canOverride.generic.time,
          canOverride.generic.timingFunction,
          canOverride.generic.time
        ]),
        components: [
          'transition-property',
          'transition-duration',
          'transition-timing-function',
          'transition-delay'
        ],
        defaultValue: 'none',
        restore: restore.multiplex(restore.withoutDefaults),
        shorthand: true,
        valueOptimizers: [
          valueOptimizers.time,
          valueOptimizers.fraction
        ],
        vendorPrefixes: [
          '-moz-',
          '-ms-',
          '-o-',
          '-webkit-'
        ]
      },
      'transition-delay': {
        canOverride: canOverride.generic.time,
        componentOf: [
          'transition'
        ],
        defaultValue: '0s',
        intoMultiplexMode: 'real',
        valueOptimizers: [
          valueOptimizers.time
        ],
        vendorPrefixes: [
          '-moz-',
          '-ms-',
          '-o-',
          '-webkit-'
        ]
      },
      'transition-duration': {
        canOverride: canOverride.generic.time,
        componentOf: [
          'transition'
        ],
        defaultValue: '0s',
        intoMultiplexMode: 'real',
        keepUnlessDefault: 'transition-delay',
        valueOptimizers: [
          valueOptimizers.time,
          valueOptimizers.fraction
        ],
        vendorPrefixes: [
          '-moz-',
          '-ms-',
          '-o-',
          '-webkit-'
        ]
      },
      'transition-property': {
        canOverride: canOverride.generic.propertyName,
        componentOf: [
          'transition'
        ],
        defaultValue: 'all',
        intoMultiplexMode: 'placeholder',
        placeholderValue: '_', // it's a short value that won't match any property and still be a valid `transition-property`
        vendorPrefixes: [
          '-moz-',
          '-ms-',
          '-o-',
          '-webkit-'
        ]
      },
      'transition-timing-function': {
        canOverride: canOverride.generic.timingFunction,
        componentOf: [
          'transition'
        ],
        defaultValue: 'ease',
        intoMultiplexMode: 'real',
        vendorPrefixes: [
          '-moz-',
          '-ms-',
          '-o-',
          '-webkit-'
        ]
      },
      'vertical-align': {
        canOverride: canOverride.property.verticalAlign,
        defaultValue: 'baseline',
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      visibility: {
        canOverride: canOverride.property.visibility,
        defaultValue: 'visible'
      },
      '-webkit-tap-highlight-color': {
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.color
        ]
      },
      '-webkit-margin-end': {
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      'white-space': {
        canOverride: canOverride.property.whiteSpace,
        defaultValue: 'normal'
      },
      width: {
        canOverride: canOverride.generic.unit,
        defaultValue: 'auto',
        shortestValue: '0',
        valueOptimizers: [
          valueOptimizers.whiteSpace,
          valueOptimizers.fraction,
          valueOptimizers.precision,
          valueOptimizers.unit,
          valueOptimizers.zero
        ]
      },
      'z-index': {
        canOverride: canOverride.property.zIndex,
        defaultValue: 'auto'
      }
    };

    // generate vendor-prefixed configuration
    var vendorPrefixedConfiguration = {};

    function cloneDescriptor(propertyName, prefix) {
      var clonedDescriptor = override$3(configuration$8[propertyName], {});

      if ('componentOf' in clonedDescriptor) {
        clonedDescriptor.componentOf = clonedDescriptor.componentOf.map(function(shorthandName) {
          return prefix + shorthandName;
        });
      }

      if ('components' in clonedDescriptor) {
        clonedDescriptor.components = clonedDescriptor.components.map(function(longhandName) {
          return prefix + longhandName;
        });
      }

      if ('keepUnlessDefault' in clonedDescriptor) {
        clonedDescriptor.keepUnlessDefault = prefix + clonedDescriptor.keepUnlessDefault;
      }

      return clonedDescriptor;
    }

    for (var propertyName in configuration$8) {
      var descriptor = configuration$8[propertyName];

      if (!('vendorPrefixes' in descriptor)) {
        continue;
      }

      for (var i = 0; i < descriptor.vendorPrefixes.length; i++) {
        var prefix = descriptor.vendorPrefixes[i];
        var clonedDescriptor = cloneDescriptor(propertyName, prefix);
        delete clonedDescriptor.vendorPrefixes;

        vendorPrefixedConfiguration[prefix + propertyName] = clonedDescriptor;
      }

      delete descriptor.vendorPrefixes;
    }

    var configuration_1 = override$3(configuration$8, vendorPrefixedConfiguration);

    var emptyCharacter = '';

    var Breaks = format$2.Breaks;
    var Spaces = format$2.Spaces;

    var Marker$8 = marker;
    var Token$j = token;

    function supportsAfterClosingBrace(token) {
      return token[1][1] == 'background' || token[1][1] == 'transform' || token[1][1] == 'src';
    }

    function afterClosingBrace(token, valueIndex) {
      return token[valueIndex][1][token[valueIndex][1].length - 1] == Marker$8.CLOSE_ROUND_BRACKET;
    }

    function afterComma(token, valueIndex) {
      return token[valueIndex][1] == Marker$8.COMMA;
    }

    function afterSlash(token, valueIndex) {
      return token[valueIndex][1] == Marker$8.FORWARD_SLASH;
    }

    function beforeComma(token, valueIndex) {
      return token[valueIndex + 1] && token[valueIndex + 1][1] == Marker$8.COMMA;
    }

    function beforeSlash(token, valueIndex) {
      return token[valueIndex + 1] && token[valueIndex + 1][1] == Marker$8.FORWARD_SLASH;
    }

    function inFilter(token) {
      return token[1][1] == 'filter' || token[1][1] == '-ms-filter';
    }

    function disallowsSpace(context, token, valueIndex) {
      return !context.spaceAfterClosingBrace
        && supportsAfterClosingBrace(token)
        && afterClosingBrace(token, valueIndex)
        || beforeSlash(token, valueIndex)
        || afterSlash(token, valueIndex)
        || beforeComma(token, valueIndex)
        || afterComma(token, valueIndex);
    }

    function rules$1(context, tokens) {
      var store = context.store;

      for (var i = 0, l = tokens.length; i < l; i++) {
        store(context, tokens[i]);

        if (i < l - 1) {
          store(context, comma(context));
        }
      }
    }

    function body$1(context, tokens) {
      var lastPropertyAt = lastPropertyIndex(tokens);

      for (var i = 0, l = tokens.length; i < l; i++) {
        property$1(context, tokens, i, lastPropertyAt);
      }
    }

    function lastPropertyIndex(tokens) {
      var index = tokens.length - 1;

      for (; index >= 0; index--) {
        if (tokens[index][0] != Token$j.COMMENT) {
          break;
        }
      }

      return index;
    }

    function property$1(context, tokens, position, lastPropertyAt) {
      var store = context.store;
      var token = tokens[position];

      var propertyValue = token[2];
      var isPropertyBlock = propertyValue && propertyValue[0] === Token$j.PROPERTY_BLOCK;

      var needsSemicolon;
      if (context.format) {
        if (context.format.semicolonAfterLastProperty || isPropertyBlock) {
          needsSemicolon = true;
        } else if (position < lastPropertyAt) {
          needsSemicolon = true;
        } else {
          needsSemicolon = false;
        }
      } else {
        needsSemicolon = position < lastPropertyAt || isPropertyBlock;
      }

      var isLast = position === lastPropertyAt;

      switch (token[0]) {
      case Token$j.AT_RULE:
        store(context, token);
        store(context, semicolon(context, Breaks.AfterProperty, false));
        break;
      case Token$j.AT_RULE_BLOCK:
        rules$1(context, token[1]);
        store(context, openBrace(context, Breaks.AfterRuleBegins, true));
        body$1(context, token[2]);
        store(context, closeBrace(context, Breaks.AfterRuleEnds, false, isLast));
        break;
      case Token$j.COMMENT:
        store(context, token);
        store(context, breakFor(context, Breaks.AfterComment) + context.indentWith);
        break;
      case Token$j.PROPERTY:
        store(context, token[1]);
        store(context, colon(context));
        if (propertyValue) {
          value$1(context, token);
        }
        store(
          context,
          needsSemicolon ? semicolon(context, Breaks.AfterProperty, isLast) : emptyCharacter
        );
        break;
      case Token$j.RAW:
        store(context, token);
      }
    }

    function value$1(context, token) {
      var store = context.store;
      var j, m;

      if (token[2][0] == Token$j.PROPERTY_BLOCK) {
        store(context, openBrace(context, Breaks.AfterBlockBegins, false));
        body$1(context, token[2][1]);
        store(context, closeBrace(context, Breaks.AfterBlockEnds, false, true));
      } else {
        for (j = 2, m = token.length; j < m; j++) {
          store(context, token[j]);

          if (j < m - 1 && (inFilter(token) || !disallowsSpace(context, token, j))) {
            store(context, Marker$8.SPACE);
          }
        }
      }
    }

    function breakFor(context, where) {
      return context.format ? context.format.breaks[where] : emptyCharacter;
    }

    function allowsSpace(context, where) {
      return context.format && context.format.spaces[where];
    }

    function openBrace(context, where, needsPrefixSpace) {
      if (context.format) {
        context.indentBy += context.format.indentBy;
        context.indentWith = context.format.indentWith.repeat(context.indentBy);
        return (
          needsPrefixSpace
          && allowsSpace(context, Spaces.BeforeBlockBegins) ? Marker$8.SPACE : emptyCharacter
        ) + Marker$8.OPEN_CURLY_BRACKET
          + breakFor(context, where)
          + context.indentWith;
      }
      return Marker$8.OPEN_CURLY_BRACKET;
    }

    function closeBrace(context, where, beforeBlockEnd, isLast) {
      if (context.format) {
        context.indentBy -= context.format.indentBy;
        context.indentWith = context.format.indentWith.repeat(context.indentBy);
        return (
          beforeBlockEnd
            ? breakFor(context, Breaks.BeforeBlockEnds)
            : breakFor(context, Breaks.AfterProperty)
        ) + context.indentWith
          + Marker$8.CLOSE_CURLY_BRACKET
          + (isLast ? emptyCharacter : breakFor(context, where) + context.indentWith);
      }
      return Marker$8.CLOSE_CURLY_BRACKET;
    }

    function colon(context) {
      return context.format
        ? Marker$8.COLON + (allowsSpace(context, Spaces.BeforeValue) ? Marker$8.SPACE : emptyCharacter)
        : Marker$8.COLON;
    }

    function semicolon(context, where, isLast) {
      return context.format
        ? Marker$8.SEMICOLON + (isLast ? emptyCharacter : (breakFor(context, where) + context.indentWith))
        : Marker$8.SEMICOLON;
    }

    function comma(context) {
      return context.format
        ? Marker$8.COMMA + breakFor(context, Breaks.BetweenSelectors) + context.indentWith
        : Marker$8.COMMA;
    }

    function all$4(context, tokens) {
      var store = context.store;
      var token;
      var isLast;
      var i, l;

      for (i = 0, l = tokens.length; i < l; i++) {
        token = tokens[i];
        isLast = i == l - 1;

        switch (token[0]) {
        case Token$j.AT_RULE:
          store(context, token);
          store(context, semicolon(context, Breaks.AfterAtRule, isLast));
          break;
        case Token$j.AT_RULE_BLOCK:
          rules$1(context, token[1]);
          store(context, openBrace(context, Breaks.AfterRuleBegins, true));
          body$1(context, token[2]);
          store(context, closeBrace(context, Breaks.AfterRuleEnds, false, isLast));
          break;
        case Token$j.NESTED_BLOCK:
          rules$1(context, token[1]);
          store(context, openBrace(context, Breaks.AfterBlockBegins, true));
          all$4(context, token[2]);
          store(context, closeBrace(context, Breaks.AfterBlockEnds, true, isLast));
          break;
        case Token$j.COMMENT:
          store(context, token);
          store(context, breakFor(context, Breaks.AfterComment) + context.indentWith);
          break;
        case Token$j.RAW:
          store(context, token);
          break;
        case Token$j.RULE:
          rules$1(context, token[1]);
          store(context, openBrace(context, Breaks.AfterRuleBegins, true));
          body$1(context, token[2]);
          store(context, closeBrace(context, Breaks.AfterRuleEnds, false, isLast));
          break;
        }
      }
    }

    var helpers$1 = {
      all: all$4,
      body: body$1,
      property: property$1,
      rules: rules$1,
      value: value$1
    };

    var helpers = helpers$1;

    function store$2(serializeContext, token) {
      serializeContext.output.push(typeof token == 'string' ? token : token[1]);
    }

    function context() {
      var newContext = {
        output: [],
        store: store$2
      };

      return newContext;
    }

    function all$3(tokens) {
      var oneTimeContext = context();
      helpers.all(oneTimeContext, tokens);
      return oneTimeContext.output.join('');
    }

    function body(tokens) {
      var oneTimeContext = context();
      helpers.body(oneTimeContext, tokens);
      return oneTimeContext.output.join('');
    }

    function property(tokens, position) {
      var oneTimeContext = context();
      helpers.property(oneTimeContext, tokens, position, true);
      return oneTimeContext.output.join('');
    }

    function rules(tokens) {
      var oneTimeContext = context();
      helpers.rules(oneTimeContext, tokens);
      return oneTimeContext.output.join('');
    }

    function value(tokens) {
      var oneTimeContext = context();
      helpers.value(oneTimeContext, tokens);
      return oneTimeContext.output.join('');
    }

    var oneTime = {
      all: all$3,
      body: body,
      property: property,
      rules: rules,
      value: value
    };

    var sortSelectors$2 = sortSelectors_1;
    var tidyRules$2 = tidyRules_1;
    var tidyBlock = tidyBlock_1;
    var tidyAtRule = tidyAtRule_1;

    var Hack = hack;
    var removeUnused$1 = removeUnused_1;
    var restoreFromOptimizing$4 = restoreFromOptimizing_1;
    var wrapForOptimizing$2 = wrapForOptimizing$3.all;

    var configuration$7 = configuration_1;
    var optimizers = valueOptimizers$1;

    var OptimizationLevel$6 = optimizationLevel.OptimizationLevel;

    var Token$i = token;
    var Marker$7 = marker;

    var formatPosition$1 = formatPosition_1;

    var serializeRules$9 = oneTime.rules;

    var CHARSET_TOKEN = '@charset';
    var CHARSET_REGEXP = new RegExp('^' + CHARSET_TOKEN, 'i');

    var DEFAULT_ROUNDING_PRECISION = roundingPrecision.DEFAULT;

    var VARIABLE_PROPERTY_NAME_PATTERN = /^--\S+$/;
    var PROPERTY_NAME_PATTERN = /^(?:-chrome-|-[\w-]+\w|\w[\w-]+\w|\w{1,})$/;
    var IMPORT_PREFIX_PATTERN$2 = /^@import/i;
    var URL_PREFIX_PATTERN$2 = /^url\(/i;

    function startsAsUrl(value) {
      return URL_PREFIX_PATTERN$2.test(value);
    }

    function isImport$3(token) {
      return IMPORT_PREFIX_PATTERN$2.test(token[1]);
    }

    function isLegacyFilter(property) {
      var value;

      if (property.name == 'filter' || property.name == '-ms-filter') {
        value = property.value[0][1];

        return value.indexOf('progid') > -1
          || value.indexOf('alpha') === 0
          || value.indexOf('chroma') === 0;
      }
      return false;
    }

    function noop$1() {}

    function noopValueOptimizer(_name, value, _options) { return value; }

    function optimizeBody(rule, properties, context) {
      var options = context.options;
      var valueOptimizers;
      var property, name, type, value;
      var propertyToken;
      var propertyOptimizer;
      var serializedRule = serializeRules$9(rule);
      var _properties = wrapForOptimizing$2(properties);
      var pluginValueOptimizers = context.options.plugins.level1Value;
      var pluginPropertyOptimizers = context.options.plugins.level1Property;
      var isVariable;
      var i, l;

      for (i = 0, l = _properties.length; i < l; i++) {
        var j, k, m, n;

        property = _properties[i];
        name = property.name;
        propertyOptimizer = configuration$7[name] && configuration$7[name].propertyOptimizer || noop$1;
        valueOptimizers = configuration$7[name] && configuration$7[name].valueOptimizers || [optimizers.whiteSpace];
        isVariable = VARIABLE_PROPERTY_NAME_PATTERN.test(name);

        if (isVariable) {
          valueOptimizers = options.variableOptimizers.length > 0
            ? options.variableOptimizers
            : [optimizers.whiteSpace];
        }

        if (!isVariable && !PROPERTY_NAME_PATTERN.test(name)) {
          propertyToken = property.all[property.position];
          context.warnings.push('Invalid property name \'' + name + '\' at ' + formatPosition$1(propertyToken[1][2][0]) + '. Ignoring.');
          property.unused = true;
          continue;
        }

        if (property.value.length === 0) {
          propertyToken = property.all[property.position];
          context.warnings.push('Empty property \'' + name + '\' at ' + formatPosition$1(propertyToken[1][2][0]) + '. Ignoring.');
          property.unused = true;
          continue;
        }

        if (property.hack && (
          (property.hack[0] == Hack.ASTERISK || property.hack[0] == Hack.UNDERSCORE)
            && !options.compatibility.properties.iePrefixHack
            || property.hack[0] == Hack.BACKSLASH && !options.compatibility.properties.ieSuffixHack
            || property.hack[0] == Hack.BANG && !options.compatibility.properties.ieBangHack)) {
          property.unused = true;
          continue;
        }

        if (!options.compatibility.properties.ieFilters && isLegacyFilter(property)) {
          property.unused = true;
          continue;
        }

        if (property.block) {
          optimizeBody(rule, property.value[0][1], context);
          continue;
        }

        for (j = 0, m = property.value.length; j < m; j++) {
          type = property.value[j][0];
          value = property.value[j][1];

          if (type == Token$i.PROPERTY_BLOCK) {
            property.unused = true;
            context.warnings.push('Invalid value token at ' + formatPosition$1(value[0][1][2][0]) + '. Ignoring.');
            break;
          }

          if (startsAsUrl(value) && !context.validator.isUrl(value)) {
            property.unused = true;
            context.warnings.push('Broken URL \'' + value + '\' at ' + formatPosition$1(property.value[j][2][0]) + '. Ignoring.');
            break;
          }

          for (k = 0, n = valueOptimizers.length; k < n; k++) {
            value = valueOptimizers[k](name, value, options);
          }

          for (k = 0, n = pluginValueOptimizers.length; k < n; k++) {
            value = pluginValueOptimizers[k](name, value, options);
          }

          property.value[j][1] = value;
        }

        propertyOptimizer(serializedRule, property, options);

        for (j = 0, m = pluginPropertyOptimizers.length; j < m; j++) {
          pluginPropertyOptimizers[j](serializedRule, property, options);
        }
      }

      restoreFromOptimizing$4(_properties);
      removeUnused$1(_properties);
      removeComments(properties, options);
    }

    function removeComments(tokens, options) {
      var token;
      var i;

      for (i = 0; i < tokens.length; i++) {
        token = tokens[i];

        if (token[0] != Token$i.COMMENT) {
          continue;
        }

        optimizeComment(token, options);

        if (token[1].length === 0) {
          tokens.splice(i, 1);
          i--;
        }
      }
    }

    function optimizeComment(token, options) {
      if (token[1][2] == Marker$7.EXCLAMATION && (options.level[OptimizationLevel$6.One].specialComments == 'all' || options.commentsKept < options.level[OptimizationLevel$6.One].specialComments)) {
        options.commentsKept++;
        return;
      }

      token[1] = [];
    }

    function cleanupCharsets(tokens) {
      var hasCharset = false;

      for (var i = 0, l = tokens.length; i < l; i++) {
        var token = tokens[i];

        if (token[0] != Token$i.AT_RULE) { continue; }

        if (!CHARSET_REGEXP.test(token[1])) { continue; }

        if (hasCharset || token[1].indexOf(CHARSET_TOKEN) == -1) {
          tokens.splice(i, 1);
          i--;
          l--;
        } else {
          hasCharset = true;
          tokens.splice(i, 1);
          tokens.unshift([Token$i.AT_RULE, token[1].replace(CHARSET_REGEXP, CHARSET_TOKEN)]);
        }
      }
    }

    function buildUnitRegexp(options) {
      var units = ['px', 'em', 'ex', 'cm', 'mm', 'in', 'pt', 'pc', '%'];
      var otherUnits = ['ch', 'rem', 'vh', 'vm', 'vmax', 'vmin', 'vw'];

      otherUnits.forEach(function(unit) {
        if (options.compatibility.units[unit]) {
          units.push(unit);
        }
      });

      return new RegExp('(^|\\s|\\(|,)0(?:' + units.join('|') + ')(\\W|$)', 'g');
    }

    function buildPrecisionOptions(roundingPrecision) {
      var precisionOptions = {
        matcher: null,
        units: {}
      };
      var optimizable = [];
      var unit;
      var value;

      for (unit in roundingPrecision) {
        value = roundingPrecision[unit];

        if (value != DEFAULT_ROUNDING_PRECISION) {
          precisionOptions.units[unit] = {};
          precisionOptions.units[unit].value = value;
          precisionOptions.units[unit].multiplier = 10 ** value;

          optimizable.push(unit);
        }
      }

      if (optimizable.length > 0) {
        precisionOptions.enabled = true;
        precisionOptions.decimalPointMatcher = new RegExp('(\\d)\\.($|' + optimizable.join('|') + ')($|\\W)', 'g');
        precisionOptions.zeroMatcher = new RegExp('(\\d*)(\\.\\d+)(' + optimizable.join('|') + ')', 'g');
      }

      return precisionOptions;
    }

    function buildVariableOptimizers(options) {
      return options.level[OptimizationLevel$6.One].variableValueOptimizers.map(function(optimizer) {
        if (typeof (optimizer) == 'string') {
          return optimizers[optimizer] || noopValueOptimizer;
        }

        return optimizer;
      });
    }

    function level1Optimize$1(tokens, context) {
      var options = context.options;
      var levelOptions = options.level[OptimizationLevel$6.One];
      var ie7Hack = options.compatibility.selectors.ie7Hack;
      var adjacentSpace = options.compatibility.selectors.adjacentSpace;
      var spaceAfterClosingBrace = options.compatibility.properties.spaceAfterClosingBrace;
      var format = options.format;
      var mayHaveCharset = false;
      var afterRules = false;

      options.unitsRegexp = options.unitsRegexp || buildUnitRegexp(options);
      options.precision = options.precision || buildPrecisionOptions(levelOptions.roundingPrecision);
      options.commentsKept = options.commentsKept || 0;
      options.variableOptimizers = options.variableOptimizers || buildVariableOptimizers(options);

      for (var i = 0, l = tokens.length; i < l; i++) {
        var token = tokens[i];

        switch (token[0]) {
        case Token$i.AT_RULE:
          token[1] = isImport$3(token) && afterRules ? '' : token[1];
          token[1] = levelOptions.tidyAtRules ? tidyAtRule(token[1]) : token[1];
          mayHaveCharset = true;
          break;
        case Token$i.AT_RULE_BLOCK:
          optimizeBody(token[1], token[2], context);
          afterRules = true;
          break;
        case Token$i.NESTED_BLOCK:
          token[1] = levelOptions.tidyBlockScopes ? tidyBlock(token[1], spaceAfterClosingBrace) : token[1];
          level1Optimize$1(token[2], context);
          afterRules = true;
          break;
        case Token$i.COMMENT:
          optimizeComment(token, options);
          break;
        case Token$i.RULE:
          token[1] = levelOptions.tidySelectors
            ? tidyRules$2(token[1], !ie7Hack, adjacentSpace, format, context.warnings)
            : token[1];
          token[1] = token[1].length > 1 ? sortSelectors$2(token[1], levelOptions.selectorsSortingMethod) : token[1];
          optimizeBody(token[1], token[2], context);
          afterRules = true;
          break;
        }

        if (token[0] == Token$i.COMMENT
          && token[1].length === 0
          || levelOptions.removeEmpty
          && (token[1].length === 0 || (token[2] && token[2].length === 0))) {
          tokens.splice(i, 1);
          i--;
          l--;
        }
      }

      if (levelOptions.cleanupCharsets && mayHaveCharset) {
        cleanupCharsets(tokens);
      }

      return tokens;
    }

    var optimize$3 = level1Optimize$1;

    var Marker$6 = marker;
    var split$1 = split_1;

    var DEEP_SELECTOR_PATTERN = /\/deep\//;
    var DOUBLE_COLON_PATTERN = /^::/;
    var VENDOR_PREFIXED_PATTERN = /:(-moz-|-ms-|-o-|-webkit-)/;

    var NOT_PSEUDO = ':not';
    var PSEUDO_CLASSES_WITH_ARGUMENTS = [
      ':dir',
      ':lang',
      ':not',
      ':nth-child',
      ':nth-last-child',
      ':nth-last-of-type',
      ':nth-of-type'
    ];
    var RELATION_PATTERN = /[>+~]/;
    var UNMIXABLE_PSEUDO_CLASSES = [
      ':after',
      ':before',
      ':first-letter',
      ':first-line',
      ':lang'
    ];
    var UNMIXABLE_PSEUDO_ELEMENTS = [
      '::after',
      '::before',
      '::first-letter',
      '::first-line'
    ];

    var Level$1 = {
      DOUBLE_QUOTE: 'double-quote',
      SINGLE_QUOTE: 'single-quote',
      ROOT: 'root'
    };

    function isMergeable$4(selector, mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging) {
      var singleSelectors = split$1(selector, Marker$6.COMMA);
      var singleSelector;
      var i, l;

      for (i = 0, l = singleSelectors.length; i < l; i++) {
        singleSelector = singleSelectors[i];

        if (singleSelector.length === 0
            || isDeepSelector(singleSelector)
            || isVendorPrefixed(singleSelector)
            || (singleSelector.indexOf(Marker$6.COLON) > -1
              && !areMergeable(
                singleSelector,
                extractPseudoFrom(singleSelector),
                mergeablePseudoClasses,
                mergeablePseudoElements,
                multiplePseudoMerging
              ))) {
          return false;
        }
      }

      return true;
    }

    function isDeepSelector(selector) {
      return DEEP_SELECTOR_PATTERN.test(selector);
    }

    function isVendorPrefixed(selector) {
      return VENDOR_PREFIXED_PATTERN.test(selector);
    }

    function extractPseudoFrom(selector) {
      var list = [];
      var character;
      var buffer = [];
      var level = Level$1.ROOT;
      var roundBracketLevel = 0;
      var isQuoted;
      var isEscaped;
      var isPseudo = false;
      var isRelation;
      var wasColon = false;
      var index;
      var len;

      for (index = 0, len = selector.length; index < len; index++) {
        character = selector[index];

        isRelation = !isEscaped && RELATION_PATTERN.test(character);
        isQuoted = level == Level$1.DOUBLE_QUOTE || level == Level$1.SINGLE_QUOTE;

        if (isEscaped) {
          buffer.push(character);
        } else if (character == Marker$6.DOUBLE_QUOTE && level == Level$1.ROOT) {
          buffer.push(character);
          level = Level$1.DOUBLE_QUOTE;
        } else if (character == Marker$6.DOUBLE_QUOTE && level == Level$1.DOUBLE_QUOTE) {
          buffer.push(character);
          level = Level$1.ROOT;
        } else if (character == Marker$6.SINGLE_QUOTE && level == Level$1.ROOT) {
          buffer.push(character);
          level = Level$1.SINGLE_QUOTE;
        } else if (character == Marker$6.SINGLE_QUOTE && level == Level$1.SINGLE_QUOTE) {
          buffer.push(character);
          level = Level$1.ROOT;
        } else if (isQuoted) {
          buffer.push(character);
        } else if (character == Marker$6.OPEN_ROUND_BRACKET) {
          buffer.push(character);
          roundBracketLevel++;
        } else if (character == Marker$6.CLOSE_ROUND_BRACKET && roundBracketLevel == 1 && isPseudo) {
          buffer.push(character);
          list.push(buffer.join(''));
          roundBracketLevel--;
          buffer = [];
          isPseudo = false;
        } else if (character == Marker$6.CLOSE_ROUND_BRACKET) {
          buffer.push(character);
          roundBracketLevel--;
        } else if (character == Marker$6.COLON && roundBracketLevel === 0 && isPseudo && !wasColon) {
          list.push(buffer.join(''));
          buffer = [];
          buffer.push(character);
        } else if (character == Marker$6.COLON && roundBracketLevel === 0 && !wasColon) {
          buffer = [];
          buffer.push(character);
          isPseudo = true;
        } else if (character == Marker$6.SPACE && roundBracketLevel === 0 && isPseudo) {
          list.push(buffer.join(''));
          buffer = [];
          isPseudo = false;
        } else if (isRelation && roundBracketLevel === 0 && isPseudo) {
          list.push(buffer.join(''));
          buffer = [];
          isPseudo = false;
        } else {
          buffer.push(character);
        }

        isEscaped = character == Marker$6.BACK_SLASH;
        wasColon = character == Marker$6.COLON;
      }

      if (buffer.length > 0 && isPseudo) {
        list.push(buffer.join(''));
      }

      return list;
    }

    function areMergeable(selector, matches, mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging) {
      return areAllowed(matches, mergeablePseudoClasses, mergeablePseudoElements)
        && needArguments(matches)
        && (matches.length < 2 || !someIncorrectlyChained(selector, matches))
        && (matches.length < 2 || multiplePseudoMerging && allMixable(matches));
    }

    function areAllowed(matches, mergeablePseudoClasses, mergeablePseudoElements) {
      var match;
      var name;
      var i, l;

      for (i = 0, l = matches.length; i < l; i++) {
        match = matches[i];
        name = match.indexOf(Marker$6.OPEN_ROUND_BRACKET) > -1
          ? match.substring(0, match.indexOf(Marker$6.OPEN_ROUND_BRACKET))
          : match;

        if (mergeablePseudoClasses.indexOf(name) === -1 && mergeablePseudoElements.indexOf(name) === -1) {
          return false;
        }
      }

      return true;
    }

    function needArguments(matches) {
      var match;
      var name;
      var bracketOpensAt;
      var hasArguments;
      var i, l;

      for (i = 0, l = matches.length; i < l; i++) {
        match = matches[i];

        bracketOpensAt = match.indexOf(Marker$6.OPEN_ROUND_BRACKET);
        hasArguments = bracketOpensAt > -1;
        name = hasArguments
          ? match.substring(0, bracketOpensAt)
          : match;

        if (hasArguments && PSEUDO_CLASSES_WITH_ARGUMENTS.indexOf(name) == -1) {
          return false;
        }

        if (!hasArguments && PSEUDO_CLASSES_WITH_ARGUMENTS.indexOf(name) > -1) {
          return false;
        }
      }

      return true;
    }

    function someIncorrectlyChained(selector, matches) {
      var positionInSelector = 0;
      var match;
      var matchAt;
      var nextMatch;
      var nextMatchAt;
      var name;
      var nextName;
      var areChained;
      var i, l;

      for (i = 0, l = matches.length; i < l; i++) {
        match = matches[i];
        nextMatch = matches[i + 1];

        if (!nextMatch) {
          break;
        }

        matchAt = selector.indexOf(match, positionInSelector);
        nextMatchAt = selector.indexOf(match, matchAt + 1);
        positionInSelector = nextMatchAt;
        areChained = matchAt + match.length == nextMatchAt;

        if (areChained) {
          name = match.indexOf(Marker$6.OPEN_ROUND_BRACKET) > -1
            ? match.substring(0, match.indexOf(Marker$6.OPEN_ROUND_BRACKET))
            : match;
          nextName = nextMatch.indexOf(Marker$6.OPEN_ROUND_BRACKET) > -1
            ? nextMatch.substring(0, nextMatch.indexOf(Marker$6.OPEN_ROUND_BRACKET))
            : nextMatch;

          if (name != NOT_PSEUDO || nextName != NOT_PSEUDO) {
            return true;
          }
        }
      }

      return false;
    }

    function allMixable(matches) {
      var unmixableMatches = 0;
      var match;
      var i, l;

      for (i = 0, l = matches.length; i < l; i++) {
        match = matches[i];

        if (isPseudoElement(match)) {
          unmixableMatches += UNMIXABLE_PSEUDO_ELEMENTS.indexOf(match) > -1 ? 1 : 0;
        } else {
          unmixableMatches += UNMIXABLE_PSEUDO_CLASSES.indexOf(match) > -1 ? 1 : 0;
        }

        if (unmixableMatches > 1) {
          return false;
        }
      }

      return true;
    }

    function isPseudoElement(pseudo) {
      return DOUBLE_COLON_PATTERN.test(pseudo);
    }

    var isMergeable_1 = isMergeable$4;

    var Marker$5 = marker;

    function everyValuesPair$2(fn, left, right) {
      var leftSize = left.value.length;
      var rightSize = right.value.length;
      var total = Math.max(leftSize, rightSize);
      var lowerBound = Math.min(leftSize, rightSize) - 1;
      var leftValue;
      var rightValue;
      var position;

      for (position = 0; position < total; position++) {
        leftValue = left.value[position] && left.value[position][1] || leftValue;
        rightValue = right.value[position] && right.value[position][1] || rightValue;

        if (leftValue == Marker$5.COMMA || rightValue == Marker$5.COMMA) {
          continue;
        }

        if (!fn(leftValue, rightValue, position, position <= lowerBound)) {
          return false;
        }
      }

      return true;
    }

    var everyValuesPair_1 = everyValuesPair$2;

    function hasInherit$2(property) {
      for (var i = property.value.length - 1; i >= 0; i--) {
        if (property.value[i][1] == 'inherit') { return true; }
      }

      return false;
    }

    var hasInherit_1 = hasInherit$2;

    function hasSameValues$1(property) {
      var firstValue = property.value[0][1];
      var i, l;

      for (i = 1, l = property.value.length; i < l; i++) {
        if (property.value[i][1] != firstValue) {
          return false;
        }
      }

      return true;
    }

    var hasSameValues_1 = hasSameValues$1;

    var configuration$6 = configuration_1;
    var InvalidPropertyError = invalidPropertyError;

    function populateComponents$3(properties, validator, warnings) {
      var component;
      var j, m;

      for (var i = properties.length - 1; i >= 0; i--) {
        var property = properties[i];
        var descriptor = configuration$6[property.name];

        if (!property.dynamic && descriptor && descriptor.shorthand) {
          if (onlyValueIsVariable(property, validator) || moreThanOneValueIsVariable(property, validator)) {
            property.optimizable = false;
            continue;
          }

          property.shorthand = true;
          property.dirty = true;

          try {
            property.components = descriptor.breakUp(property, configuration$6, validator);

            if (descriptor.shorthandComponents) {
              for (j = 0, m = property.components.length; j < m; j++) {
                component = property.components[j];
                component.components = configuration$6[component.name].breakUp(component, configuration$6, validator);
              }
            }
          } catch (e) {
            if (e instanceof InvalidPropertyError) {
              property.components = []; // this will set property.unused to true below
              warnings.push(e.message);
            } else {
              throw e;
            }
          }

          if (property.components.length > 0) {
            property.multiplex = property.components[0].multiplex;
          } else {
            property.unused = true;
          }
        }
      }
    }

    function onlyValueIsVariable(property, validator) {
      return property.value.length == 1 && validator.isVariable(property.value[0][1]);
    }

    function moreThanOneValueIsVariable(property, validator) {
      return property.value.length > 1
        && property.value.filter(
          function(value) {
            return validator.isVariable(value[1]);
          }
        ).length > 1;
    }

    var populateComponents_1 = populateComponents$3;

    var configuration$5 = configuration_1;

    function restoreWithComponents$3(property) {
      var descriptor = configuration$5[property.name];

      if (descriptor && descriptor.shorthand) {
        return descriptor.restore(property, configuration$5);
      }
      return property.value;
    }

    var restoreWithComponents_1 = restoreWithComponents$3;

    var everyValuesPair$1 = everyValuesPair_1;
    var hasInherit$1 = hasInherit_1;
    var hasSameValues = hasSameValues_1;
    var populateComponents$2 = populateComponents_1;

    var configuration$4 = configuration_1;
    var deepClone$1 = clone.deep;
    var restoreWithComponents$2 = restoreWithComponents_1;

    var restoreFromOptimizing$3 = restoreFromOptimizing_1;
    var wrapSingle = wrapForOptimizing$3.single;

    var serializeBody$5 = oneTime.body;
    var Token$h = token;

    function mergeIntoShorthands$1(properties, validator) {
      var candidates = {};
      var descriptor;
      var componentOf;
      var property;
      var i, l;
      var j, m;

      // there is no shorthand property made up of less than 3 longhands
      if (properties.length < 3) {
        return;
      }

      for (i = 0, l = properties.length; i < l; i++) {
        property = properties[i];
        descriptor = configuration$4[property.name];

        if (property.dynamic) {
          continue;
        }

        if (property.unused) {
          continue;
        }

        if (property.hack) {
          continue;
        }

        if (property.block) {
          continue;
        }

        if (descriptor && descriptor.singleTypeComponents && !hasSameValues(property)) {
          continue;
        }

        invalidateOrCompact(properties, i, candidates, validator);

        if (descriptor && descriptor.componentOf) {
          for (j = 0, m = descriptor.componentOf.length; j < m; j++) {
            componentOf = descriptor.componentOf[j];

            candidates[componentOf] = candidates[componentOf] || {};
            candidates[componentOf][property.name] = property;
          }
        }
      }

      invalidateOrCompact(properties, i, candidates, validator);
    }

    function invalidateOrCompact(properties, position, candidates, validator) {
      var invalidatedBy = properties[position];
      var shorthandName;
      var shorthandDescriptor;
      var candidateComponents;
      var replacedCandidates = [];
      var i;

      for (shorthandName in candidates) {
        if (undefined !== invalidatedBy && shorthandName == invalidatedBy.name) {
          continue;
        }

        shorthandDescriptor = configuration$4[shorthandName];
        candidateComponents = candidates[shorthandName];
        if (invalidatedBy && invalidates(candidates, shorthandName, invalidatedBy)) {
          delete candidates[shorthandName];
          continue;
        }

        if (shorthandDescriptor.components.length > Object.keys(candidateComponents).length) {
          continue;
        }

        if (mixedImportance(candidateComponents)) {
          continue;
        }

        if (!overridable(candidateComponents, shorthandName, validator)) {
          continue;
        }

        if (!mergeable(candidateComponents)) {
          continue;
        }

        if (mixedInherit(candidateComponents)) {
          replaceWithInheritBestFit(properties, candidateComponents, shorthandName, validator);
        } else {
          replaceWithShorthand(properties, candidateComponents, shorthandName, validator);
        }

        replacedCandidates.push(shorthandName);
      }

      for (i = replacedCandidates.length - 1; i >= 0; i--) {
        delete candidates[replacedCandidates[i]];
      }
    }

    function invalidates(candidates, shorthandName, invalidatedBy) {
      var shorthandDescriptor = configuration$4[shorthandName];
      var invalidatedByDescriptor = configuration$4[invalidatedBy.name];
      var componentName;

      if ('overridesShorthands' in shorthandDescriptor && shorthandDescriptor.overridesShorthands.indexOf(invalidatedBy.name) > -1) {
        return true;
      }

      if (invalidatedByDescriptor && 'componentOf' in invalidatedByDescriptor) {
        for (componentName in candidates[shorthandName]) {
          if (invalidatedByDescriptor.componentOf.indexOf(componentName) > -1) {
            return true;
          }
        }
      }

      return false;
    }

    function mixedImportance(components) {
      var important;
      var componentName;

      for (componentName in components) {
        if (undefined !== important && components[componentName].important != important) {
          return true;
        }

        important = components[componentName].important;
      }

      return false;
    }

    function overridable(components, shorthandName, validator) {
      var descriptor = configuration$4[shorthandName];
      var newValuePlaceholder = [
        Token$h.PROPERTY,
        [Token$h.PROPERTY_NAME, shorthandName],
        [Token$h.PROPERTY_VALUE, descriptor.defaultValue]
      ];
      var newProperty = wrapSingle(newValuePlaceholder);
      var component;
      var mayOverride;
      var i, l;

      populateComponents$2([newProperty], validator, []);

      for (i = 0, l = descriptor.components.length; i < l; i++) {
        component = components[descriptor.components[i]];
        mayOverride = configuration$4[component.name].canOverride || sameValue$1;

        if (!everyValuesPair$1(mayOverride.bind(null, validator), newProperty.components[i], component)) {
          return false;
        }
      }

      return true;
    }

    function sameValue$1(_validator, value1, value2) {
      return value1 === value2;
    }

    function mergeable(components) {
      var lastCount = null;
      var currentCount;
      var componentName;
      var component;
      var descriptor;
      var values;

      for (componentName in components) {
        component = components[componentName];
        descriptor = configuration$4[componentName];

        if (!('restore' in descriptor)) {
          continue;
        }

        restoreFromOptimizing$3([component.all[component.position]], restoreWithComponents$2);
        values = descriptor.restore(component, configuration$4);

        currentCount = values.length;

        if (lastCount !== null && currentCount !== lastCount) {
          return false;
        }

        lastCount = currentCount;
      }

      return true;
    }

    function mixedInherit(components) {
      var componentName;
      var lastValue = null;
      var currentValue;

      for (componentName in components) {
        currentValue = hasInherit$1(components[componentName]);

        if (lastValue !== null && lastValue !== currentValue) {
          return true;
        }

        lastValue = currentValue;
      }

      return false;
    }

    function replaceWithInheritBestFit(properties, candidateComponents, shorthandName, validator) {
      var viaLonghands = buildSequenceWithInheritLonghands(candidateComponents, shorthandName, validator);
      var viaShorthand = buildSequenceWithInheritShorthand(candidateComponents, shorthandName, validator);
      var longhandTokensSequence = viaLonghands[0];
      var shorthandTokensSequence = viaShorthand[0];
      var isLonghandsShorter = serializeBody$5(longhandTokensSequence).length < serializeBody$5(shorthandTokensSequence).length;
      var newTokensSequence = isLonghandsShorter ? longhandTokensSequence : shorthandTokensSequence;
      var newProperty = isLonghandsShorter ? viaLonghands[1] : viaShorthand[1];
      var newComponents = isLonghandsShorter ? viaLonghands[2] : viaShorthand[2];
      var lastComponent = candidateComponents[Object.keys(candidateComponents).pop()];
      var all = lastComponent.all;
      var insertAt = lastComponent.position;
      var componentName;
      var oldComponent;
      var newComponent;
      var newToken;

      newProperty.position = insertAt;
      newProperty.shorthand = true;
      newProperty.important = lastComponent.important;
      newProperty.multiplex = false;
      newProperty.dirty = true;
      newProperty.all = all;
      newProperty.all[insertAt] = newTokensSequence[0];

      properties.splice(insertAt, 1, newProperty);

      for (componentName in candidateComponents) {
        oldComponent = candidateComponents[componentName];
        oldComponent.unused = true;

        newProperty.multiplex = newProperty.multiplex || oldComponent.multiplex;

        if (oldComponent.name in newComponents) {
          newComponent = newComponents[oldComponent.name];
          newToken = findTokenIn(newTokensSequence, componentName);

          newComponent.position = all.length;
          newComponent.all = all;
          newComponent.all.push(newToken);

          properties.push(newComponent);
        }
      }
    }

    function buildSequenceWithInheritLonghands(components, shorthandName, validator) {
      var tokensSequence = [];
      var inheritComponents = {};
      var nonInheritComponents = {};
      var descriptor = configuration$4[shorthandName];
      var shorthandToken = [
        Token$h.PROPERTY,
        [Token$h.PROPERTY_NAME, shorthandName],
        [Token$h.PROPERTY_VALUE, descriptor.defaultValue]
      ];
      var newProperty = wrapSingle(shorthandToken);
      var component;
      var longhandToken;
      var newComponent;
      var nameMetadata;
      var i, l;

      populateComponents$2([newProperty], validator, []);

      for (i = 0, l = descriptor.components.length; i < l; i++) {
        component = components[descriptor.components[i]];

        if (hasInherit$1(component)) {
          longhandToken = component.all[component.position].slice(0, 2);
          Array.prototype.push.apply(longhandToken, component.value);
          tokensSequence.push(longhandToken);

          newComponent = deepClone$1(component);
          newComponent.value = inferComponentValue(components, newComponent.name);

          newProperty.components[i] = newComponent;
          inheritComponents[component.name] = deepClone$1(component);
        } else {
          newComponent = deepClone$1(component);
          newComponent.all = component.all;
          newProperty.components[i] = newComponent;

          nonInheritComponents[component.name] = component;
        }
      }

      newProperty.important = components[Object.keys(components).pop()].important;

      nameMetadata = joinMetadata(nonInheritComponents, 1);
      shorthandToken[1].push(nameMetadata);

      restoreFromOptimizing$3([newProperty], restoreWithComponents$2);

      shorthandToken = shorthandToken.slice(0, 2);
      Array.prototype.push.apply(shorthandToken, newProperty.value);

      tokensSequence.unshift(shorthandToken);

      return [tokensSequence, newProperty, inheritComponents];
    }

    function inferComponentValue(components, propertyName) {
      var descriptor = configuration$4[propertyName];

      if ('oppositeTo' in descriptor) {
        return components[descriptor.oppositeTo].value;
      }
      return [[Token$h.PROPERTY_VALUE, descriptor.defaultValue]];
    }

    function joinMetadata(components, at) {
      var metadata = [];
      var component;
      var originalValue;
      var componentMetadata;
      var componentName;

      for (componentName in components) {
        component = components[componentName];
        originalValue = component.all[component.position];
        componentMetadata = originalValue[at][originalValue[at].length - 1];

        Array.prototype.push.apply(metadata, componentMetadata);
      }

      return metadata.sort(metadataSorter);
    }

    function metadataSorter(metadata1, metadata2) {
      var line1 = metadata1[0];
      var line2 = metadata2[0];
      var column1 = metadata1[1];
      var column2 = metadata2[1];

      if (line1 < line2) {
        return -1;
      } if (line1 === line2) {
        return column1 < column2 ? -1 : 1;
      }
      return 1;
    }

    function buildSequenceWithInheritShorthand(components, shorthandName, validator) {
      var tokensSequence = [];
      var inheritComponents = {};
      var nonInheritComponents = {};
      var descriptor = configuration$4[shorthandName];
      var shorthandToken = [
        Token$h.PROPERTY,
        [Token$h.PROPERTY_NAME, shorthandName],
        [Token$h.PROPERTY_VALUE, 'inherit']
      ];
      var newProperty = wrapSingle(shorthandToken);
      var component;
      var longhandToken;
      var nameMetadata;
      var valueMetadata;
      var i, l;

      populateComponents$2([newProperty], validator, []);

      for (i = 0, l = descriptor.components.length; i < l; i++) {
        component = components[descriptor.components[i]];

        if (hasInherit$1(component)) {
          inheritComponents[component.name] = component;
        } else {
          longhandToken = component.all[component.position].slice(0, 2);
          Array.prototype.push.apply(longhandToken, component.value);
          tokensSequence.push(longhandToken);

          nonInheritComponents[component.name] = deepClone$1(component);
        }
      }

      nameMetadata = joinMetadata(inheritComponents, 1);
      shorthandToken[1].push(nameMetadata);

      valueMetadata = joinMetadata(inheritComponents, 2);
      shorthandToken[2].push(valueMetadata);

      tokensSequence.unshift(shorthandToken);

      return [tokensSequence, newProperty, nonInheritComponents];
    }

    function findTokenIn(tokens, componentName) {
      var i, l;

      for (i = 0, l = tokens.length; i < l; i++) {
        if (tokens[i][1][1] == componentName) {
          return tokens[i];
        }
      }
    }

    function replaceWithShorthand(properties, candidateComponents, shorthandName, validator) {
      var descriptor = configuration$4[shorthandName];
      var nameMetadata;
      var valueMetadata;
      var newValuePlaceholder = [
        Token$h.PROPERTY,
        [Token$h.PROPERTY_NAME, shorthandName],
        [Token$h.PROPERTY_VALUE, descriptor.defaultValue]
      ];
      var all;
      var insertAt = inferInsertAtFrom(properties, candidateComponents, shorthandName);

      var newProperty = wrapSingle(newValuePlaceholder);
      newProperty.shorthand = true;
      newProperty.dirty = true;
      newProperty.multiplex = false;

      populateComponents$2([newProperty], validator, []);

      for (var i = 0, l = descriptor.components.length; i < l; i++) {
        var component = candidateComponents[descriptor.components[i]];

        newProperty.components[i] = deepClone$1(component);
        newProperty.important = component.important;
        newProperty.multiplex = newProperty.multiplex || component.multiplex;

        all = component.all;
      }

      for (var componentName in candidateComponents) {
        candidateComponents[componentName].unused = true;
      }

      nameMetadata = joinMetadata(candidateComponents, 1);
      newValuePlaceholder[1].push(nameMetadata);

      valueMetadata = joinMetadata(candidateComponents, 2);
      newValuePlaceholder[2].push(valueMetadata);

      newProperty.position = insertAt;
      newProperty.all = all;
      newProperty.all[insertAt] = newValuePlaceholder;

      properties.splice(insertAt, 1, newProperty);
    }

    function inferInsertAtFrom(properties, candidateComponents, shorthandName) {
      var candidateComponentNames = Object.keys(candidateComponents);
      var firstCandidatePosition = candidateComponents[candidateComponentNames[0]].position;
      var lastCandidatePosition = candidateComponents[candidateComponentNames[candidateComponentNames.length - 1]].position;

      if (shorthandName == 'border' && traversesVia(properties.slice(firstCandidatePosition, lastCandidatePosition), 'border-image')) {
        return firstCandidatePosition;
      }
      return lastCandidatePosition;
    }

    function traversesVia(properties, propertyName) {
      for (var i = properties.length - 1; i >= 0; i--) {
        if (properties[i].name == propertyName) {
          return true;
        }
      }

      return false;
    }

    var mergeIntoShorthands_1 = mergeIntoShorthands$1;

    function hasUnset$1(property) {
      for (var i = property.value.length - 1; i >= 0; i--) {
        if (property.value[i][1] == 'unset') { return true; }
      }

      return false;
    }

    var hasUnset_1 = hasUnset$1;

    var configuration$3 = configuration_1;

    function findComponentIn$1(shorthand, longhand) {
      var comparator = nameComparator(longhand);

      return findInDirectComponents(shorthand, comparator) || findInSubComponents(shorthand, comparator);
    }

    function nameComparator(to) {
      return function(property) {
        return to.name === property.name;
      };
    }

    function findInDirectComponents(shorthand, comparator) {
      return shorthand.components.filter(comparator)[0];
    }

    function findInSubComponents(shorthand, comparator) {
      var shorthandComponent;
      var longhandMatch;
      var i, l;

      if (!configuration$3[shorthand.name].shorthandComponents) {
        return;
      }

      for (i = 0, l = shorthand.components.length; i < l; i++) {
        shorthandComponent = shorthand.components[i];
        longhandMatch = findInDirectComponents(shorthandComponent, comparator);

        if (longhandMatch) {
          return longhandMatch;
        }
      }
    }

    var findComponentIn_1 = findComponentIn$1;

    var configuration$2 = configuration_1;

    function isComponentOf$1(property1, property2, shallow) {
      return isDirectComponentOf(property1, property2)
        || !shallow && !!configuration$2[property1.name].shorthandComponents && isSubComponentOf(property1, property2);
    }

    function isDirectComponentOf(property1, property2) {
      var descriptor = configuration$2[property1.name];

      return 'components' in descriptor && descriptor.components.indexOf(property2.name) > -1;
    }

    function isSubComponentOf(property1, property2) {
      return property1
        .components
        .some(function(component) {
          return isDirectComponentOf(component, property2);
        });
    }

    var isComponentOf_1 = isComponentOf$1;

    var Marker$4 = marker;

    function isMergeableShorthand$1(shorthand) {
      if (shorthand.name != 'font') {
        return true;
      }

      return shorthand.value[0][1].indexOf(Marker$4.INTERNAL) == -1;
    }

    var isMergeableShorthand_1 = isMergeableShorthand$1;

    var configuration$1 = configuration_1;

    function overridesNonComponentShorthand$1(property1, property2) {
      return property1.name in configuration$1
        && 'overridesShorthands' in configuration$1[property1.name]
        && configuration$1[property1.name].overridesShorthands.indexOf(property2.name) > -1;
    }

    var overridesNonComponentShorthand_1 = overridesNonComponentShorthand$1;

    var hasInherit = hasInherit_1;
    var hasUnset = hasUnset_1;
    var everyValuesPair = everyValuesPair_1;
    var findComponentIn = findComponentIn_1;
    var isComponentOf = isComponentOf_1;
    var isMergeableShorthand = isMergeableShorthand_1;
    var overridesNonComponentShorthand = overridesNonComponentShorthand_1;
    var sameVendorPrefixesIn = vendorPrefixes.same;

    var configuration = configuration_1;
    var deepClone = clone.deep;
    var restoreWithComponents$1 = restoreWithComponents_1;
    var shallowClone = clone.shallow;

    var restoreFromOptimizing$2 = restoreFromOptimizing_1;

    var Token$g = token;
    var Marker$3 = marker;

    var serializeProperty = oneTime.property;

    function sameValue(_validator, value1, value2) {
      return value1 === value2;
    }

    function wouldBreakCompatibility(property, validator) {
      for (var i = 0; i < property.components.length; i++) {
        var component = property.components[i];
        var descriptor = configuration[component.name];
        var canOverride = descriptor && descriptor.canOverride || sameValue;

        var _component = shallowClone(component);
        _component.value = [[Token$g.PROPERTY_VALUE, descriptor.defaultValue]];

        if (!everyValuesPair(canOverride.bind(null, validator), _component, component)) {
          return true;
        }
      }

      return false;
    }

    function overrideIntoMultiplex(property, by) {
      by.unused = true;

      turnIntoMultiplex(by, multiplexSize(property));
      property.value = by.value;
    }

    function overrideByMultiplex(property, by) {
      by.unused = true;
      property.multiplex = true;
      property.value = by.value;
    }

    function overrideSimple(property, by) {
      by.unused = true;
      property.value = by.value;
    }

    function override$2(property, by) {
      if (by.multiplex) {
        overrideByMultiplex(property, by);
      } else if (property.multiplex) {
        overrideIntoMultiplex(property, by);
      } else {
        overrideSimple(property, by);
      }
    }

    function overrideShorthand(property, by) {
      by.unused = true;

      for (var i = 0, l = property.components.length; i < l; i++) {
        override$2(property.components[i], by.components[i]);
      }
    }

    function turnIntoMultiplex(property, size) {
      property.multiplex = true;

      if (configuration[property.name].shorthand) {
        turnShorthandValueIntoMultiplex(property, size);
      } else {
        turnLonghandValueIntoMultiplex(property, size);
      }
    }

    function turnShorthandValueIntoMultiplex(property, size) {
      var component;
      var i, l;

      for (i = 0, l = property.components.length; i < l; i++) {
        component = property.components[i];

        if (!component.multiplex) {
          turnLonghandValueIntoMultiplex(component, size);
        }
      }
    }

    function turnLonghandValueIntoMultiplex(property, size) {
      var descriptor = configuration[property.name];
      var withRealValue = descriptor.intoMultiplexMode == 'real';
      var withValue = descriptor.intoMultiplexMode == 'real'
        ? property.value.slice(0)
        : (descriptor.intoMultiplexMode == 'placeholder' ? descriptor.placeholderValue : descriptor.defaultValue);
      var i = multiplexSize(property);
      var j;
      var m = withValue.length;

      for (; i < size; i++) {
        property.value.push([Token$g.PROPERTY_VALUE, Marker$3.COMMA]);

        if (Array.isArray(withValue)) {
          for (j = 0; j < m; j++) {
            property.value.push(withRealValue ? withValue[j] : [Token$g.PROPERTY_VALUE, withValue[j]]);
          }
        } else {
          property.value.push(withRealValue ? withValue : [Token$g.PROPERTY_VALUE, withValue]);
        }
      }
    }

    function multiplexSize(component) {
      var size = 0;

      for (var i = 0, l = component.value.length; i < l; i++) {
        if (component.value[i][1] == Marker$3.COMMA) { size++; }
      }

      return size + 1;
    }

    function lengthOf(property) {
      var fakeAsArray = [
        Token$g.PROPERTY,
        [Token$g.PROPERTY_NAME, property.name]
      ].concat(property.value);
      return serializeProperty([fakeAsArray], 0).length;
    }

    function moreSameShorthands(properties, startAt, name) {
      // Since we run the main loop in `compactOverrides` backwards, at this point some
      // properties may not be marked as unused.
      // We should consider reverting the order if possible
      var count = 0;

      for (var i = startAt; i >= 0; i--) {
        if (properties[i].name == name && !properties[i].unused) { count++; }
        if (count > 1) { break; }
      }

      return count > 1;
    }

    function overridingFunction(shorthand, validator) {
      for (var i = 0, l = shorthand.components.length; i < l; i++) {
        if (!anyValue(validator.isUrl, shorthand.components[i])
          && anyValue(validator.isFunction, shorthand.components[i])) { return true; }
      }

      return false;
    }

    function anyValue(fn, property) {
      for (var i = 0, l = property.value.length; i < l; i++) {
        if (property.value[i][1] == Marker$3.COMMA) { continue; }

        if (fn(property.value[i][1])) { return true; }
      }

      return false;
    }

    function wouldResultInLongerValue(left, right) {
      if (!left.multiplex && !right.multiplex || left.multiplex && right.multiplex) { return false; }

      var multiplex = left.multiplex ? left : right;
      var simple = left.multiplex ? right : left;
      var component;

      var multiplexClone = deepClone(multiplex);
      restoreFromOptimizing$2([multiplexClone], restoreWithComponents$1);

      var simpleClone = deepClone(simple);
      restoreFromOptimizing$2([simpleClone], restoreWithComponents$1);

      var lengthBefore = lengthOf(multiplexClone) + 1 + lengthOf(simpleClone);

      if (left.multiplex) {
        component = findComponentIn(multiplexClone, simpleClone);
        overrideIntoMultiplex(component, simpleClone);
      } else {
        component = findComponentIn(simpleClone, multiplexClone);
        turnIntoMultiplex(simpleClone, multiplexSize(multiplexClone));
        overrideByMultiplex(component, multiplexClone);
      }

      restoreFromOptimizing$2([simpleClone], restoreWithComponents$1);

      var lengthAfter = lengthOf(simpleClone);

      return lengthBefore <= lengthAfter;
    }

    function isCompactable(property) {
      return property.name in configuration;
    }

    function noneOverrideHack(left, right) {
      return !left.multiplex
        && (left.name == 'background' || left.name == 'background-image')
        && right.multiplex
        && (right.name == 'background' || right.name == 'background-image')
        && anyLayerIsNone(right.value);
    }

    function anyLayerIsNone(values) {
      var layers = intoLayers(values);

      for (var i = 0, l = layers.length; i < l; i++) {
        if (layers[i].length == 1 && layers[i][0][1] == 'none') { return true; }
      }

      return false;
    }

    function intoLayers(values) {
      var layers = [];

      for (var i = 0, layer = [], l = values.length; i < l; i++) {
        var value = values[i];
        if (value[1] == Marker$3.COMMA) {
          layers.push(layer);
          layer = [];
        } else {
          layer.push(value);
        }
      }

      layers.push(layer);
      return layers;
    }

    function overrideProperties$1(properties, withMerging, compatibility, validator) {
      var mayOverride, right, left, component;
      var overriddenComponents;
      var overriddenComponent;
      var overridingComponent;
      var overridable;
      var i, j, k;

      propertyLoop:
      for (i = properties.length - 1; i >= 0; i--) {
        right = properties[i];

        if (!isCompactable(right)) { continue; }

        if (right.block) { continue; }

        mayOverride = configuration[right.name].canOverride || sameValue;

        traverseLoop:
        for (j = i - 1; j >= 0; j--) {
          left = properties[j];

          if (!isCompactable(left)) { continue; }

          if (left.block) { continue; }

          if (left.dynamic || right.dynamic) { continue; }

          if (left.unused || right.unused) { continue; }

          if (left.hack && !right.hack && !right.important || !left.hack && !left.important && right.hack) { continue; }

          if (left.important == right.important && left.hack[0] != right.hack[0]) { continue; }

          if (left.important == right.important
            && (left.hack[0] != right.hack[0] || (left.hack[1] && left.hack[1] != right.hack[1]))) { continue; }

          if (hasInherit(right)) { continue; }

          if (noneOverrideHack(left, right)) { continue; }

          if (right.shorthand && isComponentOf(right, left)) {
            // maybe `left` can be overridden by `right` which is a shorthand?
            if (!right.important && left.important) { continue; }

            if (!sameVendorPrefixesIn([left], right.components)) { continue; }

            if (!anyValue(validator.isFunction, left) && overridingFunction(right, validator)) { continue; }

            if (!isMergeableShorthand(right)) {
              left.unused = true;
              continue;
            }

            component = findComponentIn(right, left);
            mayOverride = configuration[left.name].canOverride || sameValue;
            if (everyValuesPair(mayOverride.bind(null, validator), left, component)) {
              left.unused = true;
            }
          } else if (right.shorthand && overridesNonComponentShorthand(right, left)) {
            // `right` is a shorthand while `left` can be overriden by it, think `border` and `border-top`
            if (!right.important && left.important) {
              continue;
            }

            if (!sameVendorPrefixesIn([left], right.components)) {
              continue;
            }

            if (!anyValue(validator.isFunction, left) && overridingFunction(right, validator)) {
              continue;
            }

            overriddenComponents = left.shorthand
              ? left.components
              : [left];

            for (k = overriddenComponents.length - 1; k >= 0; k--) {
              overriddenComponent = overriddenComponents[k];
              overridingComponent = findComponentIn(right, overriddenComponent);
              mayOverride = configuration[overriddenComponent.name].canOverride || sameValue;

              if (!everyValuesPair(mayOverride.bind(null, validator), left, overridingComponent)) {
                continue traverseLoop;
              }
            }

            left.unused = true;
          } else if (withMerging && left.shorthand && !right.shorthand && isComponentOf(left, right, true)) {
            // maybe `right` can be pulled into `left` which is a shorthand?
            if (right.important && !left.important) { continue; }

            if (!right.important && left.important) {
              right.unused = true;
              continue;
            }

            // Pending more clever algorithm in #527
            if (moreSameShorthands(properties, i - 1, left.name)) { continue; }

            if (overridingFunction(left, validator)) { continue; }

            if (!isMergeableShorthand(left)) { continue; }

            if (hasUnset(left) || hasUnset(right)) { continue; }

            component = findComponentIn(left, right);
            if (everyValuesPair(mayOverride.bind(null, validator), component, right)) {
              var disabledBackgroundMerging = !compatibility.properties.backgroundClipMerging && component.name.indexOf('background-clip') > -1
                || !compatibility.properties.backgroundOriginMerging && component.name.indexOf('background-origin') > -1
                || !compatibility.properties.backgroundSizeMerging && component.name.indexOf('background-size') > -1;
              var nonMergeableValue = configuration[right.name].nonMergeableValue === right.value[0][1];

              if (disabledBackgroundMerging || nonMergeableValue) { continue; }

              if (!compatibility.properties.merging && wouldBreakCompatibility(left, validator)) { continue; }

              if (component.value[0][1] != right.value[0][1] && (hasInherit(left) || hasInherit(right))) { continue; }

              if (wouldResultInLongerValue(left, right)) { continue; }

              if (!left.multiplex && right.multiplex) { turnIntoMultiplex(left, multiplexSize(right)); }

              override$2(component, right);
              left.dirty = true;
            }
          } else if (withMerging && left.shorthand && right.shorthand && left.name == right.name) {
            // merge if all components can be merged

            if (!left.multiplex && right.multiplex) { continue; }

            if (!right.important && left.important) {
              right.unused = true;
              continue propertyLoop;
            }

            if (right.important && !left.important) {
              left.unused = true;
              continue;
            }

            if (!isMergeableShorthand(right)) {
              left.unused = true;
              continue;
            }

            for (k = left.components.length - 1; k >= 0; k--) {
              var leftComponent = left.components[k];
              var rightComponent = right.components[k];

              mayOverride = configuration[leftComponent.name].canOverride || sameValue;
              if (!everyValuesPair(mayOverride.bind(null, validator), leftComponent, rightComponent)) {
                continue propertyLoop;
              }
            }

            overrideShorthand(left, right);
            left.dirty = true;
          } else if (withMerging && left.shorthand && right.shorthand && isComponentOf(left, right)) {
            // border is a shorthand but any of its components is a shorthand too

            if (!left.important && right.important) { continue; }

            component = findComponentIn(left, right);
            mayOverride = configuration[right.name].canOverride || sameValue;
            if (!everyValuesPair(mayOverride.bind(null, validator), component, right)) { continue; }

            if (left.important && !right.important) {
              right.unused = true;
              continue;
            }

            var rightRestored = configuration[right.name].restore(right, configuration);
            if (rightRestored.length > 1) { continue; }

            component = findComponentIn(left, right);
            override$2(component, right);
            right.dirty = true;
          } else if (left.name == right.name) {
            // two non-shorthands should be merged based on understandability
            overridable = true;

            if (right.shorthand) {
              for (k = right.components.length - 1; k >= 0 && overridable; k--) {
                overriddenComponent = left.components[k];
                overridingComponent = right.components[k];
                mayOverride = configuration[overridingComponent.name].canOverride || sameValue;

                overridable = everyValuesPair(mayOverride.bind(null, validator), overriddenComponent, overridingComponent);
              }
            } else {
              mayOverride = configuration[right.name].canOverride || sameValue;
              overridable = everyValuesPair(mayOverride.bind(null, validator), left, right);
            }

            if (left.important && !right.important && overridable) {
              right.unused = true;
              continue;
            }

            if (!left.important && right.important && overridable) {
              left.unused = true;
              continue;
            }

            if (!overridable) {
              continue;
            }

            left.unused = true;
          }
        }
      }
    }

    var overrideProperties_1 = overrideProperties$1;

    var mergeIntoShorthands = mergeIntoShorthands_1;
    var overrideProperties = overrideProperties_1;
    var populateComponents$1 = populateComponents_1;

    var restoreWithComponents = restoreWithComponents_1;

    var wrapForOptimizing$1 = wrapForOptimizing$3.all;
    var removeUnused = removeUnused_1;
    var restoreFromOptimizing$1 = restoreFromOptimizing_1;

    var OptimizationLevel$5 = optimizationLevel.OptimizationLevel;

    function optimizeProperties$4(properties, withOverriding, withMerging, context) {
      var levelOptions = context.options.level[OptimizationLevel$5.Two];
      var _properties = wrapForOptimizing$1(properties, levelOptions.skipProperties);
      var _property;
      var i, l;

      populateComponents$1(_properties, context.validator, context.warnings);

      for (i = 0, l = _properties.length; i < l; i++) {
        _property = _properties[i];
        if (_property.block) {
          optimizeProperties$4(_property.value[0][1], withOverriding, withMerging, context);
        }
      }

      if (withMerging && levelOptions.mergeIntoShorthands) {
        mergeIntoShorthands(_properties, context.validator);
      }

      if (withOverriding && levelOptions.overrideProperties) {
        overrideProperties(_properties, withMerging, context.options.compatibility, context.validator);
      }

      restoreFromOptimizing$1(_properties, restoreWithComponents);
      removeUnused(_properties);
    }

    var optimize$2 = optimizeProperties$4;

    var isMergeable$3 = isMergeable_1;

    var optimizeProperties$3 = optimize$2;

    var sortSelectors$1 = sortSelectors_1;
    var tidyRules$1 = tidyRules_1;

    var OptimizationLevel$4 = optimizationLevel.OptimizationLevel;

    var serializeBody$4 = oneTime.body;
    var serializeRules$8 = oneTime.rules;

    var Token$f = token;

    function mergeAdjacent$1(tokens, context) {
      var lastToken = [null, [], []];
      var options = context.options;
      var adjacentSpace = options.compatibility.selectors.adjacentSpace;
      var selectorsSortingMethod = options.level[OptimizationLevel$4.One].selectorsSortingMethod;
      var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;
      var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;
      var mergeLimit = options.compatibility.selectors.mergeLimit;
      var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;

      for (var i = 0, l = tokens.length; i < l; i++) {
        var token = tokens[i];

        if (token[0] != Token$f.RULE) {
          lastToken = [null, [], []];
          continue;
        }

        if (lastToken[0] == Token$f.RULE && serializeRules$8(token[1]) == serializeRules$8(lastToken[1])) {
          Array.prototype.push.apply(lastToken[2], token[2]);
          optimizeProperties$3(lastToken[2], true, true, context);
          token[2] = [];
        } else if (lastToken[0] == Token$f.RULE && serializeBody$4(token[2]) == serializeBody$4(lastToken[2])
            && isMergeable$3(serializeRules$8(token[1]), mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging)
            && isMergeable$3(
              serializeRules$8(lastToken[1]),
              mergeablePseudoClasses,
              mergeablePseudoElements,
              multiplePseudoMerging
            )
            && lastToken[1].length < mergeLimit) {
          lastToken[1] = tidyRules$1(lastToken[1].concat(token[1]), false, adjacentSpace, false, context.warnings);
          lastToken[1] = lastToken.length > 1 ? sortSelectors$1(lastToken[1], selectorsSortingMethod) : lastToken[1];
          token[2] = [];
        } else {
          lastToken = token;
        }
      }
    }

    var mergeAdjacent_1 = mergeAdjacent$1;

    var MODIFIER_PATTERN = /--.+$/;

    function rulesOverlap$2(rule1, rule2, bemMode) {
      var scope1;
      var scope2;
      var i, l;
      var j, m;

      for (i = 0, l = rule1.length; i < l; i++) {
        scope1 = rule1[i][1];

        for (j = 0, m = rule2.length; j < m; j++) {
          scope2 = rule2[j][1];

          if (scope1 == scope2) {
            return true;
          }

          if (bemMode && withoutModifiers(scope1) == withoutModifiers(scope2)) {
            return true;
          }
        }
      }

      return false;
    }

    function withoutModifiers(scope) {
      return scope.replace(MODIFIER_PATTERN, '');
    }

    var rulesOverlap_1 = rulesOverlap$2;

    var Marker$2 = marker;

    var Selector = {
      ADJACENT_SIBLING: '+',
      DESCENDANT: '>',
      DOT: '.',
      HASH: '#',
      NON_ADJACENT_SIBLING: '~',
      PSEUDO: ':'
    };

    var LETTER_PATTERN = /[a-zA-Z]/;
    var NOT_PREFIX = ':not(';
    var SEPARATOR_PATTERN = /[\s,(>~+]/;

    function specificity$1(selector) {
      var result = [0, 0, 0];
      var character;
      var isEscaped;
      var isSingleQuoted;
      var isDoubleQuoted;
      var roundBracketLevel = 0;
      var couldIntroduceNewTypeSelector;
      var withinNotPseudoClass = false;
      var wasPseudoClass = false;
      var i, l;

      for (i = 0, l = selector.length; i < l; i++) {
        character = selector[i];

        if (isEscaped) ; else if (character == Marker$2.SINGLE_QUOTE && !isDoubleQuoted && !isSingleQuoted) {
          isSingleQuoted = true;
        } else if (character == Marker$2.SINGLE_QUOTE && !isDoubleQuoted && isSingleQuoted) {
          isSingleQuoted = false;
        } else if (character == Marker$2.DOUBLE_QUOTE && !isDoubleQuoted && !isSingleQuoted) {
          isDoubleQuoted = true;
        } else if (character == Marker$2.DOUBLE_QUOTE && isDoubleQuoted && !isSingleQuoted) {
          isDoubleQuoted = false;
        } else if (isSingleQuoted || isDoubleQuoted) {
          continue;
        } else if (roundBracketLevel > 0 && !withinNotPseudoClass) ; else if (character == Marker$2.OPEN_ROUND_BRACKET) {
          roundBracketLevel++;
        } else if (character == Marker$2.CLOSE_ROUND_BRACKET && roundBracketLevel == 1) {
          roundBracketLevel--;
          withinNotPseudoClass = false;
        } else if (character == Marker$2.CLOSE_ROUND_BRACKET) {
          roundBracketLevel--;
        } else if (character == Selector.HASH) {
          result[0]++;
        } else if (character == Selector.DOT || character == Marker$2.OPEN_SQUARE_BRACKET) {
          result[1]++;
        } else if (character == Selector.PSEUDO && !wasPseudoClass && !isNotPseudoClass(selector, i)) {
          result[1]++;
          withinNotPseudoClass = false;
        } else if (character == Selector.PSEUDO) {
          withinNotPseudoClass = true;
        } else if ((i === 0 || couldIntroduceNewTypeSelector) && LETTER_PATTERN.test(character)) {
          result[2]++;
        }

        isEscaped = character == Marker$2.BACK_SLASH;
        wasPseudoClass = character == Selector.PSEUDO;
        couldIntroduceNewTypeSelector = !isEscaped && SEPARATOR_PATTERN.test(character);
      }

      return result;
    }

    function isNotPseudoClass(selector, index) {
      return selector.indexOf(NOT_PREFIX, index) === index;
    }

    var specificity_1 = specificity$1;

    var specificity = specificity_1;

    function specificitiesOverlap$1(selector1, selector2, cache) {
      var specificity1;
      var specificity2;
      var i, l;
      var j, m;

      for (i = 0, l = selector1.length; i < l; i++) {
        specificity1 = findSpecificity(selector1[i][1], cache);

        for (j = 0, m = selector2.length; j < m; j++) {
          specificity2 = findSpecificity(selector2[j][1], cache);

          if (specificity1[0] === specificity2[0]
            && specificity1[1] === specificity2[1]
            && specificity1[2] === specificity2[2]) {
            return true;
          }
        }
      }

      return false;
    }

    function findSpecificity(selector, cache) {
      var value;

      if (!(selector in cache)) {
        cache[selector] = value = specificity(selector);
      }

      return value || cache[selector];
    }

    var specificitiesOverlap_1 = specificitiesOverlap$1;

    // TODO: it'd be great to merge it with the other canReorder functionality

    var rulesOverlap$1 = rulesOverlap_1;
    var specificitiesOverlap = specificitiesOverlap_1;

    var FLEX_PROPERTIES = /align-items|box-align|box-pack|flex|justify/;
    var BORDER_PROPERTIES = /^border-(top|right|bottom|left|color|style|width|radius)/;

    function canReorder$2(left, right, cache) {
      for (var i = right.length - 1; i >= 0; i--) {
        for (var j = left.length - 1; j >= 0; j--) {
          if (!canReorderSingle$2(left[j], right[i], cache)) { return false; }
        }
      }

      return true;
    }

    function canReorderSingle$2(left, right, cache) {
      var leftName = left[0];
      var leftValue = left[1];
      var leftNameRoot = left[2];
      var leftSelector = left[5];
      var leftInSpecificSelector = left[6];
      var rightName = right[0];
      var rightValue = right[1];
      var rightNameRoot = right[2];
      var rightSelector = right[5];
      var rightInSpecificSelector = right[6];

      if (leftName == 'font' && rightName == 'line-height' || rightName == 'font' && leftName == 'line-height') { return false; }
      if (FLEX_PROPERTIES.test(leftName) && FLEX_PROPERTIES.test(rightName)) { return false; }
      if (leftNameRoot == rightNameRoot
        && unprefixed(leftName) == unprefixed(rightName)
        && (vendorPrefixed(leftName) ^ vendorPrefixed(rightName))) { return false; }
      if (leftNameRoot == 'border' && BORDER_PROPERTIES.test(rightNameRoot) && (leftName == 'border' || leftName == rightNameRoot || (leftValue != rightValue && sameBorderComponent(leftName, rightName)))) { return false; }
      if (rightNameRoot == 'border' && BORDER_PROPERTIES.test(leftNameRoot) && (rightName == 'border' || rightName == leftNameRoot || (leftValue != rightValue && sameBorderComponent(leftName, rightName)))) { return false; }
      if (leftNameRoot == 'border' && rightNameRoot == 'border' && leftName != rightName && (isSideBorder(leftName) && isStyleBorder(rightName) || isStyleBorder(leftName) && isSideBorder(rightName))) { return false; }
      if (leftNameRoot != rightNameRoot) { return true; }
      if (leftName == rightName
        && leftNameRoot == rightNameRoot
        && (leftValue == rightValue || withDifferentVendorPrefix(leftValue, rightValue))) { return true; }
      if (leftName != rightName
        && leftNameRoot == rightNameRoot
        && leftName != leftNameRoot
        && rightName != rightNameRoot) { return true; }
      if (leftName != rightName
        && leftNameRoot == rightNameRoot
        && leftValue == rightValue) { return true; }
      if (rightInSpecificSelector
        && leftInSpecificSelector
        && !inheritable(leftNameRoot)
        && !inheritable(rightNameRoot)
        && !rulesOverlap$1(rightSelector, leftSelector, false)) { return true; }
      if (!specificitiesOverlap(leftSelector, rightSelector, cache)) { return true; }

      return false;
    }

    function vendorPrefixed(name) {
      return /^-(?:moz|webkit|ms|o)-/.test(name);
    }

    function unprefixed(name) {
      return name.replace(/^-(?:moz|webkit|ms|o)-/, '');
    }

    function sameBorderComponent(name1, name2) {
      return name1.split('-').pop() == name2.split('-').pop();
    }

    function isSideBorder(name) {
      return name == 'border-top' || name == 'border-right' || name == 'border-bottom' || name == 'border-left';
    }

    function isStyleBorder(name) {
      return name == 'border-color' || name == 'border-style' || name == 'border-width';
    }

    function withDifferentVendorPrefix(value1, value2) {
      return vendorPrefixed(value1) && vendorPrefixed(value2) && value1.split('-')[1] != value2.split('-')[2];
    }

    function inheritable(name) {
      // According to http://www.w3.org/TR/CSS21/propidx.html
      // Others will be catched by other, preceeding rules
      return name == 'font' || name == 'line-height' || name == 'list-style';
    }

    var reorderable = {
      canReorder: canReorder$2,
      canReorderSingle: canReorderSingle$2
    };

    // This extractor is used in level 2 optimizations
    // IMPORTANT: Mind Token class and this code is not related!
    // Properties will be tokenized in one step, see #429

    var Token$e = token;
    var serializeRules$7 = oneTime.rules;
    var serializeValue = oneTime.value;

    function extractProperties$3(token) {
      var properties = [];
      var inSpecificSelector;
      var property;
      var name;
      var value;
      var i, l;

      if (token[0] == Token$e.RULE) {
        inSpecificSelector = !/[.+>~]/.test(serializeRules$7(token[1]));

        for (i = 0, l = token[2].length; i < l; i++) {
          property = token[2][i];

          if (property[0] != Token$e.PROPERTY) { continue; }

          name = property[1][1];
          if (name.length === 0) { continue; }

          value = serializeValue(property, i);

          properties.push([
            name,
            value,
            findNameRoot(name),
            token[2][i],
            name + ':' + value,
            token[1],
            inSpecificSelector
          ]);
        }
      } else if (token[0] == Token$e.NESTED_BLOCK) {
        for (i = 0, l = token[2].length; i < l; i++) {
          properties = properties.concat(extractProperties$3(token[2][i]));
        }
      }

      return properties;
    }

    function findNameRoot(name) {
      if (name == 'list-style') { return name; }
      if (name.indexOf('-radius') > 0) { return 'border-radius'; }
      if (name == 'border-collapse' || name == 'border-spacing' || name == 'border-image') { return name; }
      if (name.indexOf('border-') === 0 && /^border-\w+-\w+$/.test(name)) { return name.match(/border-\w+/)[0]; }
      if (name.indexOf('border-') === 0 && /^border-\w+$/.test(name)) { return 'border'; }
      if (name.indexOf('text-') === 0) { return name; }
      if (name == '-chrome-') { return name; }

      return name.replace(/^-\w+-/, '').match(/([a-zA-Z]+)/)[0].toLowerCase();
    }

    var extractProperties_1 = extractProperties$3;

    var canReorder$1 = reorderable.canReorder;
    var canReorderSingle$1 = reorderable.canReorderSingle;
    var extractProperties$2 = extractProperties_1;
    var rulesOverlap = rulesOverlap_1;

    var serializeRules$6 = oneTime.rules;
    var OptimizationLevel$3 = optimizationLevel.OptimizationLevel;
    var Token$d = token;

    function mergeMediaQueries$1(tokens, context) {
      var mergeSemantically = context.options.level[OptimizationLevel$3.Two].mergeSemantically;
      var specificityCache = context.cache.specificity;
      var candidates = {};
      var reduced = [];

      for (var i = tokens.length - 1; i >= 0; i--) {
        var token = tokens[i];
        if (token[0] != Token$d.NESTED_BLOCK) {
          continue;
        }

        var key = serializeRules$6(token[1]);
        var candidate = candidates[key];
        if (!candidate) {
          candidate = [];
          candidates[key] = candidate;
        }

        candidate.push(i);
      }

      for (var name in candidates) {
        var positions = candidates[name];

        positionLoop:
        for (var j = positions.length - 1; j > 0; j--) {
          var positionOne = positions[j];
          var tokenOne = tokens[positionOne];
          var positionTwo = positions[j - 1];
          var tokenTwo = tokens[positionTwo];

          directionLoop:
          for (var direction = 1; direction >= -1; direction -= 2) {
            var topToBottom = direction == 1;
            var from = topToBottom ? positionOne + 1 : positionTwo - 1;
            var to = topToBottom ? positionTwo : positionOne;
            var delta = topToBottom ? 1 : -1;
            var source = topToBottom ? tokenOne : tokenTwo;
            var target = topToBottom ? tokenTwo : tokenOne;
            var movedProperties = extractProperties$2(source);

            while (from != to) {
              var traversedProperties = extractProperties$2(tokens[from]);
              from += delta;

              if (mergeSemantically
                && allSameRulePropertiesCanBeReordered(movedProperties, traversedProperties, specificityCache)
              ) {
                continue;
              }

              if (!canReorder$1(movedProperties, traversedProperties, specificityCache)) { continue directionLoop; }
            }

            target[2] = topToBottom
              ? source[2].concat(target[2])
              : target[2].concat(source[2]);
            source[2] = [];

            reduced.push(target);
            continue positionLoop;
          }
        }
      }

      return reduced;
    }

    function allSameRulePropertiesCanBeReordered(movedProperties, traversedProperties, specificityCache) {
      var movedProperty;
      var movedRule;
      var traversedProperty;
      var traversedRule;
      var i, l;
      var j, m;

      for (i = 0, l = movedProperties.length; i < l; i++) {
        movedProperty = movedProperties[i];
        movedRule = movedProperty[5];

        for (j = 0, m = traversedProperties.length; j < m; j++) {
          traversedProperty = traversedProperties[j];
          traversedRule = traversedProperty[5];

          if (rulesOverlap(movedRule, traversedRule, true)
            && !canReorderSingle$1(movedProperty, traversedProperty, specificityCache)) {
            return false;
          }
        }
      }

      return true;
    }

    var mergeMediaQueries_1 = mergeMediaQueries$1;

    var isMergeable$2 = isMergeable_1;

    var sortSelectors = sortSelectors_1;
    var tidyRules = tidyRules_1;

    var OptimizationLevel$2 = optimizationLevel.OptimizationLevel;

    var serializeBody$3 = oneTime.body;
    var serializeRules$5 = oneTime.rules;

    var Token$c = token;

    function unsafeSelector(value) {
      return /\.|\*| :/.test(value);
    }

    function isBemElement(token) {
      var asString = serializeRules$5(token[1]);
      return asString.indexOf('__') > -1 || asString.indexOf('--') > -1;
    }

    function withoutModifier(selector) {
      return selector.replace(/--[^ ,>+~:]+/g, '');
    }

    function removeAnyUnsafeElements(left, candidates) {
      var leftSelector = withoutModifier(serializeRules$5(left[1]));

      for (var body in candidates) {
        var right = candidates[body];
        var rightSelector = withoutModifier(serializeRules$5(right[1]));

        if (rightSelector.indexOf(leftSelector) > -1 || leftSelector.indexOf(rightSelector) > -1) {
          delete candidates[body];
        }
      }
    }

    function mergeNonAdjacentByBody$1(tokens, context) {
      var options = context.options;
      var mergeSemantically = options.level[OptimizationLevel$2.Two].mergeSemantically;
      var adjacentSpace = options.compatibility.selectors.adjacentSpace;
      var selectorsSortingMethod = options.level[OptimizationLevel$2.One].selectorsSortingMethod;
      var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;
      var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;
      var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;
      var candidates = {};

      for (var i = tokens.length - 1; i >= 0; i--) {
        var token = tokens[i];
        if (token[0] != Token$c.RULE) { continue; }

        if (token[2].length > 0 && (!mergeSemantically && unsafeSelector(serializeRules$5(token[1])))) { candidates = {}; }

        if (token[2].length > 0 && mergeSemantically && isBemElement(token)) { removeAnyUnsafeElements(token, candidates); }

        var candidateBody = serializeBody$3(token[2]);
        var oldToken = candidates[candidateBody];
        if (oldToken
            && isMergeable$2(
              serializeRules$5(token[1]),
              mergeablePseudoClasses,
              mergeablePseudoElements,
              multiplePseudoMerging
            )
            && isMergeable$2(
              serializeRules$5(oldToken[1]),
              mergeablePseudoClasses,
              mergeablePseudoElements,
              multiplePseudoMerging
            )
        ) {
          if (token[2].length > 0) {
            token[1] = tidyRules(oldToken[1].concat(token[1]), false, adjacentSpace, false, context.warnings);
            token[1] = token[1].length > 1 ? sortSelectors(token[1], selectorsSortingMethod) : token[1];
          } else {
            token[1] = oldToken[1].concat(token[1]);
          }

          oldToken[2] = [];
          candidates[candidateBody] = null;
        }

        candidates[serializeBody$3(token[2])] = token;
      }
    }

    var mergeNonAdjacentByBody_1 = mergeNonAdjacentByBody$1;

    var canReorder = reorderable.canReorder;
    var extractProperties$1 = extractProperties_1;

    var optimizeProperties$2 = optimize$2;

    var serializeRules$4 = oneTime.rules;

    var Token$b = token;

    function mergeNonAdjacentBySelector$1(tokens, context) {
      var specificityCache = context.cache.specificity;
      var allSelectors = {};
      var repeatedSelectors = [];
      var i;

      for (i = tokens.length - 1; i >= 0; i--) {
        if (tokens[i][0] != Token$b.RULE) { continue; }
        if (tokens[i][2].length === 0) { continue; }

        var selector = serializeRules$4(tokens[i][1]);
        allSelectors[selector] = [i].concat(allSelectors[selector] || []);

        if (allSelectors[selector].length == 2) { repeatedSelectors.push(selector); }
      }

      for (i = repeatedSelectors.length - 1; i >= 0; i--) {
        var positions = allSelectors[repeatedSelectors[i]];

        selectorIterator:
        for (var j = positions.length - 1; j > 0; j--) {
          var positionOne = positions[j - 1];
          var tokenOne = tokens[positionOne];
          var positionTwo = positions[j];
          var tokenTwo = tokens[positionTwo];

          directionIterator:
          for (var direction = 1; direction >= -1; direction -= 2) {
            var topToBottom = direction == 1;
            var from = topToBottom ? positionOne + 1 : positionTwo - 1;
            var to = topToBottom ? positionTwo : positionOne;
            var delta = topToBottom ? 1 : -1;
            var moved = topToBottom ? tokenOne : tokenTwo;
            var target = topToBottom ? tokenTwo : tokenOne;
            var movedProperties = extractProperties$1(moved);

            while (from != to) {
              var traversedProperties = extractProperties$1(tokens[from]);
              from += delta;

              // traversed then moved as we move selectors towards the start
              var reorderable = topToBottom
                ? canReorder(movedProperties, traversedProperties, specificityCache)
                : canReorder(traversedProperties, movedProperties, specificityCache);

              if (!reorderable && !topToBottom) { continue selectorIterator; }
              if (!reorderable && topToBottom) { continue directionIterator; }
            }

            if (topToBottom) {
              Array.prototype.push.apply(moved[2], target[2]);
              target[2] = moved[2];
            } else {
              Array.prototype.push.apply(target[2], moved[2]);
            }

            optimizeProperties$2(target[2], true, true, context);
            moved[2] = [];
          }
        }
      }
    }

    var mergeNonAdjacentBySelector_1 = mergeNonAdjacentBySelector$1;

    function cloneArray$2(array) {
      var cloned = array.slice(0);

      for (var i = 0, l = cloned.length; i < l; i++) {
        if (Array.isArray(cloned[i])) { cloned[i] = cloneArray$2(cloned[i]); }
      }

      return cloned;
    }

    var cloneArray_1 = cloneArray$2;

    var isMergeable$1 = isMergeable_1;

    var optimizeProperties$1 = optimize$2;

    var cloneArray$1 = cloneArray_1;

    var Token$a = token;

    var serializeBody$2 = oneTime.body;
    var serializeRules$3 = oneTime.rules;

    function reduceNonAdjacent$1(tokens, context) {
      var options = context.options;
      var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;
      var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;
      var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;
      var candidates = {};
      var repeated = [];

      for (var i = tokens.length - 1; i >= 0; i--) {
        var token = tokens[i];

        if (token[0] != Token$a.RULE) {
          continue;
        } else if (token[2].length === 0) {
          continue;
        }

        var selectorAsString = serializeRules$3(token[1]);
        var isComplexAndNotSpecial = token[1].length > 1
          && isMergeable$1(selectorAsString, mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging);
        var wrappedSelectors = wrappedSelectorsFrom(token[1]);
        var selectors = isComplexAndNotSpecial
          ? [selectorAsString].concat(wrappedSelectors)
          : [selectorAsString];

        for (var j = 0, m = selectors.length; j < m; j++) {
          var selector = selectors[j];

          if (!candidates[selector]) { candidates[selector] = []; } else { repeated.push(selector); }

          candidates[selector].push({
            where: i,
            list: wrappedSelectors,
            isPartial: isComplexAndNotSpecial && j > 0,
            isComplex: isComplexAndNotSpecial && j === 0
          });
        }
      }

      reduceSimpleNonAdjacentCases(tokens, repeated, candidates, options, context);
      reduceComplexNonAdjacentCases(tokens, candidates, options, context);
    }

    function wrappedSelectorsFrom(list) {
      var wrapped = [];

      for (var i = 0; i < list.length; i++) {
        wrapped.push([list[i][1]]);
      }

      return wrapped;
    }

    function reduceSimpleNonAdjacentCases(tokens, repeated, candidates, options, context) {
      function filterOut(idx, bodies) {
        return data[idx].isPartial && bodies.length === 0;
      }

      function reduceBody(token, newBody, processedCount, tokenIdx) {
        if (!data[processedCount - tokenIdx - 1].isPartial) { token[2] = newBody; }
      }

      for (var i = 0, l = repeated.length; i < l; i++) {
        var selector = repeated[i];
        var data = candidates[selector];

        reduceSelector(tokens, data, {
          filterOut: filterOut,
          callback: reduceBody
        }, options, context);
      }
    }

    function reduceComplexNonAdjacentCases(tokens, candidates, options, context) {
      var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;
      var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;
      var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;
      var localContext = {};

      function filterOut(idx) {
        return localContext.data[idx].where < localContext.intoPosition;
      }

      function collectReducedBodies(token, newBody, processedCount, tokenIdx) {
        if (tokenIdx === 0) { localContext.reducedBodies.push(newBody); }
      }

      allSelectors:
      for (var complexSelector in candidates) {
        var into = candidates[complexSelector];
        if (!into[0].isComplex) { continue; }

        var intoPosition = into[into.length - 1].where;
        var intoToken = tokens[intoPosition];
        var reducedBodies = [];

        var selectors = isMergeable$1(complexSelector, mergeablePseudoClasses, mergeablePseudoElements, multiplePseudoMerging)
          ? into[0].list
          : [complexSelector];

        localContext.intoPosition = intoPosition;
        localContext.reducedBodies = reducedBodies;

        for (var j = 0, m = selectors.length; j < m; j++) {
          var selector = selectors[j];
          var data = candidates[selector];

          if (data.length < 2) { continue allSelectors; }

          localContext.data = data;

          reduceSelector(tokens, data, {
            filterOut: filterOut,
            callback: collectReducedBodies
          }, options, context);

          if (serializeBody$2(reducedBodies[reducedBodies.length - 1]) != serializeBody$2(reducedBodies[0])) {
            continue allSelectors;
          }
        }

        intoToken[2] = reducedBodies[0];
      }
    }

    function reduceSelector(tokens, data, context, options, outerContext) {
      var bodies = [];
      var bodiesAsList = [];
      var processedTokens = [];

      for (var j = data.length - 1; j >= 0; j--) {
        if (context.filterOut(j, bodies)) { continue; }

        var where = data[j].where;
        var token = tokens[where];
        var clonedBody = cloneArray$1(token[2]);

        bodies = bodies.concat(clonedBody);
        bodiesAsList.push(clonedBody);
        processedTokens.push(where);
      }

      optimizeProperties$1(bodies, true, false, outerContext);

      var processedCount = processedTokens.length;
      var propertyIdx = bodies.length - 1;
      var tokenIdx = processedCount - 1;

      while (tokenIdx >= 0) {
        if ((tokenIdx === 0
          || (bodies[propertyIdx] && bodiesAsList[tokenIdx].indexOf(bodies[propertyIdx]) > -1)) && propertyIdx > -1) {
          propertyIdx--;
          continue;
        }

        var newBody = bodies.splice(propertyIdx + 1);
        context.callback(tokens[processedTokens[tokenIdx]], newBody, processedCount, tokenIdx);

        tokenIdx--;
      }
    }

    var reduceNonAdjacent_1 = reduceNonAdjacent$1;

    var Token$9 = token;

    var serializeAll$1 = oneTime.all;

    var FONT_FACE_SCOPE = '@font-face';

    function removeDuplicateFontAtRules$1(tokens) {
      var fontAtRules = [];
      var token;
      var key;
      var i, l;

      for (i = 0, l = tokens.length; i < l; i++) {
        token = tokens[i];

        if (token[0] != Token$9.AT_RULE_BLOCK && token[1][0][1] != FONT_FACE_SCOPE) {
          continue;
        }

        key = serializeAll$1([token]);

        if (fontAtRules.indexOf(key) > -1) {
          token[2] = [];
        } else {
          fontAtRules.push(key);
        }
      }
    }

    var removeDuplicateFontAtRules_1 = removeDuplicateFontAtRules$1;

    var Token$8 = token;

    var serializeAll = oneTime.all;
    var serializeRules$2 = oneTime.rules;

    function removeDuplicateMediaQueries$1(tokens) {
      var candidates = {};
      var candidate;
      var token;
      var key;
      var i, l;

      for (i = 0, l = tokens.length; i < l; i++) {
        token = tokens[i];
        if (token[0] != Token$8.NESTED_BLOCK) {
          continue;
        }

        key = serializeRules$2(token[1]) + '%' + serializeAll(token[2]);
        candidate = candidates[key];

        if (candidate) {
          candidate[2] = [];
        }

        candidates[key] = token;
      }
    }

    var removeDuplicateMediaQueries_1 = removeDuplicateMediaQueries$1;

    var Token$7 = token;

    var serializeBody$1 = oneTime.body;
    var serializeRules$1 = oneTime.rules;

    function removeDuplicates$1(tokens) {
      var matched = {};
      var moreThanOnce = [];
      var id, token;
      var body, bodies;

      for (var i = 0, l = tokens.length; i < l; i++) {
        token = tokens[i];
        if (token[0] != Token$7.RULE) { continue; }

        id = serializeRules$1(token[1]);

        if (matched[id] && matched[id].length == 1) { moreThanOnce.push(id); } else { matched[id] = matched[id] || []; }

        matched[id].push(i);
      }

      for (i = 0, l = moreThanOnce.length; i < l; i++) {
        id = moreThanOnce[i];
        bodies = [];

        for (var j = matched[id].length - 1; j >= 0; j--) {
          token = tokens[matched[id][j]];
          body = serializeBody$1(token[2]);

          if (bodies.indexOf(body) > -1) { token[2] = []; } else { bodies.push(body); }
        }
      }
    }

    var removeDuplicates_1 = removeDuplicates$1;

    var populateComponents = populateComponents_1;

    var wrapForOptimizing = wrapForOptimizing$3.single;
    var restoreFromOptimizing = restoreFromOptimizing_1;

    var Token$6 = token;

    var animationNameRegex = /^(-moz-|-o-|-webkit-)?animation-name$/;
    var animationRegex = /^(-moz-|-o-|-webkit-)?animation$/;
    var keyframeRegex = /^@(-moz-|-o-|-webkit-)?keyframes /;
    var importantRegex = /\s{0,31}!important$/;
    var optionalMatchingQuotesRegex = /^(['"]?)(.*)\1$/;

    function normalize$2(value) {
      return value
        .replace(optionalMatchingQuotesRegex, '$2')
        .replace(importantRegex, '');
    }

    function removeUnusedAtRules$1(tokens, context) {
      removeUnusedAtRule(tokens, matchCounterStyle, markCounterStylesAsUsed, context);
      removeUnusedAtRule(tokens, matchFontFace, markFontFacesAsUsed, context);
      removeUnusedAtRule(tokens, matchKeyframe, markKeyframesAsUsed, context);
      removeUnusedAtRule(tokens, matchNamespace, markNamespacesAsUsed, context);
    }

    function removeUnusedAtRule(tokens, matchCallback, markCallback, context) {
      var atRules = {};
      var atRule;
      var atRuleTokens;
      var atRuleToken;
      var zeroAt;
      var i, l;

      for (i = 0, l = tokens.length; i < l; i++) {
        matchCallback(tokens[i], atRules);
      }

      if (Object.keys(atRules).length === 0) {
        return;
      }

      markUsedAtRules(tokens, markCallback, atRules, context);

      for (atRule in atRules) {
        atRuleTokens = atRules[atRule];

        for (i = 0, l = atRuleTokens.length; i < l; i++) {
          atRuleToken = atRuleTokens[i];
          zeroAt = atRuleToken[0] == Token$6.AT_RULE ? 1 : 2;
          atRuleToken[zeroAt] = [];
        }
      }
    }

    function markUsedAtRules(tokens, markCallback, atRules, context) {
      var boundMarkCallback = markCallback(atRules);
      var i, l;

      for (i = 0, l = tokens.length; i < l; i++) {
        switch (tokens[i][0]) {
        case Token$6.RULE:
          boundMarkCallback(tokens[i], context);
          break;
        case Token$6.NESTED_BLOCK:
          markUsedAtRules(tokens[i][2], markCallback, atRules, context);
        }
      }
    }

    function matchCounterStyle(token, atRules) {
      var match;

      if (token[0] == Token$6.AT_RULE_BLOCK && token[1][0][1].indexOf('@counter-style') === 0) {
        match = token[1][0][1].split(' ')[1];
        atRules[match] = atRules[match] || [];
        atRules[match].push(token);
      }
    }

    function markCounterStylesAsUsed(atRules) {
      return function(token, context) {
        var property;
        var wrappedProperty;
        var i, l;

        for (i = 0, l = token[2].length; i < l; i++) {
          property = token[2][i];

          if (property[1][1] == 'list-style') {
            wrappedProperty = wrapForOptimizing(property);
            populateComponents([wrappedProperty], context.validator, context.warnings);

            if (wrappedProperty.components[0].value[0][1] in atRules) {
              delete atRules[property[2][1]];
            }

            restoreFromOptimizing([wrappedProperty]);
          }

          if (property[1][1] == 'list-style-type' && property[2][1] in atRules) {
            delete atRules[property[2][1]];
          }
        }
      };
    }

    function matchFontFace(token, atRules) {
      var property;
      var match;
      var i, l;

      if (token[0] == Token$6.AT_RULE_BLOCK && token[1][0][1] == '@font-face') {
        for (i = 0, l = token[2].length; i < l; i++) {
          property = token[2][i];

          if (property[1][1] == 'font-family') {
            match = normalize$2(property[2][1].toLowerCase());
            atRules[match] = atRules[match] || [];
            atRules[match].push(token);
            break;
          }
        }
      }
    }

    function markFontFacesAsUsed(atRules) {
      return function(token, context) {
        var property;
        var wrappedProperty;
        var component;
        var normalizedMatch;
        var i, l;
        var j, m;

        for (i = 0, l = token[2].length; i < l; i++) {
          property = token[2][i];

          if (property[1][1] == 'font') {
            wrappedProperty = wrapForOptimizing(property);
            populateComponents([wrappedProperty], context.validator, context.warnings);
            component = wrappedProperty.components[6];

            for (j = 0, m = component.value.length; j < m; j++) {
              normalizedMatch = normalize$2(component.value[j][1].toLowerCase());

              if (normalizedMatch in atRules) {
                delete atRules[normalizedMatch];
              }
            }

            restoreFromOptimizing([wrappedProperty]);
          }

          if (property[1][1] == 'font-family') {
            for (j = 2, m = property.length; j < m; j++) {
              normalizedMatch = normalize$2(property[j][1].toLowerCase());

              if (normalizedMatch in atRules) {
                delete atRules[normalizedMatch];
              }
            }
          }
        }
      };
    }

    function matchKeyframe(token, atRules) {
      var match;

      if (token[0] == Token$6.NESTED_BLOCK && keyframeRegex.test(token[1][0][1])) {
        match = token[1][0][1].split(' ')[1];
        atRules[match] = atRules[match] || [];
        atRules[match].push(token);
      }
    }

    function markKeyframesAsUsed(atRules) {
      return function(token, context) {
        var property;
        var wrappedProperty;
        var component;
        var i, l;
        var j, m;

        for (i = 0, l = token[2].length; i < l; i++) {
          property = token[2][i];

          if (animationRegex.test(property[1][1])) {
            wrappedProperty = wrapForOptimizing(property);
            populateComponents([wrappedProperty], context.validator, context.warnings);
            component = wrappedProperty.components[7];

            for (j = 0, m = component.value.length; j < m; j++) {
              if (component.value[j][1] in atRules) {
                delete atRules[component.value[j][1]];
              }
            }

            restoreFromOptimizing([wrappedProperty]);
          }

          if (animationNameRegex.test(property[1][1])) {
            for (j = 2, m = property.length; j < m; j++) {
              if (property[j][1] in atRules) {
                delete atRules[property[j][1]];
              }
            }
          }
        }
      };
    }

    function matchNamespace(token, atRules) {
      var match;

      if (token[0] == Token$6.AT_RULE && token[1].indexOf('@namespace') === 0) {
        match = token[1].split(' ')[1];
        atRules[match] = atRules[match] || [];
        atRules[match].push(token);
      }
    }

    function markNamespacesAsUsed(atRules) {
      var namespaceRegex = new RegExp(Object.keys(atRules).join('\\||') + '\\|', 'g');

      return function(token) {
        var match;
        var scope;
        var normalizedMatch;
        var i, l;
        var j, m;

        for (i = 0, l = token[1].length; i < l; i++) {
          scope = token[1][i];
          match = scope[1].match(namespaceRegex);

          for (j = 0, m = match.length; j < m; j++) {
            normalizedMatch = match[j].substring(0, match[j].length - 1);

            if (normalizedMatch in atRules) {
              delete atRules[normalizedMatch];
            }
          }
        }
      };
    }

    var removeUnusedAtRules_1 = removeUnusedAtRules$1;

    function ruleSorter(s1, s2) {
      return s1[1] > s2[1] ? 1 : -1;
    }

    function tidyRuleDuplicates$1(rules) {
      var list = [];
      var repeated = [];

      for (var i = 0, l = rules.length; i < l; i++) {
        var rule = rules[i];

        if (repeated.indexOf(rule[1]) == -1) {
          repeated.push(rule[1]);
          list.push(rule);
        }
      }

      return list.sort(ruleSorter);
    }

    var tidyRuleDuplicates_1 = tidyRuleDuplicates$1;

    var canReorderSingle = reorderable.canReorderSingle;
    var extractProperties = extractProperties_1;
    var isMergeable = isMergeable_1;
    var tidyRuleDuplicates = tidyRuleDuplicates_1;

    var Token$5 = token;

    var cloneArray = cloneArray_1;

    var serializeBody = oneTime.body;
    var serializeRules = oneTime.rules;

    function naturalSorter(a, b) {
      return a > b ? 1 : -1;
    }

    function cloneAndMergeSelectors(propertyA, propertyB) {
      var cloned = cloneArray(propertyA);
      cloned[5] = cloned[5].concat(propertyB[5]);

      return cloned;
    }

    function restructure$1(tokens, context) {
      var options = context.options;
      var mergeablePseudoClasses = options.compatibility.selectors.mergeablePseudoClasses;
      var mergeablePseudoElements = options.compatibility.selectors.mergeablePseudoElements;
      var mergeLimit = options.compatibility.selectors.mergeLimit;
      var multiplePseudoMerging = options.compatibility.selectors.multiplePseudoMerging;
      var specificityCache = context.cache.specificity;
      var movableTokens = {};
      var movedProperties = [];
      var multiPropertyMoveCache = {};
      var movedToBeDropped = [];
      var maxCombinationsLevel = 2;
      var ID_JOIN_CHARACTER = '%';

      function sendToMultiPropertyMoveCache(position, movedProperty, allFits) {
        for (var i = allFits.length - 1; i >= 0; i--) {
          var fit = allFits[i][0];
          var id = addToCache(movedProperty, fit);

          if (multiPropertyMoveCache[id].length > 1 && processMultiPropertyMove(position, multiPropertyMoveCache[id])) {
            removeAllMatchingFromCache(id);
            break;
          }
        }
      }

      function addToCache(movedProperty, fit) {
        var id = cacheId(fit);
        multiPropertyMoveCache[id] = multiPropertyMoveCache[id] || [];
        multiPropertyMoveCache[id].push([movedProperty, fit]);
        return id;
      }

      function removeAllMatchingFromCache(matchId) {
        var matchSelectors = matchId.split(ID_JOIN_CHARACTER);
        var forRemoval = [];
        var i;

        for (var id in multiPropertyMoveCache) {
          var selectors = id.split(ID_JOIN_CHARACTER);
          for (i = selectors.length - 1; i >= 0; i--) {
            if (matchSelectors.indexOf(selectors[i]) > -1) {
              forRemoval.push(id);
              break;
            }
          }
        }

        for (i = forRemoval.length - 1; i >= 0; i--) {
          delete multiPropertyMoveCache[forRemoval[i]];
        }
      }

      function cacheId(cachedTokens) {
        var id = [];
        for (var i = 0, l = cachedTokens.length; i < l; i++) {
          id.push(serializeRules(cachedTokens[i][1]));
        }
        return id.join(ID_JOIN_CHARACTER);
      }

      function tokensToMerge(sourceTokens) {
        var uniqueTokensWithBody = [];
        var mergeableTokens = [];

        for (var i = sourceTokens.length - 1; i >= 0; i--) {
          if (!isMergeable(
            serializeRules(sourceTokens[i][1]),
            mergeablePseudoClasses,
            mergeablePseudoElements,
            multiplePseudoMerging
          )) {
            continue;
          }

          mergeableTokens.unshift(sourceTokens[i]);
          if (sourceTokens[i][2].length > 0
            && uniqueTokensWithBody.indexOf(sourceTokens[i]) == -1) {
            uniqueTokensWithBody.push(sourceTokens[i]);
          }
        }

        return uniqueTokensWithBody.length > 1
          ? mergeableTokens
          : [];
      }

      function shortenIfPossible(position, movedProperty) {
        var name = movedProperty[0];
        var value = movedProperty[1];
        var key = movedProperty[4];
        var valueSize = name.length + value.length + 1;
        var allSelectors = [];
        var qualifiedTokens = [];

        var mergeableTokens = tokensToMerge(movableTokens[key]);
        if (mergeableTokens.length < 2) { return; }

        var allFits = findAllFits(mergeableTokens, valueSize, 1);
        var bestFit = allFits[0];
        if (bestFit[1] > 0) { return sendToMultiPropertyMoveCache(position, movedProperty, allFits); }

        for (var i = bestFit[0].length - 1; i >= 0; i--) {
          allSelectors = bestFit[0][i][1].concat(allSelectors);
          qualifiedTokens.unshift(bestFit[0][i]);
        }

        allSelectors = tidyRuleDuplicates(allSelectors);
        dropAsNewTokenAt(position, [movedProperty], allSelectors, qualifiedTokens);
      }

      function fitSorter(fit1, fit2) {
        return fit1[1] > fit2[1] ? 1 : (fit1[1] == fit2[1] ? 0 : -1);
      }

      function findAllFits(mergeableTokens, propertySize, propertiesCount) {
        var combinations = allCombinations(mergeableTokens, propertySize, propertiesCount, maxCombinationsLevel - 1);
        return combinations.sort(fitSorter);
      }

      function allCombinations(tokensVariant, propertySize, propertiesCount, level) {
        var differenceVariants = [[tokensVariant, sizeDifference(tokensVariant, propertySize, propertiesCount)]];
        if (tokensVariant.length > 2 && level > 0) {
          for (var i = tokensVariant.length - 1; i >= 0; i--) {
            var subVariant = Array.prototype.slice.call(tokensVariant, 0);
            subVariant.splice(i, 1);
            differenceVariants = differenceVariants.concat(
              allCombinations(subVariant, propertySize, propertiesCount, level - 1)
            );
          }
        }

        return differenceVariants;
      }

      function sizeDifference(tokensVariant, propertySize, propertiesCount) {
        var allSelectorsSize = 0;
        for (var i = tokensVariant.length - 1; i >= 0; i--) {
          allSelectorsSize += tokensVariant[i][2].length > propertiesCount
            ? serializeRules(tokensVariant[i][1]).length
            : -1;
        }
        return allSelectorsSize - (tokensVariant.length - 1) * propertySize + 1;
      }

      function dropAsNewTokenAt(position, properties, allSelectors, mergeableTokens) {
        var i, j, k, m;
        var allProperties = [];

        for (i = mergeableTokens.length - 1; i >= 0; i--) {
          var mergeableToken = mergeableTokens[i];

          for (j = mergeableToken[2].length - 1; j >= 0; j--) {
            var mergeableProperty = mergeableToken[2][j];

            for (k = 0, m = properties.length; k < m; k++) {
              var property = properties[k];

              var mergeablePropertyName = mergeableProperty[1][1];
              var propertyName = property[0];
              var propertyBody = property[4];
              if (mergeablePropertyName == propertyName && serializeBody([mergeableProperty]) == propertyBody) {
                mergeableToken[2].splice(j, 1);
                break;
              }
            }
          }
        }

        for (i = properties.length - 1; i >= 0; i--) {
          allProperties.unshift(properties[i][3]);
        }

        var newToken = [Token$5.RULE, allSelectors, allProperties];
        tokens.splice(position, 0, newToken);
      }

      function dropPropertiesAt(position, movedProperty) {
        var key = movedProperty[4];
        var toMove = movableTokens[key];

        if (toMove && toMove.length > 1) {
          if (!shortenMultiMovesIfPossible(position, movedProperty)) { shortenIfPossible(position, movedProperty); }
        }
      }

      function shortenMultiMovesIfPossible(position, movedProperty) {
        var candidates = [];
        var propertiesAndMergableTokens = [];
        var key = movedProperty[4];
        var j, k;

        var mergeableTokens = tokensToMerge(movableTokens[key]);
        if (mergeableTokens.length < 2) { return; }

        movableLoop:
        for (var value in movableTokens) {
          var tokensList = movableTokens[value];

          for (j = mergeableTokens.length - 1; j >= 0; j--) {
            if (tokensList.indexOf(mergeableTokens[j]) == -1) { continue movableLoop; }
          }

          candidates.push(value);
        }

        if (candidates.length < 2) { return false; }

        for (j = candidates.length - 1; j >= 0; j--) {
          for (k = movedProperties.length - 1; k >= 0; k--) {
            if (movedProperties[k][4] == candidates[j]) {
              propertiesAndMergableTokens.unshift([movedProperties[k], mergeableTokens]);
              break;
            }
          }
        }

        return processMultiPropertyMove(position, propertiesAndMergableTokens);
      }

      function processMultiPropertyMove(position, propertiesAndMergableTokens) {
        var valueSize = 0;
        var properties = [];
        var property;

        for (var i = propertiesAndMergableTokens.length - 1; i >= 0; i--) {
          property = propertiesAndMergableTokens[i][0];
          var fullValue = property[4];
          valueSize += fullValue.length + (i > 0 ? 1 : 0);

          properties.push(property);
        }

        var mergeableTokens = propertiesAndMergableTokens[0][1];
        var bestFit = findAllFits(mergeableTokens, valueSize, properties.length)[0];
        if (bestFit[1] > 0) { return false; }

        var allSelectors = [];
        var qualifiedTokens = [];
        for (i = bestFit[0].length - 1; i >= 0; i--) {
          allSelectors = bestFit[0][i][1].concat(allSelectors);
          qualifiedTokens.unshift(bestFit[0][i]);
        }

        allSelectors = tidyRuleDuplicates(allSelectors);
        dropAsNewTokenAt(position, properties, allSelectors, qualifiedTokens);

        for (i = properties.length - 1; i >= 0; i--) {
          property = properties[i];
          var index = movedProperties.indexOf(property);

          delete movableTokens[property[4]];

          if (index > -1 && movedToBeDropped.indexOf(index) == -1) { movedToBeDropped.push(index); }
        }

        return true;
      }

      function boundToAnotherPropertyInCurrrentToken(property, movedProperty, token) {
        var propertyName = property[0];
        var movedPropertyName = movedProperty[0];
        if (propertyName != movedPropertyName) { return false; }

        var key = movedProperty[4];
        var toMove = movableTokens[key];
        return toMove && toMove.indexOf(token) > -1;
      }

      for (var i = tokens.length - 1; i >= 0; i--) {
        var token = tokens[i];
        var isRule;
        var j, k, m;
        var samePropertyAt;

        if (token[0] == Token$5.RULE) {
          isRule = true;
        } else if (token[0] == Token$5.NESTED_BLOCK) {
          isRule = false;
        } else {
          continue;
        }

        // We cache movedProperties.length as it may change in the loop
        var movedCount = movedProperties.length;

        var properties = extractProperties(token);
        movedToBeDropped = [];

        var unmovableInCurrentToken = [];
        for (j = properties.length - 1; j >= 0; j--) {
          for (k = j - 1; k >= 0; k--) {
            if (!canReorderSingle(properties[j], properties[k], specificityCache)) {
              unmovableInCurrentToken.push(j);
              break;
            }
          }
        }

        for (j = properties.length - 1; j >= 0; j--) {
          var property = properties[j];
          var movedSameProperty = false;

          for (k = 0; k < movedCount; k++) {
            var movedProperty = movedProperties[k];

            if (movedToBeDropped.indexOf(k) == -1 && (
              !canReorderSingle(property, movedProperty, specificityCache)
              && !boundToAnotherPropertyInCurrrentToken(property, movedProperty, token)
              || movableTokens[movedProperty[4]] && movableTokens[movedProperty[4]].length === mergeLimit)
            ) {
              dropPropertiesAt(i + 1, movedProperty);

              if (movedToBeDropped.indexOf(k) == -1) {
                movedToBeDropped.push(k);
                delete movableTokens[movedProperty[4]];
              }
            }

            if (!movedSameProperty) {
              movedSameProperty = property[0] == movedProperty[0] && property[1] == movedProperty[1];

              if (movedSameProperty) {
                samePropertyAt = k;
              }
            }
          }

          if (!isRule || unmovableInCurrentToken.indexOf(j) > -1) { continue; }

          var key = property[4];

          if (movedSameProperty && movedProperties[samePropertyAt][5].length + property[5].length > mergeLimit) {
            dropPropertiesAt(i + 1, movedProperties[samePropertyAt]);
            movedProperties.splice(samePropertyAt, 1);
            movableTokens[key] = [token];
            movedSameProperty = false;
          } else {
            movableTokens[key] = movableTokens[key] || [];
            movableTokens[key].push(token);
          }

          if (movedSameProperty) {
            movedProperties[samePropertyAt] = cloneAndMergeSelectors(movedProperties[samePropertyAt], property);
          } else {
            movedProperties.push(property);
          }
        }

        movedToBeDropped = movedToBeDropped.sort(naturalSorter);
        for (j = 0, m = movedToBeDropped.length; j < m; j++) {
          var dropAt = movedToBeDropped[j] - j;
          movedProperties.splice(dropAt, 1);
        }
      }

      var position = tokens[0] && tokens[0][0] == Token$5.AT_RULE && tokens[0][1].indexOf('@charset') === 0 ? 1 : 0;
      for (; position < tokens.length - 1; position++) {
        var isImportRule = tokens[position][0] === Token$5.AT_RULE && tokens[position][1].indexOf('@import') === 0;
        var isComment = tokens[position][0] === Token$5.COMMENT;
        if (!(isImportRule || isComment)) { break; }
      }

      for (i = 0; i < movedProperties.length; i++) {
        dropPropertiesAt(position, movedProperties[i]);
      }
    }

    var restructure_1 = restructure$1;

    var mergeAdjacent = mergeAdjacent_1;
    var mergeMediaQueries = mergeMediaQueries_1;
    var mergeNonAdjacentByBody = mergeNonAdjacentByBody_1;
    var mergeNonAdjacentBySelector = mergeNonAdjacentBySelector_1;
    var reduceNonAdjacent = reduceNonAdjacent_1;
    var removeDuplicateFontAtRules = removeDuplicateFontAtRules_1;
    var removeDuplicateMediaQueries = removeDuplicateMediaQueries_1;
    var removeDuplicates = removeDuplicates_1;
    var removeUnusedAtRules = removeUnusedAtRules_1;
    var restructure = restructure_1;

    var optimizeProperties = optimize$2;

    var OptimizationLevel$1 = optimizationLevel.OptimizationLevel;

    var Token$4 = token;

    function removeEmpty(tokens) {
      for (var i = 0, l = tokens.length; i < l; i++) {
        var token = tokens[i];
        var isEmpty = false;

        switch (token[0]) {
        case Token$4.RULE:
          isEmpty = token[1].length === 0 || token[2].length === 0;
          break;
        case Token$4.NESTED_BLOCK:
          removeEmpty(token[2]);
          isEmpty = token[2].length === 0;
          break;
        case Token$4.AT_RULE:
          isEmpty = token[1].length === 0;
          break;
        case Token$4.AT_RULE_BLOCK:
          isEmpty = token[2].length === 0;
        }

        if (isEmpty) {
          tokens.splice(i, 1);
          i--;
          l--;
        }
      }
    }

    function recursivelyOptimizeBlocks(tokens, context) {
      for (var i = 0, l = tokens.length; i < l; i++) {
        var token = tokens[i];

        if (token[0] == Token$4.NESTED_BLOCK) {
          var isKeyframes = /@(-moz-|-o-|-webkit-)?keyframes/.test(token[1][0][1]);
          level2Optimize$1(token[2], context, !isKeyframes);
        }
      }
    }

    function recursivelyOptimizeProperties(tokens, context) {
      for (var i = 0, l = tokens.length; i < l; i++) {
        var token = tokens[i];

        switch (token[0]) {
        case Token$4.RULE:
          optimizeProperties(token[2], true, true, context);
          break;
        case Token$4.NESTED_BLOCK:
          recursivelyOptimizeProperties(token[2], context);
        }
      }
    }

    function level2Optimize$1(tokens, context, withRestructuring) {
      var levelOptions = context.options.level[OptimizationLevel$1.Two];
      var level2Plugins = context.options.plugins.level2Block;
      var reduced;
      var i;

      recursivelyOptimizeBlocks(tokens, context);
      recursivelyOptimizeProperties(tokens, context);

      if (levelOptions.removeDuplicateRules) {
        removeDuplicates(tokens);
      }

      if (levelOptions.mergeAdjacentRules) {
        mergeAdjacent(tokens, context);
      }

      if (levelOptions.reduceNonAdjacentRules) {
        reduceNonAdjacent(tokens, context);
      }

      if (levelOptions.mergeNonAdjacentRules && levelOptions.mergeNonAdjacentRules != 'body') {
        mergeNonAdjacentBySelector(tokens, context);
      }

      if (levelOptions.mergeNonAdjacentRules && levelOptions.mergeNonAdjacentRules != 'selector') {
        mergeNonAdjacentByBody(tokens, context);
      }

      if (levelOptions.restructureRules && levelOptions.mergeAdjacentRules && withRestructuring) {
        restructure(tokens, context);
        mergeAdjacent(tokens, context);
      }

      if (levelOptions.restructureRules && !levelOptions.mergeAdjacentRules && withRestructuring) {
        restructure(tokens, context);
      }

      if (levelOptions.removeDuplicateFontRules) {
        removeDuplicateFontAtRules(tokens);
      }

      if (levelOptions.removeDuplicateMediaBlocks) {
        removeDuplicateMediaQueries(tokens);
      }

      if (levelOptions.removeUnusedAtRules) {
        removeUnusedAtRules(tokens, context);
      }

      if (levelOptions.mergeMedia) {
        reduced = mergeMediaQueries(tokens, context);
        for (i = reduced.length - 1; i >= 0; i--) {
          level2Optimize$1(reduced[i][2], context, false);
        }
      }

      for (i = 0; i < level2Plugins.length; i++) {
        level2Plugins[i](tokens);
      }

      if (levelOptions.removeEmpty) {
        removeEmpty(tokens);
      }

      return tokens;
    }

    var optimize$1 = level2Optimize$1;

    var functionNoVendorRegexStr = '[A-Z]+(\\-|[A-Z]|[0-9])+\\(.*?\\)';
    var functionVendorRegexStr = '\\-(\\-|[A-Z]|[0-9])+\\(.*?\\)';
    var variableRegexStr = 'var\\(\\-\\-[^\\)]+\\)';
    var functionAnyRegexStr = '(' + variableRegexStr + '|' + functionNoVendorRegexStr + '|' + functionVendorRegexStr + ')';

    var calcRegex = new RegExp('^(\\-moz\\-|\\-webkit\\-)?calc\\([^\\)]+\\)$', 'i');
    var decimalRegex = /[0-9]/;
    var functionAnyRegex = new RegExp('^' + functionAnyRegexStr + '$', 'i');
    var hexAlphaColorRegex = /^#(?:[0-9a-f]{4}|[0-9a-f]{8})$/i;
    // eslint-disable-next-line max-len
    var hslColorRegex = /^hsl\(\s{0,31}[-.]?\d+\s{0,31},\s{0,31}\d*\.?\d+%\s{0,31},\s{0,31}\d*\.?\d+%\s{0,31}\)|hsla\(\s{0,31}[-.]?\d+\s{0,31},\s{0,31}\d*\.?\d+%\s{0,31},\s{0,31}\d*\.?\d+%\s{0,31},\s{0,31}\.?\d+\s{0,31}\)$/;
    // eslint-disable-next-line max-len
    var hslColorWithSpacesRegex = /^hsl\(\s{0,31}[-.]?\d+(deg)?\s{1,31}\d*\.?\d+%\s{1,31}\d*\.?\d+%\s{0,31}\)|hsla\(\s{0,31}[-.]?\d+(deg)?\s{1,31}\d*\.?\d+%\s{1,31}\d*\.?\d+%\s{1,31}\/\s{1,31}\d*\.?\d+%?\s{0,31}\)$/;
    var identifierRegex = /^(-[a-z0-9_][a-z0-9\-_]*|[a-z_][a-z0-9\-_]*)$/i;
    var namedEntityRegex = /^[a-z]+$/i;
    var prefixRegex = /^-([a-z0-9]|-)*$/i;
    var quotedTextRegex = /^("[^"]*"|'[^']*')$/i;
    // eslint-disable-next-line max-len
    var rgbColorRegex = /^rgb\(\s{0,31}[\d]{1,3}\s{0,31},\s{0,31}[\d]{1,3}\s{0,31},\s{0,31}[\d]{1,3}\s{0,31}\)|rgba\(\s{0,31}[\d]{1,3}\s{0,31},\s{0,31}[\d]{1,3}\s{0,31},\s{0,31}[\d]{1,3}\s{0,31},\s{0,31}[.\d]+\s{0,31}\)$/i;
    // eslint-disable-next-line max-len
    var rgbColorWithSpacesRegex = /^rgb\(\s{0,31}[\d]{1,3}\s{1,31}[\d]{1,3}\s{1,31}[\d]{1,3}\s{0,31}\)|rgba\(\s{0,31}[\d]{1,3}\s{1,31}[\d]{1,3}\s{1,31}[\d]{1,3}\s{1,31}\/\s{1,31}[\d]*\.?[.\d]+%?\s{0,31}\)$/i;
    var timeUnitPattern = /\d+(s|ms)/;
    var timingFunctionRegex = /^(cubic-bezier|steps)\([^)]+\)$/;
    var validTimeUnits = ['ms', 's'];
    var urlRegex = /^url\([\s\S]+\)$/i;
    var variableRegex = new RegExp('^' + variableRegexStr + '$', 'i');

    var eightValueColorRegex = /^#[0-9a-f]{8}$/i;
    var fourValueColorRegex = /^#[0-9a-f]{4}$/i;
    var sixValueColorRegex = /^#[0-9a-f]{6}$/i;
    var threeValueColorRegex = /^#[0-9a-f]{3}$/i;

    var DECIMAL_DOT = '.';
    var MINUS_SIGN = '-';
    var PLUS_SIGN = '+';

    var Keywords = {
      '^': [
        'inherit',
        'initial',
        'unset'
      ],
      '*-style': [
        'auto',
        'dashed',
        'dotted',
        'double',
        'groove',
        'hidden',
        'inset',
        'none',
        'outset',
        'ridge',
        'solid'
      ],
      '*-timing-function': [
        'ease',
        'ease-in',
        'ease-in-out',
        'ease-out',
        'linear',
        'step-end',
        'step-start'
      ],
      'animation-direction': [
        'alternate',
        'alternate-reverse',
        'normal',
        'reverse'
      ],
      'animation-fill-mode': [
        'backwards',
        'both',
        'forwards',
        'none'
      ],
      'animation-iteration-count': [
        'infinite'
      ],
      'animation-name': [
        'none'
      ],
      'animation-play-state': [
        'paused',
        'running'
      ],
      'background-attachment': [
        'fixed',
        'inherit',
        'local',
        'scroll'
      ],
      'background-clip': [
        'border-box',
        'content-box',
        'inherit',
        'padding-box',
        'text'
      ],
      'background-origin': [
        'border-box',
        'content-box',
        'inherit',
        'padding-box'
      ],
      'background-position': [
        'bottom',
        'center',
        'left',
        'right',
        'top'
      ],
      'background-repeat': [
        'no-repeat',
        'inherit',
        'repeat',
        'repeat-x',
        'repeat-y',
        'round',
        'space'
      ],
      'background-size': [
        'auto',
        'cover',
        'contain'
      ],
      'border-collapse': [
        'collapse',
        'inherit',
        'separate'
      ],
      bottom: [
        'auto'
      ],
      clear: [
        'both',
        'left',
        'none',
        'right'
      ],
      color: [
        'transparent'
      ],
      cursor: [
        'all-scroll',
        'auto',
        'col-resize',
        'crosshair',
        'default',
        'e-resize',
        'help',
        'move',
        'n-resize',
        'ne-resize',
        'no-drop',
        'not-allowed',
        'nw-resize',
        'pointer',
        'progress',
        'row-resize',
        's-resize',
        'se-resize',
        'sw-resize',
        'text',
        'vertical-text',
        'w-resize',
        'wait'
      ],
      display: [
        'block',
        'inline',
        'inline-block',
        'inline-table',
        'list-item',
        'none',
        'table',
        'table-caption',
        'table-cell',
        'table-column',
        'table-column-group',
        'table-footer-group',
        'table-header-group',
        'table-row',
        'table-row-group'
      ],
      float: [
        'left',
        'none',
        'right'
      ],
      left: [
        'auto'
      ],
      font: [
        'caption',
        'icon',
        'menu',
        'message-box',
        'small-caption',
        'status-bar',
        'unset'
      ],
      'font-size': [
        'large',
        'larger',
        'medium',
        'small',
        'smaller',
        'x-large',
        'x-small',
        'xx-large',
        'xx-small'
      ],
      'font-stretch': [
        'condensed',
        'expanded',
        'extra-condensed',
        'extra-expanded',
        'normal',
        'semi-condensed',
        'semi-expanded',
        'ultra-condensed',
        'ultra-expanded'
      ],
      'font-style': [
        'italic',
        'normal',
        'oblique'
      ],
      'font-variant': [
        'normal',
        'small-caps'
      ],
      'font-weight': [
        '100',
        '200',
        '300',
        '400',
        '500',
        '600',
        '700',
        '800',
        '900',
        'bold',
        'bolder',
        'lighter',
        'normal'
      ],
      'line-height': [
        'normal'
      ],
      'list-style-position': [
        'inside',
        'outside'
      ],
      'list-style-type': [
        'armenian',
        'circle',
        'decimal',
        'decimal-leading-zero',
        'disc',
        'decimal|disc', // this is the default value of list-style-type, see comment in configuration.js
        'georgian',
        'lower-alpha',
        'lower-greek',
        'lower-latin',
        'lower-roman',
        'none',
        'square',
        'upper-alpha',
        'upper-latin',
        'upper-roman'
      ],
      overflow: [
        'auto',
        'hidden',
        'scroll',
        'visible'
      ],
      position: [
        'absolute',
        'fixed',
        'relative',
        'static'
      ],
      right: [
        'auto'
      ],
      'text-align': [
        'center',
        'justify',
        'left',
        'left|right', // this is the default value of list-style-type, see comment in configuration.js
        'right'
      ],
      'text-decoration': [
        'line-through',
        'none',
        'overline',
        'underline'
      ],
      'text-overflow': [
        'clip',
        'ellipsis'
      ],
      top: [
        'auto'
      ],
      'vertical-align': [
        'baseline',
        'bottom',
        'middle',
        'sub',
        'super',
        'text-bottom',
        'text-top',
        'top'
      ],
      visibility: [
        'collapse',
        'hidden',
        'visible'
      ],
      'white-space': [
        'normal',
        'nowrap',
        'pre'
      ],
      width: [
        'inherit',
        'initial',
        'medium',
        'thick',
        'thin'
      ]
    };

    var Units = [
      '%',
      'ch',
      'cm',
      'em',
      'ex',
      'in',
      'mm',
      'pc',
      'pt',
      'px',
      'rem',
      'vh',
      'vm',
      'vmax',
      'vmin',
      'vw'
    ];

    function isColor(value) {
      return value != 'auto'
        && (
          isKeyword('color')(value)
          || isHexColor(value)
          || isColorFunction(value)
          || isNamedEntity(value)
        );
    }

    function isColorFunction(value) {
      return isRgbColor(value) || isHslColor(value);
    }

    function isDynamicUnit(value) {
      return calcRegex.test(value);
    }

    function isFunction$2(value) {
      return functionAnyRegex.test(value);
    }

    function isHexColor(value) {
      return threeValueColorRegex.test(value)
        || fourValueColorRegex.test(value)
        || sixValueColorRegex.test(value)
        || eightValueColorRegex.test(value);
    }

    function isHslColor(value) {
      return hslColorRegex.test(value) || hslColorWithSpacesRegex.test(value);
    }

    function isHexAlphaColor(value) {
      return hexAlphaColorRegex.test(value);
    }

    function isIdentifier(value) {
      return identifierRegex.test(value);
    }

    function isQuotedText(value) {
      return quotedTextRegex.test(value);
    }

    function isImage(value) {
      return value == 'none' || value == 'inherit' || isUrl(value);
    }

    function isKeyword(propertyName) {
      return function(value) {
        return Keywords[propertyName].indexOf(value) > -1;
      };
    }

    function isNamedEntity(value) {
      return namedEntityRegex.test(value);
    }

    function isNumber$1(value) {
      return scanForNumber(value) == value.length;
    }

    function isRgbColor(value) {
      return rgbColorRegex.test(value) || rgbColorWithSpacesRegex.test(value);
    }

    function isPrefixed(value) {
      return prefixRegex.test(value);
    }

    function isPositiveNumber(value) {
      return isNumber$1(value)
        && parseFloat(value) >= 0;
    }

    function isVariable(value) {
      return variableRegex.test(value);
    }

    function isTime(value) {
      var numberUpTo = scanForNumber(value);

      return numberUpTo == value.length && parseInt(value) === 0
        || numberUpTo > -1 && validTimeUnits.indexOf(value.slice(numberUpTo + 1)) > -1
        || isCalculatedTime(value);
    }

    function isCalculatedTime(value) {
      return isFunction$2(value) && timeUnitPattern.test(value);
    }

    function isTimingFunction() {
      var isTimingFunctionKeyword = isKeyword('*-timing-function');

      return function(value) {
        return isTimingFunctionKeyword(value) || timingFunctionRegex.test(value);
      };
    }

    function isUnit(validUnits, value) {
      var numberUpTo = scanForNumber(value);

      return numberUpTo == value.length && parseInt(value) === 0
        || numberUpTo > -1 && validUnits.indexOf(value.slice(numberUpTo + 1).toLowerCase()) > -1
        || value == 'auto'
        || value == 'inherit';
    }

    function isUrl(value) {
      return urlRegex.test(value);
    }

    function isZIndex(value) {
      return value == 'auto'
        || isNumber$1(value)
        || isKeyword('^')(value);
    }

    function scanForNumber(value) {
      var hasDot = false;
      var hasSign = false;
      var character;
      var i, l;

      for (i = 0, l = value.length; i < l; i++) {
        character = value[i];

        if (i === 0 && (character == PLUS_SIGN || character == MINUS_SIGN)) {
          hasSign = true;
        } else if (i > 0 && hasSign && (character == PLUS_SIGN || character == MINUS_SIGN)) {
          return i - 1;
        } else if (character == DECIMAL_DOT && !hasDot) {
          hasDot = true;
        } else if (character == DECIMAL_DOT && hasDot) {
          return i - 1;
        } else if (decimalRegex.test(character)) {
          continue;
        } else {
          return i - 1;
        }
      }

      return i;
    }

    function validator$1(compatibility) {
      var validUnits = Units.slice(0).filter(function(value) {
        return !(value in compatibility.units) || compatibility.units[value] === true;
      });

      if (compatibility.customUnits.rpx) {
        validUnits.push('rpx');
      }

      return {
        colorOpacity: compatibility.colors.opacity,
        colorHexAlpha: compatibility.colors.hexAlpha,
        isAnimationDirectionKeyword: isKeyword('animation-direction'),
        isAnimationFillModeKeyword: isKeyword('animation-fill-mode'),
        isAnimationIterationCountKeyword: isKeyword('animation-iteration-count'),
        isAnimationNameKeyword: isKeyword('animation-name'),
        isAnimationPlayStateKeyword: isKeyword('animation-play-state'),
        isTimingFunction: isTimingFunction(),
        isBackgroundAttachmentKeyword: isKeyword('background-attachment'),
        isBackgroundClipKeyword: isKeyword('background-clip'),
        isBackgroundOriginKeyword: isKeyword('background-origin'),
        isBackgroundPositionKeyword: isKeyword('background-position'),
        isBackgroundRepeatKeyword: isKeyword('background-repeat'),
        isBackgroundSizeKeyword: isKeyword('background-size'),
        isColor: isColor,
        isColorFunction: isColorFunction,
        isDynamicUnit: isDynamicUnit,
        isFontKeyword: isKeyword('font'),
        isFontSizeKeyword: isKeyword('font-size'),
        isFontStretchKeyword: isKeyword('font-stretch'),
        isFontStyleKeyword: isKeyword('font-style'),
        isFontVariantKeyword: isKeyword('font-variant'),
        isFontWeightKeyword: isKeyword('font-weight'),
        isFunction: isFunction$2,
        isGlobal: isKeyword('^'),
        isHexAlphaColor: isHexAlphaColor,
        isHslColor: isHslColor,
        isIdentifier: isIdentifier,
        isImage: isImage,
        isKeyword: isKeyword,
        isLineHeightKeyword: isKeyword('line-height'),
        isListStylePositionKeyword: isKeyword('list-style-position'),
        isListStyleTypeKeyword: isKeyword('list-style-type'),
        isNumber: isNumber$1,
        isPrefixed: isPrefixed,
        isPositiveNumber: isPositiveNumber,
        isQuotedText: isQuotedText,
        isRgbColor: isRgbColor,
        isStyleKeyword: isKeyword('*-style'),
        isTime: isTime,
        isUnit: isUnit.bind(null, validUnits),
        isUrl: isUrl,
        isVariable: isVariable,
        isWidth: isKeyword('width'),
        isZIndex: isZIndex
      };
    }

    var validator_1 = validator$1;

    var DEFAULTS = {
      '*': {
        colors: {
          hexAlpha: false, // 4- and 8-character hex notation
          opacity: true // rgba / hsla
        },
        customUnits: { rpx: false },
        properties: {
          backgroundClipMerging: true, // background-clip to shorthand
          backgroundOriginMerging: true, // background-origin to shorthand
          backgroundSizeMerging: true, // background-size to shorthand
          colors: true, // any kind of color transformations, like `#ff00ff` to `#f0f` or `#fff` into `red`
          ieBangHack: false, // !ie suffix hacks on IE<8
          ieFilters: false, // whether to preserve `filter` and `-ms-filter` properties
          iePrefixHack: false, // underscore / asterisk prefix hacks on IE
          ieSuffixHack: false, // \9 suffix hacks on IE6-9, \0 suffix hack on IE6-11
          merging: true, // merging properties into one
          shorterLengthUnits: false, // optimize pixel units into `pt`, `pc` or `in` units
          spaceAfterClosingBrace: true, // 'url() no-repeat' to 'url()no-repeat'
          urlQuotes: true, // whether to wrap content of `url()` into quotes or not
          zeroUnits: true // 0[unit] -> 0
        },
        selectors: {
          adjacentSpace: false, // div+ nav Android stock browser hack
          ie7Hack: false, // *+html hack
          mergeablePseudoClasses: [
            ':active',
            ':after',
            ':before',
            ':empty',
            ':checked',
            ':disabled',
            ':empty',
            ':enabled',
            ':first-child',
            ':first-letter',
            ':first-line',
            ':first-of-type',
            ':focus',
            ':hover',
            ':lang',
            ':last-child',
            ':last-of-type',
            ':link',
            ':not',
            ':nth-child',
            ':nth-last-child',
            ':nth-last-of-type',
            ':nth-of-type',
            ':only-child',
            ':only-of-type',
            ':root',
            ':target',
            ':visited'
          ], // selectors with these pseudo-classes can be merged as these are universally supported
          mergeablePseudoElements: [
            '::after',
            '::before',
            '::first-letter',
            '::first-line'
          ], // selectors with these pseudo-elements can be merged as these are universally supported
          mergeLimit: 8191, // number of rules that can be safely merged together
          multiplePseudoMerging: true
        },
        units: {
          ch: true,
          in: true,
          pc: true,
          pt: true,
          rem: true,
          vh: true,
          vm: true, // vm is vmin on IE9+ see https://developer.mozilla.org/en-US/docs/Web/CSS/length
          vmax: true,
          vmin: true,
          vw: true
        }
      }
    };

    DEFAULTS.ie11 = merge(DEFAULTS['*'], { properties: { ieSuffixHack: true } });

    DEFAULTS.ie10 = merge(DEFAULTS['*'], { properties: { ieSuffixHack: true } });

    DEFAULTS.ie9 = merge(DEFAULTS['*'], {
      properties: {
        ieFilters: true,
        ieSuffixHack: true
      }
    });

    DEFAULTS.ie8 = merge(DEFAULTS.ie9, {
      colors: { opacity: false },
      properties: {
        backgroundClipMerging: false,
        backgroundOriginMerging: false,
        backgroundSizeMerging: false,
        iePrefixHack: true,
        merging: false
      },
      selectors: {
        mergeablePseudoClasses: [
          ':after',
          ':before',
          ':first-child',
          ':first-letter',
          ':focus',
          ':hover',
          ':visited'
        ],
        mergeablePseudoElements: []
      },
      units: {
        ch: false,
        rem: false,
        vh: false,
        vm: false,
        vmax: false,
        vmin: false,
        vw: false
      }
    });

    DEFAULTS.ie7 = merge(DEFAULTS.ie8, {
      properties: { ieBangHack: true },
      selectors: {
        ie7Hack: true,
        mergeablePseudoClasses: [
          ':first-child',
          ':first-letter',
          ':hover',
          ':visited'
        ]
      }
    });

    function compatibilityFrom$1(source) {
      return merge(DEFAULTS['*'], calculateSource(source));
    }

    function merge(source, target) {
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          var value = source[key];

          if (Object.prototype.hasOwnProperty.call(target, key) && typeof value === 'object' && !Array.isArray(value)) {
            target[key] = merge(value, target[key] || {});
          } else {
            target[key] = key in target ? target[key] : value;
          }
        }
      }

      return target;
    }

    function calculateSource(source) {
      if (typeof source == 'object') { return source; }

      if (!/[,+-]/.test(source)) { return DEFAULTS[source] || DEFAULTS['*']; }

      var parts = source.split(',');
      var template = parts[0] in DEFAULTS
        ? DEFAULTS[parts.shift()]
        : DEFAULTS['*'];

      source = {};

      parts.forEach(function(part) {
        var isAdd = part[0] == '+';
        var key = part.substring(1).split('.');
        var group = key[0];
        var option = key[1];

        source[group] = source[group] || {};
        source[group][option] = isAdd;
      });

      return merge(template, source);
    }

    var compatibility = compatibilityFrom$1;

    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
    var inited = false;
    function init () {
      inited = true;
      var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
      for (var i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }

      revLookup['-'.charCodeAt(0)] = 62;
      revLookup['_'.charCodeAt(0)] = 63;
    }

    function toByteArray (b64) {
      if (!inited) {
        init();
      }
      var i, j, l, tmp, placeHolders, arr;
      var len = b64.length;

      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }

      // the number of equal signs (place holders)
      // if there are two placeholders, than the two characters before it
      // represent one byte
      // if there is only one, then the three characters before it represent 2 bytes
      // this is just a cheap hack to not do indexOf twice
      placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

      // base64 is 4/3 + up to two characters of the original data
      arr = new Arr(len * 3 / 4 - placeHolders);

      // if there are placeholders, only get up to the last complete 4 chars
      l = placeHolders > 0 ? len - 4 : len;

      var L = 0;

      for (i = 0, j = 0; i < l; i += 4, j += 3) {
        tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
        arr[L++] = (tmp >> 16) & 0xFF;
        arr[L++] = (tmp >> 8) & 0xFF;
        arr[L++] = tmp & 0xFF;
      }

      if (placeHolders === 2) {
        tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
        arr[L++] = tmp & 0xFF;
      } else if (placeHolders === 1) {
        tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
        arr[L++] = (tmp >> 8) & 0xFF;
        arr[L++] = tmp & 0xFF;
      }

      return arr
    }

    function tripletToBase64 (num) {
      return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
    }

    function encodeChunk (uint8, start, end) {
      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
        output.push(tripletToBase64(tmp));
      }
      return output.join('')
    }

    function fromByteArray (uint8) {
      if (!inited) {
        init();
      }
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
      var output = '';
      var parts = [];
      var maxChunkLength = 16383; // must be multiple of 3

      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
      }

      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        output += lookup[tmp >> 2];
        output += lookup[(tmp << 4) & 0x3F];
        output += '==';
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
        output += lookup[tmp >> 10];
        output += lookup[(tmp >> 4) & 0x3F];
        output += lookup[(tmp << 2) & 0x3F];
        output += '=';
      }

      parts.push(output);

      return parts.join('')
    }

    function read (buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? (nBytes - 1) : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];

      i += d;

      e = s & ((1 << (-nBits)) - 1);
      s >>= (-nBits);
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      m = e & ((1 << (-nBits)) - 1);
      e >>= (-nBits);
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : ((s ? -1 : 1) * Infinity)
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    }

    function write (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
      var i = isLE ? 0 : (nBytes - 1);
      var d = isLE ? 1 : -1;
      var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

      value = Math.abs(value);

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

      e = (e << mLen) | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

      buffer[offset + i - d] |= s * 128;
    }

    var toString = {}.toString;

    var isArray$2 = Array.isArray || function (arr) {
      return toString.call(arr) == '[object Array]';
    };

    /*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
     * @license  MIT
     */
    /* eslint-disable no-proto */


    var INSPECT_MAX_BYTES = 50;

    /**
     * If `Buffer.TYPED_ARRAY_SUPPORT`:
     *   === true    Use Uint8Array implementation (fastest)
     *   === false   Use Object implementation (most compatible, even IE6)
     *
     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
     * Opera 11.6+, iOS 4.2+.
     *
     * Due to various browser bugs, sometimes the Object implementation will be used even
     * when the browser supports typed arrays.
     *
     * Note:
     *
     *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
     *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
     *
     *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
     *
     *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
     *     incorrect length in some situations.

     * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
     * get the Object implementation, which is slower but behaves correctly.
     */
    Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
      ? global$1.TYPED_ARRAY_SUPPORT
      : true;

    /*
     * Export kMaxLength after typed array support is determined.
     */
    kMaxLength();

    function kMaxLength () {
      return Buffer.TYPED_ARRAY_SUPPORT
        ? 0x7fffffff
        : 0x3fffffff
    }

    function createBuffer (that, length) {
      if (kMaxLength() < length) {
        throw new RangeError('Invalid typed array length')
      }
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = new Uint8Array(length);
        that.__proto__ = Buffer.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        if (that === null) {
          that = new Buffer(length);
        }
        that.length = length;
      }

      return that
    }

    /**
     * The Buffer constructor returns instances of `Uint8Array` that have their
     * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
     * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
     * and the `Uint8Array` methods. Square bracket notation works as expected -- it
     * returns a single octet.
     *
     * The `Uint8Array` prototype remains unmodified.
     */

    function Buffer (arg, encodingOrOffset, length) {
      if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
        return new Buffer(arg, encodingOrOffset, length)
      }

      // Common case.
      if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') {
          throw new Error(
            'If encoding is specified then the first argument must be a string'
          )
        }
        return allocUnsafe(this, arg)
      }
      return from(this, arg, encodingOrOffset, length)
    }

    Buffer.poolSize = 8192; // not used by this implementation

    // TODO: Legacy, not needed anymore. Remove in next major version.
    Buffer._augment = function (arr) {
      arr.__proto__ = Buffer.prototype;
      return arr
    };

    function from (that, value, encodingOrOffset, length) {
      if (typeof value === 'number') {
        throw new TypeError('"value" argument must not be a number')
      }

      if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
        return fromArrayBuffer(that, value, encodingOrOffset, length)
      }

      if (typeof value === 'string') {
        return fromString$1(that, value, encodingOrOffset)
      }

      return fromObject(that, value)
    }

    /**
     * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
     * if value is a number.
     * Buffer.from(str[, encoding])
     * Buffer.from(array)
     * Buffer.from(buffer)
     * Buffer.from(arrayBuffer[, byteOffset[, length]])
     **/
    Buffer.from = function (value, encodingOrOffset, length) {
      return from(null, value, encodingOrOffset, length)
    };

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      Buffer.prototype.__proto__ = Uint8Array.prototype;
      Buffer.__proto__ = Uint8Array;
      if (typeof Symbol !== 'undefined' && Symbol.species &&
          Buffer[Symbol.species] === Buffer) ;
    }

    function assertSize (size) {
      if (typeof size !== 'number') {
        throw new TypeError('"size" argument must be a number')
      } else if (size < 0) {
        throw new RangeError('"size" argument must not be negative')
      }
    }

    function alloc (that, size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(that, size)
      }
      if (fill !== undefined) {
        // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpretted as a start offset.
        return typeof encoding === 'string'
          ? createBuffer(that, size).fill(fill, encoding)
          : createBuffer(that, size).fill(fill)
      }
      return createBuffer(that, size)
    }

    /**
     * Creates a new filled Buffer instance.
     * alloc(size[, fill[, encoding]])
     **/
    Buffer.alloc = function (size, fill, encoding) {
      return alloc(null, size, fill, encoding)
    };

    function allocUnsafe (that, size) {
      assertSize(size);
      that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
      if (!Buffer.TYPED_ARRAY_SUPPORT) {
        for (var i = 0; i < size; ++i) {
          that[i] = 0;
        }
      }
      return that
    }

    /**
     * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
     * */
    Buffer.allocUnsafe = function (size) {
      return allocUnsafe(null, size)
    };
    /**
     * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
     */
    Buffer.allocUnsafeSlow = function (size) {
      return allocUnsafe(null, size)
    };

    function fromString$1 (that, string, encoding) {
      if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8';
      }

      if (!Buffer.isEncoding(encoding)) {
        throw new TypeError('"encoding" must be a valid string encoding')
      }

      var length = byteLength(string, encoding) | 0;
      that = createBuffer(that, length);

      var actual = that.write(string, encoding);

      if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        that = that.slice(0, actual);
      }

      return that
    }

    function fromArrayLike (that, array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0;
      that = createBuffer(that, length);
      for (var i = 0; i < length; i += 1) {
        that[i] = array[i] & 255;
      }
      return that
    }

    function fromArrayBuffer (that, array, byteOffset, length) {
      array.byteLength; // this throws if `array` is not a valid ArrayBuffer

      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('\'offset\' is out of bounds')
      }

      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('\'length\' is out of bounds')
      }

      if (byteOffset === undefined && length === undefined) {
        array = new Uint8Array(array);
      } else if (length === undefined) {
        array = new Uint8Array(array, byteOffset);
      } else {
        array = new Uint8Array(array, byteOffset, length);
      }

      if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = array;
        that.__proto__ = Buffer.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        that = fromArrayLike(that, array);
      }
      return that
    }

    function fromObject (that, obj) {
      if (internalIsBuffer(obj)) {
        var len = checked(obj.length) | 0;
        that = createBuffer(that, len);

        if (that.length === 0) {
          return that
        }

        obj.copy(that, 0, 0, len);
        return that
      }

      if (obj) {
        if ((typeof ArrayBuffer !== 'undefined' &&
            obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
          if (typeof obj.length !== 'number' || isnan(obj.length)) {
            return createBuffer(that, 0)
          }
          return fromArrayLike(that, obj)
        }

        if (obj.type === 'Buffer' && isArray$2(obj.data)) {
          return fromArrayLike(that, obj.data)
        }
      }

      throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
    }

    function checked (length) {
      // Note: cannot use `length < kMaxLength()` here because that fails when
      // length is NaN (which is otherwise coerced to zero.)
      if (length >= kMaxLength()) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                             'size: 0x' + kMaxLength().toString(16) + ' bytes')
      }
      return length | 0
    }
    Buffer.isBuffer = isBuffer;
    function internalIsBuffer (b) {
      return !!(b != null && b._isBuffer)
    }

    Buffer.compare = function compare (a, b) {
      if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
        throw new TypeError('Arguments must be Buffers')
      }

      if (a === b) return 0

      var x = a.length;
      var y = b.length;

      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    Buffer.isEncoding = function isEncoding (encoding) {
      switch (String(encoding).toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return true
        default:
          return false
      }
    };

    Buffer.concat = function concat (list, length) {
      if (!isArray$2(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }

      if (list.length === 0) {
        return Buffer.alloc(0)
      }

      var i;
      if (length === undefined) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }

      var buffer = Buffer.allocUnsafe(length);
      var pos = 0;
      for (i = 0; i < list.length; ++i) {
        var buf = list[i];
        if (!internalIsBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers')
        }
        buf.copy(buffer, pos);
        pos += buf.length;
      }
      return buffer
    };

    function byteLength (string, encoding) {
      if (internalIsBuffer(string)) {
        return string.length
      }
      if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
          (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
        return string.byteLength
      }
      if (typeof string !== 'string') {
        string = '' + string;
      }

      var len = string.length;
      if (len === 0) return 0

      // Use a for loop to avoid recursion
      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'ascii':
          case 'latin1':
          case 'binary':
            return len
          case 'utf8':
          case 'utf-8':
          case undefined:
            return utf8ToBytes(string).length
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return len * 2
          case 'hex':
            return len >>> 1
          case 'base64':
            return base64ToBytes(string).length
          default:
            if (loweredCase) return utf8ToBytes(string).length // assume utf8
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer.byteLength = byteLength;

    function slowToString (encoding, start, end) {
      var loweredCase = false;

      // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
      // property of a typed array.

      // This behaves neither like String nor Uint8Array in that we set start/end
      // to their upper/lower bounds if the value passed is out of range.
      // undefined is handled specially as per ECMA-262 6th Edition,
      // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
      if (start === undefined || start < 0) {
        start = 0;
      }
      // Return early if start > this.length. Done here to prevent potential uint32
      // coercion fail below.
      if (start > this.length) {
        return ''
      }

      if (end === undefined || end > this.length) {
        end = this.length;
      }

      if (end <= 0) {
        return ''
      }

      // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
      end >>>= 0;
      start >>>= 0;

      if (end <= start) {
        return ''
      }

      if (!encoding) encoding = 'utf8';

      while (true) {
        switch (encoding) {
          case 'hex':
            return hexSlice(this, start, end)

          case 'utf8':
          case 'utf-8':
            return utf8Slice(this, start, end)

          case 'ascii':
            return asciiSlice(this, start, end)

          case 'latin1':
          case 'binary':
            return latin1Slice(this, start, end)

          case 'base64':
            return base64Slice(this, start, end)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return utf16leSlice(this, start, end)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
        }
      }
    }

    // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
    // Buffer instances.
    Buffer.prototype._isBuffer = true;

    function swap (b, n, m) {
      var i = b[n];
      b[n] = b[m];
      b[m] = i;
    }

    Buffer.prototype.swap16 = function swap16 () {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 16-bits')
      }
      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this
    };

    Buffer.prototype.swap32 = function swap32 () {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 32-bits')
      }
      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this
    };

    Buffer.prototype.swap64 = function swap64 () {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 64-bits')
      }
      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this
    };

    Buffer.prototype.toString = function toString () {
      var length = this.length | 0;
      if (length === 0) return ''
      if (arguments.length === 0) return utf8Slice(this, 0, length)
      return slowToString.apply(this, arguments)
    };

    Buffer.prototype.equals = function equals (b) {
      if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
      if (this === b) return true
      return Buffer.compare(this, b) === 0
    };

    Buffer.prototype.inspect = function inspect () {
      var str = '';
      var max = INSPECT_MAX_BYTES;
      if (this.length > 0) {
        str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
        if (this.length > max) str += ' ... ';
      }
      return '<Buffer ' + str + '>'
    };

    Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
      if (!internalIsBuffer(target)) {
        throw new TypeError('Argument must be a Buffer')
      }

      if (start === undefined) {
        start = 0;
      }
      if (end === undefined) {
        end = target ? target.length : 0;
      }
      if (thisStart === undefined) {
        thisStart = 0;
      }
      if (thisEnd === undefined) {
        thisEnd = this.length;
      }

      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError('out of range index')
      }

      if (thisStart >= thisEnd && start >= end) {
        return 0
      }
      if (thisStart >= thisEnd) {
        return -1
      }
      if (start >= end) {
        return 1
      }

      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;

      if (this === target) return 0

      var x = thisEnd - thisStart;
      var y = end - start;
      var len = Math.min(x, y);

      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);

      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
    // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
    //
    // Arguments:
    // - buffer - a Buffer to search
    // - val - a string, Buffer, or number
    // - byteOffset - an index into `buffer`; will be clamped to an int32
    // - encoding - an optional encoding, relevant is val is a string
    // - dir - true for indexOf, false for lastIndexOf
    function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
      // Empty buffer means no match
      if (buffer.length === 0) return -1

      // Normalize byteOffset
      if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 0x7fffffff) {
        byteOffset = 0x7fffffff;
      } else if (byteOffset < -0x80000000) {
        byteOffset = -0x80000000;
      }
      byteOffset = +byteOffset;  // Coerce to Number.
      if (isNaN(byteOffset)) {
        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : (buffer.length - 1);
      }

      // Normalize byteOffset: negative offsets start from the end of the buffer
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir) return -1
        else byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1
      }

      // Normalize val
      if (typeof val === 'string') {
        val = Buffer.from(val, encoding);
      }

      // Finally, search either indexOf (if dir is true) or lastIndexOf
      if (internalIsBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) {
          return -1
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
      } else if (typeof val === 'number') {
        val = val & 0xFF; // Search for a byte value [0-255]
        if (Buffer.TYPED_ARRAY_SUPPORT &&
            typeof Uint8Array.prototype.indexOf === 'function') {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
          }
        }
        return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
      }

      throw new TypeError('val must be string, number or Buffer')
    }

    function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;

      if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' ||
            encoding === 'utf16le' || encoding === 'utf-16le') {
          if (arr.length < 2 || val.length < 2) {
            return -1
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }

      function read (buf, i) {
        if (indexSize === 1) {
          return buf[i]
        } else {
          return buf.readUInt16BE(i * indexSize)
        }
      }

      var i;
      if (dir) {
        var foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
          } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          var found = true;
          for (var j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break
            }
          }
          if (found) return i
        }
      }

      return -1
    }

    Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1
    };

    Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
    };

    Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
    };

    function hexWrite (buf, string, offset, length) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }

      // must be an even number of digits
      var strLen = string.length;
      if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

      if (length > strLen / 2) {
        length = strLen / 2;
      }
      for (var i = 0; i < length; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (isNaN(parsed)) return i
        buf[offset + i] = parsed;
      }
      return i
    }

    function utf8Write (buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
    }

    function asciiWrite (buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length)
    }

    function latin1Write (buf, string, offset, length) {
      return asciiWrite(buf, string, offset, length)
    }

    function base64Write (buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length)
    }

    function ucs2Write (buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
    }

    Buffer.prototype.write = function write (string, offset, length, encoding) {
      // Buffer#write(string)
      if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
      // Buffer#write(string, encoding)
      } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
      // Buffer#write(string, offset[, length][, encoding])
      } else if (isFinite(offset)) {
        offset = offset | 0;
        if (isFinite(length)) {
          length = length | 0;
          if (encoding === undefined) encoding = 'utf8';
        } else {
          encoding = length;
          length = undefined;
        }
      // legacy write(string, encoding, offset, length) - remove in v0.13
      } else {
        throw new Error(
          'Buffer.write(string, encoding, offset[, length]) is no longer supported'
        )
      }

      var remaining = this.length - offset;
      if (length === undefined || length > remaining) length = remaining;

      if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds')
      }

      if (!encoding) encoding = 'utf8';

      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'hex':
            return hexWrite(this, string, offset, length)

          case 'utf8':
          case 'utf-8':
            return utf8Write(this, string, offset, length)

          case 'ascii':
            return asciiWrite(this, string, offset, length)

          case 'latin1':
          case 'binary':
            return latin1Write(this, string, offset, length)

          case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return ucs2Write(this, string, offset, length)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };

    Buffer.prototype.toJSON = function toJSON () {
      return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
      }
    };

    function base64Slice (buf, start, end) {
      if (start === 0 && end === buf.length) {
        return fromByteArray(buf)
      } else {
        return fromByteArray(buf.slice(start, end))
      }
    }

    function utf8Slice (buf, start, end) {
      end = Math.min(buf.length, end);
      var res = [];

      var i = start;
      while (i < end) {
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = (firstByte > 0xEF) ? 4
          : (firstByte > 0xDF) ? 3
          : (firstByte > 0xBF) ? 2
          : 1;

        if (i + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;

          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 0x80) {
                codePoint = firstByte;
              }
              break
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
                if (tempCodePoint > 0x7F) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
                if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
                if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }

        if (codePoint === null) {
          // we did not generate a valid codePoint so insert a
          // replacement char (U+FFFD) and advance only 1 byte
          codePoint = 0xFFFD;
          bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
          // encode to utf16 (surrogate pair dance)
          codePoint -= 0x10000;
          res.push(codePoint >>> 10 & 0x3FF | 0xD800);
          codePoint = 0xDC00 | codePoint & 0x3FF;
        }

        res.push(codePoint);
        i += bytesPerSequence;
      }

      return decodeCodePointsArray(res)
    }

    // Based on http://stackoverflow.com/a/22747272/680742, the browser with
    // the lowest limit is Chrome, with 0x10000 args.
    // We go 1 magnitude less, for safety
    var MAX_ARGUMENTS_LENGTH = 0x1000;

    function decodeCodePointsArray (codePoints) {
      var len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
      }

      // Decode in chunks to avoid "call stack size exceeded".
      var res = '';
      var i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res
    }

    function asciiSlice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 0x7F);
      }
      return ret
    }

    function latin1Slice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret
    }

    function hexSlice (buf, start, end) {
      var len = buf.length;

      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len) end = len;

      var out = '';
      for (var i = start; i < end; ++i) {
        out += toHex(buf[i]);
      }
      return out
    }

    function utf16leSlice (buf, start, end) {
      var bytes = buf.slice(start, end);
      var res = '';
      for (var i = 0; i < bytes.length; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      }
      return res
    }

    Buffer.prototype.slice = function slice (start, end) {
      var len = this.length;
      start = ~~start;
      end = end === undefined ? len : ~~end;

      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }

      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }

      if (end < start) end = start;

      var newBuf;
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer.prototype;
      } else {
        var sliceLen = end - start;
        newBuf = new Buffer(sliceLen, undefined);
        for (var i = 0; i < sliceLen; ++i) {
          newBuf[i] = this[i + start];
        }
      }

      return newBuf
    };

    /*
     * Need to make sure that buffer isn't trying to write out of bounds.
     */
    function checkOffset (offset, ext, length) {
      if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
      if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
    }

    Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }

      return val
    };

    Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        checkOffset(offset, byteLength, this.length);
      }

      var val = this[offset + --byteLength];
      var mul = 1;
      while (byteLength > 0 && (mul *= 0x100)) {
        val += this[offset + --byteLength] * mul;
      }

      return val
    };

    Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset]
    };

    Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | (this[offset + 1] << 8)
    };

    Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return (this[offset] << 8) | this[offset + 1]
    };

    Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return ((this[offset]) |
          (this[offset + 1] << 8) |
          (this[offset + 2] << 16)) +
          (this[offset + 3] * 0x1000000)
    };

    Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] * 0x1000000) +
        ((this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        this[offset + 3])
    };

    Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var i = byteLength;
      var mul = 1;
      var val = this[offset + --i];
      while (i > 0 && (mul *= 0x100)) {
        val += this[offset + --i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 0x80)) return (this[offset])
      return ((0xff - this[offset] + 1) * -1)
    };

    Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset] | (this[offset + 1] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | (this[offset] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16) |
        (this[offset + 3] << 24)
    };

    Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] << 24) |
        (this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        (this[offset + 3])
    };

    Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return read(this, offset, true, 23, 4)
    };

    Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return read(this, offset, false, 23, 4)
    };

    Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return read(this, offset, true, 52, 8)
    };

    Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return read(this, offset, false, 52, 8)
    };

    function checkInt (buf, value, offset, ext, max, min) {
      if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
    }

    Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var mul = 1;
      var i = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var i = byteLength - 1;
      var mul = 1;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
      if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      this[offset] = (value & 0xff);
      return offset + 1
    };

    function objectWriteUInt16 (buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffff + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
        buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
          (littleEndian ? i : 1 - i) * 8;
      }
    }

    Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2
    };

    Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8);
        this[offset + 1] = (value & 0xff);
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2
    };

    function objectWriteUInt32 (buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffffffff + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
        buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
      }
    }

    Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset + 3] = (value >>> 24);
        this[offset + 2] = (value >>> 16);
        this[offset + 1] = (value >>> 8);
        this[offset] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4
    };

    Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24);
        this[offset + 1] = (value >>> 16);
        this[offset + 2] = (value >>> 8);
        this[offset + 3] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4
    };

    Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = byteLength - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
      if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      if (value < 0) value = 0xff + value + 1;
      this[offset] = (value & 0xff);
      return offset + 1
    };

    Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2
    };

    Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8);
        this[offset + 1] = (value & 0xff);
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2
    };

    Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
        this[offset + 2] = (value >>> 16);
        this[offset + 3] = (value >>> 24);
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4
    };

    Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (value < 0) value = 0xffffffff + value + 1;
      if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24);
        this[offset + 1] = (value >>> 16);
        this[offset + 2] = (value >>> 8);
        this[offset + 3] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4
    };

    function checkIEEE754 (buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
      if (offset < 0) throw new RangeError('Index out of range')
    }

    function writeFloat (buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4);
      }
      write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4
    }

    Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert)
    };

    Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert)
    };

    function writeDouble (buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8);
      }
      write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8
    }

    Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert)
    };

    Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert)
    };

    // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
    Buffer.prototype.copy = function copy (target, targetStart, start, end) {
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;

      // Copy 0 bytes; we're done
      if (end === start) return 0
      if (target.length === 0 || this.length === 0) return 0

      // Fatal error conditions
      if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds')
      }
      if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
      if (end < 0) throw new RangeError('sourceEnd out of bounds')

      // Are we oob?
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }

      var len = end - start;
      var i;

      if (this === target && start < targetStart && targetStart < end) {
        // descending copy from end
        for (i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start];
        }
      } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
        // ascending copy from start
        for (i = 0; i < len; ++i) {
          target[i + targetStart] = this[i + start];
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, start + len),
          targetStart
        );
      }

      return len
    };

    // Usage:
    //    buffer.fill(number[, offset[, end]])
    //    buffer.fill(buffer[, offset[, end]])
    //    buffer.fill(string[, offset[, end]][, encoding])
    Buffer.prototype.fill = function fill (val, start, end, encoding) {
      // Handle string cases:
      if (typeof val === 'string') {
        if (typeof start === 'string') {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === 'string') {
          encoding = end;
          end = this.length;
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if (code < 256) {
            val = code;
          }
        }
        if (encoding !== undefined && typeof encoding !== 'string') {
          throw new TypeError('encoding must be a string')
        }
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
          throw new TypeError('Unknown encoding: ' + encoding)
        }
      } else if (typeof val === 'number') {
        val = val & 255;
      }

      // Invalid ranges are not set to a default, so can range check early.
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index')
      }

      if (end <= start) {
        return this
      }

      start = start >>> 0;
      end = end === undefined ? this.length : end >>> 0;

      if (!val) val = 0;

      var i;
      if (typeof val === 'number') {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = internalIsBuffer(val)
          ? val
          : utf8ToBytes(new Buffer(val, encoding).toString());
        var len = bytes.length;
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }

      return this
    };

    // HELPER FUNCTIONS
    // ================

    var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

    function base64clean (str) {
      // Node strips out invalid characters like \n and \t from the string, base64-js does not
      str = stringtrim(str).replace(INVALID_BASE64_RE, '');
      // Node converts strings with length < 2 to ''
      if (str.length < 2) return ''
      // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
      while (str.length % 4 !== 0) {
        str = str + '=';
      }
      return str
    }

    function stringtrim (str) {
      if (str.trim) return str.trim()
      return str.replace(/^\s+|\s+$/g, '')
    }

    function toHex (n) {
      if (n < 16) return '0' + n.toString(16)
      return n.toString(16)
    }

    function utf8ToBytes (string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];

      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);

        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
          // last char was a lead
          if (!leadSurrogate) {
            // no lead yet
            if (codePoint > 0xDBFF) {
              // unexpected trail
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            } else if (i + 1 === length) {
              // unpaired lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            }

            // valid lead
            leadSurrogate = codePoint;

            continue
          }

          // 2 leads in a row
          if (codePoint < 0xDC00) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            leadSurrogate = codePoint;
            continue
          }

          // valid surrogate pair
          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) {
          // valid bmp char, but last char was a lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }

        leadSurrogate = null;

        // encode utf8
        if (codePoint < 0x80) {
          if ((units -= 1) < 0) break
          bytes.push(codePoint);
        } else if (codePoint < 0x800) {
          if ((units -= 2) < 0) break
          bytes.push(
            codePoint >> 0x6 | 0xC0,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x10000) {
          if ((units -= 3) < 0) break
          bytes.push(
            codePoint >> 0xC | 0xE0,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x110000) {
          if ((units -= 4) < 0) break
          bytes.push(
            codePoint >> 0x12 | 0xF0,
            codePoint >> 0xC & 0x3F | 0x80,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else {
          throw new Error('Invalid code point')
        }
      }

      return bytes
    }

    function asciiToBytes (str) {
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        // Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 0xFF);
      }
      return byteArray
    }

    function utf16leToBytes (str, units) {
      var c, hi, lo;
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break

        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }

      return byteArray
    }


    function base64ToBytes (str) {
      return toByteArray(base64clean(str))
    }

    function blitBuffer (src, dst, offset, length) {
      for (var i = 0; i < length; ++i) {
        if ((i + offset >= dst.length) || (i >= src.length)) break
        dst[i + offset] = src[i];
      }
      return i
    }

    function isnan (val) {
      return val !== val // eslint-disable-line no-self-compare
    }


    // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
    // The _isBuffer check is for Safari 5-7 support, because it's missing
    // Object.prototype.constructor. Remove this eventually
    function isBuffer(obj) {
      return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
    }

    function isFastBuffer (obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
    }

    // For Node v0.10 support. Remove this eventually.
    function isSlowBuffer (obj) {
      return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
    }

    var hasFetch = isFunction$1(global$1.fetch) && isFunction$1(global$1.ReadableStream);

    var _blobConstructor;
    function blobConstructor() {
      if (typeof _blobConstructor !== 'undefined') {
        return _blobConstructor;
      }
      try {
        new global$1.Blob([new ArrayBuffer(1)]);
        _blobConstructor = true;
      } catch (e) {
        _blobConstructor = false;
      }
      return _blobConstructor
    }
    var xhr;

    function checkTypeSupport(type) {
      if (!xhr) {
        xhr = new global$1.XMLHttpRequest();
        // If location.host is empty, e.g. if this page/worker was loaded
        // from a Blob, then use example.com to avoid an error
        xhr.open('GET', global$1.location.host ? '/' : 'https://example.com');
      }
      try {
        xhr.responseType = type;
        return xhr.responseType === type
      } catch (e) {
        return false
      }

    }

    // For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
    // Safari 7.1 appears to have fixed this bug.
    var haveArrayBuffer = typeof global$1.ArrayBuffer !== 'undefined';
    var haveSlice = haveArrayBuffer && isFunction$1(global$1.ArrayBuffer.prototype.slice);

    var arraybuffer = haveArrayBuffer && checkTypeSupport('arraybuffer');
      // These next two tests unavoidably show warnings in Chrome. Since fetch will always
      // be used if it's available, just return false for these to avoid the warnings.
    var msstream = !hasFetch && haveSlice && checkTypeSupport('ms-stream');
    var mozchunkedarraybuffer = !hasFetch && haveArrayBuffer &&
      checkTypeSupport('moz-chunked-arraybuffer');
    var overrideMimeType = isFunction$1(xhr.overrideMimeType);
    var vbArray = isFunction$1(global$1.VBArray);

    function isFunction$1(value) {
      return typeof value === 'function'
    }

    xhr = null; // Help gc

    var inherits;
    if (typeof Object.create === 'function'){
      inherits = function inherits(ctor, superCtor) {
        // implementation from standard node.js 'util' module
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      };
    } else {
      inherits = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      };
    }
    var inherits$1 = inherits;

    var formatRegExp = /%[sdj%]/g;
    function format$1(f) {
      if (!isString(f)) {
        var objects = [];
        for (var i = 0; i < arguments.length; i++) {
          objects.push(inspect(arguments[i]));
        }
        return objects.join(' ');
      }

      var i = 1;
      var args = arguments;
      var len = args.length;
      var str = String(f).replace(formatRegExp, function(x) {
        if (x === '%%') return '%';
        if (i >= len) return x;
        switch (x) {
          case '%s': return String(args[i++]);
          case '%d': return Number(args[i++]);
          case '%j':
            try {
              return JSON.stringify(args[i++]);
            } catch (_) {
              return '[Circular]';
            }
          default:
            return x;
        }
      });
      for (var x = args[i]; i < len; x = args[++i]) {
        if (isNull(x) || !isObject(x)) {
          str += ' ' + x;
        } else {
          str += ' ' + inspect(x);
        }
      }
      return str;
    }

    // Mark that a method should not be used.
    // Returns a modified function which warns once by default.
    // If --no-deprecation is set, then it is a no-op.
    function deprecate(fn, msg) {
      // Allow for deprecating things in the process of starting up.
      if (isUndefined(global$1.process)) {
        return function() {
          return deprecate(fn, msg).apply(this, arguments);
        };
      }

      if (browser$1.noDeprecation === true) {
        return fn;
      }

      var warned = false;
      function deprecated() {
        if (!warned) {
          if (browser$1.throwDeprecation) {
            throw new Error(msg);
          } else if (browser$1.traceDeprecation) {
            console.trace(msg);
          } else {
            console.error(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }

      return deprecated;
    }

    var debugs = {};
    var debugEnviron;
    function debuglog(set) {
      if (isUndefined(debugEnviron))
        debugEnviron = browser$1.env.NODE_DEBUG || '';
      set = set.toUpperCase();
      if (!debugs[set]) {
        if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
          var pid = 0;
          debugs[set] = function() {
            var msg = format$1.apply(null, arguments);
            console.error('%s %d: %s', set, pid, msg);
          };
        } else {
          debugs[set] = function() {};
        }
      }
      return debugs[set];
    }

    /**
     * Echos the value of a value. Trys to print the value out
     * in the best way possible given the different types.
     *
     * @param {Object} obj The object to print out.
     * @param {Object} opts Optional options object that alters the output.
     */
    /* legacy: obj, showHidden, depth, colors*/
    function inspect(obj, opts) {
      // default options
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      // legacy...
      if (arguments.length >= 3) ctx.depth = arguments[2];
      if (arguments.length >= 4) ctx.colors = arguments[3];
      if (isBoolean(opts)) {
        // legacy...
        ctx.showHidden = opts;
      } else if (opts) {
        // got an "options" object
        _extend(ctx, opts);
      }
      // set default options
      if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
      if (isUndefined(ctx.depth)) ctx.depth = 2;
      if (isUndefined(ctx.colors)) ctx.colors = false;
      if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
      if (ctx.colors) ctx.stylize = stylizeWithColor;
      return formatValue(ctx, obj, ctx.depth);
    }

    // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
    inspect.colors = {
      'bold' : [1, 22],
      'italic' : [3, 23],
      'underline' : [4, 24],
      'inverse' : [7, 27],
      'white' : [37, 39],
      'grey' : [90, 39],
      'black' : [30, 39],
      'blue' : [34, 39],
      'cyan' : [36, 39],
      'green' : [32, 39],
      'magenta' : [35, 39],
      'red' : [31, 39],
      'yellow' : [33, 39]
    };

    // Don't use 'blue' not visible on cmd.exe
    inspect.styles = {
      'special': 'cyan',
      'number': 'yellow',
      'boolean': 'yellow',
      'undefined': 'grey',
      'null': 'bold',
      'string': 'green',
      'date': 'magenta',
      // "name": intentionally not styling
      'regexp': 'red'
    };


    function stylizeWithColor(str, styleType) {
      var style = inspect.styles[styleType];

      if (style) {
        return '\u001b[' + inspect.colors[style][0] + 'm' + str +
               '\u001b[' + inspect.colors[style][1] + 'm';
      } else {
        return str;
      }
    }


    function stylizeNoColor(str, styleType) {
      return str;
    }


    function arrayToHash(array) {
      var hash = {};

      array.forEach(function(val, idx) {
        hash[val] = true;
      });

      return hash;
    }


    function formatValue(ctx, value, recurseTimes) {
      // Provide a hook for user-specified inspect functions.
      // Check that value is an object with an inspect function on it
      if (ctx.customInspect &&
          value &&
          isFunction(value.inspect) &&
          // Filter out the util module, it's inspect function is special
          value.inspect !== inspect &&
          // Also filter out any prototype objects using the circular check.
          !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString(ret)) {
          ret = formatValue(ctx, ret, recurseTimes);
        }
        return ret;
      }

      // Primitive types cannot have properties
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }

      // Look up the keys of the object.
      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);

      if (ctx.showHidden) {
        keys = Object.getOwnPropertyNames(value);
      }

      // IE doesn't make error fields non-enumerable
      // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
      if (isError(value)
          && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
        return formatError(value);
      }

      // Some type of object without properties can be shortcutted.
      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ': ' + value.name : '';
          return ctx.stylize('[Function' + name + ']', 'special');
        }
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        }
        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), 'date');
        }
        if (isError(value)) {
          return formatError(value);
        }
      }

      var base = '', array = false, braces = ['{', '}'];

      // Make Array say that they are Array
      if (isArray$1(value)) {
        array = true;
        braces = ['[', ']'];
      }

      // Make functions say that they are functions
      if (isFunction(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
      }

      // Make RegExps say that they are RegExps
      if (isRegExp(value)) {
        base = ' ' + RegExp.prototype.toString.call(value);
      }

      // Make dates with properties first say the date
      if (isDate(value)) {
        base = ' ' + Date.prototype.toUTCString.call(value);
      }

      // Make error with message first say the error
      if (isError(value)) {
        base = ' ' + formatError(value);
      }

      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }

      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        } else {
          return ctx.stylize('[Object]', 'special');
        }
      }

      ctx.seen.push(value);

      var output;
      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function(key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }

      ctx.seen.pop();

      return reduceToSingleString(output, base, braces);
    }


    function formatPrimitive(ctx, value) {
      if (isUndefined(value))
        return ctx.stylize('undefined', 'undefined');
      if (isString(value)) {
        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                                 .replace(/'/g, "\\'")
                                                 .replace(/\\"/g, '"') + '\'';
        return ctx.stylize(simple, 'string');
      }
      if (isNumber(value))
        return ctx.stylize('' + value, 'number');
      if (isBoolean(value))
        return ctx.stylize('' + value, 'boolean');
      // For some reason typeof null is "object", so special case here.
      if (isNull(value))
        return ctx.stylize('null', 'null');
    }


    function formatError(value) {
      return '[' + Error.prototype.toString.call(value) + ']';
    }


    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];
      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty$2(value, String(i))) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
              String(i), true));
        } else {
          output.push('');
        }
      }
      keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
              key, true));
        }
      });
      return output;
    }


    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (desc.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }
      if (!hasOwnProperty$2(visibleKeys, key)) {
        name = '[' + key + ']';
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf('\n') > -1) {
            if (array) {
              str = str.split('\n').map(function(line) {
                return '  ' + line;
              }).join('\n').substr(2);
            } else {
              str = '\n' + str.split('\n').map(function(line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = ctx.stylize('[Circular]', 'special');
        }
      }
      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify('' + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'")
                     .replace(/\\"/g, '"')
                     .replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, 'string');
        }
      }

      return name + ': ' + str;
    }


    function reduceToSingleString(output, base, braces) {
      var length = output.reduce(function(prev, cur) {
        if (cur.indexOf('\n') >= 0) ;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
      }, 0);

      if (length > 60) {
        return braces[0] +
               (base === '' ? '' : base + '\n ') +
               ' ' +
               output.join(',\n  ') +
               ' ' +
               braces[1];
      }

      return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }


    // NOTE: These type checking functions intentionally don't use `instanceof`
    // because it is fragile and can be easily faked with `Object.create()`.
    function isArray$1(ar) {
      return Array.isArray(ar);
    }

    function isBoolean(arg) {
      return typeof arg === 'boolean';
    }

    function isNull(arg) {
      return arg === null;
    }

    function isNullOrUndefined(arg) {
      return arg == null;
    }

    function isNumber(arg) {
      return typeof arg === 'number';
    }

    function isString(arg) {
      return typeof arg === 'string';
    }

    function isUndefined(arg) {
      return arg === void 0;
    }

    function isRegExp(re) {
      return isObject(re) && objectToString(re) === '[object RegExp]';
    }

    function isObject(arg) {
      return typeof arg === 'object' && arg !== null;
    }

    function isDate(d) {
      return isObject(d) && objectToString(d) === '[object Date]';
    }

    function isError(e) {
      return isObject(e) &&
          (objectToString(e) === '[object Error]' || e instanceof Error);
    }

    function isFunction(arg) {
      return typeof arg === 'function';
    }

    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }

    function _extend(origin, add) {
      // Don't do anything if add isn't an object
      if (!add || !isObject(add)) return origin;

      var keys = Object.keys(add);
      var i = keys.length;
      while (i--) {
        origin[keys[i]] = add[keys[i]];
      }
      return origin;
    }
    function hasOwnProperty$2(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    var domain;

    // This constructor is used to store event handlers. Instantiating this is
    // faster than explicitly calling `Object.create(null)` to get a "clean" empty
    // object (tested with v8 v4.9).
    function EventHandlers() {}
    EventHandlers.prototype = Object.create(null);

    function EventEmitter() {
      EventEmitter.init.call(this);
    }

    // nodejs oddity
    // require('events') === require('events').EventEmitter
    EventEmitter.EventEmitter = EventEmitter;

    EventEmitter.usingDomains = false;

    EventEmitter.prototype.domain = undefined;
    EventEmitter.prototype._events = undefined;
    EventEmitter.prototype._maxListeners = undefined;

    // By default EventEmitters will print a warning if more than 10 listeners are
    // added to it. This is a useful default which helps finding memory leaks.
    EventEmitter.defaultMaxListeners = 10;

    EventEmitter.init = function() {
      this.domain = null;
      if (EventEmitter.usingDomains) {
        // if there is an active domain, then attach to it.
        if (domain.active ) ;
      }

      if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
        this._events = new EventHandlers();
        this._eventsCount = 0;
      }

      this._maxListeners = this._maxListeners || undefined;
    };

    // Obviously not all Emitters should be limited to 10. This function allows
    // that to be increased. Set to zero for unlimited.
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== 'number' || n < 0 || isNaN(n))
        throw new TypeError('"n" argument must be a positive number');
      this._maxListeners = n;
      return this;
    };

    function $getMaxListeners(that) {
      if (that._maxListeners === undefined)
        return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }

    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return $getMaxListeners(this);
    };

    // These standalone emit* functions are used to optimize calling of event
    // handlers for fast cases because emit() itself often has a variable number of
    // arguments and can be deoptimized because of that. These functions always have
    // the same number of arguments and thus do not get deoptimized, so the code
    // inside them can execute faster.
    function emitNone(handler, isFn, self) {
      if (isFn)
        handler.call(self);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self);
      }
    }
    function emitOne(handler, isFn, self, arg1) {
      if (isFn)
        handler.call(self, arg1);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self, arg1);
      }
    }
    function emitTwo(handler, isFn, self, arg1, arg2) {
      if (isFn)
        handler.call(self, arg1, arg2);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self, arg1, arg2);
      }
    }
    function emitThree(handler, isFn, self, arg1, arg2, arg3) {
      if (isFn)
        handler.call(self, arg1, arg2, arg3);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self, arg1, arg2, arg3);
      }
    }

    function emitMany(handler, isFn, self, args) {
      if (isFn)
        handler.apply(self, args);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].apply(self, args);
      }
    }

    EventEmitter.prototype.emit = function emit(type) {
      var er, handler, len, args, i, events, domain;
      var doError = (type === 'error');

      events = this._events;
      if (events)
        doError = (doError && events.error == null);
      else if (!doError)
        return false;

      domain = this.domain;

      // If there is no 'error' event listener then throw.
      if (doError) {
        er = arguments[1];
        if (domain) {
          if (!er)
            er = new Error('Uncaught, unspecified "error" event');
          er.domainEmitter = this;
          er.domain = domain;
          er.domainThrown = false;
          domain.emit('error', er);
        } else if (er instanceof Error) {
          throw er; // Unhandled 'error' event
        } else {
          // At least give some kind of context to the user
          var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
          err.context = er;
          throw err;
        }
        return false;
      }

      handler = events[type];

      if (!handler)
        return false;

      var isFn = typeof handler === 'function';
      len = arguments.length;
      switch (len) {
        // fast cases
        case 1:
          emitNone(handler, isFn, this);
          break;
        case 2:
          emitOne(handler, isFn, this, arguments[1]);
          break;
        case 3:
          emitTwo(handler, isFn, this, arguments[1], arguments[2]);
          break;
        case 4:
          emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
          break;
        // slower
        default:
          args = new Array(len - 1);
          for (i = 1; i < len; i++)
            args[i - 1] = arguments[i];
          emitMany(handler, isFn, this, args);
      }

      return true;
    };

    function _addListener(target, type, listener, prepend) {
      var m;
      var events;
      var existing;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = target._events;
      if (!events) {
        events = target._events = new EventHandlers();
        target._eventsCount = 0;
      } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener) {
          target.emit('newListener', type,
                      listener.listener ? listener.listener : listener);

          // Re-assign `events` because a newListener handler could have caused the
          // this._events to be assigned to a new object
          events = target._events;
        }
        existing = events[type];
      }

      if (!existing) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === 'function') {
          // Adding the second element, need to change to array.
          existing = events[type] = prepend ? [listener, existing] :
                                              [existing, listener];
        } else {
          // If we've already got an array, just append.
          if (prepend) {
            existing.unshift(listener);
          } else {
            existing.push(listener);
          }
        }

        // Check for listener leak
        if (!existing.warned) {
          m = $getMaxListeners(target);
          if (m && m > 0 && existing.length > m) {
            existing.warned = true;
            var w = new Error('Possible EventEmitter memory leak detected. ' +
                                existing.length + ' ' + type + ' listeners added. ' +
                                'Use emitter.setMaxListeners() to increase limit');
            w.name = 'MaxListenersExceededWarning';
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            emitWarning(w);
          }
        }
      }

      return target;
    }
    function emitWarning(e) {
      typeof console.warn === 'function' ? console.warn(e) : console.log(e);
    }
    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };

    EventEmitter.prototype.on = EventEmitter.prototype.addListener;

    EventEmitter.prototype.prependListener =
        function prependListener(type, listener) {
          return _addListener(this, type, listener, true);
        };

    function _onceWrap(target, type, listener) {
      var fired = false;
      function g() {
        target.removeListener(type, g);
        if (!fired) {
          fired = true;
          listener.apply(target, arguments);
        }
      }
      g.listener = listener;
      return g;
    }

    EventEmitter.prototype.once = function once(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };

    EventEmitter.prototype.prependOnceListener =
        function prependOnceListener(type, listener) {
          if (typeof listener !== 'function')
            throw new TypeError('"listener" argument must be a function');
          this.prependListener(type, _onceWrap(this, type, listener));
          return this;
        };

    // emits a 'removeListener' event iff the listener was removed
    EventEmitter.prototype.removeListener =
        function removeListener(type, listener) {
          var list, events, position, i, originalListener;

          if (typeof listener !== 'function')
            throw new TypeError('"listener" argument must be a function');

          events = this._events;
          if (!events)
            return this;

          list = events[type];
          if (!list)
            return this;

          if (list === listener || (list.listener && list.listener === listener)) {
            if (--this._eventsCount === 0)
              this._events = new EventHandlers();
            else {
              delete events[type];
              if (events.removeListener)
                this.emit('removeListener', type, list.listener || listener);
            }
          } else if (typeof list !== 'function') {
            position = -1;

            for (i = list.length; i-- > 0;) {
              if (list[i] === listener ||
                  (list[i].listener && list[i].listener === listener)) {
                originalListener = list[i].listener;
                position = i;
                break;
              }
            }

            if (position < 0)
              return this;

            if (list.length === 1) {
              list[0] = undefined;
              if (--this._eventsCount === 0) {
                this._events = new EventHandlers();
                return this;
              } else {
                delete events[type];
              }
            } else {
              spliceOne(list, position);
            }

            if (events.removeListener)
              this.emit('removeListener', type, originalListener || listener);
          }

          return this;
        };
        
    // Alias for removeListener added in NodeJS 10.0
    // https://nodejs.org/api/events.html#events_emitter_off_eventname_listener
    EventEmitter.prototype.off = function(type, listener){
        return this.removeListener(type, listener);
    };

    EventEmitter.prototype.removeAllListeners =
        function removeAllListeners(type) {
          var listeners, events;

          events = this._events;
          if (!events)
            return this;

          // not listening for removeListener, no need to emit
          if (!events.removeListener) {
            if (arguments.length === 0) {
              this._events = new EventHandlers();
              this._eventsCount = 0;
            } else if (events[type]) {
              if (--this._eventsCount === 0)
                this._events = new EventHandlers();
              else
                delete events[type];
            }
            return this;
          }

          // emit removeListener for all listeners on all events
          if (arguments.length === 0) {
            var keys = Object.keys(events);
            for (var i = 0, key; i < keys.length; ++i) {
              key = keys[i];
              if (key === 'removeListener') continue;
              this.removeAllListeners(key);
            }
            this.removeAllListeners('removeListener');
            this._events = new EventHandlers();
            this._eventsCount = 0;
            return this;
          }

          listeners = events[type];

          if (typeof listeners === 'function') {
            this.removeListener(type, listeners);
          } else if (listeners) {
            // LIFO order
            do {
              this.removeListener(type, listeners[listeners.length - 1]);
            } while (listeners[0]);
          }

          return this;
        };

    EventEmitter.prototype.listeners = function listeners(type) {
      var evlistener;
      var ret;
      var events = this._events;

      if (!events)
        ret = [];
      else {
        evlistener = events[type];
        if (!evlistener)
          ret = [];
        else if (typeof evlistener === 'function')
          ret = [evlistener.listener || evlistener];
        else
          ret = unwrapListeners(evlistener);
      }

      return ret;
    };

    EventEmitter.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === 'function') {
        return emitter.listenerCount(type);
      } else {
        return listenerCount$1.call(emitter, type);
      }
    };

    EventEmitter.prototype.listenerCount = listenerCount$1;
    function listenerCount$1(type) {
      var events = this._events;

      if (events) {
        var evlistener = events[type];

        if (typeof evlistener === 'function') {
          return 1;
        } else if (evlistener) {
          return evlistener.length;
        }
      }

      return 0;
    }

    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
    };

    // About 1.5x faster than the two-arg version of Array#splice().
    function spliceOne(list, index) {
      for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
        list[i] = list[k];
      list.pop();
    }

    function arrayClone(arr, i) {
      var copy = new Array(i);
      while (i--)
        copy[i] = arr[i];
      return copy;
    }

    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }
      return ret;
    }

    function BufferList() {
      this.head = null;
      this.tail = null;
      this.length = 0;
    }

    BufferList.prototype.push = function (v) {
      var entry = { data: v, next: null };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    };

    BufferList.prototype.unshift = function (v) {
      var entry = { data: v, next: this.head };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    };

    BufferList.prototype.shift = function () {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    };

    BufferList.prototype.clear = function () {
      this.head = this.tail = null;
      this.length = 0;
    };

    BufferList.prototype.join = function (s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;
      while (p = p.next) {
        ret += s + p.data;
      }return ret;
    };

    BufferList.prototype.concat = function (n) {
      if (this.length === 0) return Buffer.alloc(0);
      if (this.length === 1) return this.head.data;
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;
      while (p) {
        p.data.copy(ret, i);
        i += p.data.length;
        p = p.next;
      }
      return ret;
    };

    // Copyright Joyent, Inc. and other Node contributors.
    var isBufferEncoding = Buffer.isEncoding
      || function(encoding) {
           switch (encoding && encoding.toLowerCase()) {
             case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
             default: return false;
           }
         };


    function assertEncoding(encoding) {
      if (encoding && !isBufferEncoding(encoding)) {
        throw new Error('Unknown encoding: ' + encoding);
      }
    }

    // StringDecoder provides an interface for efficiently splitting a series of
    // buffers into a series of JS strings without breaking apart multi-byte
    // characters. CESU-8 is handled as part of the UTF-8 encoding.
    //
    // @TODO Handling all encodings inside a single object makes it very difficult
    // to reason about this code, so it should be split up in the future.
    // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
    // points as used by CESU-8.
    function StringDecoder(encoding) {
      this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
      assertEncoding(encoding);
      switch (this.encoding) {
        case 'utf8':
          // CESU-8 represents each of Surrogate Pair by 3-bytes
          this.surrogateSize = 3;
          break;
        case 'ucs2':
        case 'utf16le':
          // UTF-16 represents each of Surrogate Pair by 2-bytes
          this.surrogateSize = 2;
          this.detectIncompleteChar = utf16DetectIncompleteChar;
          break;
        case 'base64':
          // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
          this.surrogateSize = 3;
          this.detectIncompleteChar = base64DetectIncompleteChar;
          break;
        default:
          this.write = passThroughWrite;
          return;
      }

      // Enough space to store all bytes of a single character. UTF-8 needs 4
      // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
      this.charBuffer = new Buffer(6);
      // Number of bytes received for the current incomplete multi-byte character.
      this.charReceived = 0;
      // Number of bytes expected for the current incomplete multi-byte character.
      this.charLength = 0;
    }

    // write decodes the given buffer and returns it as JS string that is
    // guaranteed to not contain any partial multi-byte characters. Any partial
    // character found at the end of the buffer is buffered up, and will be
    // returned when calling write again with the remaining bytes.
    //
    // Note: Converting a Buffer containing an orphan surrogate to a String
    // currently works, but converting a String to a Buffer (via `new Buffer`, or
    // Buffer#write) will replace incomplete surrogates with the unicode
    // replacement character. See https://codereview.chromium.org/121173009/ .
    StringDecoder.prototype.write = function(buffer) {
      var charStr = '';
      // if our last write ended with an incomplete multibyte character
      while (this.charLength) {
        // determine how many remaining bytes this buffer has to offer for this char
        var available = (buffer.length >= this.charLength - this.charReceived) ?
            this.charLength - this.charReceived :
            buffer.length;

        // add the new bytes to the char buffer
        buffer.copy(this.charBuffer, this.charReceived, 0, available);
        this.charReceived += available;

        if (this.charReceived < this.charLength) {
          // still not enough chars in this buffer? wait for more ...
          return '';
        }

        // remove bytes belonging to the current character from the buffer
        buffer = buffer.slice(available, buffer.length);

        // get the character that was split
        charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

        // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
        var charCode = charStr.charCodeAt(charStr.length - 1);
        if (charCode >= 0xD800 && charCode <= 0xDBFF) {
          this.charLength += this.surrogateSize;
          charStr = '';
          continue;
        }
        this.charReceived = this.charLength = 0;

        // if there are no more bytes in this buffer, just emit our char
        if (buffer.length === 0) {
          return charStr;
        }
        break;
      }

      // determine and set charLength / charReceived
      this.detectIncompleteChar(buffer);

      var end = buffer.length;
      if (this.charLength) {
        // buffer the incomplete character bytes we got
        buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
        end -= this.charReceived;
      }

      charStr += buffer.toString(this.encoding, 0, end);

      var end = charStr.length - 1;
      var charCode = charStr.charCodeAt(end);
      // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
      if (charCode >= 0xD800 && charCode <= 0xDBFF) {
        var size = this.surrogateSize;
        this.charLength += size;
        this.charReceived += size;
        this.charBuffer.copy(this.charBuffer, size, 0, size);
        buffer.copy(this.charBuffer, 0, 0, size);
        return charStr.substring(0, end);
      }

      // or just emit the charStr
      return charStr;
    };

    // detectIncompleteChar determines if there is an incomplete UTF-8 character at
    // the end of the given buffer. If so, it sets this.charLength to the byte
    // length that character, and sets this.charReceived to the number of bytes
    // that are available for this character.
    StringDecoder.prototype.detectIncompleteChar = function(buffer) {
      // determine how many bytes we have to check at the end of this buffer
      var i = (buffer.length >= 3) ? 3 : buffer.length;

      // Figure out if one of the last i bytes of our buffer announces an
      // incomplete char.
      for (; i > 0; i--) {
        var c = buffer[buffer.length - i];

        // See http://en.wikipedia.org/wiki/UTF-8#Description

        // 110XXXXX
        if (i == 1 && c >> 5 == 0x06) {
          this.charLength = 2;
          break;
        }

        // 1110XXXX
        if (i <= 2 && c >> 4 == 0x0E) {
          this.charLength = 3;
          break;
        }

        // 11110XXX
        if (i <= 3 && c >> 3 == 0x1E) {
          this.charLength = 4;
          break;
        }
      }
      this.charReceived = i;
    };

    StringDecoder.prototype.end = function(buffer) {
      var res = '';
      if (buffer && buffer.length)
        res = this.write(buffer);

      if (this.charReceived) {
        var cr = this.charReceived;
        var buf = this.charBuffer;
        var enc = this.encoding;
        res += buf.slice(0, cr).toString(enc);
      }

      return res;
    };

    function passThroughWrite(buffer) {
      return buffer.toString(this.encoding);
    }

    function utf16DetectIncompleteChar(buffer) {
      this.charReceived = buffer.length % 2;
      this.charLength = this.charReceived ? 2 : 0;
    }

    function base64DetectIncompleteChar(buffer) {
      this.charReceived = buffer.length % 3;
      this.charLength = this.charReceived ? 3 : 0;
    }

    Readable.ReadableState = ReadableState;

    var debug = debuglog('stream');
    inherits$1(Readable, EventEmitter);

    function prependListener(emitter, event, fn) {
      // Sadly this is not cacheable as some libraries bundle their own
      // event emitter implementation with them.
      if (typeof emitter.prependListener === 'function') {
        return emitter.prependListener(event, fn);
      } else {
        // This is a hack to make sure that our error handler is attached before any
        // userland ones.  NEVER DO THIS. This is here only because this code needs
        // to continue to work with older versions of Node.js that do not include
        // the prependListener() method. The goal is to eventually remove this hack.
        if (!emitter._events || !emitter._events[event])
          emitter.on(event, fn);
        else if (Array.isArray(emitter._events[event]))
          emitter._events[event].unshift(fn);
        else
          emitter._events[event] = [fn, emitter._events[event]];
      }
    }
    function listenerCount (emitter, type) {
      return emitter.listeners(type).length;
    }
    function ReadableState(options, stream) {

      options = options || {};

      // object stream flag. Used to make read(n) ignore n and to
      // make all the buffer merging and length checks go away
      this.objectMode = !!options.objectMode;

      if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

      // the point at which it stops calling _read() to fill the buffer
      // Note: 0 is a valid value, means "don't call _read preemptively ever"
      var hwm = options.highWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
      this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

      // cast to ints.
      this.highWaterMark = ~ ~this.highWaterMark;

      // A linked list is used to store data chunks instead of an array because the
      // linked list can remove elements from the beginning faster than
      // array.shift()
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;

      // a flag to be able to tell if the onwrite cb is called immediately,
      // or on a later tick.  We set this to true at first, because any
      // actions that shouldn't happen until "later" should generally also
      // not happen before the first write call.
      this.sync = true;

      // whenever we return null, then we set a flag to say
      // that we're awaiting a 'readable' event emission.
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;

      // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.
      this.defaultEncoding = options.defaultEncoding || 'utf8';

      // when piping, we only care about 'readable' events that happen
      // after read()ing all the bytes and not getting any pushback.
      this.ranOut = false;

      // the number of writers that are awaiting a drain event in .pipe()s
      this.awaitDrain = 0;

      // if true, a maybeReadMore has been scheduled
      this.readingMore = false;

      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {

      if (!(this instanceof Readable)) return new Readable(options);

      this._readableState = new ReadableState(options, this);

      // legacy
      this.readable = true;

      if (options && typeof options.read === 'function') this._read = options.read;

      EventEmitter.call(this);
    }

    // Manually shove something into the read() buffer.
    // This returns true if the highWaterMark has not been hit yet,
    // similar to how Writable.write() returns true if you should
    // write() some more.
    Readable.prototype.push = function (chunk, encoding) {
      var state = this._readableState;

      if (!state.objectMode && typeof chunk === 'string') {
        encoding = encoding || state.defaultEncoding;
        if (encoding !== state.encoding) {
          chunk = Buffer.from(chunk, encoding);
          encoding = '';
        }
      }

      return readableAddChunk(this, state, chunk, encoding, false);
    };

    // Unshift should *always* be something directly out of read()
    Readable.prototype.unshift = function (chunk) {
      var state = this._readableState;
      return readableAddChunk(this, state, chunk, '', true);
    };

    Readable.prototype.isPaused = function () {
      return this._readableState.flowing === false;
    };

    function readableAddChunk(stream, state, chunk, encoding, addToFront) {
      var er = chunkInvalid(state, chunk);
      if (er) {
        stream.emit('error', er);
      } else if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else if (state.objectMode || chunk && chunk.length > 0) {
        if (state.ended && !addToFront) {
          var e = new Error('stream.push() after EOF');
          stream.emit('error', e);
        } else if (state.endEmitted && addToFront) {
          var _e = new Error('stream.unshift() after end event');
          stream.emit('error', _e);
        } else {
          var skipAdd;
          if (state.decoder && !addToFront && !encoding) {
            chunk = state.decoder.write(chunk);
            skipAdd = !state.objectMode && chunk.length === 0;
          }

          if (!addToFront) state.reading = false;

          // Don't add to the buffer if we've decoded to an empty string chunk and
          // we're not in object mode
          if (!skipAdd) {
            // if we want the data now, just emit it.
            if (state.flowing && state.length === 0 && !state.sync) {
              stream.emit('data', chunk);
              stream.read(0);
            } else {
              // update the buffer info.
              state.length += state.objectMode ? 1 : chunk.length;
              if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

              if (state.needReadable) emitReadable(stream);
            }
          }

          maybeReadMore(stream, state);
        }
      } else if (!addToFront) {
        state.reading = false;
      }

      return needMoreData(state);
    }

    // if it's past the high water mark, we can push in some more.
    // Also, if we have no data yet, we can stand some
    // more bytes.  This is to work around cases where hwm=0,
    // such as the repl.  Also, if the push() triggered a
    // readable event, and the user called read(largeNumber) such that
    // needReadable was set, then we ought to push more, so that another
    // 'readable' event will be triggered.
    function needMoreData(state) {
      return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
    }

    // backwards compatibility.
    Readable.prototype.setEncoding = function (enc) {
      this._readableState.decoder = new StringDecoder(enc);
      this._readableState.encoding = enc;
      return this;
    };

    // Don't raise the hwm > 8MB
    var MAX_HWM = 0x800000;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }

    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended) return 0;
      if (state.objectMode) return 1;
      if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
      }
      // If we're asking for more than the current hwm, then raise the hwm.
      if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length) return n;
      // Don't have enough
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }

    // you can override either this method, or the async _read(n) below.
    Readable.prototype.read = function (n) {
      debug('read', n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;

      if (n !== 0) state.emittedReadable = false;

      // if we're doing read(0) to trigger a readable event, but we
      // already have a bunch of data in the buffer, then just trigger
      // the 'readable' event and move on.
      if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
        debug('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
        return null;
      }

      n = howMuchToRead(n, state);

      // if we've ended, and we're now clear, then finish it up.
      if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
      }

      // All the actual chunk generation logic needs to be
      // *below* the call to _read.  The reason is that in certain
      // synthetic stream cases, such as passthrough streams, _read
      // may be a completely synchronous operation which may change
      // the state of the read buffer, providing enough data when
      // before there was *not* enough.
      //
      // So, the steps are:
      // 1. Figure out what the state of things will be after we do
      // a read from the buffer.
      //
      // 2. If that resulting state will trigger a _read, then call _read.
      // Note that this may be asynchronous, or synchronous.  Yes, it is
      // deeply ugly to write APIs this way, but that still doesn't mean
      // that the Readable class should behave improperly, as streams are
      // designed to be sync/async agnostic.
      // Take note if the _read call is sync or async (ie, if the read call
      // has returned yet), so that we know whether or not it's safe to emit
      // 'readable' etc.
      //
      // 3. Actually pull the requested chunks out of the buffer and return.

      // if we need a readable event, then we need to do some reading.
      var doRead = state.needReadable;
      debug('need readable', doRead);

      // if we currently have less than the highWaterMark, then also read some
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug('length less than watermark', doRead);
      }

      // however, if we've ended, then there's no point, and if we're already
      // reading, then it's unnecessary.
      if (state.ended || state.reading) {
        doRead = false;
        debug('reading or ended', doRead);
      } else if (doRead) {
        debug('do read');
        state.reading = true;
        state.sync = true;
        // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true;
        // call internal read method
        this._read(state.highWaterMark);
        state.sync = false;
        // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
      }

      var ret;
      if (n > 0) ret = fromList(n, state);else ret = null;

      if (ret === null) {
        state.needReadable = true;
        n = 0;
      } else {
        state.length -= n;
      }

      if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true;

        // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
      }

      if (ret !== null) this.emit('data', ret);

      return ret;
    };

    function chunkInvalid(state, chunk) {
      var er = null;
      if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
        er = new TypeError('Invalid non-string/buffer chunk');
      }
      return er;
    }

    function onEofChunk(stream, state) {
      if (state.ended) return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;

      // emit 'readable' now to make sure it gets picked up.
      emitReadable(stream);
    }

    // Don't emit readable right away in sync mode, because this can trigger
    // another read() call => stack overflow.  This way, it might trigger
    // a nextTick recursion warning, but that's not so bad.
    function emitReadable(stream) {
      var state = stream._readableState;
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug('emitReadable', state.flowing);
        state.emittedReadable = true;
        if (state.sync) nextTick(emitReadable_, stream);else emitReadable_(stream);
      }
    }

    function emitReadable_(stream) {
      debug('emit readable');
      stream.emit('readable');
      flow(stream);
    }

    // at this point, the user has presumably seen the 'readable' event,
    // and called read() to consume some data.  that may have triggered
    // in turn another _read(n) call, in which case reading = true if
    // it's in progress.
    // However, if we're not ended, or reading, and the length < hwm,
    // then go ahead and try to read some more preemptively.
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        nextTick(maybeReadMore_, stream, state);
      }
    }

    function maybeReadMore_(stream, state) {
      var len = state.length;
      while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
        debug('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length)
          // didn't get any data, stop spinning.
          break;else len = state.length;
      }
      state.readingMore = false;
    }

    // abstract method.  to be overridden in specific implementation classes.
    // call cb(er, data) where data is <= n in length.
    // for virtual (non-string, non-buffer) streams, "length" is somewhat
    // arbitrary, and perhaps not very meaningful.
    Readable.prototype._read = function (n) {
      this.emit('error', new Error('not implemented'));
    };

    Readable.prototype.pipe = function (dest, pipeOpts) {
      var src = this;
      var state = this._readableState;

      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

      var doEnd = (!pipeOpts || pipeOpts.end !== false);

      var endFn = doEnd ? onend : cleanup;
      if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);

      dest.on('unpipe', onunpipe);
      function onunpipe(readable) {
        debug('onunpipe');
        if (readable === src) {
          cleanup();
        }
      }

      function onend() {
        debug('onend');
        dest.end();
      }

      // when the dest drains, it reduces the awaitDrain counter
      // on the source.  This would be more elegant with a .once()
      // handler in flow(), but adding and removing repeatedly is
      // too slow.
      var ondrain = pipeOnDrain(src);
      dest.on('drain', ondrain);

      var cleanedUp = false;
      function cleanup() {
        debug('cleanup');
        // cleanup event handlers once the pipe is broken
        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', cleanup);
        src.removeListener('data', ondata);

        cleanedUp = true;

        // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
      }

      // If the user pushes more data while we're writing to dest then we'll end up
      // in ondata again. However, we only want to increase awaitDrain once because
      // dest will only emit one 'drain' event for the multiple writes.
      // => Introduce a guard on increasing awaitDrain.
      var increasedAwaitDrain = false;
      src.on('data', ondata);
      function ondata(chunk) {
        debug('ondata');
        increasedAwaitDrain = false;
        var ret = dest.write(chunk);
        if (false === ret && !increasedAwaitDrain) {
          // If the user unpiped during `dest.write()`, it is possible
          // to get stuck in a permanently paused state if that write
          // also returned false.
          // => Check whether `dest` is still a piping destination.
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug('false write response, pause', src._readableState.awaitDrain);
            src._readableState.awaitDrain++;
            increasedAwaitDrain = true;
          }
          src.pause();
        }
      }

      // if the dest has an error, then stop piping into it.
      // however, don't suppress the throwing behavior for this.
      function onerror(er) {
        debug('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if (listenerCount(dest, 'error') === 0) dest.emit('error', er);
      }

      // Make sure our error handler is attached before userland ones.
      prependListener(dest, 'error', onerror);

      // Both close and finish should trigger unpipe, but only once.
      function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
      }
      dest.once('close', onclose);
      function onfinish() {
        debug('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
      }
      dest.once('finish', onfinish);

      function unpipe() {
        debug('unpipe');
        src.unpipe(dest);
      }

      // tell the dest that it's being piped to
      dest.emit('pipe', src);

      // start the flow if it hasn't been started already.
      if (!state.flowing) {
        debug('pipe resume');
        src.resume();
      }

      return dest;
    };

    function pipeOnDrain(src) {
      return function () {
        var state = src._readableState;
        debug('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && src.listeners('data').length) {
          state.flowing = true;
          flow(src);
        }
      };
    }

    Readable.prototype.unpipe = function (dest) {
      var state = this._readableState;

      // if we're not piping anywhere, then do nothing.
      if (state.pipesCount === 0) return this;

      // just one destination.  most common case.
      if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;

        if (!dest) dest = state.pipes;

        // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this);
        return this;
      }

      // slow case. multiple pipe destinations.

      if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;

        for (var _i = 0; _i < len; _i++) {
          dests[_i].emit('unpipe', this);
        }return this;
      }

      // try to find the right one.
      var i = indexOf(state.pipes, dest);
      if (i === -1) return this;

      state.pipes.splice(i, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1) state.pipes = state.pipes[0];

      dest.emit('unpipe', this);

      return this;
    };

    // set up data events if they are asked for
    // Ensure readable listeners eventually get something
    Readable.prototype.on = function (ev, fn) {
      var res = EventEmitter.prototype.on.call(this, ev, fn);

      if (ev === 'data') {
        // Start flowing on next tick if stream isn't explicitly paused
        if (this._readableState.flowing !== false) this.resume();
      } else if (ev === 'readable') {
        var state = this._readableState;
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.emittedReadable = false;
          if (!state.reading) {
            nextTick(nReadingNextTick, this);
          } else if (state.length) {
            emitReadable(this);
          }
        }
      }

      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;

    function nReadingNextTick(self) {
      debug('readable nexttick read 0');
      self.read(0);
    }

    // pause() and resume() are remnants of the legacy readable stream API
    // If the user uses them, then switch into old mode.
    Readable.prototype.resume = function () {
      var state = this._readableState;
      if (!state.flowing) {
        debug('resume');
        state.flowing = true;
        resume(this, state);
      }
      return this;
    };

    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        nextTick(resume_, stream, state);
      }
    }

    function resume_(stream, state) {
      if (!state.reading) {
        debug('resume read 0');
        stream.read(0);
      }

      state.resumeScheduled = false;
      state.awaitDrain = 0;
      stream.emit('resume');
      flow(stream);
      if (state.flowing && !state.reading) stream.read(0);
    }

    Readable.prototype.pause = function () {
      debug('call pause flowing=%j', this._readableState.flowing);
      if (false !== this._readableState.flowing) {
        debug('pause');
        this._readableState.flowing = false;
        this.emit('pause');
      }
      return this;
    };

    function flow(stream) {
      var state = stream._readableState;
      debug('flow', state.flowing);
      while (state.flowing && stream.read() !== null) {}
    }

    // wrap an old-style stream as the async data source.
    // This is *not* part of the readable stream interface.
    // It is an ugly unfortunate mess of history.
    Readable.prototype.wrap = function (stream) {
      var state = this._readableState;
      var paused = false;

      var self = this;
      stream.on('end', function () {
        debug('wrapped end');
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) self.push(chunk);
        }

        self.push(null);
      });

      stream.on('data', function (chunk) {
        debug('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk);

        // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

        var ret = self.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });

      // proxy all the other methods.
      // important when wrapping filters and duplexes.
      for (var i in stream) {
        if (this[i] === undefined && typeof stream[i] === 'function') {
          this[i] = function (method) {
            return function () {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      }

      // proxy certain important events.
      var events = ['error', 'close', 'destroy', 'pause', 'resume'];
      forEach(events, function (ev) {
        stream.on(ev, self.emit.bind(self, ev));
      });

      // when we try to consume some more bytes, simply unpause the
      // underlying stream.
      self._read = function (n) {
        debug('wrapped _read', n);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };

      return self;
    };

    // exposed for testing purposes only.
    Readable._fromList = fromList;

    // Pluck off n bytes from an array of buffers.
    // Length is the combined lengths of all the buffers in the list.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function fromList(n, state) {
      // nothing buffered
      if (state.length === 0) return null;

      var ret;
      if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        // read part of list
        ret = fromListPartial(n, state.buffer, state.decoder);
      }

      return ret;
    }

    // Extracts only enough buffered data to satisfy the amount requested.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function fromListPartial(n, list, hasStrings) {
      var ret;
      if (n < list.head.data.length) {
        // slice is the same for buffers and strings
        ret = list.head.data.slice(0, n);
        list.head.data = list.head.data.slice(n);
      } else if (n === list.head.data.length) {
        // first chunk is a perfect match
        ret = list.shift();
      } else {
        // result spans more than one buffer
        ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
      }
      return ret;
    }

    // Copies a specified amount of characters from the list of buffered data
    // chunks.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function copyFromBufferString(n, list) {
      var p = list.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;
      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;
        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) list.head = p.next;else list.head = list.tail = null;
          } else {
            list.head = p;
            p.data = str.slice(nb);
          }
          break;
        }
        ++c;
      }
      list.length -= c;
      return ret;
    }

    // Copies a specified amount of bytes from the list of buffered data chunks.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function copyFromBuffer(n, list) {
      var ret = Buffer.allocUnsafe(n);
      var p = list.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;
      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;
        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) list.head = p.next;else list.head = list.tail = null;
          } else {
            list.head = p;
            p.data = buf.slice(nb);
          }
          break;
        }
        ++c;
      }
      list.length -= c;
      return ret;
    }

    function endReadable(stream) {
      var state = stream._readableState;

      // If we get here before consuming all the bytes, then that is a
      // bug in node.  Should never happen.
      if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

      if (!state.endEmitted) {
        state.ended = true;
        nextTick(endReadableNT, state, stream);
      }
    }

    function endReadableNT(state, stream) {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    }

    function forEach(xs, f) {
      for (var i = 0, l = xs.length; i < l; i++) {
        f(xs[i], i);
      }
    }

    function indexOf(xs, x) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
      }
      return -1;
    }

    // A bit simpler than readable streams.
    Writable.WritableState = WritableState;
    inherits$1(Writable, EventEmitter);

    function nop() {}

    function WriteReq(chunk, encoding, cb) {
      this.chunk = chunk;
      this.encoding = encoding;
      this.callback = cb;
      this.next = null;
    }

    function WritableState(options, stream) {
      Object.defineProperty(this, 'buffer', {
        get: deprecate(function () {
          return this.getBuffer();
        }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
      });
      options = options || {};

      // object stream flag to indicate whether or not this stream
      // contains buffers or objects.
      this.objectMode = !!options.objectMode;

      if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

      // the point at which write() starts returning false
      // Note: 0 is a valid value, means that we always return false if
      // the entire buffer is not flushed immediately on write()
      var hwm = options.highWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
      this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

      // cast to ints.
      this.highWaterMark = ~ ~this.highWaterMark;

      this.needDrain = false;
      // at the start of calling end()
      this.ending = false;
      // when end() has been called, and returned
      this.ended = false;
      // when 'finish' is emitted
      this.finished = false;

      // should we decode strings into buffers before passing to _write?
      // this is here so that some node-core streams can optimize string
      // handling at a lower level.
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;

      // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.
      this.defaultEncoding = options.defaultEncoding || 'utf8';

      // not an actual buffer we keep track of, but a measurement
      // of how much we're waiting to get pushed to some underlying
      // socket or file.
      this.length = 0;

      // a flag to see when we're in the middle of a write.
      this.writing = false;

      // when true all writes will be buffered until .uncork() call
      this.corked = 0;

      // a flag to be able to tell if the onwrite cb is called immediately,
      // or on a later tick.  We set this to true at first, because any
      // actions that shouldn't happen until "later" should generally also
      // not happen before the first write call.
      this.sync = true;

      // a flag to know if we're processing previously buffered items, which
      // may call the _write() callback in the same tick, so that we don't
      // end up in an overlapped onwrite situation.
      this.bufferProcessing = false;

      // the callback that's passed to _write(chunk,cb)
      this.onwrite = function (er) {
        onwrite(stream, er);
      };

      // the callback that the user supplies to write(chunk,encoding,cb)
      this.writecb = null;

      // the amount that is being written when _write is called.
      this.writelen = 0;

      this.bufferedRequest = null;
      this.lastBufferedRequest = null;

      // number of pending user-supplied write callbacks
      // this must be 0 before 'finish' can be emitted
      this.pendingcb = 0;

      // emit prefinish if the only thing we're waiting for is _write cbs
      // This is relevant for synchronous Transform streams
      this.prefinished = false;

      // True if the error was already emitted and should not be thrown again
      this.errorEmitted = false;

      // count buffered requests
      this.bufferedRequestCount = 0;

      // allocate the first CorkedRequest, there is always
      // one allocated and free to use, and we maintain at most two
      this.corkedRequestsFree = new CorkedRequest(this);
    }

    WritableState.prototype.getBuffer = function writableStateGetBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    function Writable(options) {

      // Writable ctor is applied to Duplexes, though they're not
      // instanceof Writable, they're instanceof Readable.
      if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

      this._writableState = new WritableState(options, this);

      // legacy.
      this.writable = true;

      if (options) {
        if (typeof options.write === 'function') this._write = options.write;

        if (typeof options.writev === 'function') this._writev = options.writev;
      }

      EventEmitter.call(this);
    }

    // Otherwise people can pipe Writable streams, which is just wrong.
    Writable.prototype.pipe = function () {
      this.emit('error', new Error('Cannot pipe, not readable'));
    };

    function writeAfterEnd(stream, cb) {
      var er = new Error('write after end');
      // TODO: defer error events consistently everywhere, not just the cb
      stream.emit('error', er);
      nextTick(cb, er);
    }

    // If we get something that is not a buffer, string, null, or undefined,
    // and we're not in objectMode, then that's an error.
    // Otherwise stream chunks are all considered to be of length=1, and the
    // watermarks determine how many objects to keep in the buffer, rather than
    // how many bytes or characters.
    function validChunk(stream, state, chunk, cb) {
      var valid = true;
      var er = false;
      // Always throw error if a null is written
      // if we are not in object mode then throw
      // if it is not a buffer, string, or undefined.
      if (chunk === null) {
        er = new TypeError('May not write null values to stream');
      } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
        er = new TypeError('Invalid non-string/buffer chunk');
      }
      if (er) {
        stream.emit('error', er);
        nextTick(cb, er);
        valid = false;
      }
      return valid;
    }

    Writable.prototype.write = function (chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;

      if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }

      if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

      if (typeof cb !== 'function') cb = nop;

      if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, chunk, encoding, cb);
      }

      return ret;
    };

    Writable.prototype.cork = function () {
      var state = this._writableState;

      state.corked++;
    };

    Writable.prototype.uncork = function () {
      var state = this._writableState;

      if (state.corked) {
        state.corked--;

        if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
      }
    };

    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      // node::ParseEncoding() requires lower case.
      if (typeof encoding === 'string') encoding = encoding.toLowerCase();
      if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };

    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
        chunk = Buffer.from(chunk, encoding);
      }
      return chunk;
    }

    // if we're already writing something, then just put this
    // in the queue, and wait our turn.  Otherwise, call _write
    // If we return false, then we need a drain event, so set that flag.
    function writeOrBuffer(stream, state, chunk, encoding, cb) {
      chunk = decodeChunk(state, chunk, encoding);

      if (Buffer.isBuffer(chunk)) encoding = 'buffer';
      var len = state.objectMode ? 1 : chunk.length;

      state.length += len;

      var ret = state.length < state.highWaterMark;
      // we must ensure that previous needDrain will not be reset to false.
      if (!ret) state.needDrain = true;

      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }

      return ret;
    }

    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }

    function onwriteError(stream, state, sync, er, cb) {
      --state.pendingcb;
      if (sync) nextTick(cb, er);else cb(er);

      stream._writableState.errorEmitted = true;
      stream.emit('error', er);
    }

    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }

    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;

      onwriteStateUpdate(state);

      if (er) onwriteError(stream, state, sync, er, cb);else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state);

        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }

        if (sync) {
          /*<replacement>*/
            nextTick(afterWrite, stream, state, finished, cb);
          /*</replacement>*/
        } else {
            afterWrite(stream, state, finished, cb);
          }
      }
    }

    function afterWrite(stream, state, finished, cb) {
      if (!finished) onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    }

    // Must force callback to be called on nextTick, so that we don't
    // emit 'drain' before the write() consumer gets the 'false' return
    // value, and has a chance to attach a 'drain' listener.
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
      }
    }

    // if there's something in the buffer waiting, then process it
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;

      if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;

        var count = 0;
        while (entry) {
          buffer[count] = entry;
          entry = entry.next;
          count += 1;
        }

        doWrite(stream, state, true, state.length, buffer, '', holder.finish);

        // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
      } else {
        // Slow case, write chunks one-by-one
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;

          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          // if we didn't call the onwrite immediately, then
          // it means that we need to wait until it does.
          // also, that means that the chunk and cb are currently
          // being processed, so move the buffer counter past them.
          if (state.writing) {
            break;
          }
        }

        if (entry === null) state.lastBufferedRequest = null;
      }

      state.bufferedRequestCount = 0;
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }

    Writable.prototype._write = function (chunk, encoding, cb) {
      cb(new Error('not implemented'));
    };

    Writable.prototype._writev = null;

    Writable.prototype.end = function (chunk, encoding, cb) {
      var state = this._writableState;

      if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }

      if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

      // .end() fully uncorks
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }

      // ignore unnecessary end() calls.
      if (!state.ending && !state.finished) endWritable(this, state, cb);
    };

    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }

    function prefinish(stream, state) {
      if (!state.prefinished) {
        state.prefinished = true;
        stream.emit('prefinish');
      }
    }

    function finishMaybe(stream, state) {
      var need = needFinish(state);
      if (need) {
        if (state.pendingcb === 0) {
          prefinish(stream, state);
          state.finished = true;
          stream.emit('finish');
        } else {
          prefinish(stream, state);
        }
      }
      return need;
    }

    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb) {
        if (state.finished) nextTick(cb);else stream.once('finish', cb);
      }
      state.ended = true;
      stream.writable = false;
    }

    // It seems a linked list but it is not
    // there will be only 2 of these for each stream
    function CorkedRequest(state) {
      var _this = this;

      this.next = null;
      this.entry = null;

      this.finish = function (err) {
        var entry = _this.entry;
        _this.entry = null;
        while (entry) {
          var cb = entry.callback;
          state.pendingcb--;
          cb(err);
          entry = entry.next;
        }
        if (state.corkedRequestsFree) {
          state.corkedRequestsFree.next = _this;
        } else {
          state.corkedRequestsFree = _this;
        }
      };
    }

    inherits$1(Duplex, Readable);

    var keys = Object.keys(Writable.prototype);
    for (var v = 0; v < keys.length; v++) {
      var method = keys[v];
      if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
    }
    function Duplex(options) {
      if (!(this instanceof Duplex)) return new Duplex(options);

      Readable.call(this, options);
      Writable.call(this, options);

      if (options && options.readable === false) this.readable = false;

      if (options && options.writable === false) this.writable = false;

      this.allowHalfOpen = true;
      if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

      this.once('end', onend);
    }

    // the no-half-open enforcer
    function onend() {
      // if we allow half-open state, or if the writable side ended,
      // then we're ok.
      if (this.allowHalfOpen || this._writableState.ended) return;

      // no more data can be written.
      // But allow more writes to happen in this tick.
      nextTick(onEndNT, this);
    }

    function onEndNT(self) {
      self.end();
    }

    // a transform stream is a readable/writable stream where you do
    inherits$1(Transform, Duplex);

    function TransformState(stream) {
      this.afterTransform = function (er, data) {
        return afterTransform(stream, er, data);
      };

      this.needTransform = false;
      this.transforming = false;
      this.writecb = null;
      this.writechunk = null;
      this.writeencoding = null;
    }

    function afterTransform(stream, er, data) {
      var ts = stream._transformState;
      ts.transforming = false;

      var cb = ts.writecb;

      if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

      ts.writechunk = null;
      ts.writecb = null;

      if (data !== null && data !== undefined) stream.push(data);

      cb(er);

      var rs = stream._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        stream._read(rs.highWaterMark);
      }
    }
    function Transform(options) {
      if (!(this instanceof Transform)) return new Transform(options);

      Duplex.call(this, options);

      this._transformState = new TransformState(this);

      // when the writable side finishes, then flush out anything remaining.
      var stream = this;

      // start out asking for a readable event once data is transformed.
      this._readableState.needReadable = true;

      // we have implemented the _read method, and done the other things
      // that Readable wants before the first _read call, so unset the
      // sync guard flag.
      this._readableState.sync = false;

      if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;

        if (typeof options.flush === 'function') this._flush = options.flush;
      }

      this.once('prefinish', function () {
        if (typeof this._flush === 'function') this._flush(function (er) {
          done(stream, er);
        });else done(stream);
      });
    }

    Transform.prototype.push = function (chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };

    // This is the part where you do stuff!
    // override this function in implementation classes.
    // 'chunk' is an input chunk.
    //
    // Call `push(newChunk)` to pass along transformed output
    // to the readable side.  You may call 'push' zero or more times.
    //
    // Call `cb(err)` when you are done with this chunk.  If you pass
    // an error, then that'll put the hurt on the whole operation.  If you
    // never call cb(), then you'll never get another chunk.
    Transform.prototype._transform = function (chunk, encoding, cb) {
      throw new Error('Not implemented');
    };

    Transform.prototype._write = function (chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
    };

    // Doesn't matter what the args are here.
    // _transform does all the work.
    // That we got here means that the readable side wants more data.
    Transform.prototype._read = function (n) {
      var ts = this._transformState;

      if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        // mark that we need a transform, so that any data that comes in
        // will get processed, now that we've asked for it.
        ts.needTransform = true;
      }
    };

    function done(stream, er) {
      if (er) return stream.emit('error', er);

      // if there's nothing in the write buffer, then that means
      // that nothing more will ever be provided
      var ws = stream._writableState;
      var ts = stream._transformState;

      if (ws.length) throw new Error('Calling transform done when ws.length != 0');

      if (ts.transforming) throw new Error('Calling transform done when still transforming');

      return stream.push(null);
    }

    inherits$1(PassThrough, Transform);
    function PassThrough(options) {
      if (!(this instanceof PassThrough)) return new PassThrough(options);

      Transform.call(this, options);
    }

    PassThrough.prototype._transform = function (chunk, encoding, cb) {
      cb(null, chunk);
    };

    inherits$1(Stream, EventEmitter);
    Stream.Readable = Readable;
    Stream.Writable = Writable;
    Stream.Duplex = Duplex;
    Stream.Transform = Transform;
    Stream.PassThrough = PassThrough;

    // Backwards-compat with node 0.4.x
    Stream.Stream = Stream;

    // old-style streams.  Note that the pipe method (the only relevant
    // part of this class) is overridden in the Readable class.

    function Stream() {
      EventEmitter.call(this);
    }

    Stream.prototype.pipe = function(dest, options) {
      var source = this;

      function ondata(chunk) {
        if (dest.writable) {
          if (false === dest.write(chunk) && source.pause) {
            source.pause();
          }
        }
      }

      source.on('data', ondata);

      function ondrain() {
        if (source.readable && source.resume) {
          source.resume();
        }
      }

      dest.on('drain', ondrain);

      // If the 'end' option is not supplied, dest.end() will be called when
      // source gets the 'end' or 'close' events.  Only dest.end() once.
      if (!dest._isStdio && (!options || options.end !== false)) {
        source.on('end', onend);
        source.on('close', onclose);
      }

      var didOnEnd = false;
      function onend() {
        if (didOnEnd) return;
        didOnEnd = true;

        dest.end();
      }


      function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;

        if (typeof dest.destroy === 'function') dest.destroy();
      }

      // don't leave dangling pipes when there are errors.
      function onerror(er) {
        cleanup();
        if (EventEmitter.listenerCount(this, 'error') === 0) {
          throw er; // Unhandled stream error in pipe.
        }
      }

      source.on('error', onerror);
      dest.on('error', onerror);

      // remove all the event listeners that were added.
      function cleanup() {
        source.removeListener('data', ondata);
        dest.removeListener('drain', ondrain);

        source.removeListener('end', onend);
        source.removeListener('close', onclose);

        source.removeListener('error', onerror);
        dest.removeListener('error', onerror);

        source.removeListener('end', cleanup);
        source.removeListener('close', cleanup);

        dest.removeListener('close', cleanup);
      }

      source.on('end', cleanup);
      source.on('close', cleanup);

      dest.on('close', cleanup);

      dest.emit('pipe', source);

      // Allow for unix-like usage: A.pipe(B).pipe(C)
      return dest;
    };

    var rStates = {
      UNSENT: 0,
      OPENED: 1,
      HEADERS_RECEIVED: 2,
      LOADING: 3,
      DONE: 4
    };
    function IncomingMessage(xhr, response, mode) {
      var self = this;
      Readable.call(self);

      self._mode = mode;
      self.headers = {};
      self.rawHeaders = [];
      self.trailers = {};
      self.rawTrailers = [];

      // Fake the 'close' event, but only once 'end' fires
      self.on('end', function() {
        // The nextTick is necessary to prevent the 'request' module from causing an infinite loop
        browser$1.nextTick(function() {
          self.emit('close');
        });
      });
      var read;
      if (mode === 'fetch') {
        self._fetchResponse = response;

        self.url = response.url;
        self.statusCode = response.status;
        self.statusMessage = response.statusText;
          // backwards compatible version of for (<item> of <iterable>):
          // for (var <item>,_i,_it = <iterable>[Symbol.iterator](); <item> = (_i = _it.next()).value,!_i.done;)
        for (var header, _i, _it = response.headers[Symbol.iterator](); header = (_i = _it.next()).value, !_i.done;) {
          self.headers[header[0].toLowerCase()] = header[1];
          self.rawHeaders.push(header[0], header[1]);
        }

        // TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed
        var reader = response.body.getReader();

        read = function () {
          reader.read().then(function(result) {
            if (self._destroyed)
              return
            if (result.done) {
              self.push(null);
              return
            }
            self.push(new Buffer(result.value));
            read();
          });
        };
        read();

      } else {
        self._xhr = xhr;
        self._pos = 0;

        self.url = xhr.responseURL;
        self.statusCode = xhr.status;
        self.statusMessage = xhr.statusText;
        var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
        headers.forEach(function(header) {
          var matches = header.match(/^([^:]+):\s*(.*)/);
          if (matches) {
            var key = matches[1].toLowerCase();
            if (key === 'set-cookie') {
              if (self.headers[key] === undefined) {
                self.headers[key] = [];
              }
              self.headers[key].push(matches[2]);
            } else if (self.headers[key] !== undefined) {
              self.headers[key] += ', ' + matches[2];
            } else {
              self.headers[key] = matches[2];
            }
            self.rawHeaders.push(matches[1], matches[2]);
          }
        });

        self._charset = 'x-user-defined';
        if (!overrideMimeType) {
          var mimeType = self.rawHeaders['mime-type'];
          if (mimeType) {
            var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);
            if (charsetMatch) {
              self._charset = charsetMatch[1].toLowerCase();
            }
          }
          if (!self._charset)
            self._charset = 'utf-8'; // best guess
        }
      }
    }

    inherits$1(IncomingMessage, Readable);

    IncomingMessage.prototype._read = function() {};

    IncomingMessage.prototype._onXHRProgress = function() {
      var self = this;

      var xhr = self._xhr;

      var response = null;
      switch (self._mode) {
      case 'text:vbarray': // For IE9
        if (xhr.readyState !== rStates.DONE)
          break
        try {
          // This fails in IE8
          response = new global$1.VBArray(xhr.responseBody).toArray();
        } catch (e) {
          // pass
        }
        if (response !== null) {
          self.push(new Buffer(response));
          break
        }
        // Falls through in IE8
      case 'text':
        try { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
          response = xhr.responseText;
        } catch (e) {
          self._mode = 'text:vbarray';
          break
        }
        if (response.length > self._pos) {
          var newData = response.substr(self._pos);
          if (self._charset === 'x-user-defined') {
            var buffer = new Buffer(newData.length);
            for (var i = 0; i < newData.length; i++)
              buffer[i] = newData.charCodeAt(i) & 0xff;

            self.push(buffer);
          } else {
            self.push(newData, self._charset);
          }
          self._pos = response.length;
        }
        break
      case 'arraybuffer':
        if (xhr.readyState !== rStates.DONE || !xhr.response)
          break
        response = xhr.response;
        self.push(new Buffer(new Uint8Array(response)));
        break
      case 'moz-chunked-arraybuffer': // take whole
        response = xhr.response;
        if (xhr.readyState !== rStates.LOADING || !response)
          break
        self.push(new Buffer(new Uint8Array(response)));
        break
      case 'ms-stream':
        response = xhr.response;
        if (xhr.readyState !== rStates.LOADING)
          break
        var reader = new global$1.MSStreamReader();
        reader.onprogress = function() {
          if (reader.result.byteLength > self._pos) {
            self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))));
            self._pos = reader.result.byteLength;
          }
        };
        reader.onload = function() {
          self.push(null);
        };
          // reader.onerror = ??? // TODO: this
        reader.readAsArrayBuffer(response);
        break
      }

      // The ms-stream case handles end separately in reader.onload()
      if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
        self.push(null);
      }
    };

    // from https://github.com/jhiesey/to-arraybuffer/blob/6502d9850e70ba7935a7df4ad86b358fc216f9f0/index.js
    function toArrayBuffer (buf) {
      // If the buffer is backed by a Uint8Array, a faster version will work
      if (buf instanceof Uint8Array) {
        // If the buffer isn't a subarray, return the underlying ArrayBuffer
        if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
          return buf.buffer
        } else if (typeof buf.buffer.slice === 'function') {
          // Otherwise we need to get a proper copy
          return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)
        }
      }

      if (isBuffer(buf)) {
        // This is the slow version that will work with any Buffer
        // implementation (even in old browsers)
        var arrayCopy = new Uint8Array(buf.length);
        var len = buf.length;
        for (var i = 0; i < len; i++) {
          arrayCopy[i] = buf[i];
        }
        return arrayCopy.buffer
      } else {
        throw new Error('Argument must be a Buffer')
      }
    }

    function decideMode(preferBinary, useFetch) {
      if (hasFetch && useFetch) {
        return 'fetch'
      } else if (mozchunkedarraybuffer) {
        return 'moz-chunked-arraybuffer'
      } else if (msstream) {
        return 'ms-stream'
      } else if (arraybuffer && preferBinary) {
        return 'arraybuffer'
      } else if (vbArray && preferBinary) {
        return 'text:vbarray'
      } else {
        return 'text'
      }
    }

    function ClientRequest(opts) {
      var self = this;
      Writable.call(self);

      self._opts = opts;
      self._body = [];
      self._headers = {};
      if (opts.auth)
        self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'));
      Object.keys(opts.headers).forEach(function(name) {
        self.setHeader(name, opts.headers[name]);
      });

      var preferBinary;
      var useFetch = true;
      if (opts.mode === 'disable-fetch') {
        // If the use of XHR should be preferred and includes preserving the 'content-type' header
        useFetch = false;
        preferBinary = true;
      } else if (opts.mode === 'prefer-streaming') {
        // If streaming is a high priority but binary compatibility and
        // the accuracy of the 'content-type' header aren't
        preferBinary = false;
      } else if (opts.mode === 'allow-wrong-content-type') {
        // If streaming is more important than preserving the 'content-type' header
        preferBinary = !overrideMimeType;
      } else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
        // Use binary if text streaming may corrupt data or the content-type header, or for speed
        preferBinary = true;
      } else {
        throw new Error('Invalid value for opts.mode')
      }
      self._mode = decideMode(preferBinary, useFetch);

      self.on('finish', function() {
        self._onFinish();
      });
    }

    inherits$1(ClientRequest, Writable);
    // Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
    var unsafeHeaders = [
      'accept-charset',
      'accept-encoding',
      'access-control-request-headers',
      'access-control-request-method',
      'connection',
      'content-length',
      'cookie',
      'cookie2',
      'date',
      'dnt',
      'expect',
      'host',
      'keep-alive',
      'origin',
      'referer',
      'te',
      'trailer',
      'transfer-encoding',
      'upgrade',
      'user-agent',
      'via'
    ];
    ClientRequest.prototype.setHeader = function(name, value) {
      var self = this;
      var lowerName = name.toLowerCase();
        // This check is not necessary, but it prevents warnings from browsers about setting unsafe
        // headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
        // http-browserify did it, so I will too.
      if (unsafeHeaders.indexOf(lowerName) !== -1)
        return

      self._headers[lowerName] = {
        name: name,
        value: value
      };
    };

    ClientRequest.prototype.getHeader = function(name) {
      var self = this;
      return self._headers[name.toLowerCase()].value
    };

    ClientRequest.prototype.removeHeader = function(name) {
      var self = this;
      delete self._headers[name.toLowerCase()];
    };

    ClientRequest.prototype._onFinish = function() {
      var self = this;

      if (self._destroyed)
        return
      var opts = self._opts;

      var headersObj = self._headers;
      var body;
      if (opts.method === 'POST' || opts.method === 'PUT' || opts.method === 'PATCH') {
        if (blobConstructor()) {
          body = new global$1.Blob(self._body.map(function(buffer) {
            return toArrayBuffer(buffer)
          }), {
            type: (headersObj['content-type'] || {}).value || ''
          });
        } else {
          // get utf8 string
          body = Buffer.concat(self._body).toString();
        }
      }

      if (self._mode === 'fetch') {
        var headers = Object.keys(headersObj).map(function(name) {
          return [headersObj[name].name, headersObj[name].value]
        });

        global$1.fetch(self._opts.url, {
          method: self._opts.method,
          headers: headers,
          body: body,
          mode: 'cors',
          credentials: opts.withCredentials ? 'include' : 'same-origin'
        }).then(function(response) {
          self._fetchResponse = response;
          self._connect();
        }, function(reason) {
          self.emit('error', reason);
        });
      } else {
        var xhr = self._xhr = new global$1.XMLHttpRequest();
        try {
          xhr.open(self._opts.method, self._opts.url, true);
        } catch (err) {
          browser$1.nextTick(function() {
            self.emit('error', err);
          });
          return
        }

        // Can't set responseType on really old browsers
        if ('responseType' in xhr)
          xhr.responseType = self._mode.split(':')[0];

        if ('withCredentials' in xhr)
          xhr.withCredentials = !!opts.withCredentials;

        if (self._mode === 'text' && 'overrideMimeType' in xhr)
          xhr.overrideMimeType('text/plain; charset=x-user-defined');

        Object.keys(headersObj).forEach(function(name) {
          xhr.setRequestHeader(headersObj[name].name, headersObj[name].value);
        });

        self._response = null;
        xhr.onreadystatechange = function() {
          switch (xhr.readyState) {
          case rStates.LOADING:
          case rStates.DONE:
            self._onXHRProgress();
            break
          }
        };
          // Necessary for streaming in Firefox, since xhr.response is ONLY defined
          // in onprogress, not in onreadystatechange with xhr.readyState = 3
        if (self._mode === 'moz-chunked-arraybuffer') {
          xhr.onprogress = function() {
            self._onXHRProgress();
          };
        }

        xhr.onerror = function() {
          if (self._destroyed)
            return
          self.emit('error', new Error('XHR error'));
        };

        try {
          xhr.send(body);
        } catch (err) {
          browser$1.nextTick(function() {
            self.emit('error', err);
          });
          return
        }
      }
    };

    /**
     * Checks if xhr.status is readable and non-zero, indicating no error.
     * Even though the spec says it should be available in readyState 3,
     * accessing it throws an exception in IE8
     */
    function statusValid(xhr) {
      try {
        var status = xhr.status;
        return (status !== null && status !== 0)
      } catch (e) {
        return false
      }
    }

    ClientRequest.prototype._onXHRProgress = function() {
      var self = this;

      if (!statusValid(self._xhr) || self._destroyed)
        return

      if (!self._response)
        self._connect();

      self._response._onXHRProgress();
    };

    ClientRequest.prototype._connect = function() {
      var self = this;

      if (self._destroyed)
        return

      self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode);
      self.emit('response', self._response);
    };

    ClientRequest.prototype._write = function(chunk, encoding, cb) {
      var self = this;

      self._body.push(chunk);
      cb();
    };

    ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function() {
      var self = this;
      self._destroyed = true;
      if (self._response)
        self._response._destroyed = true;
      if (self._xhr)
        self._xhr.abort();
        // Currently, there isn't a way to truly abort a fetch.
        // If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27
    };

    ClientRequest.prototype.end = function(data, encoding, cb) {
      var self = this;
      if (typeof data === 'function') {
        cb = data;
        data = undefined;
      }

      Writable.prototype.end.call(self, data, encoding, cb);
    };

    ClientRequest.prototype.flushHeaders = function() {};
    ClientRequest.prototype.setTimeout = function() {};
    ClientRequest.prototype.setNoDelay = function() {};
    ClientRequest.prototype.setSocketKeepAlive = function() {};

    /*! https://mths.be/punycode v1.4.1 by @mathias */


    /** Highest positive signed 32-bit float value */
    var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

    /** Bootstring parameters */
    var base = 36;
    var tMin = 1;
    var tMax = 26;
    var skew = 38;
    var damp = 700;
    var initialBias = 72;
    var initialN = 128; // 0x80
    var delimiter$1 = '-'; // '\x2D'
    var regexNonASCII = /[^\x20-\x7E]/; // unprintable ASCII chars + non-ASCII chars
    var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

    /** Error messages */
    var errors = {
      'overflow': 'Overflow: input needs wider integers to process',
      'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
      'invalid-input': 'Invalid input'
    };

    /** Convenience shortcuts */
    var baseMinusTMin = base - tMin;
    var floor = Math.floor;
    var stringFromCharCode = String.fromCharCode;

    /*--------------------------------------------------------------------------*/

    /**
     * A generic error utility function.
     * @private
     * @param {String} type The error type.
     * @returns {Error} Throws a `RangeError` with the applicable error message.
     */
    function error(type) {
      throw new RangeError(errors[type]);
    }

    /**
     * A generic `Array#map` utility function.
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} callback The function that gets called for every array
     * item.
     * @returns {Array} A new array of values returned by the callback function.
     */
    function map$1(array, fn) {
      var length = array.length;
      var result = [];
      while (length--) {
        result[length] = fn(array[length]);
      }
      return result;
    }

    /**
     * A simple `Array#map`-like wrapper to work with domain name strings or email
     * addresses.
     * @private
     * @param {String} domain The domain name or email address.
     * @param {Function} callback The function that gets called for every
     * character.
     * @returns {Array} A new string of characters returned by the callback
     * function.
     */
    function mapDomain(string, fn) {
      var parts = string.split('@');
      var result = '';
      if (parts.length > 1) {
        // In email addresses, only the domain name should be punycoded. Leave
        // the local part (i.e. everything up to `@`) intact.
        result = parts[0] + '@';
        string = parts[1];
      }
      // Avoid `split(regex)` for IE8 compatibility. See #17.
      string = string.replace(regexSeparators, '\x2E');
      var labels = string.split('.');
      var encoded = map$1(labels, fn).join('.');
      return result + encoded;
    }

    /**
     * Creates an array containing the numeric code points of each Unicode
     * character in the string. While JavaScript uses UCS-2 internally,
     * this function will convert a pair of surrogate halves (each of which
     * UCS-2 exposes as separate characters) into a single code point,
     * matching UTF-16.
     * @see `punycode.ucs2.encode`
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode.ucs2
     * @name decode
     * @param {String} string The Unicode input string (UCS-2).
     * @returns {Array} The new array of code points.
     */
    function ucs2decode(string) {
      var output = [],
        counter = 0,
        length = string.length,
        value,
        extra;
      while (counter < length) {
        value = string.charCodeAt(counter++);
        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
          // high surrogate, and there is a next character
          extra = string.charCodeAt(counter++);
          if ((extra & 0xFC00) == 0xDC00) { // low surrogate
            output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
          } else {
            // unmatched surrogate; only append this code unit, in case the next
            // code unit is the high surrogate of a surrogate pair
            output.push(value);
            counter--;
          }
        } else {
          output.push(value);
        }
      }
      return output;
    }

    /**
     * Converts a digit/integer into a basic code point.
     * @see `basicToDigit()`
     * @private
     * @param {Number} digit The numeric value of a basic code point.
     * @returns {Number} The basic code point whose value (when used for
     * representing integers) is `digit`, which needs to be in the range
     * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
     * used; else, the lowercase form is used. The behavior is undefined
     * if `flag` is non-zero and `digit` has no uppercase form.
     */
    function digitToBasic(digit, flag) {
      //  0..25 map to ASCII a..z or A..Z
      // 26..35 map to ASCII 0..9
      return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    }

    /**
     * Bias adaptation function as per section 3.4 of RFC 3492.
     * https://tools.ietf.org/html/rfc3492#section-3.4
     * @private
     */
    function adapt(delta, numPoints, firstTime) {
      var k = 0;
      delta = firstTime ? floor(delta / damp) : delta >> 1;
      delta += floor(delta / numPoints);
      for ( /* no initialization */ ; delta > baseMinusTMin * tMax >> 1; k += base) {
        delta = floor(delta / baseMinusTMin);
      }
      return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    }

    /**
     * Converts a string of Unicode symbols (e.g. a domain name label) to a
     * Punycode string of ASCII-only symbols.
     * @memberOf punycode
     * @param {String} input The string of Unicode symbols.
     * @returns {String} The resulting Punycode string of ASCII-only symbols.
     */
    function encode(input) {
      var n,
        delta,
        handledCPCount,
        basicLength,
        bias,
        j,
        m,
        q,
        k,
        t,
        currentValue,
        output = [],
        /** `inputLength` will hold the number of code points in `input`. */
        inputLength,
        /** Cached calculation results */
        handledCPCountPlusOne,
        baseMinusT,
        qMinusT;

      // Convert the input in UCS-2 to Unicode
      input = ucs2decode(input);

      // Cache the length
      inputLength = input.length;

      // Initialize the state
      n = initialN;
      delta = 0;
      bias = initialBias;

      // Handle the basic code points
      for (j = 0; j < inputLength; ++j) {
        currentValue = input[j];
        if (currentValue < 0x80) {
          output.push(stringFromCharCode(currentValue));
        }
      }

      handledCPCount = basicLength = output.length;

      // `handledCPCount` is the number of code points that have been handled;
      // `basicLength` is the number of basic code points.

      // Finish the basic string - if it is not empty - with a delimiter
      if (basicLength) {
        output.push(delimiter$1);
      }

      // Main encoding loop:
      while (handledCPCount < inputLength) {

        // All non-basic code points < n have been handled already. Find the next
        // larger one:
        for (m = maxInt, j = 0; j < inputLength; ++j) {
          currentValue = input[j];
          if (currentValue >= n && currentValue < m) {
            m = currentValue;
          }
        }

        // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
        // but guard against overflow
        handledCPCountPlusOne = handledCPCount + 1;
        if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
          error('overflow');
        }

        delta += (m - n) * handledCPCountPlusOne;
        n = m;

        for (j = 0; j < inputLength; ++j) {
          currentValue = input[j];

          if (currentValue < n && ++delta > maxInt) {
            error('overflow');
          }

          if (currentValue == n) {
            // Represent delta as a generalized variable-length integer
            for (q = delta, k = base; /* no condition */ ; k += base) {
              t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
              if (q < t) {
                break;
              }
              qMinusT = q - t;
              baseMinusT = base - t;
              output.push(
                stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
              );
              q = floor(qMinusT / baseMinusT);
            }

            output.push(stringFromCharCode(digitToBasic(q, 0)));
            bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
            delta = 0;
            ++handledCPCount;
          }
        }

        ++delta;
        ++n;

      }
      return output.join('');
    }

    /**
     * Converts a Unicode string representing a domain name or an email address to
     * Punycode. Only the non-ASCII parts of the domain name will be converted,
     * i.e. it doesn't matter if you call it with a domain that's already in
     * ASCII.
     * @memberOf punycode
     * @param {String} input The domain name or email address to convert, as a
     * Unicode string.
     * @returns {String} The Punycode representation of the given domain name or
     * email address.
     */
    function toASCII(input) {
      return mapDomain(input, function(string) {
        return regexNonASCII.test(string) ?
          'xn--' + encode(string) :
          string;
      });
    }

    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.


    // If obj.hasOwnProperty has been overridden, then calling
    // obj.hasOwnProperty(prop) will break.
    // See: https://github.com/joyent/node/issues/1707
    function hasOwnProperty$1(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    var isArray = Array.isArray || function (xs) {
      return Object.prototype.toString.call(xs) === '[object Array]';
    };
    function stringifyPrimitive(v) {
      switch (typeof v) {
        case 'string':
          return v;

        case 'boolean':
          return v ? 'true' : 'false';

        case 'number':
          return isFinite(v) ? v : '';

        default:
          return '';
      }
    }

    function stringify (obj, sep, eq, name) {
      sep = sep || '&';
      eq = eq || '=';
      if (obj === null) {
        obj = undefined;
      }

      if (typeof obj === 'object') {
        return map(objectKeys(obj), function(k) {
          var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
          if (isArray(obj[k])) {
            return map(obj[k], function(v) {
              return ks + encodeURIComponent(stringifyPrimitive(v));
            }).join(sep);
          } else {
            return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
          }
        }).join(sep);

      }

      if (!name) return '';
      return encodeURIComponent(stringifyPrimitive(name)) + eq +
             encodeURIComponent(stringifyPrimitive(obj));
    }
    function map (xs, f) {
      if (xs.map) return xs.map(f);
      var res = [];
      for (var i = 0; i < xs.length; i++) {
        res.push(f(xs[i], i));
      }
      return res;
    }

    var objectKeys = Object.keys || function (obj) {
      var res = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
      }
      return res;
    };

    function parse$1(qs, sep, eq, options) {
      sep = sep || '&';
      eq = eq || '=';
      var obj = {};

      if (typeof qs !== 'string' || qs.length === 0) {
        return obj;
      }

      var regexp = /\+/g;
      qs = qs.split(sep);

      var maxKeys = 1000;
      if (options && typeof options.maxKeys === 'number') {
        maxKeys = options.maxKeys;
      }

      var len = qs.length;
      // maxKeys <= 0 means that we should not limit keys count
      if (maxKeys > 0 && len > maxKeys) {
        len = maxKeys;
      }

      for (var i = 0; i < len; ++i) {
        var x = qs[i].replace(regexp, '%20'),
            idx = x.indexOf(eq),
            kstr, vstr, k, v;

        if (idx >= 0) {
          kstr = x.substr(0, idx);
          vstr = x.substr(idx + 1);
        } else {
          kstr = x;
          vstr = '';
        }

        k = decodeURIComponent(kstr);
        v = decodeURIComponent(vstr);

        if (!hasOwnProperty$1(obj, k)) {
          obj[k] = v;
        } else if (isArray(obj[k])) {
          obj[k].push(v);
        } else {
          obj[k] = [obj[k], v];
        }
      }

      return obj;
    }

    // WHATWG API
    const URL$1 = global$1.URL;
    const URLSearchParams = global$1.URLSearchParams;
    var _polyfillNode_url = {
      parse: urlParse,
      resolve: urlResolve,
      resolveObject: urlResolveObject,
      fileURLToPath: urlFileURLToPath,
      format: urlFormat,
      Url: Url,

      // WHATWG API
      URL: URL$1,
      URLSearchParams,  
    };
    function Url() {
      this.protocol = null;
      this.slashes = null;
      this.auth = null;
      this.host = null;
      this.port = null;
      this.hostname = null;
      this.hash = null;
      this.search = null;
      this.query = null;
      this.pathname = null;
      this.path = null;
      this.href = null;
    }

    // Reference: RFC 3986, RFC 1808, RFC 2396

    // define these here so at least they only have to be
    // compiled once on the first module load.
    var protocolPattern = /^([a-z0-9.+-]+:)/i,
      portPattern = /:[0-9]*$/,

      // Special case for a simple path URL
      simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

      // RFC 2396: characters reserved for delimiting URLs.
      // We actually just auto-escape these.
      delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

      // RFC 2396: characters not allowed for various reasons.
      unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

      // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
      autoEscape = ['\''].concat(unwise),
      // Characters that are never ever allowed in a hostname.
      // Note that any invalid chars are also handled, but these
      // are the ones that are *expected* to be seen, so we fast-path
      // them.
      nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
      hostEndingChars = ['/', '?', '#'],
      hostnameMaxLen = 255,
      hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
      hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
      // protocols that can allow "unsafe" and "unwise" chars.
      unsafeProtocol = {
        'javascript': true,
        'javascript:': true
      },
      // protocols that never have a hostname.
      hostlessProtocol = {
        'javascript': true,
        'javascript:': true
      },
      // protocols that always contain a // bit.
      slashedProtocol = {
        'http': true,
        'https': true,
        'ftp': true,
        'gopher': true,
        'file': true,
        'http:': true,
        'https:': true,
        'ftp:': true,
        'gopher:': true,
        'file:': true
      };

    function urlParse(url, parseQueryString, slashesDenoteHost) {
      if (url && isObject(url) && url instanceof Url) return url;

      var u = new Url;
      u.parse(url, parseQueryString, slashesDenoteHost);
      return u;
    }
    Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
      return parse(this, url, parseQueryString, slashesDenoteHost);
    };

    function parse(self, url, parseQueryString, slashesDenoteHost) {
      if (!isString(url)) {
        throw new TypeError('Parameter \'url\' must be a string, not ' + typeof url);
      }

      // Copy chrome, IE, opera backslash-handling behavior.
      // Back slashes before the query string get converted to forward slashes
      // See: https://code.google.com/p/chromium/issues/detail?id=25916
      var queryIndex = url.indexOf('?'),
        splitter =
        (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
        uSplit = url.split(splitter),
        slashRegex = /\\/g;
      uSplit[0] = uSplit[0].replace(slashRegex, '/');
      url = uSplit.join(splitter);

      var rest = url;

      // trim before proceeding.
      // This is to support parse stuff like "  http://foo.com  \n"
      rest = rest.trim();

      if (!slashesDenoteHost && url.split('#').length === 1) {
        // Try fast path regexp
        var simplePath = simplePathPattern.exec(rest);
        if (simplePath) {
          self.path = rest;
          self.href = rest;
          self.pathname = simplePath[1];
          if (simplePath[2]) {
            self.search = simplePath[2];
            if (parseQueryString) {
              self.query = parse$1(self.search.substr(1));
            } else {
              self.query = self.search.substr(1);
            }
          } else if (parseQueryString) {
            self.search = '';
            self.query = {};
          }
          return self;
        }
      }

      var proto = protocolPattern.exec(rest);
      if (proto) {
        proto = proto[0];
        var lowerProto = proto.toLowerCase();
        self.protocol = lowerProto;
        rest = rest.substr(proto.length);
      }

      // figure out if it's got a host
      // user@server is *always* interpreted as a hostname, and url
      // resolution will treat //foo/bar as host=foo,path=bar because that's
      // how the browser resolves relative URLs.
      if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        var slashes = rest.substr(0, 2) === '//';
        if (slashes && !(proto && hostlessProtocol[proto])) {
          rest = rest.substr(2);
          self.slashes = true;
        }
      }
      var i, hec, l, p;
      if (!hostlessProtocol[proto] &&
        (slashes || (proto && !slashedProtocol[proto]))) {

        // there's a hostname.
        // the first instance of /, ?, ;, or # ends the host.
        //
        // If there is an @ in the hostname, then non-host chars *are* allowed
        // to the left of the last @ sign, unless some host-ending character
        // comes *before* the @-sign.
        // URLs are obnoxious.
        //
        // ex:
        // http://a@b@c/ => user:a@b host:c
        // http://a@b?@c => user:a host:c path:/?@c

        // v0.12 TODO(isaacs): This is not quite how Chrome does things.
        // Review our test case against browsers more comprehensively.

        // find the first instance of any hostEndingChars
        var hostEnd = -1;
        for (i = 0; i < hostEndingChars.length; i++) {
          hec = rest.indexOf(hostEndingChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
            hostEnd = hec;
        }

        // at this point, either we have an explicit point where the
        // auth portion cannot go past, or the last @ char is the decider.
        var auth, atSign;
        if (hostEnd === -1) {
          // atSign can be anywhere.
          atSign = rest.lastIndexOf('@');
        } else {
          // atSign must be in auth portion.
          // http://a@b/c@d => host:b auth:a path:/c@d
          atSign = rest.lastIndexOf('@', hostEnd);
        }

        // Now we have a portion which is definitely the auth.
        // Pull that off.
        if (atSign !== -1) {
          auth = rest.slice(0, atSign);
          rest = rest.slice(atSign + 1);
          self.auth = decodeURIComponent(auth);
        }

        // the host is the remaining to the left of the first non-host char
        hostEnd = -1;
        for (i = 0; i < nonHostChars.length; i++) {
          hec = rest.indexOf(nonHostChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
            hostEnd = hec;
        }
        // if we still have not hit it, then the entire thing is a host.
        if (hostEnd === -1)
          hostEnd = rest.length;

        self.host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd);

        // pull out port.
        parseHost(self);

        // we've indicated that there is a hostname,
        // so even if it's empty, it has to be present.
        self.hostname = self.hostname || '';

        // if hostname begins with [ and ends with ]
        // assume that it's an IPv6 address.
        var ipv6Hostname = self.hostname[0] === '[' &&
          self.hostname[self.hostname.length - 1] === ']';

        // validate a little.
        if (!ipv6Hostname) {
          var hostparts = self.hostname.split(/\./);
          for (i = 0, l = hostparts.length; i < l; i++) {
            var part = hostparts[i];
            if (!part) continue;
            if (!part.match(hostnamePartPattern)) {
              var newpart = '';
              for (var j = 0, k = part.length; j < k; j++) {
                if (part.charCodeAt(j) > 127) {
                  // we replace non-ASCII char with a temporary placeholder
                  // we need this to make sure size of hostname is not
                  // broken by replacing non-ASCII by nothing
                  newpart += 'x';
                } else {
                  newpart += part[j];
                }
              }
              // we test again with ASCII char only
              if (!newpart.match(hostnamePartPattern)) {
                var validParts = hostparts.slice(0, i);
                var notHost = hostparts.slice(i + 1);
                var bit = part.match(hostnamePartStart);
                if (bit) {
                  validParts.push(bit[1]);
                  notHost.unshift(bit[2]);
                }
                if (notHost.length) {
                  rest = '/' + notHost.join('.') + rest;
                }
                self.hostname = validParts.join('.');
                break;
              }
            }
          }
        }

        if (self.hostname.length > hostnameMaxLen) {
          self.hostname = '';
        } else {
          // hostnames are always lower case.
          self.hostname = self.hostname.toLowerCase();
        }

        if (!ipv6Hostname) {
          // IDNA Support: Returns a punycoded representation of "domain".
          // It only converts parts of the domain name that
          // have non-ASCII characters, i.e. it doesn't matter if
          // you call it with a domain that already is ASCII-only.
          self.hostname = toASCII(self.hostname);
        }

        p = self.port ? ':' + self.port : '';
        var h = self.hostname || '';
        self.host = h + p;
        self.href += self.host;

        // strip [ and ] from the hostname
        // the host field still retains them, though
        if (ipv6Hostname) {
          self.hostname = self.hostname.substr(1, self.hostname.length - 2);
          if (rest[0] !== '/') {
            rest = '/' + rest;
          }
        }
      }

      // now rest is set to the post-host stuff.
      // chop off any delim chars.
      if (!unsafeProtocol[lowerProto]) {

        // First, make 100% sure that any "autoEscape" chars get
        // escaped, even if encodeURIComponent doesn't think they
        // need to be.
        for (i = 0, l = autoEscape.length; i < l; i++) {
          var ae = autoEscape[i];
          if (rest.indexOf(ae) === -1)
            continue;
          var esc = encodeURIComponent(ae);
          if (esc === ae) {
            esc = escape(ae);
          }
          rest = rest.split(ae).join(esc);
        }
      }


      // chop off from the tail first.
      var hash = rest.indexOf('#');
      if (hash !== -1) {
        // got a fragment string.
        self.hash = rest.substr(hash);
        rest = rest.slice(0, hash);
      }
      var qm = rest.indexOf('?');
      if (qm !== -1) {
        self.search = rest.substr(qm);
        self.query = rest.substr(qm + 1);
        if (parseQueryString) {
          self.query = parse$1(self.query);
        }
        rest = rest.slice(0, qm);
      } else if (parseQueryString) {
        // no query string, but parseQueryString still requested
        self.search = '';
        self.query = {};
      }
      if (rest) self.pathname = rest;
      if (slashedProtocol[lowerProto] &&
        self.hostname && !self.pathname) {
        self.pathname = '/';
      }

      //to support http.request
      if (self.pathname || self.search) {
        p = self.pathname || '';
        var s = self.search || '';
        self.path = p + s;
      }

      // finally, reconstruct the href based on what has been validated.
      self.href = format(self);
      return self;
    }

    function urlFileURLToPath(path) {
      if (typeof path === 'string')
        path = new Url().parse(path);
      else if (!(path instanceof Url))
        throw new TypeError('The "path" argument must be of type string or an instance of URL. Received type ' + (typeof path) + String(path));
      if (path.protocol !== 'file:')
        throw new TypeError('The URL must be of scheme file');
      return getPathFromURLPosix(path);
    }

    function getPathFromURLPosix(url) {
      const pathname = url.pathname;
      for (let n = 0; n < pathname.length; n++) {
        if (pathname[n] === '%') {
          const third = pathname.codePointAt(n + 2) | 0x20;
          if (pathname[n + 1] === '2' && third === 102) {
            throw new TypeError(
              'must not include encoded / characters'
            );
          }
        }
      }
      return decodeURIComponent(pathname);
    }

    // format a parsed object into a url string
    function urlFormat(obj) {
      // ensure it's an object, and not a string url.
      // If it's an obj, this is a no-op.
      // this way, you can call url_format() on strings
      // to clean up potentially wonky urls.
      if (isString(obj)) obj = parse({}, obj);
      return format(obj);
    }

    function format(self) {
      var auth = self.auth || '';
      if (auth) {
        auth = encodeURIComponent(auth);
        auth = auth.replace(/%3A/i, ':');
        auth += '@';
      }

      var protocol = self.protocol || '',
        pathname = self.pathname || '',
        hash = self.hash || '',
        host = false,
        query = '';

      if (self.host) {
        host = auth + self.host;
      } else if (self.hostname) {
        host = auth + (self.hostname.indexOf(':') === -1 ?
          self.hostname :
          '[' + this.hostname + ']');
        if (self.port) {
          host += ':' + self.port;
        }
      }

      if (self.query &&
        isObject(self.query) &&
        Object.keys(self.query).length) {
        query = stringify(self.query);
      }

      var search = self.search || (query && ('?' + query)) || '';

      if (protocol && protocol.substr(-1) !== ':') protocol += ':';

      // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
      // unless they had them to begin with.
      if (self.slashes ||
        (!protocol || slashedProtocol[protocol]) && host !== false) {
        host = '//' + (host || '');
        if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
      } else if (!host) {
        host = '';
      }

      if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
      if (search && search.charAt(0) !== '?') search = '?' + search;

      pathname = pathname.replace(/[?#]/g, function(match) {
        return encodeURIComponent(match);
      });
      search = search.replace('#', '%23');

      return protocol + host + pathname + search + hash;
    }

    Url.prototype.format = function() {
      return format(this);
    };

    function urlResolve(source, relative) {
      return urlParse(source, false, true).resolve(relative);
    }

    Url.prototype.resolve = function(relative) {
      return this.resolveObject(urlParse(relative, false, true)).format();
    };

    function urlResolveObject(source, relative) {
      if (!source) return relative;
      return urlParse(source, false, true).resolveObject(relative);
    }

    Url.prototype.resolveObject = function(relative) {
      if (isString(relative)) {
        var rel = new Url();
        rel.parse(relative, false, true);
        relative = rel;
      }

      var result = new Url();
      var tkeys = Object.keys(this);
      for (var tk = 0; tk < tkeys.length; tk++) {
        var tkey = tkeys[tk];
        result[tkey] = this[tkey];
      }

      // hash is always overridden, no matter what.
      // even href="" will remove it.
      result.hash = relative.hash;

      // if the relative url is empty, then there's nothing left to do here.
      if (relative.href === '') {
        result.href = result.format();
        return result;
      }

      // hrefs like //foo/bar always cut to the protocol.
      if (relative.slashes && !relative.protocol) {
        // take everything except the protocol from relative
        var rkeys = Object.keys(relative);
        for (var rk = 0; rk < rkeys.length; rk++) {
          var rkey = rkeys[rk];
          if (rkey !== 'protocol')
            result[rkey] = relative[rkey];
        }

        //urlParse appends trailing / to urls like http://www.example.com
        if (slashedProtocol[result.protocol] &&
          result.hostname && !result.pathname) {
          result.path = result.pathname = '/';
        }

        result.href = result.format();
        return result;
      }
      var relPath;
      if (relative.protocol && relative.protocol !== result.protocol) {
        // if it's a known url protocol, then changing
        // the protocol does weird things
        // first, if it's not file:, then we MUST have a host,
        // and if there was a path
        // to begin with, then we MUST have a path.
        // if it is file:, then the host is dropped,
        // because that's known to be hostless.
        // anything else is assumed to be absolute.
        if (!slashedProtocol[relative.protocol]) {
          var keys = Object.keys(relative);
          for (var v = 0; v < keys.length; v++) {
            var k = keys[v];
            result[k] = relative[k];
          }
          result.href = result.format();
          return result;
        }

        result.protocol = relative.protocol;
        if (!relative.host && !hostlessProtocol[relative.protocol]) {
          relPath = (relative.pathname || '').split('/');
          while (relPath.length && !(relative.host = relPath.shift()));
          if (!relative.host) relative.host = '';
          if (!relative.hostname) relative.hostname = '';
          if (relPath[0] !== '') relPath.unshift('');
          if (relPath.length < 2) relPath.unshift('');
          result.pathname = relPath.join('/');
        } else {
          result.pathname = relative.pathname;
        }
        result.search = relative.search;
        result.query = relative.query;
        result.host = relative.host || '';
        result.auth = relative.auth;
        result.hostname = relative.hostname || relative.host;
        result.port = relative.port;
        // to support http.request
        if (result.pathname || result.search) {
          var p = result.pathname || '';
          var s = result.search || '';
          result.path = p + s;
        }
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
      }

      var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
        isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
        ),
        mustEndAbs = (isRelAbs || isSourceAbs ||
          (result.host && relative.pathname)),
        removeAllDots = mustEndAbs,
        srcPath = result.pathname && result.pathname.split('/') || [],
        psychotic = result.protocol && !slashedProtocol[result.protocol];
      relPath = relative.pathname && relative.pathname.split('/') || [];
      // if the url is a non-slashed url, then relative
      // links like ../.. should be able
      // to crawl up to the hostname, as well.  This is strange.
      // result.protocol has already been set by now.
      // Later on, put the first path part into the host field.
      if (psychotic) {
        result.hostname = '';
        result.port = null;
        if (result.host) {
          if (srcPath[0] === '') srcPath[0] = result.host;
          else srcPath.unshift(result.host);
        }
        result.host = '';
        if (relative.protocol) {
          relative.hostname = null;
          relative.port = null;
          if (relative.host) {
            if (relPath[0] === '') relPath[0] = relative.host;
            else relPath.unshift(relative.host);
          }
          relative.host = null;
        }
        mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
      }
      var authInHost;
      if (isRelAbs) {
        // it's absolute.
        result.host = (relative.host || relative.host === '') ?
          relative.host : result.host;
        result.hostname = (relative.hostname || relative.hostname === '') ?
          relative.hostname : result.hostname;
        result.search = relative.search;
        result.query = relative.query;
        srcPath = relPath;
        // fall through to the dot-handling below.
      } else if (relPath.length) {
        // it's relative
        // throw away the existing file, and take the new path instead.
        if (!srcPath) srcPath = [];
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result.search = relative.search;
        result.query = relative.query;
      } else if (!isNullOrUndefined(relative.search)) {
        // just pull out the search.
        // like href='?foo'.
        // Put this after the other two cases because it simplifies the booleans
        if (psychotic) {
          result.hostname = result.host = srcPath.shift();
          //occationaly the auth can get stuck only in host
          //this especially happens in cases like
          //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
          authInHost = result.host && result.host.indexOf('@') > 0 ?
            result.host.split('@') : false;
          if (authInHost) {
            result.auth = authInHost.shift();
            result.host = result.hostname = authInHost.shift();
          }
        }
        result.search = relative.search;
        result.query = relative.query;
        //to support http.request
        if (!isNull(result.pathname) || !isNull(result.search)) {
          result.path = (result.pathname ? result.pathname : '') +
            (result.search ? result.search : '');
        }
        result.href = result.format();
        return result;
      }

      if (!srcPath.length) {
        // no path at all.  easy.
        // we've already handled the other stuff above.
        result.pathname = null;
        //to support http.request
        if (result.search) {
          result.path = '/' + result.search;
        } else {
          result.path = null;
        }
        result.href = result.format();
        return result;
      }

      // if a url ENDs in . or .., then it must get a trailing slash.
      // however, if it ends in anything else non-slashy,
      // then it must NOT get a trailing slash.
      var last = srcPath.slice(-1)[0];
      var hasTrailingSlash = (
        (result.host || relative.host || srcPath.length > 1) &&
        (last === '.' || last === '..') || last === '');

      // strip single dots, resolve double dots to parent dir
      // if the path tries to go above the root, `up` ends up > 0
      var up = 0;
      for (var i = srcPath.length; i >= 0; i--) {
        last = srcPath[i];
        if (last === '.') {
          srcPath.splice(i, 1);
        } else if (last === '..') {
          srcPath.splice(i, 1);
          up++;
        } else if (up) {
          srcPath.splice(i, 1);
          up--;
        }
      }

      // if the path is allowed to go above the root, restore leading ..s
      if (!mustEndAbs && !removeAllDots) {
        for (; up--; up) {
          srcPath.unshift('..');
        }
      }

      if (mustEndAbs && srcPath[0] !== '' &&
        (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
        srcPath.unshift('');
      }

      if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
        srcPath.push('');
      }

      var isAbsolute = srcPath[0] === '' ||
        (srcPath[0] && srcPath[0].charAt(0) === '/');

      // put the host back
      if (psychotic) {
        result.hostname = result.host = isAbsolute ? '' :
          srcPath.length ? srcPath.shift() : '';
        //occationaly the auth can get stuck only in host
        //this especially happens in cases like
        //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
        authInHost = result.host && result.host.indexOf('@') > 0 ?
          result.host.split('@') : false;
        if (authInHost) {
          result.auth = authInHost.shift();
          result.host = result.hostname = authInHost.shift();
        }
      }

      mustEndAbs = mustEndAbs || (result.host && srcPath.length);

      if (mustEndAbs && !isAbsolute) {
        srcPath.unshift('');
      }

      if (!srcPath.length) {
        result.pathname = null;
        result.path = null;
      } else {
        result.pathname = srcPath.join('/');
      }

      //to support request.http
      if (!isNull(result.pathname) || !isNull(result.search)) {
        result.path = (result.pathname ? result.pathname : '') +
          (result.search ? result.search : '');
      }
      result.auth = relative.auth || result.auth;
      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    };

    Url.prototype.parseHost = function() {
      return parseHost(this);
    };

    function parseHost(self) {
      var host = self.host;
      var port = portPattern.exec(host);
      if (port) {
        port = port[0];
        if (port !== ':') {
          self.port = port.substr(1);
        }
        host = host.substr(0, host.length - port.length);
      }
      if (host) self.hostname = host;
    }

    var _polyfillNode_url$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        parse: urlParse,
        resolve: urlResolve,
        resolveObject: urlResolveObject,
        fileURLToPath: urlFileURLToPath,
        format: urlFormat,
        URL: URL$1,
        URLSearchParams: URLSearchParams,
        'default': _polyfillNode_url,
        Url: Url
    });

    function request$1(opts, cb) {
      if (typeof opts === 'string')
        opts = urlParse(opts);


      // Normally, the page is loaded from http or https, so not specifying a protocol
      // will result in a (valid) protocol-relative url. However, this won't work if
      // the protocol is something else, like 'file:'
      var defaultProtocol = global$1.location.protocol.search(/^https?:$/) === -1 ? 'http:' : '';

      var protocol = opts.protocol || defaultProtocol;
      var host = opts.hostname || opts.host;
      var port = opts.port;
      var path = opts.path || '/';

      // Necessary for IPv6 addresses
      if (host && host.indexOf(':') !== -1)
        host = '[' + host + ']';

      // This may be a relative url. The browser should always be able to interpret it correctly.
      opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path;
      opts.method = (opts.method || 'GET').toUpperCase();
      opts.headers = opts.headers || {};

      // Also valid opts.auth, opts.mode

      var req = new ClientRequest(opts);
      if (cb)
        req.on('response', cb);
      return req
    }

    function get$1(opts, cb) {
      var req = request$1(opts, cb);
      req.end();
      return req
    }

    function Agent$1() {}
    Agent$1.defaultMaxSockets = 4;

    var METHODS$1 = [
      'CHECKOUT',
      'CONNECT',
      'COPY',
      'DELETE',
      'GET',
      'HEAD',
      'LOCK',
      'M-SEARCH',
      'MERGE',
      'MKACTIVITY',
      'MKCOL',
      'MOVE',
      'NOTIFY',
      'OPTIONS',
      'PATCH',
      'POST',
      'PROPFIND',
      'PROPPATCH',
      'PURGE',
      'PUT',
      'REPORT',
      'SEARCH',
      'SUBSCRIBE',
      'TRACE',
      'UNLOCK',
      'UNSUBSCRIBE'
    ];
    var STATUS_CODES$1 = {
      100: 'Continue',
      101: 'Switching Protocols',
      102: 'Processing', // RFC 2518, obsoleted by RFC 4918
      200: 'OK',
      201: 'Created',
      202: 'Accepted',
      203: 'Non-Authoritative Information',
      204: 'No Content',
      205: 'Reset Content',
      206: 'Partial Content',
      207: 'Multi-Status', // RFC 4918
      300: 'Multiple Choices',
      301: 'Moved Permanently',
      302: 'Moved Temporarily',
      303: 'See Other',
      304: 'Not Modified',
      305: 'Use Proxy',
      307: 'Temporary Redirect',
      400: 'Bad Request',
      401: 'Unauthorized',
      402: 'Payment Required',
      403: 'Forbidden',
      404: 'Not Found',
      405: 'Method Not Allowed',
      406: 'Not Acceptable',
      407: 'Proxy Authentication Required',
      408: 'Request Time-out',
      409: 'Conflict',
      410: 'Gone',
      411: 'Length Required',
      412: 'Precondition Failed',
      413: 'Request Entity Too Large',
      414: 'Request-URI Too Large',
      415: 'Unsupported Media Type',
      416: 'Requested Range Not Satisfiable',
      417: 'Expectation Failed',
      418: 'I\'m a teapot', // RFC 2324
      422: 'Unprocessable Entity', // RFC 4918
      423: 'Locked', // RFC 4918
      424: 'Failed Dependency', // RFC 4918
      425: 'Unordered Collection', // RFC 4918
      426: 'Upgrade Required', // RFC 2817
      428: 'Precondition Required', // RFC 6585
      429: 'Too Many Requests', // RFC 6585
      431: 'Request Header Fields Too Large', // RFC 6585
      500: 'Internal Server Error',
      501: 'Not Implemented',
      502: 'Bad Gateway',
      503: 'Service Unavailable',
      504: 'Gateway Time-out',
      505: 'HTTP Version Not Supported',
      506: 'Variant Also Negotiates', // RFC 2295
      507: 'Insufficient Storage', // RFC 4918
      509: 'Bandwidth Limit Exceeded',
      510: 'Not Extended', // RFC 2774
      511: 'Network Authentication Required' // RFC 6585
    };

    var _polyfillNode_http = {
      request: request$1,
      get: get$1,
      Agent: Agent$1,
      METHODS: METHODS$1,
      STATUS_CODES: STATUS_CODES$1
    };

    var _polyfillNode_http$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        request: request$1,
        get: get$1,
        Agent: Agent$1,
        METHODS: METHODS$1,
        STATUS_CODES: STATUS_CODES$1,
        'default': _polyfillNode_http
    });

    var require$$0$1 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_http$1);

    function request(opts, cb) {
      if (typeof opts === 'string')
        opts = urlParse(opts);


      // Normally, the page is loaded from http or https, so not specifying a protocol
      // will result in a (valid) protocol-relative url. However, this won't work if
      // the protocol is something else, like 'file:'
      var defaultProtocol = global$1.location.protocol.search(/^https?:$/) === -1 ? 'http:' : '';

      var protocol = opts.protocol || defaultProtocol;
      var host = opts.hostname || opts.host;
      var port = opts.port;
      var path = opts.path || '/';

      // Necessary for IPv6 addresses
      if (host && host.indexOf(':') !== -1)
        host = '[' + host + ']';

      // This may be a relative url. The browser should always be able to interpret it correctly.
      opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path;
      opts.method = (opts.method || 'GET').toUpperCase();
      opts.headers = opts.headers || {};

      // Also valid opts.auth, opts.mode

      var req = new ClientRequest(opts);
      if (cb)
        req.on('response', cb);
      return req
    }

    function get(opts, cb) {
      var req = request(opts, cb);
      req.end();
      return req
    }

    function Agent() {}
    Agent.defaultMaxSockets = 4;

    var METHODS = [
      'CHECKOUT',
      'CONNECT',
      'COPY',
      'DELETE',
      'GET',
      'HEAD',
      'LOCK',
      'M-SEARCH',
      'MERGE',
      'MKACTIVITY',
      'MKCOL',
      'MOVE',
      'NOTIFY',
      'OPTIONS',
      'PATCH',
      'POST',
      'PROPFIND',
      'PROPPATCH',
      'PURGE',
      'PUT',
      'REPORT',
      'SEARCH',
      'SUBSCRIBE',
      'TRACE',
      'UNLOCK',
      'UNSUBSCRIBE'
    ];
    var STATUS_CODES = {
      100: 'Continue',
      101: 'Switching Protocols',
      102: 'Processing', // RFC 2518, obsoleted by RFC 4918
      200: 'OK',
      201: 'Created',
      202: 'Accepted',
      203: 'Non-Authoritative Information',
      204: 'No Content',
      205: 'Reset Content',
      206: 'Partial Content',
      207: 'Multi-Status', // RFC 4918
      300: 'Multiple Choices',
      301: 'Moved Permanently',
      302: 'Moved Temporarily',
      303: 'See Other',
      304: 'Not Modified',
      305: 'Use Proxy',
      307: 'Temporary Redirect',
      400: 'Bad Request',
      401: 'Unauthorized',
      402: 'Payment Required',
      403: 'Forbidden',
      404: 'Not Found',
      405: 'Method Not Allowed',
      406: 'Not Acceptable',
      407: 'Proxy Authentication Required',
      408: 'Request Time-out',
      409: 'Conflict',
      410: 'Gone',
      411: 'Length Required',
      412: 'Precondition Failed',
      413: 'Request Entity Too Large',
      414: 'Request-URI Too Large',
      415: 'Unsupported Media Type',
      416: 'Requested Range Not Satisfiable',
      417: 'Expectation Failed',
      418: 'I\'m a teapot', // RFC 2324
      422: 'Unprocessable Entity', // RFC 4918
      423: 'Locked', // RFC 4918
      424: 'Failed Dependency', // RFC 4918
      425: 'Unordered Collection', // RFC 4918
      426: 'Upgrade Required', // RFC 2817
      428: 'Precondition Required', // RFC 6585
      429: 'Too Many Requests', // RFC 6585
      431: 'Request Header Fields Too Large', // RFC 6585
      500: 'Internal Server Error',
      501: 'Not Implemented',
      502: 'Bad Gateway',
      503: 'Service Unavailable',
      504: 'Gateway Time-out',
      505: 'HTTP Version Not Supported',
      506: 'Variant Also Negotiates', // RFC 2295
      507: 'Insufficient Storage', // RFC 4918
      509: 'Bandwidth Limit Exceeded',
      510: 'Not Extended', // RFC 2774
      511: 'Network Authentication Required' // RFC 6585
    };

    var _polyfillNode_https = {
      request,
      get,
      Agent,
      METHODS,
      STATUS_CODES
    };

    var _polyfillNode_https$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        request: request,
        get: get,
        Agent: Agent,
        METHODS: METHODS,
        STATUS_CODES: STATUS_CODES,
        'default': _polyfillNode_https
    });

    var require$$1$2 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_https$1);

    var require$$1$1 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_url$1);

    var HTTP_RESOURCE_PATTERN = /^http:\/\//;

    function isHttpResource$1(uri) {
      return HTTP_RESOURCE_PATTERN.test(uri);
    }

    var isHttpResource_1 = isHttpResource$1;

    var HTTPS_RESOURCE_PATTERN = /^https:\/\//;

    function isHttpsResource$1(uri) {
      return HTTPS_RESOURCE_PATTERN.test(uri);
    }

    var isHttpsResource_1 = isHttpsResource$1;

    var http = require$$0$1;
    var https = require$$1$2;
    var url$4 = require$$1$1;

    var isHttpResource = isHttpResource_1;
    var isHttpsResource = isHttpsResource_1;
    var override$1 = override_1;

    var HTTP_PROTOCOL$1 = 'http:';

    function loadRemoteResource$1(uri, inlineRequest, inlineTimeout, callback) {
      var proxyProtocol = inlineRequest.protocol || inlineRequest.hostname;
      var errorHandled = false;
      var requestOptions;
      var fetch;

      requestOptions = override$1(
        url$4.parse(uri),
        inlineRequest || {}
      );

      if (inlineRequest.hostname !== undefined) {
        // overwrite as we always expect a http proxy currently
        requestOptions.protocol = inlineRequest.protocol || HTTP_PROTOCOL$1;
        requestOptions.path = requestOptions.href;
      }

      fetch = (proxyProtocol && !isHttpsResource(proxyProtocol)) || isHttpResource(uri)
        ? http.get
        : https.get;

      fetch(requestOptions, function(res) {
        var chunks = [];
        var movedUri;

        if (errorHandled) {
          return;
        }

        if (res.statusCode < 200 || res.statusCode > 399) {
          return callback(res.statusCode, null);
        } if (res.statusCode > 299) {
          movedUri = url$4.resolve(uri, res.headers.location);
          return loadRemoteResource$1(movedUri, inlineRequest, inlineTimeout, callback);
        }

        res.on('data', function(chunk) {
          chunks.push(chunk.toString());
        });
        res.on('end', function() {
          var body = chunks.join('');
          callback(null, body);
        });
      })
        .on('error', function(res) {
          if (errorHandled) {
            return;
          }

          errorHandled = true;
          callback(res.message, null);
        })
        .on('timeout', function() {
          if (errorHandled) {
            return;
          }

          errorHandled = true;
          callback('timeout', null);
        })
        .setTimeout(inlineTimeout);
    }

    var loadRemoteResource_1 = loadRemoteResource$1;

    var loadRemoteResource = loadRemoteResource_1;

    function fetchFrom$1(callback) {
      return callback || loadRemoteResource;
    }

    var fetch$1 = fetchFrom$1;

    function inlineOptionsFrom(rules) {
      if (Array.isArray(rules)) {
        return rules;
      }

      if (rules === false) {
        return ['none'];
      }

      return undefined === rules
        ? ['local']
        : rules.split(',');
    }

    var inline$1 = inlineOptionsFrom;

    var url$3 = require$$1$1;

    var override = override_1;

    function inlineRequestFrom$1(option) {
      return override(
        /* jshint camelcase: false */
        proxyOptionsFrom(browser$1.env.HTTP_PROXY || browser$1.env.http_proxy),
        option || {}
      );
    }

    function proxyOptionsFrom(httpProxy) {
      return httpProxy
        ? {
          hostname: url$3.parse(httpProxy).hostname,
          port: parseInt(url$3.parse(httpProxy).port)
        }
        : {};
    }

    var inlineRequest = inlineRequestFrom$1;

    var DEFAULT_TIMEOUT = 5000;

    function inlineTimeoutFrom$1(option) {
      return option || DEFAULT_TIMEOUT;
    }

    var inlineTimeout = inlineTimeoutFrom$1;

    function pluginsFrom$1(plugins) {
      var flatPlugins = {
        level1Value: [],
        level1Property: [],
        level2Block: []
      };

      plugins = plugins || [];

      flatPlugins.level1Value = plugins
        .map(function(plugin) { return plugin.level1 && plugin.level1.value; })
        .filter(function(plugin) { return plugin != null; });

      flatPlugins.level1Property = plugins
        .map(function(plugin) { return plugin.level1 && plugin.level1.property; })
        .filter(function(plugin) { return plugin != null; });

      flatPlugins.level2Block = plugins
        .map(function(plugin) { return plugin.level2 && plugin.level2.block; })
        .filter(function(plugin) { return plugin != null; });

      return flatPlugins;
    }

    var plugins = pluginsFrom$1;

    function rebaseFrom$1(rebaseOption, rebaseToOption) {
      if (undefined !== rebaseToOption) {
        return true;
      } if (undefined === rebaseOption) {
        return false;
      }
      return !!rebaseOption;
    }

    var rebase$3 = rebaseFrom$1;

    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    // resolves . and .. elements in a path array with directory names there
    // must be no slashes, empty elements, or device names (c:\) in the array
    // (so also no leading and trailing slashes - it does not distinguish
    // relative and absolute paths)
    function normalizeArray(parts, allowAboveRoot) {
      // if the path tries to go above the root, `up` ends up > 0
      var up = 0;
      for (var i = parts.length - 1; i >= 0; i--) {
        var last = parts[i];
        if (last === '.') {
          parts.splice(i, 1);
        } else if (last === '..') {
          parts.splice(i, 1);
          up++;
        } else if (up) {
          parts.splice(i, 1);
          up--;
        }
      }

      // if the path is allowed to go above the root, restore leading ..s
      if (allowAboveRoot) {
        for (; up--; up) {
          parts.unshift('..');
        }
      }

      return parts;
    }

    // Split a filename into [root, dir, basename, ext], unix version
    // 'root' is just a slash, or nothing.
    var splitPathRe =
        /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
    var splitPath = function(filename) {
      return splitPathRe.exec(filename).slice(1);
    };

    // path.resolve([from ...], to)
    // posix version
    function resolve() {
      var resolvedPath = '',
          resolvedAbsolute = false;

      for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
        var path = (i >= 0) ? arguments[i] : '/';

        // Skip empty and invalid entries
        if (typeof path !== 'string') {
          throw new TypeError('Arguments to path.resolve must be strings');
        } else if (!path) {
          continue;
        }

        resolvedPath = path + '/' + resolvedPath;
        resolvedAbsolute = path.charAt(0) === '/';
      }

      // At this point the path should be resolved to a full absolute path, but
      // handle relative paths to be safe (might happen when process.cwd() fails)

      // Normalize the path
      resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
        return !!p;
      }), !resolvedAbsolute).join('/');

      return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
    }
    // path.normalize(path)
    // posix version
    function normalize$1(path) {
      var isPathAbsolute = isAbsolute$1(path),
          trailingSlash = substr(path, -1) === '/';

      // Normalize the path
      path = normalizeArray(filter(path.split('/'), function(p) {
        return !!p;
      }), !isPathAbsolute).join('/');

      if (!path && !isPathAbsolute) {
        path = '.';
      }
      if (path && trailingSlash) {
        path += '/';
      }

      return (isPathAbsolute ? '/' : '') + path;
    }
    // posix version
    function isAbsolute$1(path) {
      return path.charAt(0) === '/';
    }

    // posix version
    function join() {
      var paths = Array.prototype.slice.call(arguments, 0);
      return normalize$1(filter(paths, function(p, index) {
        if (typeof p !== 'string') {
          throw new TypeError('Arguments to path.join must be strings');
        }
        return p;
      }).join('/'));
    }


    // path.relative(from, to)
    // posix version
    function relative$1(from, to) {
      from = resolve(from).substr(1);
      to = resolve(to).substr(1);

      function trim(arr) {
        var start = 0;
        for (; start < arr.length; start++) {
          if (arr[start] !== '') break;
        }

        var end = arr.length - 1;
        for (; end >= 0; end--) {
          if (arr[end] !== '') break;
        }

        if (start > end) return [];
        return arr.slice(start, end - start + 1);
      }

      var fromParts = trim(from.split('/'));
      var toParts = trim(to.split('/'));

      var length = Math.min(fromParts.length, toParts.length);
      var samePartsLength = length;
      for (var i = 0; i < length; i++) {
        if (fromParts[i] !== toParts[i]) {
          samePartsLength = i;
          break;
        }
      }

      var outputParts = [];
      for (var i = samePartsLength; i < fromParts.length; i++) {
        outputParts.push('..');
      }

      outputParts = outputParts.concat(toParts.slice(samePartsLength));

      return outputParts.join('/');
    }

    var sep = '/';
    var delimiter = ':';

    function dirname(path) {
      var result = splitPath(path),
          root = result[0],
          dir = result[1];

      if (!root && !dir) {
        // No dirname whatsoever
        return '.';
      }

      if (dir) {
        // It has a dirname, strip trailing slash
        dir = dir.substr(0, dir.length - 1);
      }

      return root + dir;
    }

    function basename(path, ext) {
      var f = splitPath(path)[2];
      // TODO: make this comparison case-insensitive on windows?
      if (ext && f.substr(-1 * ext.length) === ext) {
        f = f.substr(0, f.length - ext.length);
      }
      return f;
    }


    function extname(path) {
      return splitPath(path)[3];
    }
    var _polyfillNode_path = {
      extname: extname,
      basename: basename,
      dirname: dirname,
      sep: sep,
      delimiter: delimiter,
      relative: relative$1,
      join: join,
      isAbsolute: isAbsolute$1,
      normalize: normalize$1,
      resolve: resolve
    };
    function filter (xs, f) {
        if (xs.filter) return xs.filter(f);
        var res = [];
        for (var i = 0; i < xs.length; i++) {
            if (f(xs[i], i, xs)) res.push(xs[i]);
        }
        return res;
    }

    // String.prototype.substr - negative index don't work in IE8
    var substr = 'ab'.substr(-1) === 'b' ?
        function (str, start, len) { return str.substr(start, len) } :
        function (str, start, len) {
            if (start < 0) start = str.length + start;
            return str.substr(start, len);
        }
    ;

    var _polyfillNode_path$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        resolve: resolve,
        normalize: normalize$1,
        isAbsolute: isAbsolute$1,
        join: join,
        relative: relative$1,
        sep: sep,
        delimiter: delimiter,
        dirname: dirname,
        basename: basename,
        extname: extname,
        'default': _polyfillNode_path
    });

    var require$$1 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_path$1);

    var path$7 = require$$1;

    function rebaseToFrom$1(option) {
      return option ? path$7.resolve(option) : browser$1.cwd();
    }

    var rebaseTo = rebaseToFrom$1;

    var sourceMap = {};

    var sourceMapGenerator = {};

    var base64Vlq = {};

    var base64$1 = {};

    /* -*- Mode: js; js-indent-level: 2; -*- */

    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */

    const intToCharMap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");

    /**
     * Encode an integer in the range of 0 to 63 to a single base 64 digit.
     */
    base64$1.encode = function(number) {
      if (0 <= number && number < intToCharMap.length) {
        return intToCharMap[number];
      }
      throw new TypeError("Must be between 0 and 63: " + number);
    };

    /* -*- Mode: js; js-indent-level: 2; -*- */

    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     *
     * Based on the Base 64 VLQ implementation in Closure Compiler:
     * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
     *
     * Copyright 2011 The Closure Compiler Authors. All rights reserved.
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     *  * Redistributions of source code must retain the above copyright
     *    notice, this list of conditions and the following disclaimer.
     *  * Redistributions in binary form must reproduce the above
     *    copyright notice, this list of conditions and the following
     *    disclaimer in the documentation and/or other materials provided
     *    with the distribution.
     *  * Neither the name of Google Inc. nor the names of its
     *    contributors may be used to endorse or promote products derived
     *    from this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
     * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
     * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */

    const base64 = base64$1;

    // A single base 64 digit can contain 6 bits of data. For the base 64 variable
    // length quantities we use in the source map spec, the first bit is the sign,
    // the next four bits are the actual value, and the 6th bit is the
    // continuation bit. The continuation bit tells us whether there are more
    // digits in this value following this digit.
    //
    //   Continuation
    //   |    Sign
    //   |    |
    //   V    V
    //   101011

    const VLQ_BASE_SHIFT = 5;

    // binary: 100000
    const VLQ_BASE = 1 << VLQ_BASE_SHIFT;

    // binary: 011111
    const VLQ_BASE_MASK = VLQ_BASE - 1;

    // binary: 100000
    const VLQ_CONTINUATION_BIT = VLQ_BASE;

    /**
     * Converts from a two-complement value to a value where the sign bit is
     * placed in the least significant bit.  For example, as decimals:
     *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
     *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
     */
    function toVLQSigned(aValue) {
      return aValue < 0
        ? ((-aValue) << 1) + 1
        : (aValue << 1) + 0;
    }

    /**
     * Returns the base 64 VLQ encoded value.
     */
    base64Vlq.encode = function base64VLQ_encode(aValue) {
      let encoded = "";
      let digit;

      let vlq = toVLQSigned(aValue);

      do {
        digit = vlq & VLQ_BASE_MASK;
        vlq >>>= VLQ_BASE_SHIFT;
        if (vlq > 0) {
          // There are still more digits in this value, so we must make sure the
          // continuation bit is marked.
          digit |= VLQ_CONTINUATION_BIT;
        }
        encoded += base64.encode(digit);
      } while (vlq > 0);

      return encoded;
    };

    var util$4 = {};

    /* -*- Mode: js; js-indent-level: 2; -*- */

    (function (exports) {
    	/*
    	 * Copyright 2011 Mozilla Foundation and contributors
    	 * Licensed under the New BSD license. See LICENSE or:
    	 * http://opensource.org/licenses/BSD-3-Clause
    	 */

    	/**
    	 * This is a helper function for getting values from parameter/options
    	 * objects.
    	 *
    	 * @param args The object we are extracting values from
    	 * @param name The name of the property we are getting.
    	 * @param defaultValue An optional value to return if the property is missing
    	 * from the object. If this is not specified and the property is missing, an
    	 * error will be thrown.
    	 */
    	function getArg(aArgs, aName, aDefaultValue) {
    	  if (aName in aArgs) {
    	    return aArgs[aName];
    	  } else if (arguments.length === 3) {
    	    return aDefaultValue;
    	  }
    	    throw new Error('"' + aName + '" is a required argument.');

    	}
    	exports.getArg = getArg;

    	const urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
    	const dataUrlRegexp = /^data:.+\,.+$/;

    	function urlParse(aUrl) {
    	  const match = aUrl.match(urlRegexp);
    	  if (!match) {
    	    return null;
    	  }
    	  return {
    	    scheme: match[1],
    	    auth: match[2],
    	    host: match[3],
    	    port: match[4],
    	    path: match[5]
    	  };
    	}
    	exports.urlParse = urlParse;

    	function urlGenerate(aParsedUrl) {
    	  let url = "";
    	  if (aParsedUrl.scheme) {
    	    url += aParsedUrl.scheme + ":";
    	  }
    	  url += "//";
    	  if (aParsedUrl.auth) {
    	    url += aParsedUrl.auth + "@";
    	  }
    	  if (aParsedUrl.host) {
    	    url += aParsedUrl.host;
    	  }
    	  if (aParsedUrl.port) {
    	    url += ":" + aParsedUrl.port;
    	  }
    	  if (aParsedUrl.path) {
    	    url += aParsedUrl.path;
    	  }
    	  return url;
    	}
    	exports.urlGenerate = urlGenerate;

    	const MAX_CACHED_INPUTS = 32;

    	/**
    	 * Takes some function `f(input) -> result` and returns a memoized version of
    	 * `f`.
    	 *
    	 * We keep at most `MAX_CACHED_INPUTS` memoized results of `f` alive. The
    	 * memoization is a dumb-simple, linear least-recently-used cache.
    	 */
    	function lruMemoize(f) {
    	  const cache = [];

    	  return function(input) {
    	    for (let i = 0; i < cache.length; i++) {
    	      if (cache[i].input === input) {
    	        const temp = cache[0];
    	        cache[0] = cache[i];
    	        cache[i] = temp;
    	        return cache[0].result;
    	      }
    	    }

    	    const result = f(input);

    	    cache.unshift({
    	      input,
    	      result,
    	    });

    	    if (cache.length > MAX_CACHED_INPUTS) {
    	      cache.pop();
    	    }

    	    return result;
    	  };
    	}

    	/**
    	 * Normalizes a path, or the path portion of a URL:
    	 *
    	 * - Replaces consecutive slashes with one slash.
    	 * - Removes unnecessary '.' parts.
    	 * - Removes unnecessary '<dir>/..' parts.
    	 *
    	 * Based on code in the Node.js 'path' core module.
    	 *
    	 * @param aPath The path or url to normalize.
    	 */
    	const normalize = lruMemoize(function normalize(aPath) {
    	  let path = aPath;
    	  const url = urlParse(aPath);
    	  if (url) {
    	    if (!url.path) {
    	      return aPath;
    	    }
    	    path = url.path;
    	  }
    	  const isAbsolute = exports.isAbsolute(path);

    	  // Split the path into parts between `/` characters. This is much faster than
    	  // using `.split(/\/+/g)`.
    	  const parts = [];
    	  let start = 0;
    	  let i = 0;
    	  while (true) {
    	    start = i;
    	    i = path.indexOf("/", start);
    	    if (i === -1) {
    	      parts.push(path.slice(start));
    	      break;
    	    } else {
    	      parts.push(path.slice(start, i));
    	      while (i < path.length && path[i] === "/") {
    	        i++;
    	      }
    	    }
    	  }

    	  let up = 0;
    	  for (i = parts.length - 1; i >= 0; i--) {
    	    const part = parts[i];
    	    if (part === ".") {
    	      parts.splice(i, 1);
    	    } else if (part === "..") {
    	      up++;
    	    } else if (up > 0) {
    	      if (part === "") {
    	        // The first part is blank if the path is absolute. Trying to go
    	        // above the root is a no-op. Therefore we can remove all '..' parts
    	        // directly after the root.
    	        parts.splice(i + 1, up);
    	        up = 0;
    	      } else {
    	        parts.splice(i, 2);
    	        up--;
    	      }
    	    }
    	  }
    	  path = parts.join("/");

    	  if (path === "") {
    	    path = isAbsolute ? "/" : ".";
    	  }

    	  if (url) {
    	    url.path = path;
    	    return urlGenerate(url);
    	  }
    	  return path;
    	});
    	exports.normalize = normalize;

    	/**
    	 * Joins two paths/URLs.
    	 *
    	 * @param aRoot The root path or URL.
    	 * @param aPath The path or URL to be joined with the root.
    	 *
    	 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
    	 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
    	 *   first.
    	 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
    	 *   is updated with the result and aRoot is returned. Otherwise the result
    	 *   is returned.
    	 *   - If aPath is absolute, the result is aPath.
    	 *   - Otherwise the two paths are joined with a slash.
    	 * - Joining for example 'http://' and 'www.example.com' is also supported.
    	 */
    	function join(aRoot, aPath) {
    	  if (aRoot === "") {
    	    aRoot = ".";
    	  }
    	  if (aPath === "") {
    	    aPath = ".";
    	  }
    	  const aPathUrl = urlParse(aPath);
    	  const aRootUrl = urlParse(aRoot);
    	  if (aRootUrl) {
    	    aRoot = aRootUrl.path || "/";
    	  }

    	  // `join(foo, '//www.example.org')`
    	  if (aPathUrl && !aPathUrl.scheme) {
    	    if (aRootUrl) {
    	      aPathUrl.scheme = aRootUrl.scheme;
    	    }
    	    return urlGenerate(aPathUrl);
    	  }

    	  if (aPathUrl || aPath.match(dataUrlRegexp)) {
    	    return aPath;
    	  }

    	  // `join('http://', 'www.example.com')`
    	  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
    	    aRootUrl.host = aPath;
    	    return urlGenerate(aRootUrl);
    	  }

    	  const joined = aPath.charAt(0) === "/"
    	    ? aPath
    	    : normalize(aRoot.replace(/\/+$/, "") + "/" + aPath);

    	  if (aRootUrl) {
    	    aRootUrl.path = joined;
    	    return urlGenerate(aRootUrl);
    	  }
    	  return joined;
    	}
    	exports.join = join;

    	exports.isAbsolute = function(aPath) {
    	  return aPath.charAt(0) === "/" || urlRegexp.test(aPath);
    	};

    	/**
    	 * Make a path relative to a URL or another path.
    	 *
    	 * @param aRoot The root path or URL.
    	 * @param aPath The path or URL to be made relative to aRoot.
    	 */
    	function relative(aRoot, aPath) {
    	  if (aRoot === "") {
    	    aRoot = ".";
    	  }

    	  aRoot = aRoot.replace(/\/$/, "");

    	  // It is possible for the path to be above the root. In this case, simply
    	  // checking whether the root is a prefix of the path won't work. Instead, we
    	  // need to remove components from the root one by one, until either we find
    	  // a prefix that fits, or we run out of components to remove.
    	  let level = 0;
    	  while (aPath.indexOf(aRoot + "/") !== 0) {
    	    const index = aRoot.lastIndexOf("/");
    	    if (index < 0) {
    	      return aPath;
    	    }

    	    // If the only part of the root that is left is the scheme (i.e. http://,
    	    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
    	    // have exhausted all components, so the path is not relative to the root.
    	    aRoot = aRoot.slice(0, index);
    	    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
    	      return aPath;
    	    }

    	    ++level;
    	  }

    	  // Make sure we add a "../" for each component we removed from the root.
    	  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
    	}
    	exports.relative = relative;

    	const supportsNullProto = (function() {
    	  const obj = Object.create(null);
    	  return !("__proto__" in obj);
    	}());

    	function identity(s) {
    	  return s;
    	}

    	/**
    	 * Because behavior goes wacky when you set `__proto__` on objects, we
    	 * have to prefix all the strings in our set with an arbitrary character.
    	 *
    	 * See https://github.com/mozilla/source-map/pull/31 and
    	 * https://github.com/mozilla/source-map/issues/30
    	 *
    	 * @param String aStr
    	 */
    	function toSetString(aStr) {
    	  if (isProtoString(aStr)) {
    	    return "$" + aStr;
    	  }

    	  return aStr;
    	}
    	exports.toSetString = supportsNullProto ? identity : toSetString;

    	function fromSetString(aStr) {
    	  if (isProtoString(aStr)) {
    	    return aStr.slice(1);
    	  }

    	  return aStr;
    	}
    	exports.fromSetString = supportsNullProto ? identity : fromSetString;

    	function isProtoString(s) {
    	  if (!s) {
    	    return false;
    	  }

    	  const length = s.length;

    	  if (length < 9 /* "__proto__".length */) {
    	    return false;
    	  }

    	  /* eslint-disable no-multi-spaces */
    	  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
    	      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
    	      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
    	      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
    	      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
    	      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
    	      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
    	      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
    	      s.charCodeAt(length - 9) !== 95  /* '_' */) {
    	    return false;
    	  }
    	  /* eslint-enable no-multi-spaces */

    	  for (let i = length - 10; i >= 0; i--) {
    	    if (s.charCodeAt(i) !== 36 /* '$' */) {
    	      return false;
    	    }
    	  }

    	  return true;
    	}

    	/**
    	 * Comparator between two mappings where the original positions are compared.
    	 *
    	 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
    	 * mappings with the same original source/line/column, but different generated
    	 * line and column the same. Useful when searching for a mapping with a
    	 * stubbed out mapping.
    	 */
    	function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
    	  let cmp = strcmp(mappingA.source, mappingB.source);
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  cmp = mappingA.originalLine - mappingB.originalLine;
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  cmp = mappingA.originalColumn - mappingB.originalColumn;
    	  if (cmp !== 0 || onlyCompareOriginal) {
    	    return cmp;
    	  }

    	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  cmp = mappingA.generatedLine - mappingB.generatedLine;
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  return strcmp(mappingA.name, mappingB.name);
    	}
    	exports.compareByOriginalPositions = compareByOriginalPositions;

    	/**
    	 * Comparator between two mappings with deflated source and name indices where
    	 * the generated positions are compared.
    	 *
    	 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
    	 * mappings with the same generated line and column, but different
    	 * source/name/original line and column the same. Useful when searching for a
    	 * mapping with a stubbed out mapping.
    	 */
    	function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
    	  let cmp = mappingA.generatedLine - mappingB.generatedLine;
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    	  if (cmp !== 0 || onlyCompareGenerated) {
    	    return cmp;
    	  }

    	  cmp = strcmp(mappingA.source, mappingB.source);
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  cmp = mappingA.originalLine - mappingB.originalLine;
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  cmp = mappingA.originalColumn - mappingB.originalColumn;
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  return strcmp(mappingA.name, mappingB.name);
    	}
    	exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

    	function strcmp(aStr1, aStr2) {
    	  if (aStr1 === aStr2) {
    	    return 0;
    	  }

    	  if (aStr1 === null) {
    	    return 1; // aStr2 !== null
    	  }

    	  if (aStr2 === null) {
    	    return -1; // aStr1 !== null
    	  }

    	  if (aStr1 > aStr2) {
    	    return 1;
    	  }

    	  return -1;
    	}

    	/**
    	 * Comparator between two mappings with inflated source and name strings where
    	 * the generated positions are compared.
    	 */
    	function compareByGeneratedPositionsInflated(mappingA, mappingB) {
    	  let cmp = mappingA.generatedLine - mappingB.generatedLine;
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  cmp = strcmp(mappingA.source, mappingB.source);
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  cmp = mappingA.originalLine - mappingB.originalLine;
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  cmp = mappingA.originalColumn - mappingB.originalColumn;
    	  if (cmp !== 0) {
    	    return cmp;
    	  }

    	  return strcmp(mappingA.name, mappingB.name);
    	}
    	exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

    	/**
    	 * Strip any JSON XSSI avoidance prefix from the string (as documented
    	 * in the source maps specification), and then parse the string as
    	 * JSON.
    	 */
    	function parseSourceMapInput(str) {
    	  return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ""));
    	}
    	exports.parseSourceMapInput = parseSourceMapInput;

    	/**
    	 * Compute the URL of a source given the the source root, the source's
    	 * URL, and the source map's URL.
    	 */
    	function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
    	  sourceURL = sourceURL || "";

    	  if (sourceRoot) {
    	    // This follows what Chrome does.
    	    if (sourceRoot[sourceRoot.length - 1] !== "/" && sourceURL[0] !== "/") {
    	      sourceRoot += "/";
    	    }
    	    // The spec says:
    	    //   Line 4: An optional source root, useful for relocating source
    	    //   files on a server or removing repeated values in the
    	    //   “sources” entry.  This value is prepended to the individual
    	    //   entries in the “source” field.
    	    sourceURL = sourceRoot + sourceURL;
    	  }

    	  // Historically, SourceMapConsumer did not take the sourceMapURL as
    	  // a parameter.  This mode is still somewhat supported, which is why
    	  // this code block is conditional.  However, it's preferable to pass
    	  // the source map URL to SourceMapConsumer, so that this function
    	  // can implement the source URL resolution algorithm as outlined in
    	  // the spec.  This block is basically the equivalent of:
    	  //    new URL(sourceURL, sourceMapURL).toString()
    	  // ... except it avoids using URL, which wasn't available in the
    	  // older releases of node still supported by this library.
    	  //
    	  // The spec says:
    	  //   If the sources are not absolute URLs after prepending of the
    	  //   “sourceRoot”, the sources are resolved relative to the
    	  //   SourceMap (like resolving script src in a html document).
    	  if (sourceMapURL) {
    	    const parsed = urlParse(sourceMapURL);
    	    if (!parsed) {
    	      throw new Error("sourceMapURL could not be parsed");
    	    }
    	    if (parsed.path) {
    	      // Strip the last path component, but keep the "/".
    	      const index = parsed.path.lastIndexOf("/");
    	      if (index >= 0) {
    	        parsed.path = parsed.path.substring(0, index + 1);
    	      }
    	    }
    	    sourceURL = join(urlGenerate(parsed), sourceURL);
    	  }

    	  return normalize(sourceURL);
    	}
    	exports.computeSourceURL = computeSourceURL; 
    } (util$4));

    var arraySet = {};

    /* -*- Mode: js; js-indent-level: 2; -*- */

    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */

    /**
     * A data structure which is a combination of an array and a set. Adding a new
     * member is O(1), testing for membership is O(1), and finding the index of an
     * element is O(1). Removing elements from the set is not supported. Only
     * strings are supported for membership.
     */
    class ArraySet$2 {
      constructor() {
        this._array = [];
        this._set = new Map();
      }

      /**
       * Static method for creating ArraySet instances from an existing array.
       */
      static fromArray(aArray, aAllowDuplicates) {
        const set = new ArraySet$2();
        for (let i = 0, len = aArray.length; i < len; i++) {
          set.add(aArray[i], aAllowDuplicates);
        }
        return set;
      }

      /**
       * Return how many unique items are in this ArraySet. If duplicates have been
       * added, than those do not count towards the size.
       *
       * @returns Number
       */
      size() {
        return this._set.size;
      }

      /**
       * Add the given string to this set.
       *
       * @param String aStr
       */
      add(aStr, aAllowDuplicates) {
        const isDuplicate = this.has(aStr);
        const idx = this._array.length;
        if (!isDuplicate || aAllowDuplicates) {
          this._array.push(aStr);
        }
        if (!isDuplicate) {
          this._set.set(aStr, idx);
        }
      }

      /**
       * Is the given string a member of this set?
       *
       * @param String aStr
       */
      has(aStr) {
          return this._set.has(aStr);
      }

      /**
       * What is the index of the given string in the array?
       *
       * @param String aStr
       */
      indexOf(aStr) {
        const idx = this._set.get(aStr);
        if (idx >= 0) {
            return idx;
        }
        throw new Error('"' + aStr + '" is not in the set.');
      }

      /**
       * What is the element at the given index?
       *
       * @param Number aIdx
       */
      at(aIdx) {
        if (aIdx >= 0 && aIdx < this._array.length) {
          return this._array[aIdx];
        }
        throw new Error("No element indexed by " + aIdx);
      }

      /**
       * Returns the array representation of this set (which has the proper indices
       * indicated by indexOf). Note that this is a copy of the internal array used
       * for storing the members so that no one can mess with internal state.
       */
      toArray() {
        return this._array.slice();
      }
    }
    arraySet.ArraySet = ArraySet$2;

    var mappingList = {};

    /* -*- Mode: js; js-indent-level: 2; -*- */

    /*
     * Copyright 2014 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */

    const util$3 = util$4;

    /**
     * Determine whether mappingB is after mappingA with respect to generated
     * position.
     */
    function generatedPositionAfter(mappingA, mappingB) {
      // Optimized for most common case
      const lineA = mappingA.generatedLine;
      const lineB = mappingB.generatedLine;
      const columnA = mappingA.generatedColumn;
      const columnB = mappingB.generatedColumn;
      return lineB > lineA || lineB == lineA && columnB >= columnA ||
             util$3.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
    }

    /**
     * A data structure to provide a sorted view of accumulated mappings in a
     * performance conscious manner. It trades a negligible overhead in general
     * case for a large speedup in case of mappings being added in order.
     */
    class MappingList$1 {
      constructor() {
        this._array = [];
        this._sorted = true;
        // Serves as infimum
        this._last = {generatedLine: -1, generatedColumn: 0};
      }

      /**
       * Iterate through internal items. This method takes the same arguments that
       * `Array.prototype.forEach` takes.
       *
       * NOTE: The order of the mappings is NOT guaranteed.
       */
      unsortedForEach(aCallback, aThisArg) {
        this._array.forEach(aCallback, aThisArg);
      }

      /**
       * Add the given source mapping.
       *
       * @param Object aMapping
       */
      add(aMapping) {
        if (generatedPositionAfter(this._last, aMapping)) {
          this._last = aMapping;
          this._array.push(aMapping);
        } else {
          this._sorted = false;
          this._array.push(aMapping);
        }
      }

      /**
       * Returns the flat, sorted array of mappings. The mappings are sorted by
       * generated position.
       *
       * WARNING: This method returns internal data without copying, for
       * performance. The return value must NOT be mutated, and should be treated as
       * an immutable borrow. If you want to take ownership, you must make your own
       * copy.
       */
      toArray() {
        if (!this._sorted) {
          this._array.sort(util$3.compareByGeneratedPositionsInflated);
          this._sorted = true;
        }
        return this._array;
      }
    }

    mappingList.MappingList = MappingList$1;

    /* -*- Mode: js; js-indent-level: 2; -*- */

    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */

    const base64VLQ = base64Vlq;
    const util$2 = util$4;
    const ArraySet$1 = arraySet.ArraySet;
    const MappingList = mappingList.MappingList;

    /**
     * An instance of the SourceMapGenerator represents a source map which is
     * being built incrementally. You may pass an object with the following
     * properties:
     *
     *   - file: The filename of the generated source.
     *   - sourceRoot: A root for all relative URLs in this source map.
     */
    class SourceMapGenerator$2 {
      constructor(aArgs) {
        if (!aArgs) {
          aArgs = {};
        }
        this._file = util$2.getArg(aArgs, "file", null);
        this._sourceRoot = util$2.getArg(aArgs, "sourceRoot", null);
        this._skipValidation = util$2.getArg(aArgs, "skipValidation", false);
        this._sources = new ArraySet$1();
        this._names = new ArraySet$1();
        this._mappings = new MappingList();
        this._sourcesContents = null;
      }

      /**
       * Creates a new SourceMapGenerator based on a SourceMapConsumer
       *
       * @param aSourceMapConsumer The SourceMap.
       */
      static fromSourceMap(aSourceMapConsumer) {
        const sourceRoot = aSourceMapConsumer.sourceRoot;
        const generator = new SourceMapGenerator$2({
          file: aSourceMapConsumer.file,
          sourceRoot
        });
        aSourceMapConsumer.eachMapping(function(mapping) {
          const newMapping = {
            generated: {
              line: mapping.generatedLine,
              column: mapping.generatedColumn
            }
          };

          if (mapping.source != null) {
            newMapping.source = mapping.source;
            if (sourceRoot != null) {
              newMapping.source = util$2.relative(sourceRoot, newMapping.source);
            }

            newMapping.original = {
              line: mapping.originalLine,
              column: mapping.originalColumn
            };

            if (mapping.name != null) {
              newMapping.name = mapping.name;
            }
          }

          generator.addMapping(newMapping);
        });
        aSourceMapConsumer.sources.forEach(function(sourceFile) {
          let sourceRelative = sourceFile;
          if (sourceRoot !== null) {
            sourceRelative = util$2.relative(sourceRoot, sourceFile);
          }

          if (!generator._sources.has(sourceRelative)) {
            generator._sources.add(sourceRelative);
          }

          const content = aSourceMapConsumer.sourceContentFor(sourceFile);
          if (content != null) {
            generator.setSourceContent(sourceFile, content);
          }
        });
        return generator;
      }

      /**
       * Add a single mapping from original source line and column to the generated
       * source's line and column for this source map being created. The mapping
       * object should have the following properties:
       *
       *   - generated: An object with the generated line and column positions.
       *   - original: An object with the original line and column positions.
       *   - source: The original source file (relative to the sourceRoot).
       *   - name: An optional original token name for this mapping.
       */
      addMapping(aArgs) {
        const generated = util$2.getArg(aArgs, "generated");
        const original = util$2.getArg(aArgs, "original", null);
        let source = util$2.getArg(aArgs, "source", null);
        let name = util$2.getArg(aArgs, "name", null);

        if (!this._skipValidation) {
          this._validateMapping(generated, original, source, name);
        }

        if (source != null) {
          source = String(source);
          if (!this._sources.has(source)) {
            this._sources.add(source);
          }
        }

        if (name != null) {
          name = String(name);
          if (!this._names.has(name)) {
            this._names.add(name);
          }
        }

        this._mappings.add({
          generatedLine: generated.line,
          generatedColumn: generated.column,
          originalLine: original != null && original.line,
          originalColumn: original != null && original.column,
          source,
          name
        });
      }

      /**
       * Set the source content for a source file.
       */
      setSourceContent(aSourceFile, aSourceContent) {
        let source = aSourceFile;
        if (this._sourceRoot != null) {
          source = util$2.relative(this._sourceRoot, source);
        }

        if (aSourceContent != null) {
          // Add the source content to the _sourcesContents map.
          // Create a new _sourcesContents map if the property is null.
          if (!this._sourcesContents) {
            this._sourcesContents = Object.create(null);
          }
          this._sourcesContents[util$2.toSetString(source)] = aSourceContent;
        } else if (this._sourcesContents) {
          // Remove the source file from the _sourcesContents map.
          // If the _sourcesContents map is empty, set the property to null.
          delete this._sourcesContents[util$2.toSetString(source)];
          if (Object.keys(this._sourcesContents).length === 0) {
            this._sourcesContents = null;
          }
        }
      }

      /**
       * Applies the mappings of a sub-source-map for a specific source file to the
       * source map being generated. Each mapping to the supplied source file is
       * rewritten using the supplied source map. Note: The resolution for the
       * resulting mappings is the minimium of this map and the supplied map.
       *
       * @param aSourceMapConsumer The source map to be applied.
       * @param aSourceFile Optional. The filename of the source file.
       *        If omitted, SourceMapConsumer's file property will be used.
       * @param aSourceMapPath Optional. The dirname of the path to the source map
       *        to be applied. If relative, it is relative to the SourceMapConsumer.
       *        This parameter is needed when the two source maps aren't in the same
       *        directory, and the source map to be applied contains relative source
       *        paths. If so, those relative source paths need to be rewritten
       *        relative to the SourceMapGenerator.
       */
      applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
        let sourceFile = aSourceFile;
        // If aSourceFile is omitted, we will use the file property of the SourceMap
        if (aSourceFile == null) {
          if (aSourceMapConsumer.file == null) {
            throw new Error(
              "SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, " +
              'or the source map\'s "file" property. Both were omitted.'
            );
          }
          sourceFile = aSourceMapConsumer.file;
        }
        const sourceRoot = this._sourceRoot;
        // Make "sourceFile" relative if an absolute Url is passed.
        if (sourceRoot != null) {
          sourceFile = util$2.relative(sourceRoot, sourceFile);
        }
        // Applying the SourceMap can add and remove items from the sources and
        // the names array.
        const newSources = this._mappings.toArray().length > 0
          ? new ArraySet$1()
          : this._sources;
        const newNames = new ArraySet$1();

        // Find mappings for the "sourceFile"
        this._mappings.unsortedForEach(function(mapping) {
          if (mapping.source === sourceFile && mapping.originalLine != null) {
            // Check if it can be mapped by the source map, then update the mapping.
            const original = aSourceMapConsumer.originalPositionFor({
              line: mapping.originalLine,
              column: mapping.originalColumn
            });
            if (original.source != null) {
              // Copy mapping
              mapping.source = original.source;
              if (aSourceMapPath != null) {
                mapping.source = util$2.join(aSourceMapPath, mapping.source);
              }
              if (sourceRoot != null) {
                mapping.source = util$2.relative(sourceRoot, mapping.source);
              }
              mapping.originalLine = original.line;
              mapping.originalColumn = original.column;
              if (original.name != null) {
                mapping.name = original.name;
              }
            }
          }

          const source = mapping.source;
          if (source != null && !newSources.has(source)) {
            newSources.add(source);
          }

          const name = mapping.name;
          if (name != null && !newNames.has(name)) {
            newNames.add(name);
          }

        }, this);
        this._sources = newSources;
        this._names = newNames;

        // Copy sourcesContents of applied map.
        aSourceMapConsumer.sources.forEach(function(srcFile) {
          const content = aSourceMapConsumer.sourceContentFor(srcFile);
          if (content != null) {
            if (aSourceMapPath != null) {
              srcFile = util$2.join(aSourceMapPath, srcFile);
            }
            if (sourceRoot != null) {
              srcFile = util$2.relative(sourceRoot, srcFile);
            }
            this.setSourceContent(srcFile, content);
          }
        }, this);
      }

      /**
       * A mapping can have one of the three levels of data:
       *
       *   1. Just the generated position.
       *   2. The Generated position, original position, and original source.
       *   3. Generated and original position, original source, as well as a name
       *      token.
       *
       * To maintain consistency, we validate that any new mapping being added falls
       * in to one of these categories.
       */
      _validateMapping(aGenerated, aOriginal, aSource, aName) {
        // When aOriginal is truthy but has empty values for .line and .column,
        // it is most likely a programmer error. In this case we throw a very
        // specific error message to try to guide them the right way.
        // For example: https://github.com/Polymer/polymer-bundler/pull/519
        if (aOriginal && typeof aOriginal.line !== "number" && typeof aOriginal.column !== "number") {
            throw new Error(
                "original.line and original.column are not numbers -- you probably meant to omit " +
                "the original mapping entirely and only map the generated position. If so, pass " +
                "null for the original mapping instead of an object with empty or null values."
            );
        }

        if (aGenerated && "line" in aGenerated && "column" in aGenerated
            && aGenerated.line > 0 && aGenerated.column >= 0
            && !aOriginal && !aSource && !aName) ; else if (aGenerated && "line" in aGenerated && "column" in aGenerated
                 && aOriginal && "line" in aOriginal && "column" in aOriginal
                 && aGenerated.line > 0 && aGenerated.column >= 0
                 && aOriginal.line > 0 && aOriginal.column >= 0
                 && aSource) ; else {
          throw new Error("Invalid mapping: " + JSON.stringify({
            generated: aGenerated,
            source: aSource,
            original: aOriginal,
            name: aName
          }));
        }
      }

      /**
       * Serialize the accumulated mappings in to the stream of base 64 VLQs
       * specified by the source map format.
       */
      _serializeMappings() {
        let previousGeneratedColumn = 0;
        let previousGeneratedLine = 1;
        let previousOriginalColumn = 0;
        let previousOriginalLine = 0;
        let previousName = 0;
        let previousSource = 0;
        let result = "";
        let next;
        let mapping;
        let nameIdx;
        let sourceIdx;

        const mappings = this._mappings.toArray();
        for (let i = 0, len = mappings.length; i < len; i++) {
          mapping = mappings[i];
          next = "";

          if (mapping.generatedLine !== previousGeneratedLine) {
            previousGeneratedColumn = 0;
            while (mapping.generatedLine !== previousGeneratedLine) {
              next += ";";
              previousGeneratedLine++;
            }
          } else if (i > 0) {
            if (!util$2.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
              continue;
            }
            next += ",";
          }

          next += base64VLQ.encode(mapping.generatedColumn
                                     - previousGeneratedColumn);
          previousGeneratedColumn = mapping.generatedColumn;

          if (mapping.source != null) {
            sourceIdx = this._sources.indexOf(mapping.source);
            next += base64VLQ.encode(sourceIdx - previousSource);
            previousSource = sourceIdx;

            // lines are stored 0-based in SourceMap spec version 3
            next += base64VLQ.encode(mapping.originalLine - 1
                                       - previousOriginalLine);
            previousOriginalLine = mapping.originalLine - 1;

            next += base64VLQ.encode(mapping.originalColumn
                                       - previousOriginalColumn);
            previousOriginalColumn = mapping.originalColumn;

            if (mapping.name != null) {
              nameIdx = this._names.indexOf(mapping.name);
              next += base64VLQ.encode(nameIdx - previousName);
              previousName = nameIdx;
            }
          }

          result += next;
        }

        return result;
      }

      _generateSourcesContent(aSources, aSourceRoot) {
        return aSources.map(function(source) {
          if (!this._sourcesContents) {
            return null;
          }
          if (aSourceRoot != null) {
            source = util$2.relative(aSourceRoot, source);
          }
          const key = util$2.toSetString(source);
          return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
            ? this._sourcesContents[key]
            : null;
        }, this);
      }

      /**
       * Externalize the source map.
       */
      toJSON() {
        const map = {
          version: this._version,
          sources: this._sources.toArray(),
          names: this._names.toArray(),
          mappings: this._serializeMappings()
        };
        if (this._file != null) {
          map.file = this._file;
        }
        if (this._sourceRoot != null) {
          map.sourceRoot = this._sourceRoot;
        }
        if (this._sourcesContents) {
          map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
        }

        return map;
      }

      /**
       * Render the source map being generated to a string.
       */
      toString() {
        return JSON.stringify(this.toJSON());
      }
    }

    SourceMapGenerator$2.prototype._version = 3;
    sourceMapGenerator.SourceMapGenerator = SourceMapGenerator$2;

    var sourceMapConsumer = {};

    var binarySearch$1 = {};

    /* -*- Mode: js; js-indent-level: 2; -*- */

    (function (exports) {
    	/*
    	 * Copyright 2011 Mozilla Foundation and contributors
    	 * Licensed under the New BSD license. See LICENSE or:
    	 * http://opensource.org/licenses/BSD-3-Clause
    	 */

    	exports.GREATEST_LOWER_BOUND = 1;
    	exports.LEAST_UPPER_BOUND = 2;

    	/**
    	 * Recursive implementation of binary search.
    	 *
    	 * @param aLow Indices here and lower do not contain the needle.
    	 * @param aHigh Indices here and higher do not contain the needle.
    	 * @param aNeedle The element being searched for.
    	 * @param aHaystack The non-empty array being searched.
    	 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
    	 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
    	 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
    	 *     closest element that is smaller than or greater than the one we are
    	 *     searching for, respectively, if the exact element cannot be found.
    	 */
    	function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
    	  // This function terminates when one of the following is true:
    	  //
    	  //   1. We find the exact element we are looking for.
    	  //
    	  //   2. We did not find the exact element, but we can return the index of
    	  //      the next-closest element.
    	  //
    	  //   3. We did not find the exact element, and there is no next-closest
    	  //      element than the one we are searching for, so we return -1.
    	  const mid = Math.floor((aHigh - aLow) / 2) + aLow;
    	  const cmp = aCompare(aNeedle, aHaystack[mid], true);
    	  if (cmp === 0) {
    	    // Found the element we are looking for.
    	    return mid;
    	  } else if (cmp > 0) {
    	    // Our needle is greater than aHaystack[mid].
    	    if (aHigh - mid > 1) {
    	      // The element is in the upper half.
    	      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
    	    }

    	    // The exact needle element was not found in this haystack. Determine if
    	    // we are in termination case (3) or (2) and return the appropriate thing.
    	    if (aBias == exports.LEAST_UPPER_BOUND) {
    	      return aHigh < aHaystack.length ? aHigh : -1;
    	    }
    	    return mid;
    	  }

    	  // Our needle is less than aHaystack[mid].
    	  if (mid - aLow > 1) {
    	    // The element is in the lower half.
    	    return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
    	  }

    	  // we are in termination case (3) or (2) and return the appropriate thing.
    	  if (aBias == exports.LEAST_UPPER_BOUND) {
    	    return mid;
    	  }
    	  return aLow < 0 ? -1 : aLow;
    	}

    	/**
    	 * This is an implementation of binary search which will always try and return
    	 * the index of the closest element if there is no exact hit. This is because
    	 * mappings between original and generated line/col pairs are single points,
    	 * and there is an implicit region between each of them, so a miss just means
    	 * that you aren't on the very start of a region.
    	 *
    	 * @param aNeedle The element you are looking for.
    	 * @param aHaystack The array that is being searched.
    	 * @param aCompare A function which takes the needle and an element in the
    	 *     array and returns -1, 0, or 1 depending on whether the needle is less
    	 *     than, equal to, or greater than the element, respectively.
    	 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
    	 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
    	 *     closest element that is smaller than or greater than the one we are
    	 *     searching for, respectively, if the exact element cannot be found.
    	 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
    	 */
    	exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
    	  if (aHaystack.length === 0) {
    	    return -1;
    	  }

    	  let index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
    	                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);
    	  if (index < 0) {
    	    return -1;
    	  }

    	  // We have found either the exact element, or the next-closest element than
    	  // the one we are searching for. However, there may be more than one such
    	  // element. Make sure we always return the smallest of these.
    	  while (index - 1 >= 0) {
    	    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
    	      break;
    	    }
    	    --index;
    	  }

    	  return index;
    	}; 
    } (binarySearch$1));

    var __dirname = '/Users/a8c/Documents/Code/jetpack/projects/js-packages/critical-css-gen/node_modules/source-map/lib';

    var readWasm$2 = {exports: {}};

    var _polyfillNode_fs = {};

    var _polyfillNode_fs$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': _polyfillNode_fs
    });

    var require$$0 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_fs$1);

    const isBrowserEnvironment = (function() {
        // eslint-disable-next-line no-undef
        return (typeof window !== "undefined") && (this === window);
    }).call();

    if (isBrowserEnvironment) {
      // Web version of reading a wasm file into an array buffer.

      let mappingsWasm = null;

      readWasm$2.exports = function readWasm() {
        if (typeof mappingsWasm === "string") {
          return fetch(mappingsWasm)
            .then(response => response.arrayBuffer());
        }
        if (mappingsWasm instanceof ArrayBuffer) {
          return Promise.resolve(mappingsWasm);
        }
        throw new Error("You must provide the string URL or ArrayBuffer contents " +
                        "of lib/mappings.wasm by calling " +
                        "SourceMapConsumer.initialize({ 'lib/mappings.wasm': ... }) " +
                        "before using SourceMapConsumer");
      };

      readWasm$2.exports.initialize = input => mappingsWasm = input;
    } else {
      // Node version of reading a wasm file into an array buffer.
      const fs = require$$0;
      const path = require$$1;

      readWasm$2.exports = function readWasm() {
        return new Promise((resolve, reject) => {
          const wasmPath = path.join(__dirname, "mappings.wasm");
          fs.readFile(wasmPath, null, (error, data) => {
            if (error) {
              reject(error);
              return;
            }

            resolve(data.buffer);
          });
        });
      };

      readWasm$2.exports.initialize = _ => {
        console.debug("SourceMapConsumer.initialize is a no-op when running in node.js");
      };
    }

    var readWasmExports = readWasm$2.exports;

    const readWasm$1 = readWasmExports;

    /**
     * Provide the JIT with a nice shape / hidden class.
     */
    function Mapping() {
      this.generatedLine = 0;
      this.generatedColumn = 0;
      this.lastGeneratedColumn = null;
      this.source = null;
      this.originalLine = null;
      this.originalColumn = null;
      this.name = null;
    }

    let cachedWasm = null;

    var wasm$1 = function wasm() {
      if (cachedWasm) {
        return cachedWasm;
      }

      const callbackStack = [];

      cachedWasm = readWasm$1().then(buffer => {
          return WebAssembly.instantiate(buffer, {
            env: {
              mapping_callback(
                generatedLine,
                generatedColumn,

                hasLastGeneratedColumn,
                lastGeneratedColumn,

                hasOriginal,
                source,
                originalLine,
                originalColumn,

                hasName,
                name
              ) {
                const mapping = new Mapping();
                // JS uses 1-based line numbers, wasm uses 0-based.
                mapping.generatedLine = generatedLine + 1;
                mapping.generatedColumn = generatedColumn;

                if (hasLastGeneratedColumn) {
                  // JS uses inclusive last generated column, wasm uses exclusive.
                  mapping.lastGeneratedColumn = lastGeneratedColumn - 1;
                }

                if (hasOriginal) {
                  mapping.source = source;
                  // JS uses 1-based line numbers, wasm uses 0-based.
                  mapping.originalLine = originalLine + 1;
                  mapping.originalColumn = originalColumn;

                  if (hasName) {
                    mapping.name = name;
                  }
                }

                callbackStack[callbackStack.length - 1](mapping);
              },

              start_all_generated_locations_for() { console.time("all_generated_locations_for"); },
              end_all_generated_locations_for() { console.timeEnd("all_generated_locations_for"); },

              start_compute_column_spans() { console.time("compute_column_spans"); },
              end_compute_column_spans() { console.timeEnd("compute_column_spans"); },

              start_generated_location_for() { console.time("generated_location_for"); },
              end_generated_location_for() { console.timeEnd("generated_location_for"); },

              start_original_location_for() { console.time("original_location_for"); },
              end_original_location_for() { console.timeEnd("original_location_for"); },

              start_parse_mappings() { console.time("parse_mappings"); },
              end_parse_mappings() { console.timeEnd("parse_mappings"); },

              start_sort_by_generated_location() { console.time("sort_by_generated_location"); },
              end_sort_by_generated_location() { console.timeEnd("sort_by_generated_location"); },

              start_sort_by_original_location() { console.time("sort_by_original_location"); },
              end_sort_by_original_location() { console.timeEnd("sort_by_original_location"); },
            }
          });
      }).then(Wasm => {
        return {
          exports: Wasm.instance.exports,
          withMappingCallback: (mappingCallback, f) => {
            callbackStack.push(mappingCallback);
            try {
              f();
            } finally {
              callbackStack.pop();
            }
          }
        };
      }).then(null, e => {
        cachedWasm = null;
        throw e;
      });

      return cachedWasm;
    };

    /* -*- Mode: js; js-indent-level: 2; -*- */

    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */

    const util$1 = util$4;
    const binarySearch = binarySearch$1;
    const ArraySet = arraySet.ArraySet;
    const readWasm = readWasmExports;
    const wasm = wasm$1;

    const INTERNAL = Symbol("smcInternal");

    class SourceMapConsumer$1 {
      constructor(aSourceMap, aSourceMapURL) {
        // If the constructor was called by super(), just return Promise<this>.
        // Yes, this is a hack to retain the pre-existing API of the base-class
        // constructor also being an async factory function.
        if (aSourceMap == INTERNAL) {
          return Promise.resolve(this);
        }

        return _factory(aSourceMap, aSourceMapURL);
      }

      static initialize(opts) {
        readWasm.initialize(opts["lib/mappings.wasm"]);
      }

      static fromSourceMap(aSourceMap, aSourceMapURL) {
        return _factoryBSM(aSourceMap, aSourceMapURL);
      }

      /**
       * Construct a new `SourceMapConsumer` from `rawSourceMap` and `sourceMapUrl`
       * (see the `SourceMapConsumer` constructor for details. Then, invoke the `async
       * function f(SourceMapConsumer) -> T` with the newly constructed consumer, wait
       * for `f` to complete, call `destroy` on the consumer, and return `f`'s return
       * value.
       *
       * You must not use the consumer after `f` completes!
       *
       * By using `with`, you do not have to remember to manually call `destroy` on
       * the consumer, since it will be called automatically once `f` completes.
       *
       * ```js
       * const xSquared = await SourceMapConsumer.with(
       *   myRawSourceMap,
       *   null,
       *   async function (consumer) {
       *     // Use `consumer` inside here and don't worry about remembering
       *     // to call `destroy`.
       *
       *     const x = await whatever(consumer);
       *     return x * x;
       *   }
       * );
       *
       * // You may not use that `consumer` anymore out here; it has
       * // been destroyed. But you can use `xSquared`.
       * console.log(xSquared);
       * ```
       */
      static async with(rawSourceMap, sourceMapUrl, f) {
        const consumer = await new SourceMapConsumer$1(rawSourceMap, sourceMapUrl);
        try {
          return await f(consumer);
        } finally {
          consumer.destroy();
        }
      }

      /**
       * Parse the mappings in a string in to a data structure which we can easily
       * query (the ordered arrays in the `this.__generatedMappings` and
       * `this.__originalMappings` properties).
       */
      _parseMappings(aStr, aSourceRoot) {
        throw new Error("Subclasses must implement _parseMappings");
      }

      /**
       * Iterate over each mapping between an original source/line/column and a
       * generated line/column in this source map.
       *
       * @param Function aCallback
       *        The function that is called with each mapping.
       * @param Object aContext
       *        Optional. If specified, this object will be the value of `this` every
       *        time that `aCallback` is called.
       * @param aOrder
       *        Either `SourceMapConsumer.GENERATED_ORDER` or
       *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
       *        iterate over the mappings sorted by the generated file's line/column
       *        order or the original's source/line/column order, respectively. Defaults to
       *        `SourceMapConsumer.GENERATED_ORDER`.
       */
      eachMapping(aCallback, aContext, aOrder) {
        throw new Error("Subclasses must implement eachMapping");
      }

      /**
       * Returns all generated line and column information for the original source,
       * line, and column provided. If no column is provided, returns all mappings
       * corresponding to a either the line we are searching for or the next
       * closest line that has any mappings. Otherwise, returns all mappings
       * corresponding to the given line and either the column we are searching for
       * or the next closest column that has any offsets.
       *
       * The only argument is an object with the following properties:
       *
       *   - source: The filename of the original source.
       *   - line: The line number in the original source.  The line number is 1-based.
       *   - column: Optional. the column number in the original source.
       *    The column number is 0-based.
       *
       * and an array of objects is returned, each with the following properties:
       *
       *   - line: The line number in the generated source, or null.  The
       *    line number is 1-based.
       *   - column: The column number in the generated source, or null.
       *    The column number is 0-based.
       */
      allGeneratedPositionsFor(aArgs) {
        throw new Error("Subclasses must implement allGeneratedPositionsFor");
      }

      destroy() {
        throw new Error("Subclasses must implement destroy");
      }
    }

    /**
     * The version of the source mapping spec that we are consuming.
     */
    SourceMapConsumer$1.prototype._version = 3;
    SourceMapConsumer$1.GENERATED_ORDER = 1;
    SourceMapConsumer$1.ORIGINAL_ORDER = 2;

    SourceMapConsumer$1.GREATEST_LOWER_BOUND = 1;
    SourceMapConsumer$1.LEAST_UPPER_BOUND = 2;

    sourceMapConsumer.SourceMapConsumer = SourceMapConsumer$1;

    /**
     * A BasicSourceMapConsumer instance represents a parsed source map which we can
     * query for information about the original file positions by giving it a file
     * position in the generated source.
     *
     * The first parameter is the raw source map (either as a JSON string, or
     * already parsed to an object). According to the spec, source maps have the
     * following attributes:
     *
     *   - version: Which version of the source map spec this map is following.
     *   - sources: An array of URLs to the original source files.
     *   - names: An array of identifiers which can be referenced by individual mappings.
     *   - sourceRoot: Optional. The URL root from which all sources are relative.
     *   - sourcesContent: Optional. An array of contents of the original source files.
     *   - mappings: A string of base64 VLQs which contain the actual mappings.
     *   - file: Optional. The generated file this source map is associated with.
     *
     * Here is an example source map, taken from the source map spec[0]:
     *
     *     {
     *       version : 3,
     *       file: "out.js",
     *       sourceRoot : "",
     *       sources: ["foo.js", "bar.js"],
     *       names: ["src", "maps", "are", "fun"],
     *       mappings: "AA,AB;;ABCDE;"
     *     }
     *
     * The second parameter, if given, is a string whose value is the URL
     * at which the source map was found.  This URL is used to compute the
     * sources array.
     *
     * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
     */
    class BasicSourceMapConsumer extends SourceMapConsumer$1 {
      constructor(aSourceMap, aSourceMapURL) {
        return super(INTERNAL).then(that => {
          let sourceMap = aSourceMap;
          if (typeof aSourceMap === "string") {
            sourceMap = util$1.parseSourceMapInput(aSourceMap);
          }

          const version = util$1.getArg(sourceMap, "version");
          let sources = util$1.getArg(sourceMap, "sources");
          // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
          // requires the array) to play nice here.
          const names = util$1.getArg(sourceMap, "names", []);
          let sourceRoot = util$1.getArg(sourceMap, "sourceRoot", null);
          const sourcesContent = util$1.getArg(sourceMap, "sourcesContent", null);
          const mappings = util$1.getArg(sourceMap, "mappings");
          const file = util$1.getArg(sourceMap, "file", null);

          // Once again, Sass deviates from the spec and supplies the version as a
          // string rather than a number, so we use loose equality checking here.
          if (version != that._version) {
            throw new Error("Unsupported version: " + version);
          }

          if (sourceRoot) {
            sourceRoot = util$1.normalize(sourceRoot);
          }

          sources = sources
            .map(String)
            // Some source maps produce relative source paths like "./foo.js" instead of
            // "foo.js".  Normalize these first so that future comparisons will succeed.
            // See bugzil.la/1090768.
            .map(util$1.normalize)
            // Always ensure that absolute sources are internally stored relative to
            // the source root, if the source root is absolute. Not doing this would
            // be particularly problematic when the source root is a prefix of the
            // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
            .map(function(source) {
              return sourceRoot && util$1.isAbsolute(sourceRoot) && util$1.isAbsolute(source)
                ? util$1.relative(sourceRoot, source)
                : source;
            });

          // Pass `true` below to allow duplicate names and sources. While source maps
          // are intended to be compressed and deduplicated, the TypeScript compiler
          // sometimes generates source maps with duplicates in them. See Github issue
          // #72 and bugzil.la/889492.
          that._names = ArraySet.fromArray(names.map(String), true);
          that._sources = ArraySet.fromArray(sources, true);

          that._absoluteSources = that._sources.toArray().map(function(s) {
            return util$1.computeSourceURL(sourceRoot, s, aSourceMapURL);
          });

          that.sourceRoot = sourceRoot;
          that.sourcesContent = sourcesContent;
          that._mappings = mappings;
          that._sourceMapURL = aSourceMapURL;
          that.file = file;

          that._computedColumnSpans = false;
          that._mappingsPtr = 0;
          that._wasm = null;

          return wasm().then(w => {
            that._wasm = w;
            return that;
          });
        });
      }

      /**
       * Utility function to find the index of a source.  Returns -1 if not
       * found.
       */
      _findSourceIndex(aSource) {
        let relativeSource = aSource;
        if (this.sourceRoot != null) {
          relativeSource = util$1.relative(this.sourceRoot, relativeSource);
        }

        if (this._sources.has(relativeSource)) {
          return this._sources.indexOf(relativeSource);
        }

        // Maybe aSource is an absolute URL as returned by |sources|.  In
        // this case we can't simply undo the transform.
        for (let i = 0; i < this._absoluteSources.length; ++i) {
          if (this._absoluteSources[i] == aSource) {
            return i;
          }
        }

        return -1;
      }

      /**
       * Create a BasicSourceMapConsumer from a SourceMapGenerator.
       *
       * @param SourceMapGenerator aSourceMap
       *        The source map that will be consumed.
       * @param String aSourceMapURL
       *        The URL at which the source map can be found (optional)
       * @returns BasicSourceMapConsumer
       */
      static fromSourceMap(aSourceMap, aSourceMapURL) {
        return new BasicSourceMapConsumer(aSourceMap.toString());
      }

      get sources() {
        return this._absoluteSources.slice();
      }

      _getMappingsPtr() {
        if (this._mappingsPtr === 0) {
          this._parseMappings(this._mappings, this.sourceRoot);
        }

        return this._mappingsPtr;
      }

      /**
       * Parse the mappings in a string in to a data structure which we can easily
       * query (the ordered arrays in the `this.__generatedMappings` and
       * `this.__originalMappings` properties).
       */
      _parseMappings(aStr, aSourceRoot) {
        const size = aStr.length;

        const mappingsBufPtr = this._wasm.exports.allocate_mappings(size);
        const mappingsBuf = new Uint8Array(this._wasm.exports.memory.buffer, mappingsBufPtr, size);
        for (let i = 0; i < size; i++) {
          mappingsBuf[i] = aStr.charCodeAt(i);
        }

        const mappingsPtr = this._wasm.exports.parse_mappings(mappingsBufPtr);

        if (!mappingsPtr) {
          const error = this._wasm.exports.get_last_error();
          let msg = `Error parsing mappings (code ${error}): `;

          // XXX: keep these error codes in sync with `fitzgen/source-map-mappings`.
          switch (error) {
            case 1:
              msg += "the mappings contained a negative line, column, source index, or name index";
              break;
            case 2:
              msg += "the mappings contained a number larger than 2**32";
              break;
            case 3:
              msg += "reached EOF while in the middle of parsing a VLQ";
              break;
            case 4:
              msg += "invalid base 64 character while parsing a VLQ";
              break;
            default:
              msg += "unknown error code";
              break;
          }

          throw new Error(msg);
        }

        this._mappingsPtr = mappingsPtr;
      }

      eachMapping(aCallback, aContext, aOrder) {
        const context = aContext || null;
        const order = aOrder || SourceMapConsumer$1.GENERATED_ORDER;
        const sourceRoot = this.sourceRoot;

        this._wasm.withMappingCallback(
          mapping => {
            if (mapping.source !== null) {
              mapping.source = this._sources.at(mapping.source);
              mapping.source = util$1.computeSourceURL(sourceRoot, mapping.source, this._sourceMapURL);

              if (mapping.name !== null) {
                mapping.name = this._names.at(mapping.name);
              }
            }

            aCallback.call(context, mapping);
          },
          () => {
            switch (order) {
            case SourceMapConsumer$1.GENERATED_ORDER:
              this._wasm.exports.by_generated_location(this._getMappingsPtr());
              break;
            case SourceMapConsumer$1.ORIGINAL_ORDER:
              this._wasm.exports.by_original_location(this._getMappingsPtr());
              break;
            default:
              throw new Error("Unknown order of iteration.");
            }
          }
        );
      }

      allGeneratedPositionsFor(aArgs) {
        let source = util$1.getArg(aArgs, "source");
        const originalLine = util$1.getArg(aArgs, "line");
        const originalColumn = aArgs.column || 0;

        source = this._findSourceIndex(source);
        if (source < 0) {
          return [];
        }

        if (originalLine < 1) {
          throw new Error("Line numbers must be >= 1");
        }

        if (originalColumn < 0) {
          throw new Error("Column numbers must be >= 0");
        }

        const mappings = [];

        this._wasm.withMappingCallback(
          m => {
            let lastColumn = m.lastGeneratedColumn;
            if (this._computedColumnSpans && lastColumn === null) {
              lastColumn = Infinity;
            }
            mappings.push({
              line: m.generatedLine,
              column: m.generatedColumn,
              lastColumn,
            });
          }, () => {
            this._wasm.exports.all_generated_locations_for(
              this._getMappingsPtr(),
              source,
              originalLine - 1,
              "column" in aArgs,
              originalColumn
            );
          }
        );

        return mappings;
      }

      destroy() {
        if (this._mappingsPtr !== 0) {
          this._wasm.exports.free_mappings(this._mappingsPtr);
          this._mappingsPtr = 0;
        }
      }

      /**
       * Compute the last column for each generated mapping. The last column is
       * inclusive.
       */
      computeColumnSpans() {
        if (this._computedColumnSpans) {
          return;
        }

        this._wasm.exports.compute_column_spans(this._getMappingsPtr());
        this._computedColumnSpans = true;
      }

      /**
       * Returns the original source, line, and column information for the generated
       * source's line and column positions provided. The only argument is an object
       * with the following properties:
       *
       *   - line: The line number in the generated source.  The line number
       *     is 1-based.
       *   - column: The column number in the generated source.  The column
       *     number is 0-based.
       *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
       *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
       *     closest element that is smaller than or greater than the one we are
       *     searching for, respectively, if the exact element cannot be found.
       *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
       *
       * and an object is returned with the following properties:
       *
       *   - source: The original source file, or null.
       *   - line: The line number in the original source, or null.  The
       *     line number is 1-based.
       *   - column: The column number in the original source, or null.  The
       *     column number is 0-based.
       *   - name: The original identifier, or null.
       */
      originalPositionFor(aArgs) {
        const needle = {
          generatedLine: util$1.getArg(aArgs, "line"),
          generatedColumn: util$1.getArg(aArgs, "column")
        };

        if (needle.generatedLine < 1) {
          throw new Error("Line numbers must be >= 1");
        }

        if (needle.generatedColumn < 0) {
          throw new Error("Column numbers must be >= 0");
        }

        let bias = util$1.getArg(aArgs, "bias", SourceMapConsumer$1.GREATEST_LOWER_BOUND);
        if (bias == null) {
          bias = SourceMapConsumer$1.GREATEST_LOWER_BOUND;
        }

        let mapping;
        this._wasm.withMappingCallback(m => mapping = m, () => {
          this._wasm.exports.original_location_for(
            this._getMappingsPtr(),
            needle.generatedLine - 1,
            needle.generatedColumn,
            bias
          );
        });

        if (mapping) {
          if (mapping.generatedLine === needle.generatedLine) {
            let source = util$1.getArg(mapping, "source", null);
            if (source !== null) {
              source = this._sources.at(source);
              source = util$1.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
            }

            let name = util$1.getArg(mapping, "name", null);
            if (name !== null) {
              name = this._names.at(name);
            }

            return {
              source,
              line: util$1.getArg(mapping, "originalLine", null),
              column: util$1.getArg(mapping, "originalColumn", null),
              name
            };
          }
        }

        return {
          source: null,
          line: null,
          column: null,
          name: null
        };
      }

      /**
       * Return true if we have the source content for every source in the source
       * map, false otherwise.
       */
      hasContentsOfAllSources() {
        if (!this.sourcesContent) {
          return false;
        }
        return this.sourcesContent.length >= this._sources.size() &&
          !this.sourcesContent.some(function(sc) { return sc == null; });
      }

      /**
       * Returns the original source content. The only argument is the url of the
       * original source file. Returns null if no original source content is
       * available.
       */
      sourceContentFor(aSource, nullOnMissing) {
        if (!this.sourcesContent) {
          return null;
        }

        const index = this._findSourceIndex(aSource);
        if (index >= 0) {
          return this.sourcesContent[index];
        }

        let relativeSource = aSource;
        if (this.sourceRoot != null) {
          relativeSource = util$1.relative(this.sourceRoot, relativeSource);
        }

        let url;
        if (this.sourceRoot != null
            && (url = util$1.urlParse(this.sourceRoot))) {
          // XXX: file:// URIs and absolute paths lead to unexpected behavior for
          // many users. We can help them out when they expect file:// URIs to
          // behave like it would if they were running a local HTTP server. See
          // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
          const fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
          if (url.scheme == "file"
              && this._sources.has(fileUriAbsPath)) {
            return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
          }

          if ((!url.path || url.path == "/")
              && this._sources.has("/" + relativeSource)) {
            return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
          }
        }

        // This function is used recursively from
        // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
        // don't want to throw if we can't find the source - we just want to
        // return null, so we provide a flag to exit gracefully.
        if (nullOnMissing) {
          return null;
        }

        throw new Error('"' + relativeSource + '" is not in the SourceMap.');
      }

      /**
       * Returns the generated line and column information for the original source,
       * line, and column positions provided. The only argument is an object with
       * the following properties:
       *
       *   - source: The filename of the original source.
       *   - line: The line number in the original source.  The line number
       *     is 1-based.
       *   - column: The column number in the original source.  The column
       *     number is 0-based.
       *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
       *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
       *     closest element that is smaller than or greater than the one we are
       *     searching for, respectively, if the exact element cannot be found.
       *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
       *
       * and an object is returned with the following properties:
       *
       *   - line: The line number in the generated source, or null.  The
       *     line number is 1-based.
       *   - column: The column number in the generated source, or null.
       *     The column number is 0-based.
       */
      generatedPositionFor(aArgs) {
        let source = util$1.getArg(aArgs, "source");
        source = this._findSourceIndex(source);
        if (source < 0) {
          return {
            line: null,
            column: null,
            lastColumn: null
          };
        }

        const needle = {
          source,
          originalLine: util$1.getArg(aArgs, "line"),
          originalColumn: util$1.getArg(aArgs, "column")
        };

        if (needle.originalLine < 1) {
          throw new Error("Line numbers must be >= 1");
        }

        if (needle.originalColumn < 0) {
          throw new Error("Column numbers must be >= 0");
        }

        let bias = util$1.getArg(aArgs, "bias", SourceMapConsumer$1.GREATEST_LOWER_BOUND);
        if (bias == null) {
          bias = SourceMapConsumer$1.GREATEST_LOWER_BOUND;
        }

        let mapping;
        this._wasm.withMappingCallback(m => mapping = m, () => {
          this._wasm.exports.generated_location_for(
            this._getMappingsPtr(),
            needle.source,
            needle.originalLine - 1,
            needle.originalColumn,
            bias
          );
        });

        if (mapping) {
          if (mapping.source === needle.source) {
            let lastColumn = mapping.lastGeneratedColumn;
            if (this._computedColumnSpans && lastColumn === null) {
              lastColumn = Infinity;
            }
            return {
              line: util$1.getArg(mapping, "generatedLine", null),
              column: util$1.getArg(mapping, "generatedColumn", null),
              lastColumn,
            };
          }
        }

        return {
          line: null,
          column: null,
          lastColumn: null
        };
      }
    }

    BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer$1;
    sourceMapConsumer.BasicSourceMapConsumer = BasicSourceMapConsumer;

    /**
     * An IndexedSourceMapConsumer instance represents a parsed source map which
     * we can query for information. It differs from BasicSourceMapConsumer in
     * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
     * input.
     *
     * The first parameter is a raw source map (either as a JSON string, or already
     * parsed to an object). According to the spec for indexed source maps, they
     * have the following attributes:
     *
     *   - version: Which version of the source map spec this map is following.
     *   - file: Optional. The generated file this source map is associated with.
     *   - sections: A list of section definitions.
     *
     * Each value under the "sections" field has two fields:
     *   - offset: The offset into the original specified at which this section
     *       begins to apply, defined as an object with a "line" and "column"
     *       field.
     *   - map: A source map definition. This source map could also be indexed,
     *       but doesn't have to be.
     *
     * Instead of the "map" field, it's also possible to have a "url" field
     * specifying a URL to retrieve a source map from, but that's currently
     * unsupported.
     *
     * Here's an example source map, taken from the source map spec[0], but
     * modified to omit a section which uses the "url" field.
     *
     *  {
     *    version : 3,
     *    file: "app.js",
     *    sections: [{
     *      offset: {line:100, column:10},
     *      map: {
     *        version : 3,
     *        file: "section.js",
     *        sources: ["foo.js", "bar.js"],
     *        names: ["src", "maps", "are", "fun"],
     *        mappings: "AAAA,E;;ABCDE;"
     *      }
     *    }],
     *  }
     *
     * The second parameter, if given, is a string whose value is the URL
     * at which the source map was found.  This URL is used to compute the
     * sources array.
     *
     * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
     */
    class IndexedSourceMapConsumer extends SourceMapConsumer$1 {
      constructor(aSourceMap, aSourceMapURL) {
        return super(INTERNAL).then(that => {
          let sourceMap = aSourceMap;
          if (typeof aSourceMap === "string") {
            sourceMap = util$1.parseSourceMapInput(aSourceMap);
          }

          const version = util$1.getArg(sourceMap, "version");
          const sections = util$1.getArg(sourceMap, "sections");

          if (version != that._version) {
            throw new Error("Unsupported version: " + version);
          }

          that._sources = new ArraySet();
          that._names = new ArraySet();
          that.__generatedMappings = null;
          that.__originalMappings = null;
          that.__generatedMappingsUnsorted = null;
          that.__originalMappingsUnsorted = null;

          let lastOffset = {
            line: -1,
            column: 0
          };
          return Promise.all(sections.map(s => {
            if (s.url) {
              // The url field will require support for asynchronicity.
              // See https://github.com/mozilla/source-map/issues/16
              throw new Error("Support for url field in sections not implemented.");
            }
            const offset = util$1.getArg(s, "offset");
            const offsetLine = util$1.getArg(offset, "line");
            const offsetColumn = util$1.getArg(offset, "column");

            if (offsetLine < lastOffset.line ||
                (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
              throw new Error("Section offsets must be ordered and non-overlapping.");
            }
            lastOffset = offset;

            const cons = new SourceMapConsumer$1(util$1.getArg(s, "map"), aSourceMapURL);
            return cons.then(consumer => {
              return {
                generatedOffset: {
                  // The offset fields are 0-based, but we use 1-based indices when
                  // encoding/decoding from VLQ.
                  generatedLine: offsetLine + 1,
                  generatedColumn: offsetColumn + 1
                },
                consumer
              };
            });
          })).then(s => {
            that._sections = s;
            return that;
          });
        });
      }

      // `__generatedMappings` and `__originalMappings` are arrays that hold the
      // parsed mapping coordinates from the source map's "mappings" attribute. They
      // are lazily instantiated, accessed via the `_generatedMappings` and
      // `_originalMappings` getters respectively, and we only parse the mappings
      // and create these arrays once queried for a source location. We jump through
      // these hoops because there can be many thousands of mappings, and parsing
      // them is expensive, so we only want to do it if we must.
      //
      // Each object in the arrays is of the form:
      //
      //     {
      //       generatedLine: The line number in the generated code,
      //       generatedColumn: The column number in the generated code,
      //       source: The path to the original source file that generated this
      //               chunk of code,
      //       originalLine: The line number in the original source that
      //                     corresponds to this chunk of generated code,
      //       originalColumn: The column number in the original source that
      //                       corresponds to this chunk of generated code,
      //       name: The name of the original symbol which generated this chunk of
      //             code.
      //     }
      //
      // All properties except for `generatedLine` and `generatedColumn` can be
      // `null`.
      //
      // `_generatedMappings` is ordered by the generated positions.
      //
      // `_originalMappings` is ordered by the original positions.
      get _generatedMappings() {
        if (!this.__generatedMappings) {
          this._sortGeneratedMappings();
        }

        return this.__generatedMappings;
      }

      get _originalMappings() {
        if (!this.__originalMappings) {
          this._sortOriginalMappings();
        }

        return this.__originalMappings;
      }

      get _generatedMappingsUnsorted() {
        if (!this.__generatedMappingsUnsorted) {
          this._parseMappings(this._mappings, this.sourceRoot);
        }

        return this.__generatedMappingsUnsorted;
      }

      get _originalMappingsUnsorted() {
        if (!this.__originalMappingsUnsorted) {
          this._parseMappings(this._mappings, this.sourceRoot);
        }

        return this.__originalMappingsUnsorted;
      }

      _sortGeneratedMappings() {
        const mappings = this._generatedMappingsUnsorted;
        mappings.sort(util$1.compareByGeneratedPositionsDeflated);
        this.__generatedMappings = mappings;
      }

      _sortOriginalMappings() {
        const mappings = this._originalMappingsUnsorted;
        mappings.sort(util$1.compareByOriginalPositions);
        this.__originalMappings = mappings;
      }

      /**
       * The list of original sources.
       */
      get sources() {
        const sources = [];
        for (let i = 0; i < this._sections.length; i++) {
          for (let j = 0; j < this._sections[i].consumer.sources.length; j++) {
            sources.push(this._sections[i].consumer.sources[j]);
          }
        }
        return sources;
      }

      /**
       * Returns the original source, line, and column information for the generated
       * source's line and column positions provided. The only argument is an object
       * with the following properties:
       *
       *   - line: The line number in the generated source.  The line number
       *     is 1-based.
       *   - column: The column number in the generated source.  The column
       *     number is 0-based.
       *
       * and an object is returned with the following properties:
       *
       *   - source: The original source file, or null.
       *   - line: The line number in the original source, or null.  The
       *     line number is 1-based.
       *   - column: The column number in the original source, or null.  The
       *     column number is 0-based.
       *   - name: The original identifier, or null.
       */
      originalPositionFor(aArgs) {
        const needle = {
          generatedLine: util$1.getArg(aArgs, "line"),
          generatedColumn: util$1.getArg(aArgs, "column")
        };

        // Find the section containing the generated position we're trying to map
        // to an original position.
        const sectionIndex = binarySearch.search(needle, this._sections,
          function(aNeedle, section) {
            const cmp = aNeedle.generatedLine - section.generatedOffset.generatedLine;
            if (cmp) {
              return cmp;
            }

            return (aNeedle.generatedColumn -
                    section.generatedOffset.generatedColumn);
          });
        const section = this._sections[sectionIndex];

        if (!section) {
          return {
            source: null,
            line: null,
            column: null,
            name: null
          };
        }

        return section.consumer.originalPositionFor({
          line: needle.generatedLine -
            (section.generatedOffset.generatedLine - 1),
          column: needle.generatedColumn -
            (section.generatedOffset.generatedLine === needle.generatedLine
             ? section.generatedOffset.generatedColumn - 1
             : 0),
          bias: aArgs.bias
        });
      }

      /**
       * Return true if we have the source content for every source in the source
       * map, false otherwise.
       */
      hasContentsOfAllSources() {
        return this._sections.every(function(s) {
          return s.consumer.hasContentsOfAllSources();
        });
      }

      /**
       * Returns the original source content. The only argument is the url of the
       * original source file. Returns null if no original source content is
       * available.
       */
      sourceContentFor(aSource, nullOnMissing) {
        for (let i = 0; i < this._sections.length; i++) {
          const section = this._sections[i];

          const content = section.consumer.sourceContentFor(aSource, true);
          if (content) {
            return content;
          }
        }
        if (nullOnMissing) {
          return null;
        }
        throw new Error('"' + aSource + '" is not in the SourceMap.');
      }

      /**
       * Returns the generated line and column information for the original source,
       * line, and column positions provided. The only argument is an object with
       * the following properties:
       *
       *   - source: The filename of the original source.
       *   - line: The line number in the original source.  The line number
       *     is 1-based.
       *   - column: The column number in the original source.  The column
       *     number is 0-based.
       *
       * and an object is returned with the following properties:
       *
       *   - line: The line number in the generated source, or null.  The
       *     line number is 1-based.
       *   - column: The column number in the generated source, or null.
       *     The column number is 0-based.
       */
      generatedPositionFor(aArgs) {
        for (let i = 0; i < this._sections.length; i++) {
          const section = this._sections[i];

          // Only consider this section if the requested source is in the list of
          // sources of the consumer.
          if (section.consumer._findSourceIndex(util$1.getArg(aArgs, "source")) === -1) {
            continue;
          }
          const generatedPosition = section.consumer.generatedPositionFor(aArgs);
          if (generatedPosition) {
            const ret = {
              line: generatedPosition.line +
                (section.generatedOffset.generatedLine - 1),
              column: generatedPosition.column +
                (section.generatedOffset.generatedLine === generatedPosition.line
                 ? section.generatedOffset.generatedColumn - 1
                 : 0)
            };
            return ret;
          }
        }

        return {
          line: null,
          column: null
        };
      }

      /**
       * Parse the mappings in a string in to a data structure which we can easily
       * query (the ordered arrays in the `this.__generatedMappings` and
       * `this.__originalMappings` properties).
       */
      _parseMappings(aStr, aSourceRoot) {
        const generatedMappings = this.__generatedMappingsUnsorted = [];
        const originalMappings = this.__originalMappingsUnsorted = [];
        for (let i = 0; i < this._sections.length; i++) {
          const section = this._sections[i];

          const sectionMappings = [];
          section.consumer.eachMapping(m => sectionMappings.push(m));

          for (let j = 0; j < sectionMappings.length; j++) {
            const mapping = sectionMappings[j];

            // TODO: test if null is correct here.  The original code used
            // `source`, which would actually have gotten used as null because
            // var's get hoisted.
            // See: https://github.com/mozilla/source-map/issues/333
            let source = util$1.computeSourceURL(section.consumer.sourceRoot, null, this._sourceMapURL);
            this._sources.add(source);
            source = this._sources.indexOf(source);

            let name = null;
            if (mapping.name) {
              this._names.add(mapping.name);
              name = this._names.indexOf(mapping.name);
            }

            // The mappings coming from the consumer for the section have
            // generated positions relative to the start of the section, so we
            // need to offset them to be relative to the start of the concatenated
            // generated file.
            const adjustedMapping = {
              source,
              generatedLine: mapping.generatedLine +
                (section.generatedOffset.generatedLine - 1),
              generatedColumn: mapping.generatedColumn +
                (section.generatedOffset.generatedLine === mapping.generatedLine
                ? section.generatedOffset.generatedColumn - 1
                : 0),
              originalLine: mapping.originalLine,
              originalColumn: mapping.originalColumn,
              name
            };

            generatedMappings.push(adjustedMapping);
            if (typeof adjustedMapping.originalLine === "number") {
              originalMappings.push(adjustedMapping);
            }
          }
        }
      }

      eachMapping(aCallback, aContext, aOrder) {
        const context = aContext || null;
        const order = aOrder || SourceMapConsumer$1.GENERATED_ORDER;

        let mappings;
        switch (order) {
        case SourceMapConsumer$1.GENERATED_ORDER:
          mappings = this._generatedMappings;
          break;
        case SourceMapConsumer$1.ORIGINAL_ORDER:
          mappings = this._originalMappings;
          break;
        default:
          throw new Error("Unknown order of iteration.");
        }

        const sourceRoot = this.sourceRoot;
        mappings.map(function(mapping) {
          let source = null;
          if (mapping.source !== null) {
            source = this._sources.at(mapping.source);
            source = util$1.computeSourceURL(sourceRoot, source, this._sourceMapURL);
          }
          return {
            source,
            generatedLine: mapping.generatedLine,
            generatedColumn: mapping.generatedColumn,
            originalLine: mapping.originalLine,
            originalColumn: mapping.originalColumn,
            name: mapping.name === null ? null : this._names.at(mapping.name)
          };
        }, this).forEach(aCallback, context);
      }

      /**
       * Find the mapping that best matches the hypothetical "needle" mapping that
       * we are searching for in the given "haystack" of mappings.
       */
      _findMapping(aNeedle, aMappings, aLineName,
                  aColumnName, aComparator, aBias) {
        // To return the position we are searching for, we must first find the
        // mapping for the given position and then return the opposite position it
        // points to. Because the mappings are sorted, we can use binary search to
        // find the best mapping.

        if (aNeedle[aLineName] <= 0) {
          throw new TypeError("Line must be greater than or equal to 1, got "
                              + aNeedle[aLineName]);
        }
        if (aNeedle[aColumnName] < 0) {
          throw new TypeError("Column must be greater than or equal to 0, got "
                              + aNeedle[aColumnName]);
        }

        return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
      }

      allGeneratedPositionsFor(aArgs) {
        const line = util$1.getArg(aArgs, "line");

        // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
        // returns the index of the closest mapping less than the needle. By
        // setting needle.originalColumn to 0, we thus find the last mapping for
        // the given line, provided such a mapping exists.
        const needle = {
          source: util$1.getArg(aArgs, "source"),
          originalLine: line,
          originalColumn: util$1.getArg(aArgs, "column", 0)
        };

        needle.source = this._findSourceIndex(needle.source);
        if (needle.source < 0) {
          return [];
        }

        if (needle.originalLine < 1) {
          throw new Error("Line numbers must be >= 1");
        }

        if (needle.originalColumn < 0) {
          throw new Error("Column numbers must be >= 0");
        }

        const mappings = [];

        let index = this._findMapping(needle,
                                      this._originalMappings,
                                      "originalLine",
                                      "originalColumn",
                                      util$1.compareByOriginalPositions,
                                      binarySearch.LEAST_UPPER_BOUND);
        if (index >= 0) {
          let mapping = this._originalMappings[index];

          if (aArgs.column === undefined) {
            const originalLine = mapping.originalLine;

            // Iterate until either we run out of mappings, or we run into
            // a mapping for a different line than the one we found. Since
            // mappings are sorted, this is guaranteed to find all mappings for
            // the line we found.
            while (mapping && mapping.originalLine === originalLine) {
              let lastColumn = mapping.lastGeneratedColumn;
              if (this._computedColumnSpans && lastColumn === null) {
                lastColumn = Infinity;
              }
              mappings.push({
                line: util$1.getArg(mapping, "generatedLine", null),
                column: util$1.getArg(mapping, "generatedColumn", null),
                lastColumn,
              });

              mapping = this._originalMappings[++index];
            }
          } else {
            const originalColumn = mapping.originalColumn;

            // Iterate until either we run out of mappings, or we run into
            // a mapping for a different line than the one we were searching for.
            // Since mappings are sorted, this is guaranteed to find all mappings for
            // the line we are searching for.
            while (mapping &&
                   mapping.originalLine === line &&
                   mapping.originalColumn == originalColumn) {
              let lastColumn = mapping.lastGeneratedColumn;
              if (this._computedColumnSpans && lastColumn === null) {
                lastColumn = Infinity;
              }
              mappings.push({
                line: util$1.getArg(mapping, "generatedLine", null),
                column: util$1.getArg(mapping, "generatedColumn", null),
                lastColumn,
              });

              mapping = this._originalMappings[++index];
            }
          }
        }

        return mappings;
      }

      destroy() {
        for (let i = 0; i < this._sections.length; i++) {
          this._sections[i].consumer.destroy();
        }
      }
    }
    sourceMapConsumer.IndexedSourceMapConsumer = IndexedSourceMapConsumer;

    /*
     * Cheat to get around inter-twingled classes.  `factory()` can be at the end
     * where it has access to non-hoisted classes, but it gets hoisted itself.
     */
    function _factory(aSourceMap, aSourceMapURL) {
      let sourceMap = aSourceMap;
      if (typeof aSourceMap === "string") {
        sourceMap = util$1.parseSourceMapInput(aSourceMap);
      }

      const consumer = sourceMap.sections != null
          ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)
          : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
      return Promise.resolve(consumer);
    }

    function _factoryBSM(aSourceMap, aSourceMapURL) {
      return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
    }

    var sourceNode = {};

    /* -*- Mode: js; js-indent-level: 2; -*- */

    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */

    const SourceMapGenerator$1 = sourceMapGenerator.SourceMapGenerator;
    const util = util$4;

    // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
    // operating systems these days (capturing the result).
    const REGEX_NEWLINE = /(\r?\n)/;

    // Newline character code for charCodeAt() comparisons
    const NEWLINE_CODE = 10;

    // Private symbol for identifying `SourceNode`s when multiple versions of
    // the source-map library are loaded. This MUST NOT CHANGE across
    // versions!
    const isSourceNode = "$$$isSourceNode$$$";

    /**
     * SourceNodes provide a way to abstract over interpolating/concatenating
     * snippets of generated JavaScript source code while maintaining the line and
     * column information associated with the original source code.
     *
     * @param aLine The original line number.
     * @param aColumn The original column number.
     * @param aSource The original source's filename.
     * @param aChunks Optional. An array of strings which are snippets of
     *        generated JS, or other SourceNodes.
     * @param aName The original identifier.
     */
    class SourceNode {
      constructor(aLine, aColumn, aSource, aChunks, aName) {
        this.children = [];
        this.sourceContents = {};
        this.line = aLine == null ? null : aLine;
        this.column = aColumn == null ? null : aColumn;
        this.source = aSource == null ? null : aSource;
        this.name = aName == null ? null : aName;
        this[isSourceNode] = true;
        if (aChunks != null) this.add(aChunks);
      }

      /**
       * Creates a SourceNode from generated code and a SourceMapConsumer.
       *
       * @param aGeneratedCode The generated code
       * @param aSourceMapConsumer The SourceMap for the generated code
       * @param aRelativePath Optional. The path that relative sources in the
       *        SourceMapConsumer should be relative to.
       */
      static fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
        // The SourceNode we want to fill with the generated code
        // and the SourceMap
        const node = new SourceNode();

        // All even indices of this array are one line of the generated code,
        // while all odd indices are the newlines between two adjacent lines
        // (since `REGEX_NEWLINE` captures its match).
        // Processed fragments are accessed by calling `shiftNextLine`.
        const remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
        let remainingLinesIndex = 0;
        const shiftNextLine = function() {
          const lineContents = getNextLine();
          // The last line of a file might not have a newline.
          const newLine = getNextLine() || "";
          return lineContents + newLine;

          function getNextLine() {
            return remainingLinesIndex < remainingLines.length ?
                remainingLines[remainingLinesIndex++] : undefined;
          }
        };

        // We need to remember the position of "remainingLines"
        let lastGeneratedLine = 1, lastGeneratedColumn = 0;

        // The generate SourceNodes we need a code range.
        // To extract it current and last mapping is used.
        // Here we store the last mapping.
        let lastMapping = null;
        let nextLine;

        aSourceMapConsumer.eachMapping(function(mapping) {
          if (lastMapping !== null) {
            // We add the code from "lastMapping" to "mapping":
            // First check if there is a new line in between.
            if (lastGeneratedLine < mapping.generatedLine) {
              // Associate first line with "lastMapping"
              addMappingWithCode(lastMapping, shiftNextLine());
              lastGeneratedLine++;
              lastGeneratedColumn = 0;
              // The remaining code is added without mapping
            } else {
              // There is no new line in between.
              // Associate the code between "lastGeneratedColumn" and
              // "mapping.generatedColumn" with "lastMapping"
              nextLine = remainingLines[remainingLinesIndex] || "";
              const code = nextLine.substr(0, mapping.generatedColumn -
                                            lastGeneratedColumn);
              remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -
                                                  lastGeneratedColumn);
              lastGeneratedColumn = mapping.generatedColumn;
              addMappingWithCode(lastMapping, code);
              // No more remaining code, continue
              lastMapping = mapping;
              return;
            }
          }
          // We add the generated code until the first mapping
          // to the SourceNode without any mapping.
          // Each line is added as separate string.
          while (lastGeneratedLine < mapping.generatedLine) {
            node.add(shiftNextLine());
            lastGeneratedLine++;
          }
          if (lastGeneratedColumn < mapping.generatedColumn) {
            nextLine = remainingLines[remainingLinesIndex] || "";
            node.add(nextLine.substr(0, mapping.generatedColumn));
            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
          }
          lastMapping = mapping;
        }, this);
        // We have processed all mappings.
        if (remainingLinesIndex < remainingLines.length) {
          if (lastMapping) {
            // Associate the remaining code in the current line with "lastMapping"
            addMappingWithCode(lastMapping, shiftNextLine());
          }
          // and add the remaining lines without any mapping
          node.add(remainingLines.splice(remainingLinesIndex).join(""));
        }

        // Copy sourcesContent into SourceNode
        aSourceMapConsumer.sources.forEach(function(sourceFile) {
          const content = aSourceMapConsumer.sourceContentFor(sourceFile);
          if (content != null) {
            if (aRelativePath != null) {
              sourceFile = util.join(aRelativePath, sourceFile);
            }
            node.setSourceContent(sourceFile, content);
          }
        });

        return node;

        function addMappingWithCode(mapping, code) {
          if (mapping === null || mapping.source === undefined) {
            node.add(code);
          } else {
            const source = aRelativePath
              ? util.join(aRelativePath, mapping.source)
              : mapping.source;
            node.add(new SourceNode(mapping.originalLine,
                                    mapping.originalColumn,
                                    source,
                                    code,
                                    mapping.name));
          }
        }
      }

      /**
       * Add a chunk of generated JS to this source node.
       *
       * @param aChunk A string snippet of generated JS code, another instance of
       *        SourceNode, or an array where each member is one of those things.
       */
      add(aChunk) {
        if (Array.isArray(aChunk)) {
          aChunk.forEach(function(chunk) {
            this.add(chunk);
          }, this);
        } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
          if (aChunk) {
            this.children.push(aChunk);
          }
        } else {
          throw new TypeError(
            "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
          );
        }
        return this;
      }

      /**
       * Add a chunk of generated JS to the beginning of this source node.
       *
       * @param aChunk A string snippet of generated JS code, another instance of
       *        SourceNode, or an array where each member is one of those things.
       */
      prepend(aChunk) {
        if (Array.isArray(aChunk)) {
          for (let i = aChunk.length - 1; i >= 0; i--) {
            this.prepend(aChunk[i]);
          }
        } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
          this.children.unshift(aChunk);
        } else {
          throw new TypeError(
            "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
          );
        }
        return this;
      }

      /**
       * Walk over the tree of JS snippets in this node and its children. The
       * walking function is called once for each snippet of JS and is passed that
       * snippet and the its original associated source's line/column location.
       *
       * @param aFn The traversal function.
       */
      walk(aFn) {
        let chunk;
        for (let i = 0, len = this.children.length; i < len; i++) {
          chunk = this.children[i];
          if (chunk[isSourceNode]) {
            chunk.walk(aFn);
          } else if (chunk !== "") {
            aFn(chunk, { source: this.source,
                          line: this.line,
                          column: this.column,
                          name: this.name });
          }
        }
      }

      /**
       * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
       * each of `this.children`.
       *
       * @param aSep The separator.
       */
      join(aSep) {
        let newChildren;
        let i;
        const len = this.children.length;
        if (len > 0) {
          newChildren = [];
          for (i = 0; i < len - 1; i++) {
            newChildren.push(this.children[i]);
            newChildren.push(aSep);
          }
          newChildren.push(this.children[i]);
          this.children = newChildren;
        }
        return this;
      }

      /**
       * Call String.prototype.replace on the very right-most source snippet. Useful
       * for trimming whitespace from the end of a source node, etc.
       *
       * @param aPattern The pattern to replace.
       * @param aReplacement The thing to replace the pattern with.
       */
      replaceRight(aPattern, aReplacement) {
        const lastChild = this.children[this.children.length - 1];
        if (lastChild[isSourceNode]) {
          lastChild.replaceRight(aPattern, aReplacement);
        } else if (typeof lastChild === "string") {
          this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
        } else {
          this.children.push("".replace(aPattern, aReplacement));
        }
        return this;
      }

      /**
       * Set the source content for a source file. This will be added to the SourceMapGenerator
       * in the sourcesContent field.
       *
       * @param aSourceFile The filename of the source file
       * @param aSourceContent The content of the source file
       */
      setSourceContent(aSourceFile, aSourceContent) {
        this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
      }

      /**
       * Walk over the tree of SourceNodes. The walking function is called for each
       * source file content and is passed the filename and source content.
       *
       * @param aFn The traversal function.
       */
      walkSourceContents(aFn) {
        for (let i = 0, len = this.children.length; i < len; i++) {
          if (this.children[i][isSourceNode]) {
            this.children[i].walkSourceContents(aFn);
          }
        }

        const sources = Object.keys(this.sourceContents);
        for (let i = 0, len = sources.length; i < len; i++) {
          aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
        }
      }

      /**
       * Return the string representation of this source node. Walks over the tree
       * and concatenates all the various snippets together to one string.
       */
      toString() {
        let str = "";
        this.walk(function(chunk) {
          str += chunk;
        });
        return str;
      }

      /**
       * Returns the string representation of this source node along with a source
       * map.
       */
      toStringWithSourceMap(aArgs) {
        const generated = {
          code: "",
          line: 1,
          column: 0
        };
        const map = new SourceMapGenerator$1(aArgs);
        let sourceMappingActive = false;
        let lastOriginalSource = null;
        let lastOriginalLine = null;
        let lastOriginalColumn = null;
        let lastOriginalName = null;
        this.walk(function(chunk, original) {
          generated.code += chunk;
          if (original.source !== null
              && original.line !== null
              && original.column !== null) {
            if (lastOriginalSource !== original.source
              || lastOriginalLine !== original.line
              || lastOriginalColumn !== original.column
              || lastOriginalName !== original.name) {
              map.addMapping({
                source: original.source,
                original: {
                  line: original.line,
                  column: original.column
                },
                generated: {
                  line: generated.line,
                  column: generated.column
                },
                name: original.name
              });
            }
            lastOriginalSource = original.source;
            lastOriginalLine = original.line;
            lastOriginalColumn = original.column;
            lastOriginalName = original.name;
            sourceMappingActive = true;
          } else if (sourceMappingActive) {
            map.addMapping({
              generated: {
                line: generated.line,
                column: generated.column
              }
            });
            lastOriginalSource = null;
            sourceMappingActive = false;
          }
          for (let idx = 0, length = chunk.length; idx < length; idx++) {
            if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
              generated.line++;
              generated.column = 0;
              // Mappings end at eol
              if (idx + 1 === length) {
                lastOriginalSource = null;
                sourceMappingActive = false;
              } else if (sourceMappingActive) {
                map.addMapping({
                  source: original.source,
                  original: {
                    line: original.line,
                    column: original.column
                  },
                  generated: {
                    line: generated.line,
                    column: generated.column
                  },
                  name: original.name
                });
              }
            } else {
              generated.column++;
            }
          }
        });
        this.walkSourceContents(function(sourceFile, sourceContent) {
          map.setSourceContent(sourceFile, sourceContent);
        });

        return { code: generated.code, map };
      }
    }

    sourceNode.SourceNode = SourceNode;

    /*
     * Copyright 2009-2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE.txt or:
     * http://opensource.org/licenses/BSD-3-Clause
     */

    sourceMap.SourceMapGenerator = sourceMapGenerator.SourceMapGenerator;
    sourceMap.SourceMapConsumer = sourceMapConsumer.SourceMapConsumer;
    sourceMap.SourceNode = sourceNode.SourceNode;

    var SourceMapConsumer = sourceMap.SourceMapConsumer;

    function inputSourceMapTracker$1() {
      var maps = {};

      return {
        all: all$2.bind(null, maps),
        isTracking: isTracking.bind(null, maps),
        originalPositionFor: originalPositionFor.bind(null, maps),
        track: track$2.bind(null, maps)
      };
    }

    function all$2(maps) {
      return maps;
    }

    function isTracking(maps, source) {
      return source in maps;
    }

    function originalPositionFor(maps, metadata, range, selectorFallbacks) {
      var line = metadata[0];
      var column = metadata[1];
      var source = metadata[2];
      var position = {
        line: line,
        column: column + range
      };
      var originalPosition;

      while (!originalPosition && position.column > column) {
        position.column--;
        originalPosition = maps[source].originalPositionFor(position);
      }

      if (!originalPosition || originalPosition.column < 0) {
        return metadata;
      }

      if (originalPosition.line === null && line > 1 && selectorFallbacks > 0) {
        return originalPositionFor(maps, [line - 1, column, source], range, selectorFallbacks - 1);
      }

      return originalPosition.line !== null
        ? toMetadata(originalPosition)
        : metadata;
    }

    function toMetadata(asHash) {
      return [asHash.line, asHash.column, asHash.source];
    }

    function track$2(maps, source, data) {
      maps[source] = new SourceMapConsumer(data);
    }

    var inputSourceMapTracker_1 = inputSourceMapTracker$1;

    var REMOTE_RESOURCE_PATTERN = /^(\w+:\/\/|\/\/)/;
    var FILE_RESOURCE_PATTERN = /^file:\/\//;

    function isRemoteResource$5(uri) {
      return REMOTE_RESOURCE_PATTERN.test(uri) && !FILE_RESOURCE_PATTERN.test(uri);
    }

    var isRemoteResource_1 = isRemoteResource$5;

    var NO_PROTOCOL_RESOURCE_PATTERN = /^\/\//;

    function hasProtocol$4(uri) {
      return !NO_PROTOCOL_RESOURCE_PATTERN.test(uri);
    }

    var hasProtocol_1 = hasProtocol$4;

    var path$6 = require$$1;
    var url$2 = require$$1$1;

    var isRemoteResource$4 = isRemoteResource_1;
    var hasProtocol$3 = hasProtocol_1;

    var HTTP_PROTOCOL = 'http:';

    function isAllowedResource$3(uri, isRemote, rules) {
      var match;
      var absoluteUri;
      var allowed = !isRemote;
      var rule;
      var isNegated;
      var normalizedRule;
      var i;

      if (rules.length === 0) {
        return false;
      }

      if (isRemote && !hasProtocol$3(uri)) {
        uri = HTTP_PROTOCOL + uri;
      }

      match = isRemote
        ? url$2.parse(uri).host
        : uri;

      absoluteUri = isRemote
        ? uri
        : path$6.resolve(uri);

      for (i = 0; i < rules.length; i++) {
        rule = rules[i];
        isNegated = rule[0] == '!';
        normalizedRule = rule.substring(1);

        if (isNegated && isRemote && isRemoteRule(normalizedRule)) {
          allowed = allowed && !isAllowedResource$3(uri, true, [normalizedRule]);
        } else if (isNegated && !isRemote && !isRemoteRule(normalizedRule)) {
          allowed = allowed && !isAllowedResource$3(uri, false, [normalizedRule]);
        } else if (isNegated) {
          allowed = allowed && true;
        } else if (rule == 'all') {
          allowed = true;
        } else if (isRemote && rule == 'local') {
          allowed = allowed || false;
        } else if (isRemote && rule == 'remote') {
          allowed = true;
        } else if (!isRemote && rule == 'remote') {
          allowed = false;
        } else if (!isRemote && rule == 'local') {
          allowed = true;
        } else if (rule === match) {
          allowed = true;
        } else if (rule === uri) {
          allowed = true;
        } else if (isRemote && absoluteUri.indexOf(rule) === 0) {
          allowed = true;
        } else if (!isRemote && absoluteUri.indexOf(path$6.resolve(rule)) === 0) {
          allowed = true;
        } else if (isRemote != isRemoteRule(normalizedRule)) {
          allowed = allowed && true;
        } else {
          allowed = false;
        }
      }

      return allowed;
    }

    function isRemoteRule(rule) {
      return isRemoteResource$4(rule) || url$2.parse(HTTP_PROTOCOL + '//' + rule).host == rule;
    }

    var isAllowedResource_1 = isAllowedResource$3;

    var DATA_URI_PATTERN$1 = /^data:(\S*?)?(;charset=(?:(?!;charset=)[^;])+)?(;[^,]+?)?,(.+)/;

    function matchDataUri$1(uri) {
      return DATA_URI_PATTERN$1.exec(uri);
    }

    var matchDataUri_1 = matchDataUri$1;

    var path$5 = require$$1;

    function rebaseLocalMap$2(sourceMap, sourceUri, rebaseTo) {
      var currentPath = path$5.resolve('');
      var absoluteUri = path$5.resolve(currentPath, sourceUri);
      var absoluteUriDirectory = path$5.dirname(absoluteUri);

      sourceMap.sources = sourceMap.sources.map(function(source) {
        return path$5.relative(rebaseTo, path$5.resolve(absoluteUriDirectory, source));
      });

      return sourceMap;
    }

    var rebaseLocalMap_1 = rebaseLocalMap$2;

    var path$4 = require$$1;
    var url$1 = require$$1$1;

    function rebaseRemoteMap$2(sourceMap, sourceUri) {
      var sourceDirectory = path$4.dirname(sourceUri);

      sourceMap.sources = sourceMap.sources.map(function(source) {
        return url$1.resolve(sourceDirectory, source);
      });

      return sourceMap;
    }

    var rebaseRemoteMap_1 = rebaseRemoteMap$2;

    var DATA_URI_PATTERN = /^data:(\S{0,31}?)?(;charset=(?:(?!;charset=)[^;])+)?(;[^,]+?)?,(.+)/;

    function isDataUriResource$2(uri) {
      return DATA_URI_PATTERN.test(uri);
    }

    var isDataUriResource_1 = isDataUriResource$2;

    var fs$2 = require$$0;
    var path$3 = require$$1;

    var isAllowedResource$2 = isAllowedResource_1;
    var matchDataUri = matchDataUri_1;
    var rebaseLocalMap$1 = rebaseLocalMap_1;
    var rebaseRemoteMap$1 = rebaseRemoteMap_1;

    var Token$3 = token;
    var hasProtocol$2 = hasProtocol_1;
    var isDataUriResource$1 = isDataUriResource_1;
    var isRemoteResource$3 = isRemoteResource_1;

    var MAP_MARKER_PATTERN = /^\/\*# sourceMappingURL=(\S+) \*\/$/;

    function applySourceMaps$1(tokens, context, callback) {
      var applyContext = {
        callback: callback,
        fetch: context.options.fetch,
        index: 0,
        inline: context.options.inline,
        inlineRequest: context.options.inlineRequest,
        inlineTimeout: context.options.inlineTimeout,
        inputSourceMapTracker: context.inputSourceMapTracker,
        localOnly: context.localOnly,
        processedTokens: [],
        rebaseTo: context.options.rebaseTo,
        sourceTokens: tokens,
        warnings: context.warnings
      };

      return context.options.sourceMap && tokens.length > 0
        ? doApplySourceMaps(applyContext)
        : callback(tokens);
    }

    function doApplySourceMaps(applyContext) {
      var singleSourceTokens = [];
      var lastSource = findTokenSource(applyContext.sourceTokens[0]);
      var source;
      var token;
      var l;

      for (l = applyContext.sourceTokens.length; applyContext.index < l; applyContext.index++) {
        token = applyContext.sourceTokens[applyContext.index];
        source = findTokenSource(token);

        if (source != lastSource) {
          singleSourceTokens = [];
          lastSource = source;
        }

        singleSourceTokens.push(token);
        applyContext.processedTokens.push(token);

        if (token[0] == Token$3.COMMENT && MAP_MARKER_PATTERN.test(token[1])) {
          return fetchAndApplySourceMap(token[1], source, singleSourceTokens, applyContext);
        }
      }

      return applyContext.callback(applyContext.processedTokens);
    }

    function findTokenSource(token) {
      var scope;
      var metadata;

      if (token[0] == Token$3.AT_RULE || token[0] == Token$3.COMMENT || token[0] == Token$3.RAW) {
        metadata = token[2][0];
      } else {
        scope = token[1][0];
        metadata = scope[2][0];
      }

      return metadata[2];
    }

    function fetchAndApplySourceMap(sourceMapComment, source, singleSourceTokens, applyContext) {
      return extractInputSourceMapFrom(sourceMapComment, applyContext, function(inputSourceMap) {
        if (inputSourceMap) {
          applyContext.inputSourceMapTracker.track(source, inputSourceMap);
          applySourceMapRecursively(singleSourceTokens, applyContext.inputSourceMapTracker);
        }

        applyContext.index++;
        return doApplySourceMaps(applyContext);
      });
    }

    function extractInputSourceMapFrom(sourceMapComment, applyContext, whenSourceMapReady) {
      var uri = MAP_MARKER_PATTERN.exec(sourceMapComment)[1];
      var absoluteUri;
      var sourceMap;
      var rebasedMap;

      if (isDataUriResource$1(uri)) {
        sourceMap = extractInputSourceMapFromDataUri(uri);
        return whenSourceMapReady(sourceMap);
      } if (isRemoteResource$3(uri)) {
        return loadInputSourceMapFromRemoteUri(uri, applyContext, function(sourceMap) {
          var parsedMap;

          if (sourceMap) {
            parsedMap = JSON.parse(sourceMap);
            rebasedMap = rebaseRemoteMap$1(parsedMap, uri);
            whenSourceMapReady(rebasedMap);
          } else {
            whenSourceMapReady(null);
          }
        });
      }
      // at this point `uri` is already rebased, see lib/reader/rebase.js#rebaseSourceMapComment
      // it is rebased to be consistent with rebasing other URIs
      // however here we need to resolve it back to read it from disk
      absoluteUri = path$3.resolve(applyContext.rebaseTo, uri);
      sourceMap = loadInputSourceMapFromLocalUri(absoluteUri, applyContext);

      if (sourceMap) {
        rebasedMap = rebaseLocalMap$1(sourceMap, absoluteUri, applyContext.rebaseTo);
        return whenSourceMapReady(rebasedMap);
      }
      return whenSourceMapReady(null);
    }

    function extractInputSourceMapFromDataUri(uri) {
      var dataUriMatch = matchDataUri(uri);
      var charset = dataUriMatch[2] ? dataUriMatch[2].split(/[=;]/)[2] : 'us-ascii';
      var encoding = dataUriMatch[3] ? dataUriMatch[3].split(';')[1] : 'utf8';
      var data = encoding == 'utf8' ? commonjsGlobal.unescape(dataUriMatch[4]) : dataUriMatch[4];

      var buffer = Buffer.from(data, encoding);
      buffer.charset = charset;

      return JSON.parse(buffer.toString());
    }

    function loadInputSourceMapFromRemoteUri(uri, applyContext, whenLoaded) {
      var isAllowed = isAllowedResource$2(uri, true, applyContext.inline);
      var isRuntimeResource = !hasProtocol$2(uri);

      if (applyContext.localOnly) {
        applyContext.warnings.push('Cannot fetch remote resource from "' + uri + '" as no callback given.');
        return whenLoaded(null);
      } if (isRuntimeResource) {
        applyContext.warnings.push('Cannot fetch "' + uri + '" as no protocol given.');
        return whenLoaded(null);
      } if (!isAllowed) {
        applyContext.warnings.push('Cannot fetch "' + uri + '" as resource is not allowed.');
        return whenLoaded(null);
      }

      applyContext.fetch(uri, applyContext.inlineRequest, applyContext.inlineTimeout, function(error, body) {
        if (error) {
          applyContext.warnings.push('Missing source map at "' + uri + '" - ' + error);
          return whenLoaded(null);
        }

        whenLoaded(body);
      });
    }

    function loadInputSourceMapFromLocalUri(uri, applyContext) {
      var isAllowed = isAllowedResource$2(uri, false, applyContext.inline);
      var sourceMap;

      if (!fs$2.existsSync(uri) || !fs$2.statSync(uri).isFile()) {
        applyContext.warnings.push('Ignoring local source map at "' + uri + '" as resource is missing.');
        return null;
      } if (!isAllowed) {
        applyContext.warnings.push('Cannot fetch "' + uri + '" as resource is not allowed.');
        return null;
      } if (!fs$2.statSync(uri).size) {
        applyContext.warnings.push('Cannot fetch "' + uri + '" as resource is empty.');
        return null;
      }

      sourceMap = fs$2.readFileSync(uri, 'utf-8');
      return JSON.parse(sourceMap);
    }

    function applySourceMapRecursively(tokens, inputSourceMapTracker) {
      var token;
      var i, l;

      for (i = 0, l = tokens.length; i < l; i++) {
        token = tokens[i];

        switch (token[0]) {
        case Token$3.AT_RULE:
          applySourceMapTo(token, inputSourceMapTracker);
          break;
        case Token$3.AT_RULE_BLOCK:
          applySourceMapRecursively(token[1], inputSourceMapTracker);
          applySourceMapRecursively(token[2], inputSourceMapTracker);
          break;
        case Token$3.AT_RULE_BLOCK_SCOPE:
          applySourceMapTo(token, inputSourceMapTracker);
          break;
        case Token$3.NESTED_BLOCK:
          applySourceMapRecursively(token[1], inputSourceMapTracker);
          applySourceMapRecursively(token[2], inputSourceMapTracker);
          break;
        case Token$3.NESTED_BLOCK_SCOPE:
          applySourceMapTo(token, inputSourceMapTracker);
          break;
        case Token$3.COMMENT:
          applySourceMapTo(token, inputSourceMapTracker);
          break;
        case Token$3.PROPERTY:
          applySourceMapRecursively(token, inputSourceMapTracker);
          break;
        case Token$3.PROPERTY_BLOCK:
          applySourceMapRecursively(token[1], inputSourceMapTracker);
          break;
        case Token$3.PROPERTY_NAME:
          applySourceMapTo(token, inputSourceMapTracker);
          break;
        case Token$3.PROPERTY_VALUE:
          applySourceMapTo(token, inputSourceMapTracker);
          break;
        case Token$3.RULE:
          applySourceMapRecursively(token[1], inputSourceMapTracker);
          applySourceMapRecursively(token[2], inputSourceMapTracker);
          break;
        case Token$3.RULE_SCOPE:
          applySourceMapTo(token, inputSourceMapTracker);
        }
      }

      return tokens;
    }

    function applySourceMapTo(token, inputSourceMapTracker) {
      var value = token[1];
      var metadata = token[2];
      var newMetadata = [];
      var i, l;

      for (i = 0, l = metadata.length; i < l; i++) {
        newMetadata.push(inputSourceMapTracker.originalPositionFor(metadata[i], value.length));
      }

      token[2] = newMetadata;
    }

    var applySourceMaps_1 = applySourceMaps$1;

    var split = split_1;

    var BRACE_PREFIX = /^\(/;
    var BRACE_SUFFIX = /\)$/;
    var IMPORT_PREFIX_PATTERN$1 = /^@import/i;
    var QUOTE_PREFIX_PATTERN$1 = /['"]\s{0,31}/;
    var QUOTE_SUFFIX_PATTERN$1 = /\s{0,31}['"]/;
    var URL_PREFIX_PATTERN$1 = /^url\(\s{0,31}/i;
    var URL_SUFFIX_PATTERN$1 = /\s{0,31}\)/i;

    function extractImportUrlAndMedia$2(atRuleValue) {
      var uri;
      var mediaQuery;
      var normalized;
      var parts;

      normalized = atRuleValue
        .replace(IMPORT_PREFIX_PATTERN$1, '')
        .trim()
        .replace(URL_PREFIX_PATTERN$1, '(')
        .replace(URL_SUFFIX_PATTERN$1, ') ')
        .replace(QUOTE_PREFIX_PATTERN$1, '')
        .replace(QUOTE_SUFFIX_PATTERN$1, '');

      parts = split(normalized, ' ');

      uri = parts[0]
        .replace(BRACE_PREFIX, '')
        .replace(BRACE_SUFFIX, '');
      mediaQuery = parts.slice(1).join(' ');

      return [uri, mediaQuery];
    }

    var extractImportUrlAndMedia_1 = extractImportUrlAndMedia$2;

    var fs$1 = require$$0;
    var path$2 = require$$1;

    var isAllowedResource$1 = isAllowedResource_1;

    var hasProtocol$1 = hasProtocol_1;
    var isRemoteResource$2 = isRemoteResource_1;

    function loadOriginalSources$1(context, callback) {
      var loadContext = {
        callback: callback,
        fetch: context.options.fetch,
        index: 0,
        inline: context.options.inline,
        inlineRequest: context.options.inlineRequest,
        inlineTimeout: context.options.inlineTimeout,
        localOnly: context.localOnly,
        rebaseTo: context.options.rebaseTo,
        sourcesContent: context.sourcesContent,
        uriToSource: uriToSourceMapping(context.inputSourceMapTracker.all()),
        warnings: context.warnings
      };

      return context.options.sourceMap && context.options.sourceMapInlineSources
        ? doLoadOriginalSources(loadContext)
        : callback();
    }

    function uriToSourceMapping(allSourceMapConsumers) {
      var mapping = {};
      var consumer;
      var uri;
      var source;
      var i, l;

      for (source in allSourceMapConsumers) {
        consumer = allSourceMapConsumers[source];

        for (i = 0, l = consumer.sources.length; i < l; i++) {
          uri = consumer.sources[i];
          source = consumer.sourceContentFor(uri, true);

          mapping[uri] = source;
        }
      }

      return mapping;
    }

    function doLoadOriginalSources(loadContext) {
      var uris = Object.keys(loadContext.uriToSource);
      var uri;
      var source;
      var total;

      for (total = uris.length; loadContext.index < total; loadContext.index++) {
        uri = uris[loadContext.index];
        source = loadContext.uriToSource[uri];

        if (source) {
          loadContext.sourcesContent[uri] = source;
        } else {
          return loadOriginalSource(uri, loadContext);
        }
      }

      return loadContext.callback();
    }

    function loadOriginalSource(uri, loadContext) {
      var content;

      if (isRemoteResource$2(uri)) {
        return loadOriginalSourceFromRemoteUri(uri, loadContext, function(content) {
          loadContext.index++;
          loadContext.sourcesContent[uri] = content;
          return doLoadOriginalSources(loadContext);
        });
      }
      content = loadOriginalSourceFromLocalUri(uri, loadContext);
      loadContext.index++;
      loadContext.sourcesContent[uri] = content;
      return doLoadOriginalSources(loadContext);
    }

    function loadOriginalSourceFromRemoteUri(uri, loadContext, whenLoaded) {
      var isAllowed = isAllowedResource$1(uri, true, loadContext.inline);
      var isRuntimeResource = !hasProtocol$1(uri);

      if (loadContext.localOnly) {
        loadContext.warnings.push('Cannot fetch remote resource from "' + uri + '" as no callback given.');
        return whenLoaded(null);
      } if (isRuntimeResource) {
        loadContext.warnings.push('Cannot fetch "' + uri + '" as no protocol given.');
        return whenLoaded(null);
      } if (!isAllowed) {
        loadContext.warnings.push('Cannot fetch "' + uri + '" as resource is not allowed.');
        return whenLoaded(null);
      }

      loadContext.fetch(uri, loadContext.inlineRequest, loadContext.inlineTimeout, function(error, content) {
        if (error) {
          loadContext.warnings.push('Missing original source at "' + uri + '" - ' + error);
        }

        whenLoaded(content);
      });
    }

    function loadOriginalSourceFromLocalUri(relativeUri, loadContext) {
      var isAllowed = isAllowedResource$1(relativeUri, false, loadContext.inline);
      var absoluteUri = path$2.resolve(loadContext.rebaseTo, relativeUri);

      if (!fs$1.existsSync(absoluteUri) || !fs$1.statSync(absoluteUri).isFile()) {
        loadContext.warnings.push('Ignoring local source map at "' + absoluteUri + '" as resource is missing.');
        return null;
      } if (!isAllowed) {
        loadContext.warnings.push('Cannot fetch "' + absoluteUri + '" as resource is not allowed.');
        return null;
      }

      var result = fs$1.readFileSync(absoluteUri, 'utf8');
      if (result.charCodeAt(0) === 65279) {
        result = result.substring(1);
      }
      return result;
    }

    var loadOriginalSources_1 = loadOriginalSources$1;

    var UNIX_SEPARATOR = '/';
    var WINDOWS_SEPARATOR_PATTERN = /\\/g;

    function normalizePath$1(path) {
      return path.replace(WINDOWS_SEPARATOR_PATTERN, UNIX_SEPARATOR);
    }

    var normalizePath_1 = normalizePath$1;

    function restoreImport$2(uri, mediaQuery) {
      return ('@import ' + uri + ' ' + mediaQuery).trim();
    }

    var restoreImport_1 = restoreImport$2;

    var path$1 = require$$1;
    var url = require$$1$1;

    var isDataUriResource = isDataUriResource_1;

    var DOUBLE_QUOTE = '"';
    var SINGLE_QUOTE = '\'';
    var URL_PREFIX = 'url(';
    var URL_SUFFIX = ')';

    var PROTOCOL_LESS_PREFIX_PATTERN = /^[^\w\d]*\/\//;
    var QUOTE_PREFIX_PATTERN = /^["']/;
    var QUOTE_SUFFIX_PATTERN = /["']$/;
    var ROUND_BRACKETS_PATTERN = /[()]/;
    var URL_PREFIX_PATTERN = /^url\(/i;
    var URL_SUFFIX_PATTERN = /\)$/;
    var WHITESPACE_PATTERN = /\s/;

    var isWindows$1 = browser$1.platform == 'win32';

    function rebase$2(uri, rebaseConfig) {
      if (!rebaseConfig) {
        return uri;
      }

      if (isAbsolute(uri) && !isRemote(rebaseConfig.toBase)) {
        return uri;
      }

      if (isRemote(uri) || isSVGMarker(uri) || isInternal(uri) || isDataUriResource(uri)) {
        return uri;
      }

      if (isRemote(rebaseConfig.toBase)) {
        return url.resolve(rebaseConfig.toBase, uri);
      }

      return rebaseConfig.absolute
        ? normalize(absolute(uri, rebaseConfig))
        : normalize(relative(uri, rebaseConfig));
    }

    function isAbsolute(uri) {
      return path$1.isAbsolute(uri);
    }

    function isSVGMarker(uri) {
      return uri[0] == '#';
    }

    function isInternal(uri) {
      return /^\w+:\w+/.test(uri);
    }

    function isRemote(uri) {
      return /^[^:]+?:\/\//.test(uri) || PROTOCOL_LESS_PREFIX_PATTERN.test(uri);
    }

    function absolute(uri, rebaseConfig) {
      return path$1
        .resolve(path$1.join(rebaseConfig.fromBase || '', uri))
        .replace(rebaseConfig.toBase, '');
    }

    function relative(uri, rebaseConfig) {
      return path$1.relative(rebaseConfig.toBase, path$1.join(rebaseConfig.fromBase || '', uri));
    }

    function normalize(uri) {
      return isWindows$1 ? uri.replace(/\\/g, '/') : uri;
    }

    function quoteFor(unquotedUrl) {
      if (unquotedUrl.indexOf(SINGLE_QUOTE) > -1) {
        return DOUBLE_QUOTE;
      } if (unquotedUrl.indexOf(DOUBLE_QUOTE) > -1) {
        return SINGLE_QUOTE;
      } if (hasWhitespace(unquotedUrl) || hasRoundBrackets(unquotedUrl)) {
        return SINGLE_QUOTE;
      }
      return '';
    }

    function hasWhitespace(url) {
      return WHITESPACE_PATTERN.test(url);
    }

    function hasRoundBrackets(url) {
      return ROUND_BRACKETS_PATTERN.test(url);
    }

    function rewriteUrl$1(originalUrl, rebaseConfig, pathOnly) {
      var strippedUrl = originalUrl
        .replace(URL_PREFIX_PATTERN, '')
        .replace(URL_SUFFIX_PATTERN, '')
        .trim();

      var unquotedUrl = strippedUrl
        .replace(QUOTE_PREFIX_PATTERN, '')
        .replace(QUOTE_SUFFIX_PATTERN, '')
        .trim();

      var quote = strippedUrl[0] == SINGLE_QUOTE || strippedUrl[0] == DOUBLE_QUOTE
        ? strippedUrl[0]
        : quoteFor(unquotedUrl);

      return pathOnly
        ? rebase$2(unquotedUrl, rebaseConfig)
        : URL_PREFIX + quote + rebase$2(unquotedUrl, rebaseConfig) + quote + URL_SUFFIX;
    }

    var rewriteUrl_1 = rewriteUrl$1;

    var IMPORT_PREFIX_PATTERN = /^@import/i;

    function isImport$2(value) {
      return IMPORT_PREFIX_PATTERN.test(value);
    }

    var isImport_1 = isImport$2;

    var extractImportUrlAndMedia$1 = extractImportUrlAndMedia_1;
    var restoreImport$1 = restoreImport_1;
    var rewriteUrl = rewriteUrl_1;

    var Token$2 = token;
    var isImport$1 = isImport_1;

    var SOURCE_MAP_COMMENT_PATTERN = /^\/\*# sourceMappingURL=(\S+) \*\/$/;

    function rebase$1(tokens, rebaseAll, validator, rebaseConfig) {
      return rebaseAll
        ? rebaseEverything(tokens, validator, rebaseConfig)
        : rebaseAtRules(tokens, validator, rebaseConfig);
    }

    function rebaseEverything(tokens, validator, rebaseConfig) {
      var token;
      var i, l;

      for (i = 0, l = tokens.length; i < l; i++) {
        token = tokens[i];

        switch (token[0]) {
        case Token$2.AT_RULE:
          rebaseAtRule(token, validator, rebaseConfig);
          break;
        case Token$2.AT_RULE_BLOCK:
          rebaseProperties(token[2], validator, rebaseConfig);
          break;
        case Token$2.COMMENT:
          rebaseSourceMapComment(token, rebaseConfig);
          break;
        case Token$2.NESTED_BLOCK:
          rebaseEverything(token[2], validator, rebaseConfig);
          break;
        case Token$2.RULE:
          rebaseProperties(token[2], validator, rebaseConfig);
          break;
        }
      }

      return tokens;
    }

    function rebaseAtRules(tokens, validator, rebaseConfig) {
      var token;
      var i, l;

      for (i = 0, l = tokens.length; i < l; i++) {
        token = tokens[i];

        switch (token[0]) {
        case Token$2.AT_RULE:
          rebaseAtRule(token, validator, rebaseConfig);
          break;
        }
      }

      return tokens;
    }

    function rebaseAtRule(token, validator, rebaseConfig) {
      if (!isImport$1(token[1])) {
        return;
      }

      var uriAndMediaQuery = extractImportUrlAndMedia$1(token[1]);
      var newUrl = rewriteUrl(uriAndMediaQuery[0], rebaseConfig);
      var mediaQuery = uriAndMediaQuery[1];

      token[1] = restoreImport$1(newUrl, mediaQuery);
    }

    function rebaseSourceMapComment(token, rebaseConfig) {
      var matches = SOURCE_MAP_COMMENT_PATTERN.exec(token[1]);

      if (matches && matches[1].indexOf('data:') === -1) {
        token[1] = token[1].replace(matches[1], rewriteUrl(matches[1], rebaseConfig, true));
      }
    }

    function rebaseProperties(properties, validator, rebaseConfig) {
      var property;
      var value;
      var i, l;
      var j, m;

      for (i = 0, l = properties.length; i < l; i++) {
        property = properties[i];

        for (j = 2 /* 0 is Token.PROPERTY, 1 is name */, m = property.length; j < m; j++) {
          value = property[j][1];

          if (validator.isUrl(value)) {
            property[j][1] = rewriteUrl(value, rebaseConfig);
          }
        }
      }
    }

    var rebase_1 = rebase$1;

    var Marker$1 = marker;
    var Token$1 = token;

    var formatPosition = formatPosition_1;

    var Level = {
      BLOCK: 'block',
      COMMENT: 'comment',
      DOUBLE_QUOTE: 'double-quote',
      RULE: 'rule',
      SINGLE_QUOTE: 'single-quote'
    };

    var AT_RULES = [
      '@charset',
      '@import'
    ];

    var BLOCK_RULES = [
      '@-moz-document',
      '@document',
      '@-moz-keyframes',
      '@-ms-keyframes',
      '@-o-keyframes',
      '@-webkit-keyframes',
      '@keyframes',
      '@media',
      '@supports',
      '@container',
      '@layer'
    ];

    var IGNORE_END_COMMENT_PATTERN = /\/\* clean-css ignore:end \*\/$/;
    var IGNORE_START_COMMENT_PATTERN = /^\/\* clean-css ignore:start \*\//;

    var PAGE_MARGIN_BOXES = [
      '@bottom-center',
      '@bottom-left',
      '@bottom-left-corner',
      '@bottom-right',
      '@bottom-right-corner',
      '@left-bottom',
      '@left-middle',
      '@left-top',
      '@right-bottom',
      '@right-middle',
      '@right-top',
      '@top-center',
      '@top-left',
      '@top-left-corner',
      '@top-right',
      '@top-right-corner'
    ];

    var EXTRA_PAGE_BOXES = [
      '@footnote',
      '@footnotes',
      '@left',
      '@page-float-bottom',
      '@page-float-top',
      '@right'
    ];

    var REPEAT_PATTERN = /^\[\s{0,31}\d+\s{0,31}\]$/;
    var TAIL_BROKEN_VALUE_PATTERN = /([^}])\}*$/;
    var RULE_WORD_SEPARATOR_PATTERN = /[\s(]/;

    function tokenize$1(source, externalContext) {
      var internalContext = {
        level: Level.BLOCK,
        position: {
          source: externalContext.source || undefined,
          line: 1,
          column: 0,
          index: 0
        }
      };

      return intoTokens(source, externalContext, internalContext, false);
    }

    function intoTokens(source, externalContext, internalContext, isNested) {
      var allTokens = [];
      var newTokens = allTokens;
      var lastToken;
      var ruleToken;
      var ruleTokens = [];
      var propertyToken;
      var metadata;
      var metadatas = [];
      var level = internalContext.level;
      var levels = [];
      var buffer = [];
      var buffers = [];
      var isBufferEmpty = true;
      var serializedBuffer;
      var serializedBufferPart;
      var roundBracketLevel = 0;
      var isQuoted;
      var isSpace;
      var isNewLineNix;
      var isNewLineWin;
      var isCarriageReturn;
      var isCommentStart;
      var wasCommentStart = false;
      var isCommentEnd;
      var wasCommentEnd = false;
      var isCommentEndMarker;
      var isEscaped;
      var wasEscaped = false;
      var characterWithNoSpecialMeaning;
      var isPreviousDash = false;
      var isVariable = false;
      var isRaw = false;
      var seekingValue = false;
      var seekingPropertyBlockClosing = false;
      var position = internalContext.position;
      var lastCommentStartAt;

      for (; position.index < source.length; position.index++) {
        var character = source[position.index];

        isQuoted = level == Level.SINGLE_QUOTE || level == Level.DOUBLE_QUOTE;
        isSpace = character == Marker$1.SPACE || character == Marker$1.TAB;
        isNewLineNix = character == Marker$1.NEW_LINE_NIX;
        isNewLineWin = character == Marker$1.NEW_LINE_NIX
          && source[position.index - 1] == Marker$1.CARRIAGE_RETURN;
        isCarriageReturn = character == Marker$1.CARRIAGE_RETURN
          && source[position.index + 1] && source[position.index + 1] != Marker$1.NEW_LINE_NIX;
        isCommentStart = !wasCommentEnd
          && level != Level.COMMENT && !isQuoted
          && character == Marker$1.ASTERISK && source[position.index - 1] == Marker$1.FORWARD_SLASH;
        isCommentEndMarker = !wasCommentStart
          && !isQuoted && character == Marker$1.FORWARD_SLASH
          && source[position.index - 1] == Marker$1.ASTERISK;
        isCommentEnd = level == Level.COMMENT && isCommentEndMarker;
        characterWithNoSpecialMeaning = !isSpace && !isCarriageReturn && (character >= 'A' && character <= 'Z' || character >= 'a' && character <= 'z' || character >= '0' && character <= '9' || character == '-');
        isVariable = isVariable || (level != Level.COMMENT && !seekingValue && isPreviousDash && character === '-' && buffer.length === 1);
        isPreviousDash = character === '-';
        roundBracketLevel = Math.max(roundBracketLevel, 0);

        metadata = isBufferEmpty
          ? [position.line, position.column, position.source]
          : metadata;

        if (isEscaped) {
          // previous character was a backslash
          buffer.push(character);
          isBufferEmpty = false;
        } else if (characterWithNoSpecialMeaning) {
          // it's just an alphanumeric character or a hyphen (part of any rule or property name) so let's end it quickly
          buffer.push(character);
          isBufferEmpty = false;
        } else if ((isSpace || isNewLineNix && !isNewLineWin) && (isQuoted || level == Level.COMMENT)) {
          buffer.push(character);
          isBufferEmpty = false;
        } else if ((isSpace || isNewLineNix && !isNewLineWin) && isBufferEmpty) ; else if (!isCommentEnd && level == Level.COMMENT) {
          buffer.push(character);
          isBufferEmpty = false;
        } else if (!isCommentStart && !isCommentEnd && isRaw) {
          buffer.push(character);
          isBufferEmpty = false;
        } else if (isCommentStart
            && isVariable
            && (level == Level.BLOCK || level == Level.RULE) && buffer.length > 1) {
          // comment start within a variable, e.g. var(/*<--
          buffer.push(character);
          isBufferEmpty = false;

          levels.push(level);
          level = Level.COMMENT;
        } else if (isCommentStart && (level == Level.BLOCK || level == Level.RULE) && buffer.length > 1) {
          // comment start within block preceded by some content, e.g. div/*<--
          metadatas.push(metadata);
          buffer.push(character);
          buffers.push(buffer.slice(0, -2));
          isBufferEmpty = false;

          buffer = buffer.slice(-2);
          metadata = [position.line, position.column - 1, position.source];

          levels.push(level);
          level = Level.COMMENT;
        } else if (isCommentStart) {
          // comment start, e.g. /*<--
          levels.push(level);
          level = Level.COMMENT;
          buffer.push(character);
          isBufferEmpty = false;
        } else if (isCommentEnd && isVariable) {
          // comment end within a variable, e.g. var(/*!*/<--
          buffer.push(character);
          level = levels.pop();
        } else if (isCommentEnd && isIgnoreStartComment(buffer)) {
          // ignore:start comment end, e.g. /* clean-css ignore:start */<--
          serializedBuffer = buffer.join('').trim() + character;
          lastToken = [
            Token$1.COMMENT,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ];
          newTokens.push(lastToken);

          isRaw = true;
          metadata = metadatas.pop() || null;
          buffer = buffers.pop() || [];
          isBufferEmpty = buffer.length === 0;
        } else if (isCommentEnd && isIgnoreEndComment(buffer)) {
          // ignore:start comment end, e.g. /* clean-css ignore:end */<--
          serializedBuffer = buffer.join('') + character;
          lastCommentStartAt = serializedBuffer.lastIndexOf(Marker$1.FORWARD_SLASH + Marker$1.ASTERISK);

          serializedBufferPart = serializedBuffer.substring(0, lastCommentStartAt);
          lastToken = [
            Token$1.RAW,
            serializedBufferPart,
            [originalMetadata(metadata, serializedBufferPart, externalContext)]
          ];
          newTokens.push(lastToken);

          serializedBufferPart = serializedBuffer.substring(lastCommentStartAt);
          metadata = [position.line, position.column - serializedBufferPart.length + 1, position.source];
          lastToken = [
            Token$1.COMMENT,
            serializedBufferPart,
            [originalMetadata(metadata, serializedBufferPart, externalContext)]
          ];
          newTokens.push(lastToken);

          isRaw = false;
          level = levels.pop();
          metadata = metadatas.pop() || null;
          buffer = buffers.pop() || [];
          isBufferEmpty = buffer.length === 0;
        } else if (isCommentEnd) {
          // comment end, e.g. /* comment */<--
          serializedBuffer = buffer.join('').trim() + character;
          lastToken = [
            Token$1.COMMENT,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ];
          newTokens.push(lastToken);

          level = levels.pop();
          metadata = metadatas.pop() || null;
          buffer = buffers.pop() || [];
          isBufferEmpty = buffer.length === 0;
        } else if (isCommentEndMarker && source[position.index + 1] != Marker$1.ASTERISK) {
          externalContext.warnings.push('Unexpected \'*/\' at ' + formatPosition([position.line, position.column, position.source]) + '.');
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker$1.SINGLE_QUOTE && !isQuoted) {
          // single quotation start, e.g. a[href^='https<--
          levels.push(level);
          level = Level.SINGLE_QUOTE;
          buffer.push(character);
          isBufferEmpty = false;
        } else if (character == Marker$1.SINGLE_QUOTE && level == Level.SINGLE_QUOTE) {
          // single quotation end, e.g. a[href^='https'<--
          level = levels.pop();
          buffer.push(character);
          isBufferEmpty = false;
        } else if (character == Marker$1.DOUBLE_QUOTE && !isQuoted) {
          // double quotation start, e.g. a[href^="<--
          levels.push(level);
          level = Level.DOUBLE_QUOTE;
          buffer.push(character);
          isBufferEmpty = false;
        } else if (character == Marker$1.DOUBLE_QUOTE && level == Level.DOUBLE_QUOTE) {
          // double quotation end, e.g. a[href^="https"<--
          level = levels.pop();
          buffer.push(character);
          isBufferEmpty = false;
        } else if (character != Marker$1.CLOSE_ROUND_BRACKET
          && character != Marker$1.OPEN_ROUND_BRACKET
          && level != Level.COMMENT && !isQuoted && roundBracketLevel > 0) {
          // character inside any function, e.g. hsla(.<--
          buffer.push(character);
          isBufferEmpty = false;
        } else if (character == Marker$1.OPEN_ROUND_BRACKET
          && !isQuoted && level != Level.COMMENT
          && !seekingValue) {
          // round open bracket, e.g. @import url(<--
          buffer.push(character);
          isBufferEmpty = false;

          roundBracketLevel++;
        } else if (character == Marker$1.CLOSE_ROUND_BRACKET
          && !isQuoted
          && level != Level.COMMENT
          && !seekingValue) {
          // round open bracket, e.g. @import url(test.css)<--
          buffer.push(character);
          isBufferEmpty = false;

          roundBracketLevel--;
        } else if (character == Marker$1.SEMICOLON && level == Level.BLOCK && buffer[0] == Marker$1.AT) {
          // semicolon ending rule at block level, e.g. @import '...';<--
          serializedBuffer = buffer.join('').trim();
          allTokens.push([
            Token$1.AT_RULE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);

          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker$1.COMMA && level == Level.BLOCK && ruleToken) {
          // comma separator at block level, e.g. a,div,<--
          serializedBuffer = buffer.join('').trim();
          ruleToken[1].push([
            tokenScopeFrom(ruleToken[0]),
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext, ruleToken[1].length)]
          ]);

          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker$1.COMMA && level == Level.BLOCK && tokenTypeFrom(buffer) == Token$1.AT_RULE) {
          // comma separator at block level, e.g. @import url(...) screen,<--
          // keep iterating as end semicolon will create the token
          buffer.push(character);
          isBufferEmpty = false;
        } else if (character == Marker$1.COMMA && level == Level.BLOCK) {
          // comma separator at block level, e.g. a,<--
          ruleToken = [tokenTypeFrom(buffer), [], []];
          serializedBuffer = buffer.join('').trim();
          ruleToken[1].push([
            tokenScopeFrom(ruleToken[0]),
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext, 0)]
          ]);

          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker$1.OPEN_CURLY_BRACKET
          && level == Level.BLOCK
          && ruleToken
          && ruleToken[0] == Token$1.NESTED_BLOCK) {
          // open brace opening at-rule at block level, e.g. @media{<--
          serializedBuffer = buffer.join('').trim();
          ruleToken[1].push([
            Token$1.NESTED_BLOCK_SCOPE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);
          allTokens.push(ruleToken);

          levels.push(level);
          position.column++;
          position.index++;
          buffer = [];
          isBufferEmpty = true;

          ruleToken[2] = intoTokens(source, externalContext, internalContext, true);
          ruleToken = null;
        } else if (character == Marker$1.OPEN_CURLY_BRACKET
          && level == Level.BLOCK
          && tokenTypeFrom(buffer) == Token$1.NESTED_BLOCK) {
          // open brace opening at-rule at block level, e.g. @media{<--
          serializedBuffer = buffer.join('').trim();
          ruleToken = ruleToken || [Token$1.NESTED_BLOCK, [], []];
          ruleToken[1].push([
            Token$1.NESTED_BLOCK_SCOPE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);
          allTokens.push(ruleToken);

          levels.push(level);
          position.column++;
          position.index++;
          buffer = [];
          isBufferEmpty = true;
          isVariable = false;

          ruleToken[2] = intoTokens(source, externalContext, internalContext, true);
          ruleToken = null;
        } else if (character == Marker$1.OPEN_CURLY_BRACKET && level == Level.BLOCK) {
          // open brace opening rule at block level, e.g. div{<--
          serializedBuffer = buffer.join('').trim();
          ruleToken = ruleToken || [tokenTypeFrom(buffer), [], []];
          ruleToken[1].push([
            tokenScopeFrom(ruleToken[0]),
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext, ruleToken[1].length)]
          ]);
          newTokens = ruleToken[2];
          allTokens.push(ruleToken);

          levels.push(level);
          level = Level.RULE;
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker$1.OPEN_CURLY_BRACKET && level == Level.RULE && seekingValue) {
          // open brace opening rule at rule level, e.g. div{--variable:{<--
          ruleTokens.push(ruleToken);
          ruleToken = [Token$1.PROPERTY_BLOCK, []];
          propertyToken.push(ruleToken);
          newTokens = ruleToken[1];

          levels.push(level);
          level = Level.RULE;
          seekingValue = false;
        } else if (character == Marker$1.OPEN_CURLY_BRACKET && level == Level.RULE && isPageMarginBox(buffer)) {
          // open brace opening page-margin box at rule level, e.g. @page{@top-center{<--
          serializedBuffer = buffer.join('').trim();
          ruleTokens.push(ruleToken);
          ruleToken = [Token$1.AT_RULE_BLOCK, [], []];
          ruleToken[1].push([
            Token$1.AT_RULE_BLOCK_SCOPE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);
          newTokens.push(ruleToken);
          newTokens = ruleToken[2];

          levels.push(level);
          level = Level.RULE;
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker$1.COLON && level == Level.RULE && !seekingValue) {
          // colon at rule level, e.g. a{color:<--
          serializedBuffer = buffer.join('').trim();
          propertyToken = [
            Token$1.PROPERTY,
            [
              Token$1.PROPERTY_NAME,
              serializedBuffer,
              [originalMetadata(metadata, serializedBuffer, externalContext)]
            ]
          ];
          newTokens.push(propertyToken);

          seekingValue = true;
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker$1.SEMICOLON
          && level == Level.RULE
          && propertyToken
          && ruleTokens.length > 0
          && !isBufferEmpty
          && buffer[0] == Marker$1.AT) {
          // semicolon at rule level for at-rule, e.g. a{--color:{@apply(--other-color);<--
          serializedBuffer = buffer.join('').trim();
          ruleToken[1].push([
            Token$1.AT_RULE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);

          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker$1.SEMICOLON && level == Level.RULE && propertyToken && !isBufferEmpty) {
          // semicolon at rule level, e.g. a{color:red;<--
          serializedBuffer = buffer.join('').trim();
          propertyToken.push([
            Token$1.PROPERTY_VALUE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);

          propertyToken = null;
          seekingValue = false;
          buffer = [];
          isBufferEmpty = true;
          isVariable = false;
        } else if (character == Marker$1.SEMICOLON
          && level == Level.RULE
          && propertyToken
          && isBufferEmpty
          && isVariable
          && !propertyToken[2]) {
          // semicolon after empty variable value at rule level, e.g. a{--color: ;<--
          propertyToken.push([Token$1.PROPERTY_VALUE, ' ', [originalMetadata(metadata, ' ', externalContext)]]);
          isVariable = false;
          propertyToken = null;
          seekingValue = false;
        } else if (character == Marker$1.SEMICOLON && level == Level.RULE && propertyToken && isBufferEmpty) {
          // semicolon after bracketed value at rule level, e.g. a{color:rgb(...);<--
          propertyToken = null;
          seekingValue = false;
        } else if (character == Marker$1.SEMICOLON
          && level == Level.RULE
          && !isBufferEmpty
          && buffer[0] == Marker$1.AT) {
          // semicolon for at-rule at rule level, e.g. a{@apply(--variable);<--
          serializedBuffer = buffer.join('');
          newTokens.push([
            Token$1.AT_RULE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);

          seekingValue = false;
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker$1.SEMICOLON && level == Level.RULE && seekingPropertyBlockClosing) {
          // close brace after a property block at rule level, e.g. a{--custom:{color:red;};<--
          seekingPropertyBlockClosing = false;
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker$1.SEMICOLON && level == Level.RULE && isBufferEmpty) ; else if (character == Marker$1.CLOSE_CURLY_BRACKET
          && level == Level.RULE
          && propertyToken
          && seekingValue
          && !isBufferEmpty && ruleTokens.length > 0) {
          // close brace at rule level, e.g. a{--color:{color:red}<--
          serializedBuffer = buffer.join('');
          propertyToken.push([
            Token$1.PROPERTY_VALUE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);
          propertyToken = null;
          ruleToken = ruleTokens.pop();
          newTokens = ruleToken[2];

          level = levels.pop();
          seekingValue = false;
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker$1.CLOSE_CURLY_BRACKET
          && level == Level.RULE
          && propertyToken
          && !isBufferEmpty
          && buffer[0] == Marker$1.AT
          && ruleTokens.length > 0) {
          // close brace at rule level for at-rule, e.g. a{--color:{@apply(--other-color)}<--
          serializedBuffer = buffer.join('');
          ruleToken[1].push([
            Token$1.AT_RULE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);
          propertyToken = null;
          ruleToken = ruleTokens.pop();
          newTokens = ruleToken[2];

          level = levels.pop();
          seekingValue = false;
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker$1.CLOSE_CURLY_BRACKET
          && level == Level.RULE
          && propertyToken
          && ruleTokens.length > 0) {
          // close brace at rule level after space, e.g. a{--color:{color:red }<--
          propertyToken = null;
          ruleToken = ruleTokens.pop();
          newTokens = ruleToken[2];

          level = levels.pop();
          seekingValue = false;
        } else if (character == Marker$1.CLOSE_CURLY_BRACKET
          && level == Level.RULE
          && propertyToken
          && !isBufferEmpty) {
          // close brace at rule level, e.g. a{color:red}<--
          serializedBuffer = buffer.join('');
          propertyToken.push([
            Token$1.PROPERTY_VALUE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);
          propertyToken = null;
          ruleToken = ruleTokens.pop();
          newTokens = allTokens;

          level = levels.pop();
          seekingValue = false;
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker$1.CLOSE_CURLY_BRACKET
          && level == Level.RULE
          && !isBufferEmpty
          && buffer[0] == Marker$1.AT) {
          // close brace after at-rule at rule level, e.g. a{@apply(--variable)}<--
          propertyToken = null;
          ruleToken = null;
          serializedBuffer = buffer.join('').trim();
          newTokens.push([
            Token$1.AT_RULE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);
          newTokens = allTokens;

          level = levels.pop();
          seekingValue = false;
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker$1.CLOSE_CURLY_BRACKET
          && level == Level.RULE
          && levels[levels.length - 1] == Level.RULE) {
          // close brace after a property block at rule level, e.g. a{--custom:{color:red;}<--
          propertyToken = null;
          ruleToken = ruleTokens.pop();
          newTokens = ruleToken[2];

          level = levels.pop();
          seekingValue = false;
          seekingPropertyBlockClosing = true;
          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker$1.CLOSE_CURLY_BRACKET
          && level == Level.RULE
          && isVariable
          && propertyToken
          && !propertyToken[2]) {
          // close brace after an empty variable declaration inside a rule, e.g. a{--color: }<--
          propertyToken.push([Token$1.PROPERTY_VALUE, ' ', [originalMetadata(metadata, ' ', externalContext)]]);
          isVariable = false;
          propertyToken = null;
          ruleToken = null;
          newTokens = allTokens;

          level = levels.pop();
          seekingValue = false;
          isVariable = false;
        } else if (character == Marker$1.CLOSE_CURLY_BRACKET && level == Level.RULE) {
          // close brace after a rule, e.g. a{color:red;}<--
          propertyToken = null;
          ruleToken = null;
          newTokens = allTokens;

          level = levels.pop();
          seekingValue = false;
          isVariable = false;
        } else if (character == Marker$1.CLOSE_CURLY_BRACKET
          && level == Level.BLOCK
          && !isNested
          && position.index <= source.length - 1) {
          // stray close brace at block level, e.g. a{color:red}color:blue}<--
          externalContext.warnings.push('Unexpected \'}\' at ' + formatPosition([position.line, position.column, position.source]) + '.');
          buffer.push(character);
          isBufferEmpty = false;
        } else if (character == Marker$1.CLOSE_CURLY_BRACKET && level == Level.BLOCK) {
          // close brace at block level, e.g. @media screen {...}<--
          break;
        } else if (character == Marker$1.OPEN_ROUND_BRACKET && level == Level.RULE && seekingValue) {
          // round open bracket, e.g. a{color:hsla(<--
          buffer.push(character);
          isBufferEmpty = false;
          roundBracketLevel++;
        } else if (character == Marker$1.CLOSE_ROUND_BRACKET
          && level == Level.RULE
          && seekingValue
          && roundBracketLevel == 1) {
          // round close bracket, e.g. a{color:hsla(0,0%,0%)<--
          buffer.push(character);
          isBufferEmpty = false;
          serializedBuffer = buffer.join('').trim();
          propertyToken.push([
            Token$1.PROPERTY_VALUE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);

          roundBracketLevel--;
          buffer = [];
          isBufferEmpty = true;
          isVariable = false;
        } else if (character == Marker$1.CLOSE_ROUND_BRACKET && level == Level.RULE && seekingValue) {
          // round close bracket within other brackets, e.g. a{width:calc((10rem / 2)<--
          buffer.push(character);
          isBufferEmpty = false;
          isVariable = false;
          roundBracketLevel--;
        } else if (character == Marker$1.FORWARD_SLASH
          && source[position.index + 1] != Marker$1.ASTERISK
          && level == Level.RULE
          && seekingValue
          && !isBufferEmpty) {
          // forward slash within a property, e.g. a{background:url(image.png) 0 0/<--
          serializedBuffer = buffer.join('').trim();
          propertyToken.push([
            Token$1.PROPERTY_VALUE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);
          propertyToken.push([
            Token$1.PROPERTY_VALUE,
            character,
            [[position.line, position.column, position.source]]
          ]);

          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker$1.FORWARD_SLASH
          && source[position.index + 1] != Marker$1.ASTERISK
          && level == Level.RULE
          && seekingValue) {
          // forward slash within a property after space, e.g. a{background:url(image.png) 0 0 /<--
          propertyToken.push([
            Token$1.PROPERTY_VALUE,
            character,
            [[position.line, position.column, position.source]]
          ]);

          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker$1.COMMA && level == Level.RULE && seekingValue && !isBufferEmpty) {
          // comma within a property, e.g. a{background:url(image.png),<--
          serializedBuffer = buffer.join('').trim();
          propertyToken.push([
            Token$1.PROPERTY_VALUE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);
          propertyToken.push([
            Token$1.PROPERTY_VALUE,
            character,
            [[position.line, position.column, position.source]]
          ]);

          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker$1.COMMA && level == Level.RULE && seekingValue) {
          // comma within a property after space, e.g. a{background:url(image.png) ,<--
          propertyToken.push([
            Token$1.PROPERTY_VALUE,
            character,
            [[position.line, position.column, position.source]]
          ]);

          buffer = [];
          isBufferEmpty = true;
        } else if (character == Marker$1.CLOSE_SQUARE_BRACKET
          && propertyToken
          && propertyToken.length > 1
          && !isBufferEmpty
          && isRepeatToken(buffer)) {
          buffer.push(character);
          serializedBuffer = buffer.join('').trim();
          propertyToken[propertyToken.length - 1][1] += serializedBuffer;

          buffer = [];
          isBufferEmpty = true;
        } else if ((isSpace || (isNewLineNix && !isNewLineWin))
          && level == Level.RULE
          && seekingValue
          && propertyToken
          && !isBufferEmpty) {
          // space or *nix newline within property, e.g. a{margin:0 <--
          serializedBuffer = buffer.join('').trim();
          propertyToken.push([
            Token$1.PROPERTY_VALUE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);

          buffer = [];
          isBufferEmpty = true;
        } else if (isNewLineWin && level == Level.RULE && seekingValue && propertyToken && buffer.length > 1) {
          // win newline within property, e.g. a{margin:0\r\n<--
          serializedBuffer = buffer.join('').trim();
          propertyToken.push([
            Token$1.PROPERTY_VALUE,
            serializedBuffer,
            [originalMetadata(metadata, serializedBuffer, externalContext)]
          ]);

          buffer = [];
          isBufferEmpty = true;
        } else if (isNewLineWin && level == Level.RULE && seekingValue) {
          // win newline
          buffer = [];
          isBufferEmpty = true;
        } else if (isNewLineWin && buffer.length == 1) {
          // ignore windows newline which is composed of two characters
          buffer.pop();
          isBufferEmpty = buffer.length === 0;
        } else if (!isBufferEmpty || !isSpace && !isNewLineNix && !isNewLineWin && !isCarriageReturn) {
          // any character
          buffer.push(character);
          isBufferEmpty = false;
        }

        wasEscaped = isEscaped;
        isEscaped = !wasEscaped && character == Marker$1.BACK_SLASH;
        wasCommentStart = isCommentStart;
        wasCommentEnd = isCommentEnd;

        position.line = (isNewLineWin || isNewLineNix || isCarriageReturn) ? position.line + 1 : position.line;
        position.column = (isNewLineWin || isNewLineNix || isCarriageReturn) ? 0 : position.column + 1;
      }

      if (seekingValue) {
        externalContext.warnings.push('Missing \'}\' at ' + formatPosition([position.line, position.column, position.source]) + '.');
      }

      if (seekingValue && buffer.length > 0) {
        serializedBuffer = buffer.join('').trimRight().replace(TAIL_BROKEN_VALUE_PATTERN, '$1').trimRight();
        propertyToken.push([
          Token$1.PROPERTY_VALUE,
          serializedBuffer,
          [originalMetadata(metadata, serializedBuffer, externalContext)]
        ]);

        buffer = [];
      }

      if (buffer.length > 0) {
        externalContext.warnings.push('Invalid character(s) \'' + buffer.join('') + '\' at ' + formatPosition(metadata) + '. Ignoring.');
      }

      return allTokens;
    }

    function isIgnoreStartComment(buffer) {
      return IGNORE_START_COMMENT_PATTERN.test(buffer.join('') + Marker$1.FORWARD_SLASH);
    }

    function isIgnoreEndComment(buffer) {
      return IGNORE_END_COMMENT_PATTERN.test(buffer.join('') + Marker$1.FORWARD_SLASH);
    }

    function originalMetadata(metadata, value, externalContext, selectorFallbacks) {
      var source = metadata[2];

      return externalContext.inputSourceMapTracker.isTracking(source)
        ? externalContext.inputSourceMapTracker.originalPositionFor(metadata, value.length, selectorFallbacks)
        : metadata;
    }

    function tokenTypeFrom(buffer) {
      var isAtRule = buffer[0] == Marker$1.AT || buffer[0] == Marker$1.UNDERSCORE;
      var ruleWord = buffer.join('').split(RULE_WORD_SEPARATOR_PATTERN)[0];

      if (isAtRule && BLOCK_RULES.indexOf(ruleWord) > -1) {
        return Token$1.NESTED_BLOCK;
      } if (isAtRule && AT_RULES.indexOf(ruleWord) > -1) {
        return Token$1.AT_RULE;
      } if (isAtRule) {
        return Token$1.AT_RULE_BLOCK;
      }
      return Token$1.RULE;
    }

    function tokenScopeFrom(tokenType) {
      if (tokenType == Token$1.RULE) {
        return Token$1.RULE_SCOPE;
      } if (tokenType == Token$1.NESTED_BLOCK) {
        return Token$1.NESTED_BLOCK_SCOPE;
      } if (tokenType == Token$1.AT_RULE_BLOCK) {
        return Token$1.AT_RULE_BLOCK_SCOPE;
      }
    }

    function isPageMarginBox(buffer) {
      var serializedBuffer = buffer.join('').trim();

      return PAGE_MARGIN_BOXES.indexOf(serializedBuffer) > -1 || EXTRA_PAGE_BOXES.indexOf(serializedBuffer) > -1;
    }

    function isRepeatToken(buffer) {
      return REPEAT_PATTERN.test(buffer.join('') + Marker$1.CLOSE_SQUARE_BRACKET);
    }

    var tokenize_1 = tokenize$1;

    var fs = require$$0;
    var path = require$$1;

    var applySourceMaps = applySourceMaps_1;
    var extractImportUrlAndMedia = extractImportUrlAndMedia_1;
    var isAllowedResource = isAllowedResource_1;
    var loadOriginalSources = loadOriginalSources_1;
    var normalizePath = normalizePath_1;
    var rebase = rebase_1;
    var rebaseLocalMap = rebaseLocalMap_1;
    var rebaseRemoteMap = rebaseRemoteMap_1;
    var restoreImport = restoreImport_1;

    var tokenize = tokenize_1;
    var Token = token;
    var Marker = marker;
    var hasProtocol = hasProtocol_1;
    var isImport = isImport_1;
    var isRemoteResource$1 = isRemoteResource_1;

    var UNKNOWN_URI = 'uri:unknown';
    var FILE_RESOURCE_PROTOCOL = 'file://';

    function readSources$1(input, context, callback) {
      return doReadSources(input, context, function(tokens) {
        return applySourceMaps(tokens, context, function() {
          return loadOriginalSources(context, function() { return callback(tokens); });
        });
      });
    }

    function doReadSources(input, context, callback) {
      if (typeof input == 'string') {
        return fromString(input, context, callback);
      } if (Buffer.isBuffer(input)) {
        return fromString(input.toString(), context, callback);
      } if (Array.isArray(input)) {
        return fromArray(input, context, callback);
      } if (typeof input == 'object') {
        return fromHash(input, context, callback);
      }
    }

    function fromString(input, context, callback) {
      context.source = undefined;
      context.sourcesContent[undefined] = input;
      context.stats.originalSize += input.length;

      return fromStyles(input, context, { inline: context.options.inline }, callback);
    }

    function fromArray(input, context, callback) {
      var inputAsImports = input.reduce(function(accumulator, uriOrHash) {
        if (typeof uriOrHash === 'string') {
          return addStringSource(uriOrHash, accumulator);
        }
        return addHashSource(uriOrHash, context, accumulator);
      }, []);

      return fromStyles(inputAsImports.join(''), context, { inline: ['all'] }, callback);
    }

    function fromHash(input, context, callback) {
      var inputAsImports = addHashSource(input, context, []);
      return fromStyles(inputAsImports.join(''), context, { inline: ['all'] }, callback);
    }

    function addStringSource(input, imports) {
      imports.push(restoreAsImport(normalizeUri(input)));
      return imports;
    }

    function addHashSource(input, context, imports) {
      var uri;
      var normalizedUri;
      var source;

      for (uri in input) {
        source = input[uri];
        normalizedUri = normalizeUri(uri);

        imports.push(restoreAsImport(normalizedUri));

        context.sourcesContent[normalizedUri] = source.styles;

        if (source.sourceMap) {
          trackSourceMap(source.sourceMap, normalizedUri, context);
        }
      }

      return imports;
    }

    function normalizeUri(uri) {
      var currentPath = path.resolve('');
      var absoluteUri;
      var relativeToCurrentPath;
      var normalizedUri;

      if (isRemoteResource$1(uri)) {
        return uri;
      }

      absoluteUri = path.isAbsolute(uri)
        ? uri
        : path.resolve(uri);
      relativeToCurrentPath = path.relative(currentPath, absoluteUri);
      normalizedUri = normalizePath(relativeToCurrentPath);

      return normalizedUri;
    }

    function trackSourceMap(sourceMap, uri, context) {
      var parsedMap = typeof sourceMap == 'string'
        ? JSON.parse(sourceMap)
        : sourceMap;
      var rebasedMap = isRemoteResource$1(uri)
        ? rebaseRemoteMap(parsedMap, uri)
        : rebaseLocalMap(parsedMap, uri || UNKNOWN_URI, context.options.rebaseTo);

      context.inputSourceMapTracker.track(uri, rebasedMap);
    }

    function restoreAsImport(uri) {
      return restoreImport('url(' + uri + ')', '') + Marker.SEMICOLON;
    }

    function fromStyles(styles, context, parentInlinerContext, callback) {
      var tokens;
      var rebaseConfig = {};

      if (!context.source) {
        rebaseConfig.fromBase = path.resolve('');
        rebaseConfig.toBase = context.options.rebaseTo;
      } else if (isRemoteResource$1(context.source)) {
        rebaseConfig.fromBase = context.source;
        rebaseConfig.toBase = context.source;
      } else if (path.isAbsolute(context.source)) {
        rebaseConfig.fromBase = path.dirname(context.source);
        rebaseConfig.toBase = context.options.rebaseTo;
      } else {
        rebaseConfig.fromBase = path.dirname(path.resolve(context.source));
        rebaseConfig.toBase = context.options.rebaseTo;
      }

      tokens = tokenize(styles, context);
      tokens = rebase(tokens, context.options.rebase, context.validator, rebaseConfig);

      return allowsAnyImports(parentInlinerContext.inline)
        ? inline(tokens, context, parentInlinerContext, callback)
        : callback(tokens);
    }

    function allowsAnyImports(inline) {
      return !(inline.length == 1 && inline[0] == 'none');
    }

    function inline(tokens, externalContext, parentInlinerContext, callback) {
      var inlinerContext = {
        afterContent: false,
        callback: callback,
        errors: externalContext.errors,
        externalContext: externalContext,
        fetch: externalContext.options.fetch,
        inlinedStylesheets: parentInlinerContext.inlinedStylesheets || externalContext.inlinedStylesheets,
        inline: parentInlinerContext.inline,
        inlineRequest: externalContext.options.inlineRequest,
        inlineTimeout: externalContext.options.inlineTimeout,
        isRemote: parentInlinerContext.isRemote || false,
        localOnly: externalContext.localOnly,
        outputTokens: [],
        rebaseTo: externalContext.options.rebaseTo,
        sourceTokens: tokens,
        warnings: externalContext.warnings
      };

      return doInlineImports(inlinerContext);
    }

    function doInlineImports(inlinerContext) {
      var token;
      var i, l;

      for (i = 0, l = inlinerContext.sourceTokens.length; i < l; i++) {
        token = inlinerContext.sourceTokens[i];

        if (token[0] == Token.AT_RULE && isImport(token[1])) {
          inlinerContext.sourceTokens.splice(0, i);
          return inlineStylesheet(token, inlinerContext);
        } if (token[0] == Token.AT_RULE || token[0] == Token.COMMENT) {
          inlinerContext.outputTokens.push(token);
        } else {
          inlinerContext.outputTokens.push(token);
          inlinerContext.afterContent = true;
        }
      }

      inlinerContext.sourceTokens = [];
      return inlinerContext.callback(inlinerContext.outputTokens);
    }

    function inlineStylesheet(token, inlinerContext) {
      var uriAndMediaQuery = extractImportUrlAndMedia(token[1]);
      var uri = uriAndMediaQuery[0];
      var mediaQuery = uriAndMediaQuery[1];
      var metadata = token[2];

      return isRemoteResource$1(uri)
        ? inlineRemoteStylesheet(uri, mediaQuery, metadata, inlinerContext)
        : inlineLocalStylesheet(uri, mediaQuery, metadata, inlinerContext);
    }

    function inlineRemoteStylesheet(uri, mediaQuery, metadata, inlinerContext) {
      var isAllowed = isAllowedResource(uri, true, inlinerContext.inline);
      var originalUri = uri;
      var isLoaded = uri in inlinerContext.externalContext.sourcesContent;
      var isRuntimeResource = !hasProtocol(uri);

      if (inlinerContext.inlinedStylesheets.indexOf(uri) > -1) {
        inlinerContext.warnings.push('Ignoring remote @import of "' + uri + '" as it has already been imported.');
        inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
        return doInlineImports(inlinerContext);
      } if (inlinerContext.localOnly && inlinerContext.afterContent) {
        inlinerContext.warnings.push('Ignoring remote @import of "' + uri + '" as no callback given and after other content.');
        inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
        return doInlineImports(inlinerContext);
      } if (isRuntimeResource) {
        inlinerContext.warnings.push('Skipping remote @import of "' + uri + '" as no protocol given.');
        inlinerContext.outputTokens = inlinerContext.outputTokens.concat(inlinerContext.sourceTokens.slice(0, 1));
        inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
        return doInlineImports(inlinerContext);
      } if (inlinerContext.localOnly && !isLoaded) {
        inlinerContext.warnings.push('Skipping remote @import of "' + uri + '" as no callback given.');
        inlinerContext.outputTokens = inlinerContext.outputTokens.concat(inlinerContext.sourceTokens.slice(0, 1));
        inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
        return doInlineImports(inlinerContext);
      } if (!isAllowed && inlinerContext.afterContent) {
        inlinerContext.warnings.push('Ignoring remote @import of "' + uri + '" as resource is not allowed and after other content.');
        inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
        return doInlineImports(inlinerContext);
      } if (!isAllowed) {
        inlinerContext.warnings.push('Skipping remote @import of "' + uri + '" as resource is not allowed.');
        inlinerContext.outputTokens = inlinerContext.outputTokens.concat(inlinerContext.sourceTokens.slice(0, 1));
        inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
        return doInlineImports(inlinerContext);
      }

      inlinerContext.inlinedStylesheets.push(uri);

      function whenLoaded(error, importedStyles) {
        if (error) {
          inlinerContext.errors.push('Broken @import declaration of "' + uri + '" - ' + error);

          return browser$1.nextTick(function() {
            inlinerContext.outputTokens = inlinerContext.outputTokens.concat(inlinerContext.sourceTokens.slice(0, 1));
            inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);
            doInlineImports(inlinerContext);
          });
        }

        inlinerContext.inline = inlinerContext.externalContext.options.inline;
        inlinerContext.isRemote = true;

        inlinerContext.externalContext.source = originalUri;
        inlinerContext.externalContext.sourcesContent[uri] = importedStyles;
        inlinerContext.externalContext.stats.originalSize += importedStyles.length;

        return fromStyles(importedStyles, inlinerContext.externalContext, inlinerContext, function(importedTokens) {
          importedTokens = wrapInMedia(importedTokens, mediaQuery, metadata);

          inlinerContext.outputTokens = inlinerContext.outputTokens.concat(importedTokens);
          inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);

          return doInlineImports(inlinerContext);
        });
      }

      return isLoaded
        ? whenLoaded(null, inlinerContext.externalContext.sourcesContent[uri])
        : inlinerContext.fetch(uri, inlinerContext.inlineRequest, inlinerContext.inlineTimeout, whenLoaded);
    }

    function inlineLocalStylesheet(uri, mediaQuery, metadata, inlinerContext) {
      var protocolLessUri = uri.replace(FILE_RESOURCE_PROTOCOL, '');
      var currentPath = path.resolve('');
      var absoluteUri = path.isAbsolute(protocolLessUri)
        ? path.resolve(currentPath, protocolLessUri[0] == '/' ? protocolLessUri.substring(1) : protocolLessUri)
        : path.resolve(inlinerContext.rebaseTo, protocolLessUri);
      var relativeToCurrentPath = path.relative(currentPath, absoluteUri);
      var importedStyles;
      var isAllowed = isAllowedResource(protocolLessUri, false, inlinerContext.inline);
      var normalizedPath = normalizePath(relativeToCurrentPath);
      var isLoaded = normalizedPath in inlinerContext.externalContext.sourcesContent;

      if (inlinerContext.inlinedStylesheets.indexOf(absoluteUri) > -1) {
        inlinerContext.warnings.push('Ignoring local @import of "' + protocolLessUri + '" as it has already been imported.');
      } else if (isAllowed && !isLoaded && (!fs.existsSync(absoluteUri) || !fs.statSync(absoluteUri).isFile())) {
        inlinerContext.errors.push('Ignoring local @import of "' + protocolLessUri + '" as resource is missing.');
      } else if (!isAllowed && inlinerContext.afterContent) {
        inlinerContext.warnings.push('Ignoring local @import of "' + protocolLessUri + '" as resource is not allowed and after other content.');
      } else if (inlinerContext.afterContent) {
        inlinerContext.warnings.push('Ignoring local @import of "' + protocolLessUri + '" as after other content.');
      } else if (!isAllowed) {
        inlinerContext.warnings.push('Skipping local @import of "' + protocolLessUri + '" as resource is not allowed.');
        inlinerContext.outputTokens = inlinerContext.outputTokens.concat(inlinerContext.sourceTokens.slice(0, 1));
      } else {
        importedStyles = isLoaded
          ? inlinerContext.externalContext.sourcesContent[normalizedPath]
          : fs.readFileSync(absoluteUri, 'utf-8');

        if (importedStyles.charCodeAt(0) === 65279) {
          importedStyles = importedStyles.substring(1);
        }

        inlinerContext.inlinedStylesheets.push(absoluteUri);
        inlinerContext.inline = inlinerContext.externalContext.options.inline;

        inlinerContext.externalContext.source = normalizedPath;
        inlinerContext.externalContext.sourcesContent[normalizedPath] = importedStyles;
        inlinerContext.externalContext.stats.originalSize += importedStyles.length;

        return fromStyles(importedStyles, inlinerContext.externalContext, inlinerContext, function(importedTokens) {
          importedTokens = wrapInMedia(importedTokens, mediaQuery, metadata);

          inlinerContext.outputTokens = inlinerContext.outputTokens.concat(importedTokens);
          inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);

          return doInlineImports(inlinerContext);
        });
      }

      inlinerContext.sourceTokens = inlinerContext.sourceTokens.slice(1);

      return doInlineImports(inlinerContext);
    }

    function wrapInMedia(tokens, mediaQuery, metadata) {
      if (mediaQuery) {
        return [[Token.NESTED_BLOCK, [[Token.NESTED_BLOCK_SCOPE, '@media ' + mediaQuery, metadata]], tokens]];
      }
      return tokens;
    }

    var readSources_1 = readSources$1;

    var all$1 = helpers$1.all;

    function store$1(serializeContext, token) {
      var value = typeof token == 'string'
        ? token
        : token[1];
      var wrap = serializeContext.wrap;

      wrap(serializeContext, value);
      track$1(serializeContext, value);
      serializeContext.output.push(value);
    }

    function wrap$1(serializeContext, value) {
      if (serializeContext.column + value.length > serializeContext.format.wrapAt) {
        track$1(serializeContext, serializeContext.format.breakWith);
        serializeContext.output.push(serializeContext.format.breakWith);
      }
    }

    function track$1(serializeContext, value) {
      var parts = value.split('\n');

      serializeContext.line += parts.length - 1;
      serializeContext.column = parts.length > 1 ? 0 : (serializeContext.column + parts.pop().length);
    }

    function serializeStyles$1(tokens, context) {
      var serializeContext = {
        column: 0,
        format: context.options.format,
        indentBy: 0,
        indentWith: '',
        line: 1,
        output: [],
        spaceAfterClosingBrace: context.options.compatibility.properties.spaceAfterClosingBrace,
        store: store$1,
        wrap: context.options.format.wrapAt
          ? wrap$1
          : function() { /* noop */ }
      };

      all$1(serializeContext, tokens);

      return { styles: serializeContext.output.join('') };
    }

    var simple = serializeStyles$1;

    var SourceMapGenerator = sourceMap.SourceMapGenerator;
    var all = helpers$1.all;

    var isRemoteResource = isRemoteResource_1;

    var isWindows = browser$1.platform == 'win32';

    var NIX_SEPARATOR_PATTERN = /\//g;
    var UNKNOWN_SOURCE = '$stdin';
    var WINDOWS_SEPARATOR = '\\';

    function store(serializeContext, element) {
      var fromString = typeof element == 'string';
      var value = fromString ? element : element[1];
      var mappings = fromString ? null : element[2];
      var wrap = serializeContext.wrap;

      wrap(serializeContext, value);
      track(serializeContext, value, mappings);
      serializeContext.output.push(value);
    }

    function wrap(serializeContext, value) {
      if (serializeContext.column + value.length > serializeContext.format.wrapAt) {
        track(serializeContext, serializeContext.format.breakWith, false);
        serializeContext.output.push(serializeContext.format.breakWith);
      }
    }

    function track(serializeContext, value, mappings) {
      var parts = value.split('\n');

      if (mappings) {
        trackAllMappings(serializeContext, mappings);
      }

      serializeContext.line += parts.length - 1;
      serializeContext.column = parts.length > 1 ? 0 : (serializeContext.column + parts.pop().length);
    }

    function trackAllMappings(serializeContext, mappings) {
      for (var i = 0, l = mappings.length; i < l; i++) {
        trackMapping(serializeContext, mappings[i]);
      }
    }

    function trackMapping(serializeContext, mapping) {
      var line = mapping[0];
      var column = mapping[1];
      var originalSource = mapping[2];
      var source = originalSource;
      var storedSource = source || UNKNOWN_SOURCE;

      if (isWindows && source && !isRemoteResource(source)) {
        storedSource = source.replace(NIX_SEPARATOR_PATTERN, WINDOWS_SEPARATOR);
      }

      serializeContext.outputMap.addMapping({
        generated: {
          line: serializeContext.line,
          column: serializeContext.column
        },
        source: storedSource,
        original: {
          line: line,
          column: column
        }
      });

      if (serializeContext.inlineSources && (originalSource in serializeContext.sourcesContent)) {
        serializeContext.outputMap.setSourceContent(
          storedSource,
          serializeContext.sourcesContent[originalSource]
        );
      }
    }

    function serializeStylesAndSourceMap$1(tokens, context) {
      var serializeContext = {
        column: 0,
        format: context.options.format,
        indentBy: 0,
        indentWith: '',
        inlineSources: context.options.sourceMapInlineSources,
        line: 1,
        output: [],
        outputMap: new SourceMapGenerator(),
        sourcesContent: context.sourcesContent,
        spaceAfterClosingBrace: context.options.compatibility.properties.spaceAfterClosingBrace,
        store: store,
        wrap: context.options.format.wrapAt
          ? wrap
          : function() { /* noop */ }
      };

      all(serializeContext, tokens);

      return {
        sourceMap: serializeContext.outputMap,
        styles: serializeContext.output.join('')
      };
    }

    var sourceMaps = serializeStylesAndSourceMap$1;

    var level0Optimize = optimize$4;
    var level1Optimize = optimize$3;
    var level2Optimize = optimize$1;
    var validator = validator_1;

    var compatibilityFrom = compatibility;
    var fetchFrom = fetch$1;
    var formatFrom = format$2.formatFrom;
    var inlineFrom = inline$1;
    var inlineRequestFrom = inlineRequest;
    var inlineTimeoutFrom = inlineTimeout;
    var OptimizationLevel = optimizationLevel.OptimizationLevel;
    var optimizationLevelFrom = optimizationLevel.optimizationLevelFrom;
    var pluginsFrom = plugins;
    var rebaseFrom = rebase$3;
    var rebaseToFrom = rebaseTo;

    var inputSourceMapTracker = inputSourceMapTracker_1;
    var readSources = readSources_1;

    var serializeStyles = simple;
    var serializeStylesAndSourceMap = sourceMaps;

    var CleanCSS$1 = clean.exports = function CleanCSS(options) {
      options = options || {};

      this.options = {
        batch: !!options.batch,
        compatibility: compatibilityFrom(options.compatibility),
        explicitRebaseTo: 'rebaseTo' in options,
        fetch: fetchFrom(options.fetch),
        format: formatFrom(options.format),
        inline: inlineFrom(options.inline),
        inlineRequest: inlineRequestFrom(options.inlineRequest),
        inlineTimeout: inlineTimeoutFrom(options.inlineTimeout),
        level: optimizationLevelFrom(options.level),
        plugins: pluginsFrom(options.plugins),
        rebase: rebaseFrom(options.rebase, options.rebaseTo),
        rebaseTo: rebaseToFrom(options.rebaseTo),
        returnPromise: !!options.returnPromise,
        sourceMap: !!options.sourceMap,
        sourceMapInlineSources: !!options.sourceMapInlineSources
      };
    };

    // for compatibility with optimize-css-assets-webpack-plugin
    CleanCSS$1.process = function(input, opts) {
      var cleanCss;
      var optsTo = opts.to;

      delete opts.to;
      cleanCss = new CleanCSS$1(Object.assign({
        returnPromise: true, rebaseTo: optsTo
      }, opts));

      return cleanCss.minify(input)
        .then(function(output) {
          return { css: output.styles };
        });
    };

    CleanCSS$1.prototype.minify = function(input, maybeSourceMap, maybeCallback) {
      var options = this.options;

      if (options.returnPromise) {
        return new Promise(function(resolve, reject) {
          minifyAll(input, options, maybeSourceMap, function(errors, output) {
            return errors
              ? reject(errors)
              : resolve(output);
          });
        });
      }
      return minifyAll(input, options, maybeSourceMap, maybeCallback);
    };

    function minifyAll(input, options, maybeSourceMap, maybeCallback) {
      if (options.batch && Array.isArray(input)) {
        return minifyInBatchesFromArray(input, options, maybeSourceMap, maybeCallback);
      } if (options.batch && (typeof input == 'object')) {
        return minifyInBatchesFromHash(input, options, maybeSourceMap, maybeCallback);
      }
      return minify(input, options, maybeSourceMap, maybeCallback);
    }

    function minifyInBatchesFromArray(input, options, maybeSourceMap, maybeCallback) {
      var callback = typeof maybeCallback == 'function'
        ? maybeCallback
        : (typeof maybeSourceMap == 'function' ? maybeSourceMap : null);
      var errors = [];
      var outputAsHash = {};
      var inputValue;
      var i, l;

      function whenHashBatchDone(innerErrors, output) {
        outputAsHash = Object.assign(outputAsHash, output);

        if (innerErrors !== null) {
          errors = errors.concat(innerErrors);
        }
      }

      for (i = 0, l = input.length; i < l; i++) {
        if (typeof input[i] == 'object') {
          minifyInBatchesFromHash(input[i], options, whenHashBatchDone);
        } else {
          inputValue = input[i];

          outputAsHash[inputValue] = minify([inputValue], options);
          errors = errors.concat(outputAsHash[inputValue].errors);
        }
      }

      return callback
        ? callback(errors.length > 0 ? errors : null, outputAsHash)
        : outputAsHash;
    }

    function minifyInBatchesFromHash(input, options, maybeSourceMap, maybeCallback) {
      var callback = typeof maybeCallback == 'function'
        ? maybeCallback
        : (typeof maybeSourceMap == 'function' ? maybeSourceMap : null);
      var errors = [];
      var outputAsHash = {};
      var inputKey;
      var inputValue;

      for (inputKey in input) {
        inputValue = input[inputKey];

        outputAsHash[inputKey] = minify(inputValue.styles, options, inputValue.sourceMap);
        errors = errors.concat(outputAsHash[inputKey].errors);
      }

      return callback
        ? callback(errors.length > 0 ? errors : null, outputAsHash)
        : outputAsHash;
    }

    function minify(input, options, maybeSourceMap, maybeCallback) {
      var sourceMap = typeof maybeSourceMap != 'function'
        ? maybeSourceMap
        : null;
      var callback = typeof maybeCallback == 'function'
        ? maybeCallback
        : (typeof maybeSourceMap == 'function' ? maybeSourceMap : null);
      var context = {
        stats: {
          efficiency: 0,
          minifiedSize: 0,
          originalSize: 0,
          startedAt: Date.now(),
          timeSpent: 0
        },
        cache: { specificity: {} },
        errors: [],
        inlinedStylesheets: [],
        inputSourceMapTracker: inputSourceMapTracker(),
        localOnly: !callback,
        options: options,
        source: null,
        sourcesContent: {},
        validator: validator(options.compatibility),
        warnings: []
      };
      var implicitRebaseToWarning;

      if (sourceMap) {
        context.inputSourceMapTracker.track(undefined, sourceMap);
      }

      if (options.rebase && !options.explicitRebaseTo) {
        implicitRebaseToWarning = 'You have set `rebase: true` without giving `rebaseTo` option, which, in this case, defaults to the current working directory. '
          + 'You are then warned this can lead to unexpected URL rebasing (aka here be dragons)! '
          + 'If you are OK with the clean-css output, then you can get rid of this warning by giving clean-css a `rebaseTo: process.cwd()` option.';
        context.warnings.push(implicitRebaseToWarning);
      }

      return runner(context.localOnly)(function() {
        return readSources(input, context, function(tokens) {
          var serialize = context.options.sourceMap
            ? serializeStylesAndSourceMap
            : serializeStyles;

          var optimizedTokens = optimize(tokens, context);
          var optimizedStyles = serialize(optimizedTokens, context);
          var output = withMetadata(optimizedStyles, context);

          return callback
            ? callback(context.errors.length > 0 ? context.errors : null, output)
            : output;
        });
      });
    }

    function runner(localOnly) {
      // to always execute code asynchronously when a callback is given
      // more at blog.izs.me/post/59142742143/designing-apis-for-asynchrony
      return localOnly
        ? function(callback) { return callback(); }
        : browser$1.nextTick;
    }

    function optimize(tokens, context) {
      var optimized = level0Optimize(tokens);

      optimized = OptimizationLevel.One in context.options.level
        ? level1Optimize(tokens, context)
        : tokens;
      optimized = OptimizationLevel.Two in context.options.level
        ? level2Optimize(tokens, context, true)
        : optimized;

      return optimized;
    }

    function withMetadata(output, context) {
      output.stats = calculateStatsFrom(output.styles, context);
      output.errors = context.errors;
      output.inlinedStylesheets = context.inlinedStylesheets;
      output.warnings = context.warnings;

      return output;
    }

    function calculateStatsFrom(styles, context) {
      var finishedAt = Date.now();
      var timeSpent = finishedAt - context.stats.startedAt;

      delete context.stats.startedAt;
      context.stats.timeSpent = timeSpent;
      context.stats.efficiency = 1 - styles.length / context.stats.originalSize;
      context.stats.minifiedSize = styles.length;

      return context.stats;
    }

    var cleanExports = clean.exports;

    var cleanCss = cleanExports;

    var CleanCSS = /*@__PURE__*/getDefaultExportFromCjs(cleanCss);

    /**
     * Minifies the given CSS, returning it as a string. Any errors that occur are returned
     * in the second positional return value.
     *
     * If the CSS fails to minify, the original content will be returned instead.
     *
     * @param {string} css - CSS to minify.
     *
     * @return {[ string, string[] ]} - Minified CSS and a list of errors returned.
     */
    function minifyCss(css) {
        const result = new CleanCSS().minify(css);
        if (!result.styles) {
            return [css, result.errors];
        }
        return [result.styles, result.errors];
    }

    const noop = () => {
        // No op.
    };
    /**
     * Collate and return a CSSFileSet object describing all the CSS files used by
     * the set of URLs provided.
     *
     * Errors that occur during this process are collated, but not thrown yet.
     *
     * @param {BrowserInterface} browserInterface - interface to access pages
     * @param {string[]}         urls             - list of URLs to scan for CSS files
     * @param {number}           maxPages         - number of pages to process at most
     * @return {Array} - Two member array; CSSFileSet, and an object containing errors that occurred at each URL.
     */
    async function collateCssFiles(browserInterface, urls, maxPages) {
        const cssFiles = new CSSFileSet(browserInterface);
        const errors = {};
        let successes = 0;
        for (const url of urls) {
            try {
                const cssIncludes = await browserInterface.getCssIncludes(url);
                // Convert relative URLs to absolute.
                const relativeUrls = Object.keys(cssIncludes);
                const absoluteIncludes = relativeUrls.reduce((set, relative) => {
                    try {
                        const absolute = new URL(relative, url).toString();
                        set[absolute] = cssIncludes[relative];
                    }
                    catch (err) {
                        // Ignore invalid URLs.
                        // eslint-disable-next-line no-console
                        console.log(`Could not absolutify URL: ${relative}`);
                    }
                    return set;
                }, {});
                await cssFiles.addMultiple(url, absoluteIncludes);
                const internalStyles = await browserInterface.getInternalStyles(url);
                await cssFiles.addInternalStyles(url, internalStyles);
                // Abort early if we hit the critical mass
                successes++;
                if (successes >= maxPages) {
                    break;
                }
            }
            catch (err) {
                errors[url] = err;
            }
        }
        return [cssFiles, errors];
    }
    /**
     * Get CSS selectors for above the fold content for the valid URLs.
     *
     * @param {object}           param                  - All the parameters as object.
     * @param {BrowserInterface} param.browserInterface - Interface to access pages
     * @param {object}           param.selectorPages    - All the CSS selectors to URLs map object
     * @param {string[]}         param.validUrls        - List of all the valid URLs
     * @param {Array}            param.viewports        - Browser viewports
     * @param {number}           param.maxPages         - Maximum number of pages to process
     * @param {Function}         param.updateProgress   - Update progress callback function
     *
     * @return {Set<string>} - List of above the fold selectors.
     */
    async function getAboveFoldSelectors({ browserInterface, selectorPages, validUrls, viewports, maxPages, updateProgress, }) {
        // For each selector string, create a "trimmed" version with the stuff JavaScript can't handle cut out.
        const trimmedSelectors = Object.keys(selectorPages).reduce((set, selector) => {
            set[selector] = removeIgnoredPseudoElements(selector);
            return set;
        }, {});
        // Go through all the URLs looking for above-the-fold selectors, and selectors which may be "dangerous"
        // i.e.: may match elements on pages that do not include their CSS file.
        const aboveFoldSelectors = new Set();
        const dangerousSelectors = new Set();
        for (const url of validUrls.slice(0, maxPages)) {
            // Work out which CSS selectors match any element on this page.
            const pageSelectors = await browserInterface.runInPage(url, null, BrowserInterface.innerFindMatchingSelectors, trimmedSelectors);
            // Check for selectors which may match this page, but are not included in this page's CSS.
            pageSelectors
                .filter(s => !selectorPages[s].has(url))
                .forEach(s => dangerousSelectors.add(s));
            // Collate all above-fold selectors for all viewport sizes.
            for (const size of viewports) {
                updateProgress();
                const pageAboveFold = await browserInterface.runInPage(url, size, BrowserInterface.innerFindAboveFoldSelectors, trimmedSelectors, pageSelectors);
                pageAboveFold.forEach(s => aboveFoldSelectors.add(s));
            }
        }
        // Remove dangerous selectors from above fold set.
        for (const dangerousSelector of dangerousSelectors) {
            aboveFoldSelectors.delete(dangerousSelector);
        }
        return aboveFoldSelectors;
    }
    /**
     * Generates critical CSS for the given URLs and viewports.
     *
     * @param {object}           root0                  - The options object
     * @param {BrowserInterface} root0.browserInterface - Interface to interact with the browser
     * @param {Function}         root0.progressCallback - Optional callback function to report progress
     * @param {string[]}         root0.urls             - Array of URLs to generate critical CSS for
     * @param {Viewport[]}       root0.viewports        - Array of viewport sizes to consider
     * @param {FilterSpec}       root0.filters          - Optional filters to apply to the CSS
     * @param {number}           root0.successRatio     - Ratio of successful URLs required (default: 1)
     * @param {number}           root0.maxPages         - Maximum number of pages to process (default: 10)
     * @return {Promise<[string, Error[]]>} A promise that resolves to an array containing the critical CSS string and an array of errors.
     */
    async function generateCriticalCSS({ browserInterface, progressCallback, urls, viewports, filters, successRatio = 1, maxPages = 10, }) {
        // Success threshold is calculated based on the success ratio of "the number of URLs provided", or "maxPages" whichever is lower.
        // See 268-gh-Automattic/boost-cloud
        const successUrlsThreshold = Math.ceil(Math.min(urls.length, maxPages) * successRatio);
        try {
            progressCallback = progressCallback || noop;
            let progress = 0;
            const progressSteps = 1 + urls.length * viewports.length;
            const updateProgress = () => progressCallback(++progress, progressSteps);
            // Collate all CSS Files used by all valid URLs.
            const [cssFiles, cssFileErrors] = await collateCssFiles(browserInterface, urls, maxPages);
            updateProgress();
            // Verify there are enough valid URLs to carry on with.
            const validUrls = browserInterface.filterValidUrls(urls);
            if (validUrls.length < successUrlsThreshold) {
                throw new SuccessTargetError(cssFileErrors);
            }
            // Trim ignored rules out of all CSS ASTs.
            cssFiles.applyFilters(filters || {});
            // Gather a record of all selectors, and which page URLs each is referenced by.
            const selectorPages = cssFiles.collateSelectorPages();
            // Get CSS selectors for above the fold.
            const aboveFoldSelectors = await getAboveFoldSelectors({
                browserInterface,
                selectorPages,
                validUrls,
                viewports,
                maxPages,
                updateProgress,
            });
            // Prune each AST for above-fold selector list. Note: this prunes a clone.
            const asts = cssFiles.prunedAsts(aboveFoldSelectors);
            // Convert ASTs to CSS.
            const [css, cssErrors] = minifyCss(asts.map(ast => ast.toCSS()).join('\n'));
            // If there is no Critical CSS, it means the URLs did not have any CSS in their external style sheet(s).
            if (!css) {
                const emptyCSSErrors = {};
                for (const url of validUrls) {
                    emptyCSSErrors[url] = new EmptyCSSError({ url });
                }
                throw new SuccessTargetError(emptyCSSErrors);
            }
            // Collect warnings / errors together.
            const warnings = cssFiles.getErrors().concat(cssErrors.map(s => new Error(s)));
            return [css, warnings];
        }
        finally {
            browserInterface.cleanup();
        }
    }

    const version = '0.0.11';

    exports.BrowserInterface = BrowserInterface;
    exports.BrowserInterfaceIframe = BrowserInterfaceIframe;
    exports.CrossDomainError = CrossDomainError;
    exports.EmptyCSSError = EmptyCSSError;
    exports.HttpError = HttpError;
    exports.LoadTimeoutError = LoadTimeoutError;
    exports.RedirectError = RedirectError;
    exports.SuccessTargetError = SuccessTargetError;
    exports.UnknownError = UnknownError;
    exports.UrlError = UrlError;
    exports.UrlVerifyError = UrlVerifyError;
    exports.XFrameDenyError = XFrameDenyError;
    exports.generateCriticalCSS = generateCriticalCSS;
    exports.version = version;

    Object.defineProperty(exports, '__esModule', { value: true });

    return exports;

})({});
//# sourceMappingURL=bundle.full.js.map
