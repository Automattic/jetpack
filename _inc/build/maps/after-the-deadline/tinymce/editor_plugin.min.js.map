{"version":3,"sources":["after-the-deadline/tinymce/editor_plugin.js"],"names":["getLang","key","defaultStr","window","AtD_l10n_r0ar","core","each","tinymce","DOM","create","getInfo","longname","author","authorurl","infourl","version","majorVersion","minorVersion","initAtDCore","editor","AtDCore","map","getAttrib","node","dom","findSpans","parent","select","hasClass","className","contents","childNodes","replaceWith","old_node","new_node","replace","node_html","class","removeParent","remove","setIgnoreStrings","getParam","join","showTypes","init","ed","url","plugin","this","ignore","util","Cookie","getHash","addCommand","callback","AtD_proofread_click_count","setProgressState","_removeWords","sendRequest","getContent","format","data","request","status","responseText","substr","responseXML","windowManager","alert","getElementsByTagName","item","firstChild","results","processXML","ecount","count","markMyWords","errors","suggestions","undefined","onInit","add","settings","content_css","loadCSS","onClick","_showMenu","onContextMenu","onPreProcess","sender","object","reverse","n","onBeforeExecCommand","command","_done","addButton","title","image","cmd","w","se","selection","b","getBookmark","removeWords","setHTML","getRoot","innerHTML","moveToBookmark","getBody","e","t","p1","m","_menu","vp","getViewPort","getWin","getPos","getContentAreaContainer","controlManager","createDropMenu","offset_x","x","offset_y","y","isMarkedNode","target","removeAll","errorDescription","findSuggestion","length","setDisabled","i","sugg","onclick","applySuggestion","_checkDone","addSeparator","open","width","height","inline","theme_url","String","setHash","Date","getTime","id","XHR","send","encodeURI","content_type","async","type","success","error","req","o","showMenu","offsetHeight","Event","cancel","hideMenu","nodeChanged","file","PluginManager","plugins","AfterTheDeadlinePlugin"],"mappings":"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","file":"../../../after-the-deadline/tinymce/editor_plugin.min.js","sourcesContent":["/* Do not modify this file directly. It is compiled from other files. */\n/*\n * TinyMCE Writing Improvement Tool Plugin\n * Author: Raphael Mudge (raffi@automattic.com)\n *\n * http://www.afterthedeadline.com\n *\n * Distributed under the LGPL\n *\n * Derived from:\n *    $Id: editor_plugin_src.js 425 2007-11-21 15:17:39Z spocke $\n *\n *    @author Moxiecode\n *    @copyright Copyright (C) 2004-2008, Moxiecode Systems AB, All rights reserved.\n *\n *    Moxiecode Spell Checker plugin released under the LGPL with TinyMCE\n */\n\n/* jshint onevar: false, sub: true, devel: true, loopfunc: true */\n/* global tinymce, AtDCore, AtD_proofread_click_count */\n\n(function()\n{\n   var each = tinymce.each, DOM = tinymce.DOM, core;\n\n   function getLang( key, defaultStr ) {\n      return ( window.AtD_l10n_r0ar && window.AtD_l10n_r0ar[key] ) || defaultStr;\n   }\n\n   tinymce.create('tinymce.plugins.AfterTheDeadlinePlugin',\n   {\n      getInfo : function()\n      {\n         return {\n\t\t\tlongname :  'After The Deadline',\n\t\t\tauthor :    'Raphael Mudge',\n\t\t\tauthorurl : 'http://blog.afterthedeadline.com',\n\t\t\tinfourl :   'http://www.afterthedeadline.com',\n\t\t\tversion :   tinymce.majorVersion + '.' + tinymce.minorVersion\n\t\t};\n      },\n\n      /* initializes the functions used by the AtD Core UI Module */\n      initAtDCore : function(editor/*, plugin*/)\n      {\n         var core = new AtDCore();\n\n         core.map = each;\n\n         core.getAttrib = function(node, key)\n         {\n            return editor.dom.getAttrib(node, key);\n         };\n\n         core.findSpans = function(parent)\n         {\n            if (!parent) {\n               return editor.dom.select('span');\n            } else {\n               return editor.dom.select('span', parent);\n            }\n         };\n\n         core.hasClass = function(node, className)\n         {\n            return editor.dom.hasClass(node, className);\n         };\n\n         core.contents = function(node)\n         {\n            return node.childNodes;\n         };\n\n         core.replaceWith = function(old_node, new_node)\n         {\n            return editor.dom.replace(new_node, old_node);\n         };\n\n         core.create = function(node_html)\n         {\n            return editor.dom.create('span', { 'class': 'mceItemHidden' }, node_html);\n         };\n\n         core.removeParent = function(node)\n         {\n            editor.dom.remove(node, 1);\n            return node;\n         };\n\n         core.remove = function(node)\n         {\n            editor.dom.remove(node);\n         };\n\n         core.setIgnoreStrings(editor.getParam('atd_ignore_strings', [] ).join(','));\n         core.showTypes(editor.getParam('atd_show_types', ''));\n         return core;\n      },\n\n      /* called when the plugin is initialized */\n      init : function(ed, url)\n      {\n         if ( typeof(AtDCore) === 'undefined' ) {\n            return;\n         }\n\n         var plugin  = this;\n         var editor  = ed;\n         this.url    = url;\n         this.editor = ed;\n         \n         core = ed.core = this.initAtDCore(editor, plugin);\n\n         /* look at the atd_ignore variable and put that stuff into a hash */\n         var ignore = tinymce.util.Cookie.getHash('atd_ignore');\n\n         if (!ignore) {\n            ignore = {};\n         }\n\n         /* add a command to request a document check and process the results. */\n         editor.addCommand('mceWritingImprovementTool', function(callback)\n         {\n            /* checks if a global var for click stats exists and increments it if it does... */\n            if (typeof AtD_proofread_click_count !== 'undefined') {\n               AtD_proofread_click_count++;\n            }\n\n            /* create the nifty spinny thing that says \"hizzo, I'm doing something fo realz\" */\n            plugin.editor.setProgressState(1);\n\n            /* remove the previous errors */\n            plugin._removeWords();\n\n            /* send request to our service */\n            plugin.sendRequest('checkDocument', ed.getContent({ format: 'raw' }), function(data, request/*, someObject*/)\n            {\n               /* turn off the spinning thingie */\n               plugin.editor.setProgressState(0);\n\n               /* if the server is not accepting requests, let the user know */\n               if ( request.status !== 200 || request.responseText.substr(1, 4) === 'html' || !request.responseXML )\n               {\n                  ed.windowManager.alert(\n                     getLang( 'message_server_error', 'There was a problem communicating with the Proofreading service. Try again in one minute.' ),\n                     callback ? function() { callback( 0 ); } : function() {}\n                  );\n                  return;\n               }\n\n               /* check to see if things are broken first and foremost */\n               if (request.responseXML.getElementsByTagName('message').item(0) != null)\n               {\n                  ed.windowManager.alert(\n                     request.responseXML.getElementsByTagName('message').item(0).firstChild.data,\n                     callback ? function() { callback( 0 ); } : function() {}\n                  );\n                  return;\n               }\n\n               var results = core.processXML(request.responseXML);\n               var ecount  = 0;\n\n               if (results.count > 0)\n               {\n                  ecount = plugin.markMyWords(results.errors);\n                  ed.suggestions = results.suggestions;\n               }\n\n               if (ecount === 0 && (!callback || callback === undefined)) {\n                  ed.windowManager.alert( getLang('message_no_errors_found', 'No writing errors were found.') );\n               } else if (callback) {\n                  callback(ecount);\n               }\n            });\n         });\n\n         /* load cascading style sheet for this plugin */\n         editor.onInit.add(function()\n         {\n            /* loading the content.css file, why? I have no clue */\n            if (editor.settings.content_css !== false)\n            {\n               editor.dom.loadCSS(editor.getParam('atd_css_url', url + '/css/content.css'));\n            }\n         });\n\n         /* again showing a menu, I have no clue what */\n         editor.onClick.add(plugin._showMenu, plugin);\n\n         /* we're showing some sort of menu, no idea what */\n         editor.onContextMenu.add(plugin._showMenu, plugin);\n\n         /* strip out the markup before the contents is serialized (and do it on a copy of the markup so we don't affect the user experience) */\n         editor.onPreProcess.add(function(sender, object)\n         {\n            var dom = sender.dom;\n\n            each(dom.select('span', object.node).reverse(), function(n)\n            {\n               if (n && (dom.hasClass(n, 'hiddenGrammarError') || dom.hasClass(n, 'hiddenSpellError') || dom.hasClass(n, 'hiddenSuggestion') || dom.hasClass(n, 'mceItemHidden') || (!dom.getAttrib(n, 'class') && !dom.getAttrib(n, 'style') && !dom.getAttrib(n, 'id') && !dom.hasClass(n, 'Apple-style-span') && !dom.getAttrib(n, 'mce_name'))))\n               {\n                  dom.remove(n, 1);\n               }\n            });\n         });\n\n         /* cleanup the HTML before executing certain commands */\n         editor.onBeforeExecCommand.add(function(editor, command)\n         {\n            if (command === 'mceCodeEditor')\n            {\n               plugin._removeWords();\n            }\n            else if (command === 'mceFullScreen')\n            {\n               plugin._done();\n            }\n         });\n\n         ed.addButton('AtD', {\n            title: getLang( 'button_proofread_tooltip', 'Proofread Writing' ),\n            image: ed.getParam('atd_button_url', url + '/atdbuttontr.gif'),\n            cmd: 'mceWritingImprovementTool'\n         });\n      },\n\n      _removeWords : function(w)\n      {\n         var ed = this.editor, dom = ed.dom, se = ed.selection, b = se.getBookmark();\n\n         ed.core.removeWords(undefined, w);\n\n         /* force a rebuild of the DOM... even though the right elements are stripped, the DOM is still organized\n            as if the span were there and this breaks my code */\n\n         dom.setHTML(dom.getRoot(), dom.getRoot().innerHTML);\n\n         se.moveToBookmark(b);\n      },\n\n      markMyWords : function(errors)\n      {\n         var ed  = this.editor;\n         var se = ed.selection, b = se.getBookmark();\n\n         var ecount = ed.core.markMyWords(ed.core.contents(this.editor.getBody()), errors);\n\n         se.moveToBookmark(b);\n         return ecount;\n      },\n\n      _showMenu : function(ed, e)\n      {\n         var t = this;\n         ed = t.editor; // not clear why this overwrites the function parameter\n         var m = t._menu, p1, dom = ed.dom, vp = dom.getViewPort(ed.getWin());\n\n         if (!m)\n         {\n            p1 = DOM.getPos(ed.getContentAreaContainer());\n            //p2 = DOM.getPos(ed.getContainer());\n\n            m = ed.controlManager.createDropMenu('spellcheckermenu',\n            {\n               offset_x : p1.x,\n               offset_y : p1.y,\n               'class' : 'mceNoIcons'\n            });\n\n            t._menu = m;\n         }\n\n         if (ed.core.isMarkedNode(e.target))\n         {\n            /* remove these other lame-o elements */\n            m.removeAll();\n\n            /* find the correct suggestions object */\n            var errorDescription = ed.core.findSuggestion(e.target);\n\n            if (!errorDescription)\n            {\n               m.add({ title: getLang( 'menu_title_no_suggestions', 'No suggestions' ), 'class': 'mceMenuItemTitle' }).setDisabled(1);\n            }\n            else if (errorDescription['suggestions'].length === 0)\n            {\n               m.add({ title: errorDescription['description'], 'class' : 'mceMenuItemTitle' }).setDisabled(1);\n            }\n            else\n            {\n               m.add({ title : errorDescription['description'], 'class' : 'mceMenuItemTitle' }).setDisabled(1);\n\n               for (var i = 0; i < errorDescription['suggestions'].length; i++)\n               {\n                  (function(sugg)\n                   {\n                      m.add({\n                         title   : sugg,\n                         onclick : function()\n                         {\n                            ed.core.applySuggestion(e.target, sugg);\n                            t._checkDone();\n                         }\n                      });\n                   })(errorDescription['suggestions'][i]); // jshint ignore:line\n               }\n\n               m.addSeparator();\n            }\n\n            if (errorDescription && errorDescription['moreinfo'])\n            {\n               (function(url)\n                {\n                   m.add({\n                     title : getLang( 'menu_option_explain', 'Explain...' ),\n                     onclick : function()\n                     {\n                        ed.windowManager.open({\n                           url : url,\n                           width : 480,\n                           height : 380,\n                           inline : true\n                        }, { theme_url : this.url });\n                     }\n                  });\n               })(errorDescription['moreinfo']);\n\n               m.addSeparator();\n            }\n\n            m.add({\n               title : getLang( 'menu_option_ignore_once', 'Ignore suggestion' ),\n               onclick : function()\n               {\n                  dom.remove(e.target, 1);\n                  t._checkDone();\n               }\n            });\n\n            if (String(this.editor.getParam('atd_ignore_enable',  'false')) === 'true')\n            {\n                m.add({\n                  title : getLang( 'menu_option_ignore_always', 'Ignore always' ),\n                  onclick : function()\n                  {\n                      var url = t.editor.getParam('atd_ignore_rpc_url', '{backend}');\n\n                      if (url === '{backend}')\n                      {\n                         /* Default scheme is to save ignore preferences in a cookie */\n\n                         var ignore = tinymce.util.Cookie.getHash('atd_ignore');\n                         if (!ignore) { ignore = {}; }\n                         ignore[e.target.innerHTML] = 1;\n\n                         tinymce.util.Cookie.setHash('atd_ignore', ignore, new Date( (new Date().getTime()) + 157680000000) );\n                      }\n                      else\n                      {\n                         /* Plugin is configured to send ignore preferences to server, do that */\n\n                         var id  = t.editor.getParam('atd_rpc_id',  '12345678');\n\n                         tinymce.util.XHR.send({\n                             url          : url + encodeURI(e.target.innerHTML).replace(/&/g, '%26') + '&key=' + id,\n                             content_type : 'text/xml',\n                             async        : true,\n                             type         : 'GET',\n                             success      : function(/* type, req, o */)\n                             {\n                                /* do nothing */\n                             },\n                             error        : function( type, req, o )\n                             {\n                                alert( 'Ignore preference save failed\\n' + type + '\\n' + req.status + '\\nAt: ' + o.url );\n                             }\n                         });\n\n                         /* update atd_ignore_strings with the new value */\n                         t.editor.core.setIgnoreStrings(e.target.innerHTML); /* this does an update */\n                     }\n\n                     t._removeWords(e.target.innerHTML);\n                     t._checkDone();\n                  }\n               });\n            }\n            else\n            {\n                m.add({\n                  title : getLang( 'menu_option_ignore_all', 'Ignore all' ),\n                  onclick : function()\n                  {\n                     t._removeWords(e.target.innerHTML);\n                     t._checkDone();\n                  }\n               });\n            }\n\n            /* show the menu please */\n            ed.selection.select(e.target);\n            p1 = dom.getPos(e.target);\n            m.showMenu(p1.x, p1.y + e.target.offsetHeight - vp.y);\n\n            return tinymce.dom.Event.cancel(e);\n         }\n         else\n         {\n            m.hideMenu();\n         }\n      },\n\n      /* loop through editor DOM, call _done if no mce tags exist. */\n      _checkDone : function()\n      {\n         var t = this, ed = t.editor, dom = ed.dom, o;\n\n         each(dom.select('span'), function(n)\n         {\n            if (n && dom.hasClass(n, 'mceItemHidden'))\n            {\n               o = true;\n               return false;\n            }\n         });\n\n         if (!o)\n         {\n            t._done();\n         }\n      },\n\n      /* remove all tags, hide the menu, and fire a dom change event */\n      _done : function()\n      {\n         var plugin    = this;\n         plugin._removeWords();\n\n         if (plugin._menu)\n         {\n            plugin._menu.hideMenu();\n         }\n\n         plugin.editor.nodeChanged();\n      },\n\n      sendRequest : function(file, data, success)\n      {\n         var id  = this.editor.getParam('atd_rpc_id',  '12345678');\n         var url = this.editor.getParam('atd_rpc_url', '{backend}');\n         var plugin = this;\n\n         if (url === '{backend}' || id === '12345678')\n         {\n            this.editor.setProgressState(0);\n            alert('Please specify: atd_rpc_url and atd_rpc_id');\n            return;\n         }\n\n         tinymce.util.XHR.send({\n            url          : url + '/' + file,\n            content_type : 'text/xml',\n            type         : 'POST',\n            data         : 'data=' + encodeURI(data).replace(/&/g, '%26') + '&key=' + id,\n            async        : true,\n            success      : success,\n            error        : function( type, req, o )\n            {\n               plugin.editor.setProgressState(0);\n               alert( type + '\\n' + req.status + '\\nAt: ' + o.url );\n            }\n         });\n      }\n   });\n\n   // Register plugin\n   tinymce.PluginManager.add('AtD', tinymce.plugins.AfterTheDeadlinePlugin);\n})();\n"]}