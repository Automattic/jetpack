{"version":3,"sources":["videopress/js/videopress-uploader.js"],"names":["window","wp","VideoPress","originalOptions","handleStandardResponse","response","file","_","isObject","isUndefined","success","error","pluploadL10n","default_error","data","message","handleRestApiResponse","media","length","mimeParts","mime_type","split","alt","author","author_ID","authorName","caption","compat","item","meta","date","dateFormatted","description","editLink","filename","filesizeHumanReadable","filesizeInBytes","height","icon","id","ID","link","URL","menuOrder","mime","modified","name","nonces","update","delete","edit","orientation","sizes","undefined","status","subtype","title","type","uploadedTo","uploadedToLink","uploadedToTitle","url","width","videopress","guid","videopress_guid","processing_done","videopress_processing_done","resetToOriginalOptions","up","setOption","multipart_params","file_data_name","Uploader","plupload","VIDEOPRESS_TOKEN_FAILURE","addFileFilter","maxSize","cb","self","this","ajax","async","done","fail","trigger","code","translate","undef","size","FILE_SIZE_ERROR"],"mappings":"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","file":"../../../videopress/js/videopress-uploader.min.js","sourcesContent":["/* Do not modify this file directly. It is compiled from other files. */\n/* globals plupload, pluploadL10n, error */\nwindow.wp = window.wp || {};\n\n( function( wp ) {\n\tvar VideoPress = {\n\t\toriginalOptions: {},\n\n\t\t/**\n\t\t * This is the standard uploader response handler.\n\t\t */\n\t\thandleStandardResponse: function( response, file ) {\n\t\t\tif ( ! _.isObject( response ) || _.isUndefined( response.success ) ) {\n\t\t\t\treturn error(pluploadL10n.default_error, null, file);\n\n\t\t\t} else if ( ! response.success ) {\n\t\t\t\treturn error(response.data && response.data.message, response.data, file);\n\t\t\t}\n\n\t\t\treturn response;\n\t\t},\n\n\t\t/**\n\t\t * Handle response from the WPCOM Rest API.\n\t\t */\n\t\thandleRestApiResponse: function( response, file ) {\n\t\t\tif ( response.media.length !== 1) {\n\t\t\t\treturn error( pluploadL10n.default_error, null, file );\n\t\t\t}\n\n\t\t\tvar media = response.media[0],\n\t\t\t\tmimeParts = media.mime_type.split('/'),\n\t\t\t\tdata = {\n\t\t\t\t\talt : '',\n\t\t\t\t\tauthor : media.author_ID || 0,\n\t\t\t\t\tauthorName: '',\n\t\t\t\t\tcaption: '',\n\t\t\t\t\tcompat: { item: '', meta: '' },\n\t\t\t\t\tdate: media.date || '',\n\t\t\t\t\tdateFormatted: media.date || '',\n\t\t\t\t\tdescription: media.description || '',\n\t\t\t\t\teditLink: '',\n\t\t\t\t\tfilename: media.file || '',\n\t\t\t\t\tfilesizeHumanReadable: '',\n\t\t\t\t\tfilesizeInBytes: '',\n\t\t\t\t\theight: media.height,\n\t\t\t\t\ticon: media.icon || '',\n\t\t\t\t\tid: media.ID || '',\n\t\t\t\t\tlink: media.URL || '',\n\t\t\t\t\tmenuOrder: 0,\n\t\t\t\t\tmeta: false,\n\t\t\t\t\tmime: media.mime_type || '',\n\t\t\t\t\tmodified: 0,\n\t\t\t\t\tname: '',\n\t\t\t\t\tnonces: { update: '', 'delete': '', edit: '' },\n\t\t\t\t\torientation: '',\n\t\t\t\t\tsizes: undefined,\n\t\t\t\t\tstatus: '',\n\t\t\t\t\tsubtype: mimeParts[1] || '',\n\t\t\t\t\ttitle: media.title || '',\n\t\t\t\t\ttype: mimeParts[0] || '',\n\t\t\t\t\tuploadedTo: 1,\n\t\t\t\t\tuploadedToLink: '',\n\t\t\t\t\tuploadedToTitle: '',\n\t\t\t\t\turl: media.URL || '',\n\t\t\t\t\twidth: media.width,\n\t\t\t\t\tsuccess: '',\n\t\t\t\t\tvideopress: {\n\t\t\t\t\t\tguid: media.videopress_guid || null,\n\t\t\t\t\t\tprocessing_done: media.videopress_processing_done || false\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\tresponse.data = data;\n\n\t\t\treturn response;\n\t\t},\n\n\t\t/**\n\t\t * Make sure that all of the original variables have been reset, so the uploader\n\t\t * doesn't try to go to VideoPress again next time.\n\t\t *\n\t\t * @param up\n\t\t */\n\t\tresetToOriginalOptions: function( up ) {\n\t\t\tif ( typeof VideoPress.originalOptions.url !== 'undefined' ) {\n\t\t\t\tup.setOption( 'url', VideoPress.originalOptions.url );\n\t\t\t\tdelete VideoPress.originalOptions.url;\n\t\t\t}\n\n\t\t\tif ( typeof VideoPress.originalOptions.multipart_params !== 'undefined' ) {\n\t\t\t\tup.setOption( 'multipart_params', VideoPress.originalOptions.multipart_params );\n\t\t\t\tdelete VideoPress.originalOptions.multipart_params;\n\t\t\t}\n\n\t\t\tif ( typeof VideoPress.originalOptions.file_data_name !== 'undefined' ) {\n\t\t\t\tup.setOption( 'file_data_name', VideoPress.originalOptions.file_data_name );\n\t\t\t\tdelete VideoPress.originalOptions.file_data_name;\n\t\t\t}\n\t\t}\n\t};\n\n\tif (typeof wp.Uploader !== 'undefined') {\n\t\tvar media = wp.media;\n\n\t\t/**\n\t\t * A plupload code specifically for videopress failures.\n\t\t *\n\t\t * @type {string}\n\t\t */\n\t\tplupload.VIDEOPRESS_TOKEN_FAILURE = 'VP_TOKEN_FAILURE';\n\n\t\t/**\n\t\t * Adds a filter that checks all files to see if they are videopress files and if they are\n\t\t * it will download extra metadata for them.\n\t\t */\n\t\tplupload.addFileFilter( 'videopress_check_uploads', function( maxSize, file, cb ) {\n\t\t\tvar mimeParts = file.type.split('/');\n\t\t\tvar self = this;\n\n\t\t\tif ( mimeParts[0] === 'video' ) {\n\t\t\t\tmedia.ajax( 'videopress-get-upload-token', { async: false, data: { filename: file.name } } ).done( function ( response ) {\n\t\t\t\t\tfile.videopress = response;\n\t\t\t\t\tcb( true );\n\n\t\t\t\t}).fail( function ( response ) {\n\t\t\t\t\tself.trigger( 'Error', {\n\t\t\t\t\t\tcode : plupload.VIDEOPRESS_TOKEN_FAILURE,\n\t\t\t\t\t\tmessage : plupload.translate( 'Could not get the VideoPress token needed for uploading' ),\n\t\t\t\t\t\tfile : file,\n\t\t\t\t\t\tresponse : response\n\t\t\t\t\t} );\n\t\t\t\t\tcb( false );\n\t\t\t\t});\n\n\t\t\t} else {\n\t\t\t\t// Handles the normal max_file_size functionality.\n\t\t\t\tvar undef;\n\n\t\t\t\t// Invalid file size\n\t\t\t\tif (file.size !== undef && maxSize && file.size > maxSize) {\n\t\t\t\t\tthis.trigger('Error', {\n\t\t\t\t\t\tcode: plupload.FILE_SIZE_ERROR,\n\t\t\t\t\t\tmessage: plupload.translate( 'File size error.' ),\n\t\t\t\t\t\tfile: file\n\t\t\t\t\t});\n\t\t\t\t\tcb(false);\n\t\t\t\t} else {\n\t\t\t\t\tcb(true);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\twp.VideoPress = VideoPress;\n\n} )( window.wp );\n\n"]}