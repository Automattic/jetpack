{"version":3,"sources":["videopress/js/videopress-plupload.js"],"names":["window","wp","exports","$","Uploader","vp","_wpPluploadSettings","options","key","error","self","this","isIE","navigator","userAgent","indexOf","elements","container","browser","dropzone","supports","upload","supported","plupload","extend","multipart_params","defaults","document","body","isFunction","proxy","first","length","prop","uuid","predictRuntime","required_features","hasOwnProperty","send_binary_string","uploader","param","params","VideoPress","console","message","data","file","attachment","destroy","errors","unshift","pluploadL10n","default_error","bind","timer","active","dragdrop","features","mobile","toggleClass","unbind","clearTimeout","trigger","addClass","setTimeout","removeClass","ready","up","refresh","init","on","disableBrowse","id","hide","files","_","each","attributes","image","FAILED","status","uploading","date","Date","filename","name","menuOrder","uploadedTo","media","model","settings","post","pick","exec","type","subtype","Attachment","create","queue","add","added","start","set","progress","response","complete","JSON","parse","e","handleRestApiResponse","handleStandardResponse","unset","get","all","resetToOriginalOptions","reset","success","pluploadError","errorMap","code","videopress","originalOptions","url","getOption","file_data_name","setOption","upload_action_url","Authorization","upload_token","upload_blog_id","upload_failed","FILE_EXTENSION_ERROR","invalid_filetype","IMAGE_FORMAT_ERROR","not_an_image","IMAGE_MEMORY_ERROR","image_memory_exceeded","IMAGE_DIMENSIONS_ERROR","image_dimensions_exceeded","GENERIC_ERROR","IO_ERROR","io_error","HTTP_ERROR","http_error","SECURITY_ERROR","security_error","FILE_SIZE_ERROR","file_exceeds_size_limit","replace","prototype","value","arguments","node","attached","parentNode","css","position","top","left","height","width","attr","appendTo","append","Attachments","query","Backbone","Collection","jQuery"],"mappings":"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","file":"../../../videopress/js/videopress-plupload.min.js","sourcesContent":["/* Do not modify this file directly. It is compiled from other files. */\n/* global pluploadL10n, plupload, _wpPluploadSettings, JSON */\n\nwindow.wp = window.wp || {};\n\n( function( exports, $ ) {\n    var Uploader, vp;\n\n    if ( typeof _wpPluploadSettings === 'undefined' ) {\n        return;\n    }\n\n    /**\n     * A WordPress uploader.\n     *\n     * The Plupload library provides cross-browser uploader UI integration.\n     * This object bridges the Plupload API to integrate uploads into the\n     * WordPress back end and the WordPress media experience.\n     *\n     * @param {object} options           The options passed to the new plupload instance.\n     * @param {object} options.container The id of uploader container.\n     * @param {object} options.browser   The id of button to trigger the file select.\n     * @param {object} options.dropzone  The id of file drop target.\n     * @param {object} options.plupload  An object of parameters to pass to the plupload instance.\n     * @param {object} options.params    An object of parameters to pass to $_POST when uploading the file.\n     *                                   Extends this.plupload.multipart_params under the hood.\n     */\n    Uploader = function( options ) {\n        var self = this,\n            isIE = navigator.userAgent.indexOf('Trident/') !== -1 || navigator.userAgent.indexOf('MSIE ') !== -1,\n            elements = {\n                container: 'container',\n                browser:   'browse_button',\n                dropzone:  'drop_element'\n            },\n            key, error;\n\n        this.supports = {\n            upload: Uploader.browser.supported\n        };\n\n        this.supported = this.supports.upload;\n\n        if ( ! this.supported ) {\n            return;\n        }\n\n        // Arguments to send to pluplad.Uploader().\n        // Use deep extend to ensure that multipart_params and other objects are cloned.\n        this.plupload = $.extend( true, { multipart_params: {} }, Uploader.defaults );\n        this.container = document.body; // Set default container.\n\n        // Extend the instance with options.\n        //\n        // Use deep extend to allow options.plupload to override individual\n        // default plupload keys.\n        $.extend( true, this, options );\n\n        // Proxy all methods so this always refers to the current instance.\n        for ( key in this ) {\n            if ( $.isFunction( this[ key ] ) ) {\n                this[ key ] = $.proxy( this[ key ], this );\n            }\n        }\n\n        // Ensure all elements are jQuery elements and have id attributes,\n        // then set the proper plupload arguments to the ids.\n        for ( key in elements ) {\n            if ( ! this[ key ] ) {\n                continue;\n            }\n\n            this[ key ] = $( this[ key ] ).first();\n\n            if ( ! this[ key ].length ) {\n                delete this[ key ];\n                continue;\n            }\n\n            if ( ! this[ key ].prop('id') ) {\n                this[ key ].prop( 'id', '__wp-uploader-id-' + Uploader.uuid++ );\n            }\n\n            this.plupload[ elements[ key ] ] = this[ key ].prop('id');\n        }\n\n        // If the uploader has neither a browse button nor a dropzone, bail.\n        if ( ! ( this.browser && this.browser.length ) && ! ( this.dropzone && this.dropzone.length ) ) {\n            return;\n        }\n\n        // Make sure flash sends cookies (seems in IE it does without switching to urlstream mode)\n        if ( ! isIE && 'flash' === plupload.predictRuntime( this.plupload ) &&\n            ( ! this.plupload.required_features || ! this.plupload.required_features.hasOwnProperty( 'send_binary_string' ) ) ) {\n\n            this.plupload.required_features = this.plupload.required_features || {};\n            this.plupload.required_features.send_binary_string = true;\n        }\n\n        // Initialize the plupload instance.\n        this.uploader = new plupload.Uploader( this.plupload );\n        delete this.plupload;\n\n        // Set default params and remove this.params alias.\n        this.param( this.params || {} );\n        delete this.params;\n\n        // Make sure that the VideoPress object is available\n        if ( typeof exports.VideoPress !== 'undefined' ) {\n            vp = exports.VideoPress;\n\n        } else {\n            window.console && window.console.error( 'The VideoPress object was not loaded. Errors may occur.' );\n        }\n\n        /**\n         * Custom error callback.\n         *\n         * Add a new error to the errors collection, so other modules can track\n         * and display errors. @see wp.Uploader.errors.\n         *\n         * @param  {string}        message\n         * @param  {object}        data\n         * @param  {plupload.File} file     File that was uploaded.\n         */\n        error = function( message, data, file ) {\n            if ( file.attachment ) {\n                file.attachment.destroy();\n            }\n\n            Uploader.errors.unshift({\n                message: message || pluploadL10n.default_error,\n                data:    data,\n                file:    file\n            });\n\n            self.error( message, data, file );\n        };\n\n        /**\n         * After the Uploader has been initialized, initialize some behaviors for the dropzone.\n         *\n         * @param {plupload.Uploader} uploader Uploader instance.\n         */\n        this.uploader.bind( 'init', function( uploader ) {\n            var timer, active, dragdrop,\n                dropzone = self.dropzone;\n\n            dragdrop = self.supports.dragdrop = uploader.features.dragdrop && ! Uploader.browser.mobile;\n\n            // Generate drag/drop helper classes.\n            if ( ! dropzone ) {\n                return;\n            }\n\n            dropzone.toggleClass( 'supports-drag-drop', !! dragdrop );\n\n            if ( ! dragdrop ) {\n                return dropzone.unbind('.wp-uploader');\n            }\n\n            // 'dragenter' doesn't fire correctly, simulate it with a limited 'dragover'.\n            dropzone.bind( 'dragover.wp-uploader', function() {\n                if ( timer ) {\n                    clearTimeout( timer );\n                }\n\n                if ( active ) {\n                    return;\n                }\n\n                dropzone.trigger('dropzone:enter').addClass('drag-over');\n                active = true;\n            });\n\n            dropzone.bind('dragleave.wp-uploader, drop.wp-uploader', function() {\n                // Using an instant timer prevents the drag-over class from\n                // being quickly removed and re-added when elements inside the\n                // dropzone are repositioned.\n                //\n                // @see https://core.trac.wordpress.org/ticket/21705\n                timer = setTimeout( function() {\n                    active = false;\n                    dropzone.trigger('dropzone:leave').removeClass('drag-over');\n                }, 0 );\n            });\n\n            self.ready = true;\n            $(self).trigger( 'uploader:ready' );\n        });\n\n        this.uploader.bind( 'postinit', function( up ) {\n            up.refresh();\n            self.init();\n        });\n\n        this.uploader.init();\n\n        if ( this.browser ) {\n            this.browser.on( 'mouseenter', this.refresh );\n        } else {\n            this.uploader.disableBrowse( true );\n            // If HTML5 mode, hide the auto-created file container.\n            $('#' + this.uploader.id + '_html5_container').hide();\n        }\n\n        /**\n         * After files were filtered and added to the queue, create a model for each.\n         *\n         * @event FilesAdded\n         * @param {plupload.Uploader} uploader Uploader instance.\n         * @param {Array}             files    Array of file objects that were added to queue by the user.\n         */\n        this.uploader.bind( 'FilesAdded', function( up, files ) {\n            _.each( files, function( file ) {\n                var attributes, image;\n\n                // Ignore failed uploads.\n                if ( plupload.FAILED === file.status ) {\n                    return;\n                }\n\n                // Generate attributes for a new `Attachment` model.\n                attributes = _.extend({\n                    file:      file,\n                    uploading: true,\n                    date:      new Date(),\n                    filename:  file.name,\n                    menuOrder: 0,\n                    uploadedTo: wp.media.model.settings.post.id\n                }, _.pick( file, 'loaded', 'size', 'percent' ) );\n\n                // Handle early mime type scanning for images.\n                image = /(?:jpe?g|png|gif)$/i.exec( file.name );\n\n                // For images set the model's type and subtype attributes.\n                if ( image ) {\n                    attributes.type = 'image';\n\n                    // `jpeg`, `png` and `gif` are valid subtypes.\n                    // `jpg` is not, so map it to `jpeg`.\n                    attributes.subtype = ( 'jpg' === image[0] ) ? 'jpeg' : image[0];\n                }\n\n                // Create a model for the attachment, and add it to the Upload queue collection\n                // so listeners to the upload queue can track and display upload progress.\n                file.attachment = wp.media.model.Attachment.create( attributes );\n                Uploader.queue.add( file.attachment );\n\n                self.added( file.attachment );\n            });\n\n            up.refresh();\n            up.start();\n        });\n\n        this.uploader.bind( 'UploadProgress', function( up, file ) {\n            file.attachment.set( _.pick( file, 'loaded', 'percent' ) );\n            self.progress( file.attachment );\n        });\n\n        /**\n         * After a file is successfully uploaded, update its model.\n         *\n         * @param {plupload.Uploader} uploader Uploader instance.\n         * @param {plupload.File}     file     File that was uploaded.\n         * @param {Object}            response Object with response properties.\n         * @return {mixed}\n         */\n        this.uploader.bind( 'FileUploaded', function( up, file, response ) {\n            var complete;\n\n            try {\n                response = JSON.parse( response.response );\n            } catch ( e ) {\n                return error( pluploadL10n.default_error, e, file );\n            }\n\n            if ( typeof response.media !== 'undefined' ) {\n                response = vp.handleRestApiResponse( response, file );\n            } else {\n                response = vp.handleStandardResponse( response, file );\n            }\n\n            _.each(['file','loaded','size','percent'], function( key ) {\n                file.attachment.unset( key );\n            });\n\n            file.attachment.set( _.extend( response.data, { uploading: false }) );\n            wp.media.model.Attachment.get( response.data.id, file.attachment );\n\n            complete = Uploader.queue.all( function( attachment ) {\n                return ! attachment.get('uploading');\n            });\n\n            if ( complete ) {\n                vp && vp.resetToOriginalOptions( up );\n                Uploader.queue.reset();\n            }\n\n            self.success( file.attachment );\n        });\n\n        /**\n         * When plupload surfaces an error, send it to the error handler.\n         *\n         * @param {plupload.Uploader} uploader Uploader instance.\n         * @param {Object}            error    Contains code, message and sometimes file and other details.\n         */\n        this.uploader.bind( 'Error', function( up, pluploadError ) {\n            var message = pluploadL10n.default_error,\n                key;\n\n            // Check for plupload errors.\n            for ( key in Uploader.errorMap ) {\n                if ( pluploadError.code === plupload[ key ] ) {\n                    message = Uploader.errorMap[ key ];\n\n                    if ( _.isFunction( message ) ) {\n                        message = message( pluploadError.file, pluploadError );\n                    }\n\n                    break;\n                }\n            }\n\n            error( message, pluploadError, pluploadError.file );\n            vp && vp.resetToOriginalOptions( up );\n            up.refresh();\n        });\n\n        /**\n         * Add in a way for the uploader to reset itself when uploads are complete.\n         */\n        this.uploader.bind( 'UploadComplete', function( up ) {\n            vp && vp.resetToOriginalOptions( up );\n        });\n\n        /**\n         * Before we upload, check to see if this file is a videopress upload, if so, set new options and save the old ones.\n         */\n        this.uploader.bind( 'BeforeUpload', function( up, file ) {\n            if ( typeof file.videopress !== 'undefined' ) {\n                vp.originalOptions.url = up.getOption( 'url' );\n                vp.originalOptions.multipart_params = up.getOption( 'multipart_params' );\n                vp.originalOptions.file_data_name = up.getOption( 'file_data_name' );\n\n                up.setOption( 'file_data_name', 'media[]' );\n                up.setOption( 'url', file.videopress.upload_action_url );\n                up.setOption( 'headers', {\n                    Authorization: 'X_UPLOAD_TOKEN token=\"' + file.videopress.upload_token + '\" blog_id=\"' + file.videopress.upload_blog_id + '\"'\n                });\n            }\n        });\n    };\n\n    // Adds the 'defaults' and 'browser' properties.\n    $.extend( Uploader, _wpPluploadSettings );\n\n    Uploader.uuid = 0;\n\n    // Map Plupload error codes to user friendly error messages.\n    Uploader.errorMap = {\n        'FAILED':                 pluploadL10n.upload_failed,\n        'FILE_EXTENSION_ERROR':   pluploadL10n.invalid_filetype,\n        'IMAGE_FORMAT_ERROR':     pluploadL10n.not_an_image,\n        'IMAGE_MEMORY_ERROR':     pluploadL10n.image_memory_exceeded,\n        'IMAGE_DIMENSIONS_ERROR': pluploadL10n.image_dimensions_exceeded,\n        'GENERIC_ERROR':          pluploadL10n.upload_failed,\n        'IO_ERROR':               pluploadL10n.io_error,\n        'HTTP_ERROR':             pluploadL10n.http_error,\n        'SECURITY_ERROR':         pluploadL10n.security_error,\n\n        'FILE_SIZE_ERROR': function( file ) {\n            return pluploadL10n.file_exceeds_size_limit.replace('%s', file.name);\n        }\n    };\n\n    $.extend( Uploader.prototype, {\n        /**\n         * Acts as a shortcut to extending the uploader's multipart_params object.\n         *\n         * param( key )\n         *    Returns the value of the key.\n         *\n         * param( key, value )\n         *    Sets the value of a key.\n         *\n         * param( map )\n         *    Sets values for a map of data.\n         */\n        param: function( key, value ) {\n            if ( arguments.length === 1 && typeof key === 'string' ) {\n                return this.uploader.settings.multipart_params[ key ];\n            }\n\n            if ( arguments.length > 1 ) {\n                this.uploader.settings.multipart_params[ key ] = value;\n            } else {\n                $.extend( this.uploader.settings.multipart_params, key );\n            }\n        },\n\n        /**\n         * Make a few internal event callbacks available on the wp.Uploader object\n         * to change the Uploader internals if absolutely necessary.\n         */\n        init:     function() {},\n        error:    function() {},\n        success:  function() {},\n        added:    function() {},\n        progress: function() {},\n        complete: function() {},\n        refresh:  function() {\n            var node, attached, container, id;\n\n            if ( this.browser ) {\n                node = this.browser[0];\n\n                // Check if the browser node is in the DOM.\n                while ( node ) {\n                    if ( node === document.body ) {\n                        attached = true;\n                        break;\n                    }\n                    node = node.parentNode;\n                }\n\n                // If the browser node is not attached to the DOM, use a\n                // temporary container to house it, as the browser button\n                // shims require the button to exist in the DOM at all times.\n                if ( ! attached ) {\n                    id = 'wp-uploader-browser-' + this.uploader.id;\n\n                    container = $( '#' + id );\n                    if ( ! container.length ) {\n                        container = $('<div class=\"wp-uploader-browser\" />').css({\n                            position: 'fixed',\n                            top: '-1000px',\n                            left: '-1000px',\n                            height: 0,\n                            width: 0\n                        }).attr( 'id', 'wp-uploader-browser-' + this.uploader.id ).appendTo('body');\n                    }\n\n                    container.append( this.browser );\n                }\n            }\n\n            this.uploader.refresh();\n        }\n    });\n\n    // Create a collection of attachments in the upload queue,\n    // so that other modules can track and display upload progress.\n    Uploader.queue = new wp.media.model.Attachments( [], { query: false });\n\n    // Create a collection to collect errors incurred while attempting upload.\n    Uploader.errors = new Backbone.Collection();\n\n    exports.Uploader = Uploader;\n})( wp, jQuery );\n"]}