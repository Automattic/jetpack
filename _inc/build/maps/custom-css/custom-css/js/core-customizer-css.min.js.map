{"version":3,"sources":["custom-css/custom-css/js/core-customizer-css.js"],"names":["wp","$","api","controlConstructor","jetpackCss","Control","extend","modes","default","less","sass","_updating","ready","this","opts","window","_jp_css_settings","$input","name","setting","id","class","val","container","append","_","bind","element","Element","elements","sync","set","useRichEditor","initCodeMirror","removeClass","addLabels","editor","CodeMirror","fromTextArea","get","mode","getMode","lineNumbers","tabSize","indentWithTabs","lineWrapping","addListeners","edited","click","debounce","refresh","on","getValue","trigger","ga","externalChange","setValue","setTimeout","addTitle","l10n","mobile","addDesc","contentWidth","widthControl","_getControl","find","after","appendTo","target","href","cssHelpUrl","text","css_help_title","prependTo","areThereCssRevisions","revisionsUrl","revisions","controlId","title","control","prepend","desc","value","jQuery","customize"],"mappings":";CACA,SAAWA,EAAIC,EAAGC,GACjBA,EAAIC,mBAAmBC,WAAaF,EAAIG,QAAQC,QAC/CC,OACCC,QAAW,WACXC,KAAQ,cACRC,KAAQ,eAETC,WAAW,EAKXC,MAAO,WACNC,KAAKC,KAAOC,OAAOC,iBAEnBH,KAAKI,OAAShB,EAAG,gBAChBiB,KAAML,KAAKM,QAAQC,GACnBC,MAAS,0BACNC,IAAKT,KAAKM,WACdN,KAAKU,UAAUC,OAAQX,KAAKI,QAG5Bf,EAAKW,KAAKM,QAAQC,GAAIK,EAAEC,KAAM,SAAUP,GACvC,GAAIQ,GAAU,GAAIzB,GAAI0B,QAASf,KAAKI,OACpCJ,MAAKgB,UAAaF,GAClBA,EAAQG,KAAMX,GACdQ,EAAQI,IAAKZ,MACXN,OAGEA,KAAKC,KAAKkB,cACdnB,KAAKoB,iBAELpB,KAAKI,OAAOiB,YAAa,UAG1BhC,EAAIwB,KAAM,QAASD,EAAEC,KAAMb,KAAKsB,UAAWtB,QAM5CoB,eAAgB,WACfpB,KAAKuB,OAASrB,OAAOsB,WAAWC,aAAczB,KAAKI,OAAOsB,IAAI,IAC7DC,KAAM3B,KAAK4B,UACXC,aAAa,EACbC,QAAS,EACTC,gBAAgB,EAChBC,cAAc,IAGfhC,KAAKiC,gBAMNA,aAAc,WACb,GAAIC,IAAS,CAIb9C,GAAG,4DAA6D+C,MAAOvB,EAAEC,KAAMD,EAAEwB,SAAUpC,KAAKuB,OAAOc,QAAS,KAAOrC,KAAKuB,SAE5HvB,KAAKuB,OAAOe,GAAI,QAAS,SAAUf,GAClCA,EAAOc,YAKRrC,KAAKuB,OAAOe,GAAI,SAAU1B,EAAEC,KAAM,SAAUU,GAC3CvB,KAAKF,WAAY,EACjBE,KAAKI,OAAOK,IAAKc,EAAOgB,YAAaC,QAAS,UAC9CxC,KAAKF,WAAY,EAEVoC,IACNhC,OAAOuC,IAAMvC,OAAOuC,GAAI,OAAQ,QAAS,aAAc,oBACvDP,GAAS,IAERlC,OAEHA,KAAKuB,OAAOe,GAAI,QAAS,WACxBpC,OAAOuC,IAAMvC,OAAOuC,GAAI,OAAQ,QAAS,aAAc,wBAIxDzC,KAAKM,QAAQO,KAAM,SAAUD,EAAEC,KAAMb,KAAK0C,eAAgB1C,QAO3D4B,QAAS,WACR,GAAID,GAAOtC,EAAK,qCAIhB,OAHK,KAAOsC,GAAU3B,KAAKN,MAAOiC,KACjCA,EAAO,WAED3B,KAAKN,MAAOiC,IAMpBe,eAAgB,WAET1C,KAAKF,WACVE,KAAKuB,OAAOoB,SAAU3C,KAAKM,YAQ7B+B,QAAS,SAAU9B,GACb,iCAAmCA,GACvCqC,WAAYhC,EAAEC,KAAM,WACnBb,KAAKuB,OAAOc,WACVrC,MAAO,MAOZsB,UAAW,WACVtB,KAAK6C,SAAU,2BAA4B7C,KAAKC,KAAK6C,KAAKnB,MAC1D3B,KAAK6C,SAAU,6BAA8B7C,KAAKC,KAAK6C,KAAKC,QAC5D/C,KAAKgD,QAAS,yCAA0ChD,KAAKC,KAAK6C,KAAKG,aACvE,IAAIC,GAAelD,KAAKmD,YAAa,yCAChCD,IACJA,EAAaE,KAAM,SAAUC,MAAO,mBAErCjE,EAAG,WACFmB,GAAI,iBACJC,MAAS,aACP8C,SAAUtD,KAAKU,WAClBtB,EAAG,SACFmB,GAAI,YACJgD,OAAQ,SACRC,KAAMxD,KAAKC,KAAKwD,WAChBC,KAAM1D,KAAKC,KAAK6C,KAAKa,iBACnBC,UAAW,mBAGT5D,KAAKC,KAAK4D,sBACdzE,EAAG,SACFmB,GAAI,iBACJgD,OAAQ,SACRC,KAAMxD,KAAKC,KAAK6D,aAChBJ,KAAM1D,KAAKC,KAAK6C,KAAKiB,YACnBH,UAAW,oBAQhBf,SAAU,SAAUmB,EAAWC,GAC9B,GAAIC,GAAUlE,KAAKmD,YAAaa,EAC3BE,IACJA,EAAQC,QAAS,yCAA2CF,EAAQ,WAQtEjB,QAAS,SAAUgB,EAAWI,GAC7B,GAAIF,GAAUlE,KAAKmD,YAAaa,EAC3BE,IACJA,EAAQvD,OAAQ,6BAA+ByD,EAAO,WAQxDjB,YAAa,SAAUa,GACtB,GAAIE,GAAU7E,EAAI6E,QAAQG,MAAOL,EACjC,OAAKE,GACGA,EAAQxD,UAET,SAINV,KAAKb,GAAImF,OAAQtE,KAAKb,GAAGoF","file":"../../../../custom-css/custom-css/js/core-customizer-css.min.js","sourcesContent":["/* Do not modify this file directly. It is compiled from other files. */\n(function( wp, $, api ){\n\tapi.controlConstructor.jetpackCss = api.Control.extend({\n\t\tmodes: {\n\t\t\t'default': 'text/css',\n\t\t\t'less': 'text/x-less',\n\t\t\t'sass': 'text/x-scss'\n\t\t},\n\t\t_updating: false,\n\t\t/**\n\t\t * Fires when our control is ready for action. Gets everything set up.\n\t\t * @return {null}\n\t\t */\n\t\tready: function() {\n\t\t\tthis.opts = window._jp_css_settings;\n\t\t\t// add our textarea\n\t\t\tthis.$input = $( '<textarea />', {\n\t\t\t\tname: this.setting.id,\n\t\t\t\t'class': 'for-codemirror hidden'\n\t\t\t} ).val( this.setting() );\n\t\t\tthis.container.append( this.$input );\n\n\t\t\t// keep the textarea and the setting synced up\n\t\t\tapi( this.setting.id, _.bind( function( setting ){\n\t\t\t\tvar element = new api.Element( this.$input );\n\t\t\t\tthis.elements = [ element ];\n\t\t\t\telement.sync( setting );\n\t\t\t\telement.set( setting() );\n\t\t\t}, this ) );\n\n\t\t\t// should we use CodeMirror?\n\t\t\tif ( this.opts.useRichEditor ) {\n\t\t\t\tthis.initCodeMirror();\n\t\t\t} else {\n\t\t\t\tthis.$input.removeClass( 'hidden' );\n\t\t\t}\n\n\t\t\tapi.bind( 'ready', _.bind( this.addLabels, this ) );\n\t\t},\n\t\t/**\n\t\t * Set up our CodeMirror instance\n\t\t * @return {null}\n\t\t */\n\t\tinitCodeMirror: function() {\n\t\t\tthis.editor = window.CodeMirror.fromTextArea( this.$input.get(0), {\n\t\t\t\tmode: this.getMode(),\n\t\t\t\tlineNumbers: true,\n\t\t\t\ttabSize: 2,\n\t\t\t\tindentWithTabs: true,\n\t\t\t\tlineWrapping: true\n\t\t\t} );\n\n\t\t\tthis.addListeners();\n\t\t},\n\t\t/**\n\t\t * Adds various listeners for CodeMirror to render and keep in sync\n\t\t * with the textarea.\n\t\t */\n\t\taddListeners: function() {\n\t\t\tvar edited = false;\n\n\t\t\t// refresh the CodeMirror instance's rendering because it's initially hidden\n\t\t\t// 250ms because that's the open animation duration\n\t\t\t$( '#accordion-section-custom_css > .accordion-section-title' ).click( _.bind( _.debounce( this.editor.refresh, 250 ), this.editor ) );\n\t\t\t// also refresh when focusing\n\t\t\tthis.editor.on( 'focus', function( editor ) {\n\t\t\t\teditor.refresh();\n\t\t\t});\n\n\t\t\t// when the CodeMirror instance changes, mirror to the textarea,\n\t\t\t// where we have our \"true\" change event handler bound. This allows both to function.\n\t\t\tthis.editor.on( 'change', _.bind( function( editor ) {\n\t\t\t\tthis._updating = true;\n\t\t\t\tthis.$input.val( editor.getValue() ).trigger( 'change' );\n\t\t\t\tthis._updating = false;\n\n\t\t\t\tif ( ! edited ) {\n\t\t\t\t\twindow.ga && window.ga( 'send', 'event', 'Customizer', 'Typed Custom CSS' );\n\t\t\t\t\tedited = true;\n\t\t\t\t}\n\t\t\t}, this ) );\n\n\t\t\tthis.editor.on( 'focus', function() {\n\t\t\t\twindow.ga && window.ga( 'send', 'event', 'Customizer', 'Focused CSS Editor' );\n\t\t\t} );\n\n\t\t\t// when others update the control, update CodeMirror\n\t\t\tthis.setting.bind( 'change', _.bind( this.externalChange, this ) );\n\t\t},\n\t\t/**\n\t\t * Get the mode of the currently active preprocessor (if any),\n\t\t * falling back to text/css\n\t\t * @return {string} mode for CodeMirror\n\t\t */\n\t\tgetMode: function() {\n\t\t\tvar mode = api( 'jetpack_custom_css[preprocessor]' )();\n\t\t\tif ( '' === mode || ! this.modes[ mode ] ) {\n\t\t\t\tmode = 'default';\n\t\t\t}\n\t\t\treturn this.modes[ mode ];\n\t\t},\n\t\t/**\n\t\t * If another control updates our setting, re-render the CodeMirror instance\n\t\t * @return {null}\n\t\t */\n\t\texternalChange: function() {\n\t\t\t// only if the change wasn't internal\n\t\t\tif( ! this._updating ) {\n\t\t\t\tthis.editor.setValue( this.setting() );\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Callback for when the CSS panel opens to refresh the CodeMirror rendering\n\t\t * @param  {string} id The panel being opened\n\t\t * @return {null}\n\t\t */\n\t\trefresh: function( id ) {\n\t\t\tif ( 'accordion-section-custom_css' === id ) {\n\t\t\t\tsetTimeout( _.bind( function(){\n\t\t\t\t\tthis.editor.refresh();\n\t\t\t\t}, this), 300 );\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Add some labels that the default checkbox controls don't allow.\n\t\t * Add CSS Revisions and CSS Help links.\n\t\t */\n\t\taddLabels: function() {\n\t\t\tthis.addTitle( 'jetpack_css_mode_control', this.opts.l10n.mode );\n\t\t\tthis.addTitle( 'jetpack_mobile_css_control', this.opts.l10n.mobile );\n\t\t\tthis.addDesc( 'wpcom_custom_css_content_width_control', this.opts.l10n.contentWidth );\n\t\t\tvar widthControl = this._getControl( 'wpcom_custom_css_content_width_control' );\n\t\t\tif ( widthControl ) {\n\t\t\t\twidthControl.find( 'input' ).after( '<span>px</span>' );\n\t\t\t}\n\t\t\t$( '<div />', {\n\t\t\t\tid: 'css-help-links',\n\t\t\t\t'class': 'css-help'\n\t\t\t}).appendTo( this.container );\n\t\t\t$( '<a />', {\n\t\t\t\tid: 'help-link',\n\t\t\t\ttarget: '_blank',\n\t\t\t\thref: this.opts.cssHelpUrl,\n\t\t\t\ttext: this.opts.l10n.css_help_title\n\t\t\t}).prependTo( '#css-help-links' );\n\n\t\t\t// Only show the revisions link if there are revisions\n\t\t\tif ( this.opts.areThereCssRevisions ) {\n\t\t\t\t$( '<a />', {\n\t\t\t\t\tid: 'revisions-link',\n\t\t\t\t\ttarget: '_blank',\n\t\t\t\t\thref: this.opts.revisionsUrl,\n\t\t\t\t\ttext: this.opts.l10n.revisions\n\t\t\t\t}).prependTo( '#css-help-links' );\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Add a title to a control\n\t\t * @param {string} controlId Control ID\n\t\t * @param {string} title     A title to add\n\t\t */\n\t\taddTitle: function( controlId, title ) {\n\t\t\tvar control = this._getControl( controlId );\n\t\t\tif ( control ) {\n\t\t\t\tcontrol.prepend( '<span class=\"customize-control-title\">' + title + '<span>' );\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Add a description to a control\n\t\t * @param {string} controlId Control ID\n\t\t * @param {string} desc      A description to add\n\t\t */\n\t\taddDesc: function( controlId, desc ) {\n\t\t\tvar control = this._getControl( controlId );\n\t\t\tif ( control ) {\n\t\t\t\tcontrol.append( '<span class=\"description\">' + desc + '<span>' );\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Helper function to qet a control by ID\n\t\t * @param  {string} controlId Control ID\n\t\t * @return {object}           jQuery object of the container\n\t\t */\n\t\t_getControl: function( controlId ) {\n\t\t\tvar control = api.control.value( controlId );\n\t\t\tif ( control ) {\n\t\t\t\treturn control.container;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t});\n\n})( this.wp, jQuery, this.wp.customize );\n"]}