/**
 * Podcast Player block shared styles (editor & front-end).
 */
@import '../../shared/styles/gutenberg-base-styles.scss';

$episode-v-padding: 15px;
$episode-h-padding: 10px;
$player-grid-spacing: 24px;
$cover-image-size: 80px;
$track-title-font-size: 24px;
$track-title-b-margin: 10px;
$podcast-title-font-size: 16px;
$description-font-size: 16px;
$player-divider-height: 2px;
$episode-status-icon-size: 22px;
$text-color: $dark-gray-300; // Lightest gray that can be used for AA text contrast.
$text-color-hover: $black;
$text-color-active: $text-color-hover;
$text-color-error: $alert-red;
$block-bg-color: $white;
$block-border-color: $dark-gray-100;

.jetpack-podcast-player--visually-hidden {
	position: absolute !important;
	height: 1px;
	width: 1px;
	overflow: hidden;
	clip: rect( 1px, 1px, 1px, 1px );
	white-space: nowrap; /* added line */
}

/**
 * Player's (block) parent element.
 */
.wp-block-jetpack-podcast-player {
	border: 1px solid $block-border-color;
	background-color: $block-bg-color;
	overflow: hidden;
	font-family: $default-font;

	/**
	 * Player's state classes added to this element:
	 * &.is-playing {} // When audio starts playing.
	 * &.is-paused {}  // When audio is paused.
	 * &.is-error {}   // When playback error occured.
	 */

	audio {
		display: none;
	}

	.jetpack-podcast-player__titles {
		display: flex;
		flex-direction: column;
		margin: 0;
	}

	.jetpack-podcast-player__title-link {
		text-decoration: none;
		color: $text-color;

		&:hover,
		&:focus {
			color: $text-color-hover;
		}
	}

	.jetpack-podcast-player__episodes {
		list-style-type: none;
		display: flex;
		flex-direction: column;
		margin: 0;
		padding: $episode-v-padding 0;
	}
}

/**
 * Podcast Player Header
 */
.jetpack-podcast-player__header-wrapper {
	display: flex;
	flex-direction: column;
	position: relative;

	&:after {
		content: '';
		background: $light-gray-700;
		position: absolute;
		height: $player-divider-height;
		bottom: 0;
		left: $player-grid-spacing;
		right: $player-grid-spacing;
	}
}

.jetpack-podcast-player__track-description {
	order: 99; // high number to make it always appear after the audio player
	padding: 0 $player-grid-spacing;
	margin-bottom: $player-grid-spacing;
	color: $dark-gray-500;
	font-size: $description-font-size;
	line-height: 1.6;
}

.jetpack-podcast-player__header {
	display: flex;
	padding: $player-grid-spacing;
}

.jetpack-podcast-player__track-image-wrapper {
	width: $cover-image-size;
	margin-right: $player-grid-spacing;
	flex-shrink: 0;
}

.jetpack-podcast-player__track-image {
	width: $cover-image-size;
	height: $cover-image-size;
}

.jetpack-podcast-player__track-title {
	font-size: $track-title-font-size;
	margin: 0 0 $track-title-b-margin;
}

.jetpack-podcast-player__title {
	font-size: $podcast-title-font-size;
	color: $text-color;
	margin: 0;
}

.jetpack-podcast-player__audio-player {
	margin-bottom: $player-grid-spacing;
}

.jetpack-podcast-player__episode {
	margin: 0;
	font-family: $default-font;
	font-size: $editor-font-size;

	/**
	 * When episode "is-active", it means that it's been clicked by a user to
	 * start playback. Combine this class with the Player's state classes (see
	 * above) to apply styling for different scenarios.
	 */
	&.is-active {
		font-weight: bold;
	}

	/**
	 * Applies default color to:
	 * - The active podcast only if it doesn't have defined a custom color.
	 * - The other podcasts only if they don't have defined a custom color.
	 */
	&.is-active:not( .has-primary ),
	&:not( .is-active ):not( .has-secondary ) {
		color: $text-color-hover;
	}

	// We need to scope this class to override editor link styles.
	.jetpack-podcast-player__episode-link {
		display: flex;
		flex-flow: row nowrap;
		justify-content: space-between;
		padding: $episode-h-padding $episode-v-padding;
		text-decoration: none;
		transition: none;

		&:hover,
		&:focus {
			color: $text-color-hover;
		}
	}

	/**
	 * Inherits colors if:
	 * - Active podcast has defined a custom color.
	 * - The other podcasts if they have defined a custom color.
	 */
	&.is-active.has-primary .jetpack-podcast-player__episode-link,
	&.has-secondary .jetpack-podcast-player__episode-link {
		color: inherit;
	}

	// Make space for the error element that will be appended.
	.is-error &.is-active .jetpack-podcast-player__episode-link {
		padding-bottom: 0;
	}
}

.jetpack-podcast-player__episode-status-icon {
	flex: $episode-status-icon-size 0 0;
	fill: $text-color-active;

	svg {
		display: inline-block;
		vertical-align: middle;
		width: $episode-status-icon-size;
		height: $episode-status-icon-size;
	}
}

.jetpack-podcast-player__episode-status-icon--error {
	fill: $text-color-error;
}

.jetpack-podcast-player__episode-title {
	flex-grow: 1;
	padding: 0 $episode-v-padding;
}

.jetpack-podcast-player__episode-duration {
	word-break: normal; // Prevents the time breaking into multiple lines.
}

/**
 * Error element, appended as the last child of the Episode element
 * (.jetpack-podcast-player__episode) when Player's error has been caught.
 */
.jetpack-podcast-player__episode-error {
	display: block;
	margin-left: 2 * $episode-v-padding + $episode-status-icon-size;
	margin-bottom: $episode-h-padding;
	color: $alert-red;
	font-family: $default-font;
	font-size: 0.8em;
	font-weight: normal;

	& > span {
		color: $text-color;
	}

	& > span > a {
		color: inherit;
	}
}
